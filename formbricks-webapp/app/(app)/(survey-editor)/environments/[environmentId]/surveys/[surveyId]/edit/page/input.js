(() => {
var exports = {};
exports.id = 2234;
exports.ids = [2234];
exports.modules = {

/***/ 191043:
/***/ ((module) => {

"use strict";
module.exports = require("@aws-sdk/client-s3");

/***/ }),

/***/ 741000:
/***/ ((module) => {

"use strict";
module.exports = require("@aws-sdk/s3-presigned-post");

/***/ }),

/***/ 531701:
/***/ ((module) => {

"use strict";
module.exports = require("@aws-sdk/s3-request-presigner");

/***/ }),

/***/ 896330:
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ 560483:
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client/scripts/default-index.js");

/***/ }),

/***/ 832325:
/***/ ((module) => {

"use strict";
module.exports = require("jsdom");

/***/ }),

/***/ 710846:
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.prod.js");

/***/ }),

/***/ 419121:
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ 903295:
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ 529294:
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ 663033:
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ 912412:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 979428:
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ 455511:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 594735:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 629021:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 79748:
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ 781630:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 55591:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 491645:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 321820:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 333873:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 111723:
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ 927910:
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ 134631:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 583997:
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ 379551:
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ 328354:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 173566:
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ 74075:
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ 504573:
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ 977598:
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ 973024:
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ 937067:
/***/ ((module) => {

"use strict";
module.exports = require("node:http");

/***/ }),

/***/ 344708:
/***/ ((module) => {

"use strict";
module.exports = require("node:https");

/***/ }),

/***/ 777030:
/***/ ((module) => {

"use strict";
module.exports = require("node:net");

/***/ }),

/***/ 176760:
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ 1708:
/***/ ((module) => {

"use strict";
module.exports = require("node:process");

/***/ }),

/***/ 157075:
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ 337830:
/***/ ((module) => {

"use strict";
module.exports = require("node:stream/web");

/***/ }),

/***/ 173136:
/***/ ((module) => {

"use strict";
module.exports = require("node:url");

/***/ }),

/***/ 257975:
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ 638522:
/***/ ((module) => {

"use strict";
module.exports = require("node:zlib");

/***/ }),

/***/ 738069:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GlobalError: () => (/* reexport default from dynamic */ next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2___default.a),
/* harmony export */   __next_app__: () => (/* binding */ __next_app__),
/* harmony export */   pages: () => (/* binding */ pages),
/* harmony export */   routeModule: () => (/* binding */ routeModule),
/* harmony export */   tree: () => (/* binding */ tree)
/* harmony export */ });
/* harmony import */ var next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(290735);
/* harmony import */ var next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(291232);
/* harmony import */ var next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(272914);
/* harmony import */ var next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(240085);
/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__) if(["default","tree","pages","GlobalError","__next_app__","routeModule"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
const module0 = () => Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 86397));
const module1 = () => Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 836653));
const module2 = () => Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 956791));
const module3 = () => Promise.resolve(/* import() eager */).then(__webpack_require__.t.bind(__webpack_require__, 195335, 23));
const module4 = () => Promise.resolve(/* import() eager */).then(__webpack_require__.t.bind(__webpack_require__, 544908, 23));
const module5 = () => Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 524160));
const module6 = () => Promise.resolve(/* import() eager */).then(__webpack_require__.t.bind(__webpack_require__, 195335, 23));
const module7 = () => Promise.resolve(/* import() eager */).then(__webpack_require__.t.bind(__webpack_require__, 544908, 23));
const module8 = () => Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 179182));
const module9 = () => Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 645935));
const page10 = () => Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 128459));


// We inject the tree and pages here so that we can use them in the route
// module.
const tree = {
        children: [
        '',
        {
        children: [
        '(app)',
        {
        children: [
        '(survey-editor)',
        {
        children: [
        'environments',
        {
        children: [
        '[environmentId]',
        {
        children: [
        'surveys',
        {
        children: [
        '[surveyId]',
        {
        children: [
        'edit',
        {
        children: ['__PAGE__', {}, {
          page: [page10, "/Users/kdy1/projects/formbricks/apps/web/app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/page.tsx"],
          
        }]
      },
        {
        'loading': [module9, "/Users/kdy1/projects/formbricks/apps/web/app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/loading.tsx"],
        
      }
      ]
      },
        {
        
        
      }
      ]
      },
        {
        
        
      }
      ]
      },
        {
        'layout': [module8, "/Users/kdy1/projects/formbricks/apps/web/app/(app)/(survey-editor)/environments/[environmentId]/layout.tsx"],
        
      }
      ]
      },
        {
        
        
      }
      ]
      },
        {
        
        
      }
      ]
      },
        {
        'layout': [module5, "/Users/kdy1/projects/formbricks/apps/web/app/(app)/layout.tsx"],
'forbidden': [module6, "next/dist/client/components/forbidden-error"],
'unauthorized': [module7, "next/dist/client/components/unauthorized-error"],
        metadata: {
    icon: [(async (props) => (await Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 170196))).default(props))],
    apple: [],
    openGraph: [],
    twitter: [],
    manifest: undefined
  }
      }
      ]
      },
        {
        'layout': [module0, "/Users/kdy1/projects/formbricks/apps/web/app/layout.tsx"],
'error': [module1, "/Users/kdy1/projects/formbricks/apps/web/app/error.tsx"],
'not-found': [module2, "/Users/kdy1/projects/formbricks/apps/web/app/not-found.tsx"],
'forbidden': [module3, "next/dist/client/components/forbidden-error"],
'unauthorized': [module4, "next/dist/client/components/unauthorized-error"],
        metadata: {
    icon: [(async (props) => (await Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 170196))).default(props))],
    apple: [],
    openGraph: [],
    twitter: [],
    manifest: undefined
  }
      }
      ]
      }.children;
const pages = ["/Users/kdy1/projects/formbricks/apps/web/app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/page.tsx"];


const __next_app_require__ = __webpack_require__
const __next_app_load_chunk__ = () => Promise.resolve()
const __next_app__ = {
    require: __next_app_require__,
    loadChunk: __next_app_load_chunk__
};

// Create and export the route module that will be consumed.
const routeModule = new next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppPageRouteModule({
    definition: {
        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_PAGE,
        page: "/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/page",
        pathname: "/environments/[environmentId]/surveys/[surveyId]/edit",
        // The following aren't used in production.
        bundlePath: '',
        filename: '',
        appPaths: []
    },
    userland: {
        loaderTree: tree
    }
});

//# sourceMappingURL=app-page.js.map

/***/ }),

/***/ 401647:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "7f11f2efac37ac84796e6cb223722dbe2e808e177f": () => (/* reexport */ services/* getResponse */.mi),
  "7f12957c3365cc2950bdc48f0118f82439eb6c23ec": () => (/* reexport */ services/* getSurvey */.Dp),
  "7f20db167926d501ff62b9525526548773c8a436d4": () => (/* reexport */ services/* isTeamPartOfOrganization */.l5),
  "7f2558c262e325508f06bf1b63ab29648d5bbe84b5": () => (/* reexport */ getOrganizationBillingInfoAction),
  "7f36cf02b548a01d85112f587591e8c1e8390fa538": () => (/* reexport */ services/* isProjectPartOfOrganization */.Xj),
  "7f401506cbd8cbaf6e69a102af4b34faff51e6821d": () => (/* reexport */ segments_actions/* updateSegmentAction */.lh),
  "7f44fbfbd695b4b87a8b177bf487a1314b7bebbead": () => (/* reexport */ actions/* triggerDownloadUnsplashImageAction */.I0),
  "7f4f2c9c8b657cf906e9a25e65dafac6ec65967916": () => (/* reexport */ services/* getWebhook */.O0),
  "7f540889be00b7aa8c6ff1edc5cd79ece876954fd3": () => (/* reexport */ services/* getInvite */.I_),
  "7f5f67ef7357726711b163b717490966a69d2206c9": () => (/* reexport */ segments_actions/* createSegmentAction */.Ws),
  "7f60061b4b6be335eaa2facd1c5d8129b87f6923f4": () => (/* reexport */ services/* getActionClass */.Bx),
  "7f670a0537f96de8b5156e1b206124b2a990484370": () => (/* reexport */ services/* getApiKey */.CG),
  "7f6f190ac6fd08333ac9d50baa5d128e0933520390": () => (/* reexport */ actions/* updateSurveyAction */.q4),
  "7f74bd40a1f82de833915085152910f3ebd525b356": () => (/* reexport */ services/* getTeam */.Uo),
  "7f95a9cd2fc43decbbdb316b4c466f98fbb1fc7292": () => (/* reexport */ actions/* createActionClassAction */.T_),
  "7fa07c3e18cb2b5dc0bccf1727afd30ba94425974b": () => (/* reexport */ actions/* refetchProjectAction */.pH),
  "7fa1455a73fef63c6b670c6d3018b8c0e88c94475c": () => (/* reexport */ segments_actions/* loadNewSegmentAction */.It),
  "7fb9a3e6cbebea226c9a3678f31bfebf532ca7321e": () => (/* reexport */ services/* getResponseNote */.Wy),
  "7fc5117c6d27e507a6efd4e11ff01afa8b3c52f1a1": () => (/* reexport */ services/* getTag */.bH),
  "7fc6abb0838b6422ef7e81141fd6603883cd1990cf": () => (/* reexport */ services/* getDocument */.YE),
  "7fc856fe5dd5f698d2f54dacf4280d447336780427": () => (/* reexport */ services/* getLanguage */.Z0),
  "7fcda0e6bf50febdf861015e25ebdf74068a488dde": () => (/* reexport */ services/* getContact */.bl),
  "7fcfea9518c327899180b23cb3055005ba65cdef33": () => (/* reexport */ services/* getIntegration */.rg),
  "7fd4a2f68d0f93b333143479d5d3345939d6141f48": () => (/* reexport */ segments_actions/* resetSegmentFiltersAction */.ge),
  "7fdb06c584a2145e0f48be9ead409fc7f774731fde": () => (/* reexport */ services/* getEnvironment */.uc),
  "7fdcbaf3445e783557d350b55d91be1398fafca7d3": () => (/* reexport */ services/* getInsight */.zv),
  "7fe6bcff2944a454891c847e7a2b35e7fa5424a16a": () => (/* reexport */ segments_actions/* cloneSegmentAction */.HZ),
  "7fe763f2c0d5f307cc75c26f23c693a54ac24a3112": () => (/* reexport */ services/* getProject */.U1),
  "7ff1e10ead6d68ad053d27a59e05e0eefa9923d8da": () => (/* reexport */ segments_actions/* deleteSegmentAction */.B),
  "7ff313fb591d98a3184941f4daef611f7b6a0455a2": () => (/* reexport */ actions/* getImagesFromUnsplashAction */.jC),
  "7ffb22c619704253744e9b5fea4eccca8b0808fb64": () => (/* reexport */ services/* getSegment */.kn)
});

// EXTERNAL MODULE: ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/actions.ts
var actions = __webpack_require__(333681);
// EXTERNAL MODULE: ../../node_modules/next/dist/build/webpack/loaders/next-flight-loader/server-reference.js
var server_reference = __webpack_require__(286055);
// EXTERNAL MODULE: ../../node_modules/next/dist/server/app-render/encryption.js
var encryption = __webpack_require__(770767);
// EXTERNAL MODULE: ./lib/utils/action-client.ts
var action_client = __webpack_require__(308046);
// EXTERNAL MODULE: ./lib/utils/action-client-middleware.ts
var action_client_middleware = __webpack_require__(729455);
// EXTERNAL MODULE: ../../node_modules/zod/lib/index.mjs
var lib = __webpack_require__(283131);
// EXTERNAL MODULE: ../../packages/lib/organization/service.ts
var service = __webpack_require__(167440);
// EXTERNAL MODULE: ../../packages/types/common.ts
var common = __webpack_require__(552224);
// EXTERNAL MODULE: ../../node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-validate.js
var action_validate = __webpack_require__(429931);
;// ./modules/utils/hooks/actions.ts
/* __next_internal_action_entry_do_not_use__ {"7f2558c262e325508f06bf1b63ab29648d5bbe84b5":"getOrganizationBillingInfoAction"} */ 






const ZGetOrganizationBillingInfoAction = lib.z.object({
    organizationId: common/* ZId */.i4
});
const /*#__TURBOPACK_DISABLE_EXPORT_MERGING__*/ getOrganizationBillingInfoAction = action_client/* authenticatedActionClient */.D.schema(ZGetOrganizationBillingInfoAction).action(async ({ ctx, parsedInput })=>{
    await (0,action_client_middleware/* checkAuthorizationUpdated */.r)({
        userId: ctx.user.id,
        organizationId: parsedInput.organizationId,
        access: [
            {
                type: "organization",
                roles: [
                    "owner",
                    "manager",
                    "billing"
                ]
            }
        ]
    });
    const organization = await (0,service/* getOrganization */.SA)(parsedInput.organizationId);
    return organization?.billing;
});

(0,action_validate/* ensureServerEntryExports */.D)([
    getOrganizationBillingInfoAction
]);
(0,server_reference/* registerServerReference */.A)(getOrganizationBillingInfoAction, "7f2558c262e325508f06bf1b63ab29648d5bbe84b5", null);

// EXTERNAL MODULE: ./modules/ee/contacts/segments/actions.ts + 2 modules
var segments_actions = __webpack_require__(91903);
// EXTERNAL MODULE: ./lib/utils/services.ts
var services = __webpack_require__(883212);
;// ../../node_modules/next/dist/build/webpack/loaders/next-flight-action-entry-loader.js?actions=%5B%5B%22%2FUsers%2Fkdy1%2Fprojects%2Fformbricks%2Fapps%2Fweb%2Fapp%2F(app)%2F(survey-editor)%2Fenvironments%2F%5BenvironmentId%5D%2Fsurveys%2F%5BsurveyId%5D%2Fedit%2Factions.ts%22%2C%5B%5B%227f44fbfbd695b4b87a8b177bf487a1314b7bebbead%22%2C%22triggerDownloadUnsplashImageAction%22%5D%2C%5B%227f6f190ac6fd08333ac9d50baa5d128e0933520390%22%2C%22updateSurveyAction%22%5D%2C%5B%227f95a9cd2fc43decbbdb316b4c466f98fbb1fc7292%22%2C%22createActionClassAction%22%5D%2C%5B%227fa07c3e18cb2b5dc0bccf1727afd30ba94425974b%22%2C%22refetchProjectAction%22%5D%2C%5B%227ff313fb591d98a3184941f4daef611f7b6a0455a2%22%2C%22getImagesFromUnsplashAction%22%5D%5D%5D%2C%5B%22%2FUsers%2Fkdy1%2Fprojects%2Fformbricks%2Fapps%2Fweb%2Fmodules%2Futils%2Fhooks%2Factions.ts%22%2C%5B%5B%227f2558c262e325508f06bf1b63ab29648d5bbe84b5%22%2C%22getOrganizationBillingInfoAction%22%5D%5D%5D%2C%5B%22%2FUsers%2Fkdy1%2Fprojects%2Fformbricks%2Fapps%2Fweb%2Fmodules%2Fee%2Fcontacts%2Fsegments%2Factions.ts%22%2C%5B%5B%227f401506cbd8cbaf6e69a102af4b34faff51e6821d%22%2C%22updateSegmentAction%22%5D%2C%5B%227f5f67ef7357726711b163b717490966a69d2206c9%22%2C%22createSegmentAction%22%5D%2C%5B%227fa1455a73fef63c6b670c6d3018b8c0e88c94475c%22%2C%22loadNewSegmentAction%22%5D%2C%5B%227fd4a2f68d0f93b333143479d5d3345939d6141f48%22%2C%22resetSegmentFiltersAction%22%5D%2C%5B%227fe6bcff2944a454891c847e7a2b35e7fa5424a16a%22%2C%22cloneSegmentAction%22%5D%2C%5B%227ff1e10ead6d68ad053d27a59e05e0eefa9923d8da%22%2C%22deleteSegmentAction%22%5D%5D%5D%2C%5B%22%2FUsers%2Fkdy1%2Fprojects%2Fformbricks%2Fapps%2Fweb%2Flib%2Futils%2Fservices.ts%22%2C%5B%5B%227f11f2efac37ac84796e6cb223722dbe2e808e177f%22%2C%22getResponse%22%5D%2C%5B%227f12957c3365cc2950bdc48f0118f82439eb6c23ec%22%2C%22getSurvey%22%5D%2C%5B%227f20db167926d501ff62b9525526548773c8a436d4%22%2C%22isTeamPartOfOrganization%22%5D%2C%5B%227f36cf02b548a01d85112f587591e8c1e8390fa538%22%2C%22isProjectPartOfOrganization%22%5D%2C%5B%227f4f2c9c8b657cf906e9a25e65dafac6ec65967916%22%2C%22getWebhook%22%5D%2C%5B%227f540889be00b7aa8c6ff1edc5cd79ece876954fd3%22%2C%22getInvite%22%5D%2C%5B%227f60061b4b6be335eaa2facd1c5d8129b87f6923f4%22%2C%22getActionClass%22%5D%2C%5B%227f670a0537f96de8b5156e1b206124b2a990484370%22%2C%22getApiKey%22%5D%2C%5B%227f74bd40a1f82de833915085152910f3ebd525b356%22%2C%22getTeam%22%5D%2C%5B%227fb9a3e6cbebea226c9a3678f31bfebf532ca7321e%22%2C%22getResponseNote%22%5D%2C%5B%227fc5117c6d27e507a6efd4e11ff01afa8b3c52f1a1%22%2C%22getTag%22%5D%2C%5B%227fc6abb0838b6422ef7e81141fd6603883cd1990cf%22%2C%22getDocument%22%5D%2C%5B%227fc856fe5dd5f698d2f54dacf4280d447336780427%22%2C%22getLanguage%22%5D%2C%5B%227fcda0e6bf50febdf861015e25ebdf74068a488dde%22%2C%22getContact%22%5D%2C%5B%227fcfea9518c327899180b23cb3055005ba65cdef33%22%2C%22getIntegration%22%5D%2C%5B%227fdb06c584a2145e0f48be9ead409fc7f774731fde%22%2C%22getEnvironment%22%5D%2C%5B%227fdcbaf3445e783557d350b55d91be1398fafca7d3%22%2C%22getInsight%22%5D%2C%5B%227fe763f2c0d5f307cc75c26f23c693a54ac24a3112%22%2C%22getProject%22%5D%2C%5B%227ffb22c619704253744e9b5fea4eccca8b0808fb64%22%2C%22getSegment%22%5D%5D%5D%5D&__client_imported__=true!


































/***/ }),

/***/ 721145:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 781667));
;
Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 283032));


/***/ }),

/***/ 408121:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 919685));
;
Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 474624));


/***/ }),

/***/ 587032:
/***/ (() => {



/***/ }),

/***/ 580408:
/***/ (() => {



/***/ }),

/***/ 919685:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  SurveyEditor: () => (/* binding */ SurveyEditor)
});

// NAMESPACE OBJECT: ../../node_modules/mdurl/index.mjs
var mdurl_namespaceObject = {};
__webpack_require__.r(mdurl_namespaceObject);
__webpack_require__.d(mdurl_namespaceObject, {
  decode: () => (lib_decode),
  encode: () => (lib_encode),
  format: () => (format),
  parse: () => (parse)
});

// NAMESPACE OBJECT: ../../node_modules/uc.micro/index.mjs
var uc_micro_namespaceObject = {};
__webpack_require__.r(uc_micro_namespaceObject);
__webpack_require__.d(uc_micro_namespaceObject, {
  Any: () => (Any_regex),
  Cc: () => (Cc_regex),
  Cf: () => (Cf_regex),
  P: () => (regex),
  S: () => (S_regex),
  Z: () => (Z_regex)
});

// NAMESPACE OBJECT: ../../node_modules/markdown-it/lib/common/utils.mjs
var common_utils_namespaceObject = {};
__webpack_require__.r(common_utils_namespaceObject);
__webpack_require__.d(common_utils_namespaceObject, {
  arrayReplaceAt: () => (arrayReplaceAt),
  assign: () => (utils_assign),
  escapeHtml: () => (escapeHtml),
  escapeRE: () => (escapeRE),
  fromCodePoint: () => (utils_fromCodePoint),
  has: () => (has),
  isMdAsciiPunct: () => (isMdAsciiPunct),
  isPunctChar: () => (isPunctChar),
  isSpace: () => (isSpace),
  isString: () => (isString),
  isValidEntityCode: () => (isValidEntityCode),
  isWhiteSpace: () => (isWhiteSpace),
  lib: () => (utils_lib),
  normalizeReference: () => (normalizeReference),
  unescapeAll: () => (unescapeAll),
  unescapeMd: () => (unescapeMd)
});

// NAMESPACE OBJECT: ../../node_modules/markdown-it/lib/helpers/index.mjs
var helpers_namespaceObject = {};
__webpack_require__.r(helpers_namespaceObject);
__webpack_require__.d(helpers_namespaceObject, {
  parseLinkDestination: () => (parseLinkDestination),
  parseLinkLabel: () => (parseLinkLabel),
  parseLinkTitle: () => (parseLinkTitle)
});

// EXTERNAL MODULE: ../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js
var react_jsx_runtime = __webpack_require__(642725);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/file-digit.js
var file_digit = __webpack_require__(412090);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/file-type-2.js
var file_type_2 = __webpack_require__(341556);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/eye-off.js
var eye_off = __webpack_require__(774619);
// EXTERNAL MODULE: ../../packages/lib/i18n/utils.ts
var utils = __webpack_require__(864698);
// EXTERNAL MODULE: ../../node_modules/@paralleldrive/cuid2/index.js
var cuid2 = __webpack_require__(489415);
;// ../../packages/lib/surveyLogic/utils.ts



const isConditionGroup = (condition)=>{
    return condition.connector !== undefined;
};
const duplicateLogicItem = (logicItem)=>{
    const duplicateConditionGroup = (group)=>{
        return {
            ...group,
            id: (0,cuid2/* createId */.sX)(),
            conditions: group.conditions.map((condition)=>{
                if (isConditionGroup(condition)) {
                    return duplicateConditionGroup(condition);
                } else {
                    return duplicateCondition(condition);
                }
            })
        };
    };
    const duplicateCondition = (condition)=>{
        return {
            ...condition,
            id: (0,cuid2/* createId */.sX)()
        };
    };
    const duplicateAction = (action)=>{
        return {
            ...action,
            id: (0,cuid2/* createId */.sX)()
        };
    };
    return {
        ...logicItem,
        id: (0,cuid2/* createId */.sX)(),
        conditions: duplicateConditionGroup(logicItem.conditions),
        actions: logicItem.actions.map(duplicateAction)
    };
};
const addConditionBelow = (group, resourceId, condition)=>{
    for(let i = 0; i < group.conditions.length; i++){
        const item = group.conditions[i];
        if (isConditionGroup(item)) {
            if (item.id === resourceId) {
                group.conditions.splice(i + 1, 0, condition);
                break;
            } else {
                addConditionBelow(item, resourceId, condition);
            }
        } else {
            if (item.id === resourceId) {
                group.conditions.splice(i + 1, 0, condition);
                break;
            }
        }
    }
};
const toggleGroupConnector = (group, resourceId)=>{
    if (group.id === resourceId) {
        group.connector = group.connector === "and" ? "or" : "and";
        return;
    }
    for (const condition of group.conditions){
        if (condition.connector) {
            toggleGroupConnector(condition, resourceId);
        }
    }
};
const removeCondition = (group, resourceId)=>{
    for(let i = 0; i < group.conditions.length; i++){
        const item = group.conditions[i];
        if (item.id === resourceId) {
            group.conditions.splice(i, 1);
            return;
        }
        if (isConditionGroup(item)) {
            removeCondition(item, resourceId);
        }
    }
    deleteEmptyGroups(group);
};
const duplicateCondition = (group, resourceId)=>{
    for(let i = 0; i < group.conditions.length; i++){
        const item = group.conditions[i];
        if (item.id === resourceId) {
            const newItem = {
                ...item,
                id: (0,cuid2/* createId */.sX)()
            };
            group.conditions.splice(i + 1, 0, newItem);
            return;
        }
        if (item.connector) {
            duplicateCondition(item, resourceId);
        }
    }
};
const deleteEmptyGroups = (group)=>{
    for(let i = 0; i < group.conditions.length; i++){
        const resource = group.conditions[i];
        if (isConditionGroup(resource) && resource.conditions.length === 0) {
            group.conditions.splice(i, 1);
        } else if (isConditionGroup(resource)) {
            deleteEmptyGroups(resource);
        }
    }
};
const createGroupFromResource = (group, resourceId)=>{
    for(let i = 0; i < group.conditions.length; i++){
        const item = group.conditions[i];
        if (item.id === resourceId) {
            const newGroup = {
                id: (0,cuid2/* createId */.sX)(),
                connector: "and",
                conditions: [
                    item
                ]
            };
            group.conditions[i] = newGroup;
            group.connector = group.connector ?? "and";
            return;
        }
        if (isConditionGroup(item)) {
            createGroupFromResource(item, resourceId);
        }
    }
};
const updateCondition = (group, resourceId, condition)=>{
    for(let i = 0; i < group.conditions.length; i++){
        const item = group.conditions[i];
        if (item.id === resourceId && !("connector" in item)) {
            group.conditions[i] = {
                ...item,
                ...condition
            };
            return;
        }
        if (isConditionGroup(item)) {
            updateCondition(item, resourceId, condition);
        }
    }
};
const getUpdatedActionBody = (action, objective)=>{
    if (objective === action.objective) return action;
    switch(objective){
        case "calculate":
            return {
                id: action.id,
                objective: "calculate",
                variableId: "",
                operator: "assign",
                value: {
                    type: "static",
                    value: ""
                }
            };
        case "requireAnswer":
            return {
                id: action.id,
                objective: "requireAnswer",
                target: ""
            };
        case "jumpToQuestion":
            return {
                id: action.id,
                objective: "jumpToQuestion",
                target: ""
            };
    }
};
const evaluateLogic = (localSurvey, data, variablesData, conditions, selectedLanguage)=>{
    const evaluateConditionGroup = (group)=>{
        const results = group.conditions.map((condition)=>{
            if (isConditionGroup(condition)) {
                return evaluateConditionGroup(condition);
            } else {
                return evaluateSingleCondition(localSurvey, data, variablesData, condition, selectedLanguage);
            }
        });
        return group.connector === "or" ? results.some((r)=>r) : results.every((r)=>r);
    };
    return evaluateConditionGroup(conditions);
};
const evaluateSingleCondition = (localSurvey, data, variablesData, condition, selectedLanguage)=>{
    try {
        let leftValue = getLeftOperandValue(localSurvey, data, variablesData, condition.leftOperand, selectedLanguage);
        let rightValue = condition.rightOperand ? getRightOperandValue(localSurvey, data, variablesData, condition.rightOperand) : undefined;
        let leftField;
        if (condition.leftOperand?.type === "question") {
            leftField = localSurvey.questions.find((q)=>q.id === condition.leftOperand?.value);
        } else if (condition.leftOperand?.type === "variable") {
            leftField = localSurvey.variables.find((v)=>v.id === condition.leftOperand?.value);
        } else if (condition.leftOperand?.type === "hiddenField") {
            leftField = condition.leftOperand.value;
        } else {
            leftField = "";
        }
        let rightField;
        if (condition.rightOperand?.type === "question") {
            rightField = localSurvey.questions.find((q)=>q.id === condition.rightOperand?.value);
        } else if (condition.rightOperand?.type === "variable") {
            rightField = localSurvey.variables.find((v)=>v.id === condition.rightOperand?.value);
        } else if (condition.rightOperand?.type === "hiddenField") {
            rightField = condition.rightOperand.value;
        } else {
            rightField = "";
        }
        if (condition.leftOperand.type === "variable" && leftField.type === "number" && condition.rightOperand?.type === "hiddenField") {
            rightValue = Number(rightValue);
        }
        switch(condition.operator){
            case "equals":
                if (condition.leftOperand.type === "question") {
                    if (leftField.type === TSurveyQuestionTypeEnum.Date && typeof leftValue === "string" && typeof rightValue === "string") {
                        // when left value is of date question and right value is string
                        return new Date(leftValue).getTime() === new Date(rightValue).getTime();
                    }
                }
                // when left value is of openText, hiddenField, variable and right value is of multichoice
                if (condition.rightOperand?.type === "question") {
                    if (rightField.type === TSurveyQuestionTypeEnum.MultipleChoiceMulti) {
                        if (Array.isArray(rightValue) && typeof leftValue === "string" && rightValue.length === 1) {
                            return rightValue.includes(leftValue);
                        } else return false;
                    } else if (rightField.type === TSurveyQuestionTypeEnum.Date && typeof leftValue === "string" && typeof rightValue === "string") {
                        return new Date(leftValue).getTime() === new Date(rightValue).getTime();
                    }
                }
                return Array.isArray(leftValue) && leftValue.length === 1 && typeof rightValue === "string" && leftValue.includes(rightValue) || leftValue === rightValue;
            case "doesNotEqual":
                // when left value is of picture selection question and right value is its option
                if (condition.leftOperand.type === "question" && leftField.type === TSurveyQuestionTypeEnum.PictureSelection && Array.isArray(leftValue) && leftValue.length > 0 && typeof rightValue === "string") {
                    return !leftValue.includes(rightValue);
                }
                // when left value is of date question and right value is string
                if (condition.leftOperand.type === "question" && leftField.type === TSurveyQuestionTypeEnum.Date && typeof leftValue === "string" && typeof rightValue === "string") {
                    return new Date(leftValue).getTime() !== new Date(rightValue).getTime();
                }
                // when left value is of openText, hiddenField, variable and right value is of multichoice
                if (condition.rightOperand?.type === "question") {
                    if (rightField.type === TSurveyQuestionTypeEnum.MultipleChoiceMulti) {
                        if (Array.isArray(rightValue) && typeof leftValue === "string" && rightValue.length === 1) {
                            return !rightValue.includes(leftValue);
                        } else return false;
                    } else if (rightField.type === TSurveyQuestionTypeEnum.Date && typeof leftValue === "string" && typeof rightValue === "string") {
                        return new Date(leftValue).getTime() !== new Date(rightValue).getTime();
                    }
                }
                return Array.isArray(leftValue) && leftValue.length === 1 && typeof rightValue === "string" && !leftValue.includes(rightValue) || leftValue !== rightValue;
            case "contains":
                return String(leftValue).includes(String(rightValue));
            case "doesNotContain":
                return !String(leftValue).includes(String(rightValue));
            case "startsWith":
                return String(leftValue).startsWith(String(rightValue));
            case "doesNotStartWith":
                return !String(leftValue).startsWith(String(rightValue));
            case "endsWith":
                return String(leftValue).endsWith(String(rightValue));
            case "doesNotEndWith":
                return !String(leftValue).endsWith(String(rightValue));
            case "isSubmitted":
                if (typeof leftValue === "string") {
                    if (condition.leftOperand.type === "question" && leftField.type === TSurveyQuestionTypeEnum.FileUpload && leftValue) {
                        return leftValue !== "skipped";
                    }
                    return leftValue !== "" && leftValue !== null;
                } else if (Array.isArray(leftValue)) {
                    return leftValue.length > 0;
                } else if (typeof leftValue === "number") {
                    return leftValue !== null;
                }
                return false;
            case "isSkipped":
                return Array.isArray(leftValue) && leftValue.length === 0 || leftValue === "" || leftValue === null || leftValue === undefined || typeof leftValue === "object" && Object.entries(leftValue).length === 0;
            case "isGreaterThan":
                return Number(leftValue) > Number(rightValue);
            case "isLessThan":
                return Number(leftValue) < Number(rightValue);
            case "isGreaterThanOrEqual":
                return Number(leftValue) >= Number(rightValue);
            case "isLessThanOrEqual":
                return Number(leftValue) <= Number(rightValue);
            case "equalsOneOf":
                return Array.isArray(rightValue) && typeof leftValue === "string" && rightValue.includes(leftValue);
            case "includesAllOf":
                return Array.isArray(leftValue) && Array.isArray(rightValue) && rightValue.every((v)=>leftValue.includes(v));
            case "includesOneOf":
                return Array.isArray(leftValue) && Array.isArray(rightValue) && rightValue.some((v)=>leftValue.includes(v));
            case "doesNotIncludeAllOf":
                return Array.isArray(leftValue) && Array.isArray(rightValue) && rightValue.every((v)=>!leftValue.includes(v));
            case "doesNotIncludeOneOf":
                return Array.isArray(leftValue) && Array.isArray(rightValue) && rightValue.some((v)=>!leftValue.includes(v));
            case "isAccepted":
                return leftValue === "accepted";
            case "isClicked":
                return leftValue === "clicked";
            case "isAfter":
                return new Date(String(leftValue)) > new Date(String(rightValue));
            case "isBefore":
                return new Date(String(leftValue)) < new Date(String(rightValue));
            case "isBooked":
                return leftValue === "booked" || !!(leftValue && leftValue !== "");
            case "isPartiallySubmitted":
                if (typeof leftValue === "object") {
                    return Object.values(leftValue).includes("");
                } else return false;
            case "isCompletelySubmitted":
                if (typeof leftValue === "object") {
                    const values = Object.values(leftValue);
                    return values.length > 0 && !values.includes("");
                } else return false;
            default:
                return false;
        }
    } catch (e) {
        return false;
    }
};
const getVariableValue = (variables, variableId, variablesData)=>{
    const variable = variables.find((v)=>v.id === variableId);
    if (!variable) return undefined;
    const variableValue = variablesData[variableId];
    return variable.type === "number" ? Number(variableValue) || 0 : variableValue || "";
};
const getLeftOperandValue = (localSurvey, data, variablesData, leftOperand, selectedLanguage)=>{
    switch(leftOperand.type){
        case "question":
            const currentQuestion = localSurvey.questions.find((q)=>q.id === leftOperand.value);
            if (!currentQuestion) return undefined;
            const responseValue = data[leftOperand.value];
            if (currentQuestion.type === "openText" && currentQuestion.inputType === "number") {
                return Number(responseValue) || undefined;
            }
            if (currentQuestion.type === "multipleChoiceSingle" || currentQuestion.type === "multipleChoiceMulti") {
                const isOthersEnabled = currentQuestion.choices.at(-1)?.id === "other";
                if (typeof responseValue === "string") {
                    const choice = currentQuestion.choices.find((choice)=>{
                        return getLocalizedValue(choice.label, selectedLanguage) === responseValue;
                    });
                    if (!choice) {
                        if (isOthersEnabled) {
                            return "other";
                        }
                        return undefined;
                    }
                    return choice.id;
                } else if (Array.isArray(responseValue)) {
                    let choices = [];
                    responseValue.forEach((value)=>{
                        const foundChoice = currentQuestion.choices.find((choice)=>{
                            return getLocalizedValue(choice.label, selectedLanguage) === value;
                        });
                        if (foundChoice) {
                            choices.push(foundChoice.id);
                        } else if (isOthersEnabled) {
                            choices.push("other");
                        }
                    });
                    if (choices) {
                        return Array.from(new Set(choices));
                    }
                }
            }
            return data[leftOperand.value];
        case "variable":
            const variables = localSurvey.variables || [];
            return getVariableValue(variables, leftOperand.value, variablesData);
        case "hiddenField":
            return data[leftOperand.value];
        default:
            return undefined;
    }
};
const getRightOperandValue = (localSurvey, data, variablesData, rightOperand)=>{
    if (!rightOperand) return undefined;
    switch(rightOperand.type){
        case "question":
            return data[rightOperand.value];
        case "variable":
            const variables = localSurvey.variables || [];
            return getVariableValue(variables, rightOperand.value, variablesData);
        case "hiddenField":
            return data[rightOperand.value];
        case "static":
            return rightOperand.value;
        default:
            return undefined;
    }
};
const performActions = (survey, actions, data, calculationResults)=>{
    let jumpTarget;
    const requiredQuestionIds = [];
    const calculations = {
        ...calculationResults
    };
    actions.forEach((action)=>{
        switch(action.objective){
            case "calculate":
                const result = performCalculation(survey, action, data, calculations);
                if (result !== undefined) calculations[action.variableId] = result;
                break;
            case "requireAnswer":
                requiredQuestionIds.push(action.target);
                break;
            case "jumpToQuestion":
                if (!jumpTarget) {
                    jumpTarget = action.target;
                }
                break;
        }
    });
    return {
        jumpTarget,
        requiredQuestionIds,
        calculations
    };
};
const performCalculation = (survey, action, data, calculations)=>{
    const variables = survey.variables || [];
    const variable = variables.find((v)=>v.id === action.variableId);
    if (!variable) return undefined;
    let currentValue = calculations[action.variableId];
    if (currentValue === undefined) {
        currentValue = variable.type === "number" ? 0 : "";
    }
    let operandValue;
    // Determine the operand value based on the action.value type
    switch(action.value.type){
        case "static":
            operandValue = action.value.value;
            break;
        case "variable":
            const value = calculations[action.value.value];
            if (typeof value === "number" || typeof value === "string") {
                operandValue = value;
            }
            break;
        case "question":
        case "hiddenField":
            const val = data[action.value.value];
            if (typeof val === "number" || typeof val === "string") {
                if (variable.type === "number" && !isNaN(Number(val))) {
                    operandValue = Number(val);
                }
                operandValue = val;
            }
            break;
    }
    if (operandValue === undefined || operandValue === null) return undefined;
    let result;
    switch(action.operator){
        case "add":
            result = Number(currentValue) + Number(operandValue);
            break;
        case "subtract":
            result = Number(currentValue) - Number(operandValue);
            break;
        case "multiply":
            result = Number(currentValue) * Number(operandValue);
            break;
        case "divide":
            if (Number(operandValue) === 0) return undefined;
            result = Number(currentValue) / Number(operandValue);
            break;
        case "assign":
            result = operandValue;
            break;
        case "concat":
            result = String(currentValue) + String(operandValue);
            break;
    }
    return result;
};

// EXTERNAL MODULE: ../../packages/lib/utils/questions.tsx
var questions = __webpack_require__(4659);
// EXTERNAL MODULE: ../../packages/lib/utils/recall.ts
var recall = __webpack_require__(654931);
// EXTERNAL MODULE: ../../packages/types/surveys/types.ts + 3 modules
var types = __webpack_require__(102379);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/lib/logicRuleEngine.ts

const getLogicRules = (t)=>{
    return {
        question: {
            [`${types/* TSurveyQuestionTypeEnum */.wn.OpenText}.text`]: {
                options: [
                    {
                        label: t("environments.surveys.edit.equals"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equals
                    },
                    {
                        label: t("environments.surveys.edit.does_not_equal"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEqual
                    },
                    {
                        label: t("environments.surveys.edit.contains"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.contains
                    },
                    {
                        label: t("environments.surveys.edit.does_not_contain"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotContain
                    },
                    {
                        label: t("environments.surveys.edit.starts_with"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.startsWith
                    },
                    {
                        label: t("environments.surveys.edit.does_not_start_with"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotStartWith
                    },
                    {
                        label: t("environments.surveys.edit.ends_with"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.endsWith
                    },
                    {
                        label: t("environments.surveys.edit.does_not_end_with"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEndWith
                    },
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [`${types/* TSurveyQuestionTypeEnum */.wn.OpenText}.number`]: {
                options: [
                    {
                        label: "=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equals
                    },
                    {
                        label: "!=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEqual
                    },
                    {
                        label: ">",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isGreaterThan
                    },
                    {
                        label: "<",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isLessThan
                    },
                    {
                        label: ">=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isGreaterThanOrEqual
                    },
                    {
                        label: "<=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isLessThanOrEqual
                    },
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle]: {
                options: [
                    {
                        label: t("environments.surveys.edit.equals"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equals
                    },
                    {
                        label: t("environments.surveys.edit.does_not_equal"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEqual
                    },
                    {
                        label: t("environments.surveys.edit.equals_one_of"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equalsOneOf
                    },
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti]: {
                options: [
                    {
                        label: t("environments.surveys.edit.equals"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equals
                    },
                    {
                        label: t("environments.surveys.edit.does_not_equal"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEqual
                    },
                    {
                        label: t("environments.surveys.edit.does_not_include_one_of"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotIncludeOneOf
                    },
                    {
                        label: t("environments.surveys.edit.does_not_include_all_of"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotIncludeAllOf
                    },
                    {
                        label: t("environments.surveys.edit.includes_all_of"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.includesAllOf
                    },
                    {
                        label: t("environments.surveys.edit.includes_one_of"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.includesOneOf
                    },
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.PictureSelection]: {
                options: [
                    {
                        label: t("environments.surveys.edit.equals"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equals
                    },
                    {
                        label: t("environments.surveys.edit.does_not_equal"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEqual
                    },
                    {
                        label: t("environments.surveys.edit.does_not_include_one_of"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotIncludeOneOf
                    },
                    {
                        label: t("environments.surveys.edit.does_not_include_all_of"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotIncludeAllOf
                    },
                    {
                        label: t("environments.surveys.edit.includes_all_of"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.includesAllOf
                    },
                    {
                        label: t("environments.surveys.edit.includes_one_of"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.includesOneOf
                    },
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.Rating]: {
                options: [
                    {
                        label: "=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equals
                    },
                    {
                        label: "!=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEqual
                    },
                    {
                        label: ">",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isGreaterThan
                    },
                    {
                        label: "<",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isLessThan
                    },
                    {
                        label: ">=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isGreaterThanOrEqual
                    },
                    {
                        label: "<=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isLessThanOrEqual
                    },
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.NPS]: {
                options: [
                    {
                        label: "=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equals
                    },
                    {
                        label: "!=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEqual
                    },
                    {
                        label: ">",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isGreaterThan
                    },
                    {
                        label: "<",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isLessThan
                    },
                    {
                        label: ">=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isGreaterThanOrEqual
                    },
                    {
                        label: "<=",
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isLessThanOrEqual
                    },
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.CTA]: {
                options: [
                    {
                        label: t("environments.surveys.edit.is_clicked"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isClicked
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.Consent]: {
                options: [
                    {
                        label: t("environments.surveys.edit.is_accepted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isAccepted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.Date]: {
                options: [
                    {
                        label: t("environments.surveys.edit.equals"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equals
                    },
                    {
                        label: t("environments.surveys.edit.does_not_equal"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEqual
                    },
                    {
                        label: t("environments.surveys.edit.is_before"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isBefore
                    },
                    {
                        label: t("environments.surveys.edit.is_after"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isAfter
                    },
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.FileUpload]: {
                options: [
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.Ranking]: {
                options: [
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.Cal]: {
                options: [
                    {
                        label: t("environments.surveys.edit.is_booked"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isBooked
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.Matrix]: {
                options: [
                    {
                        label: t("environments.surveys.edit.is_partially_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isPartiallySubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_completely_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isCompletelySubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.Address]: {
                options: [
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            },
            [types/* TSurveyQuestionTypeEnum */.wn.ContactInfo]: {
                options: [
                    {
                        label: t("environments.surveys.edit.is_submitted"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSubmitted
                    },
                    {
                        label: t("environments.surveys.edit.is_skipped"),
                        value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isSkipped
                    }
                ]
            }
        },
        ["variable.text"]: {
            options: [
                {
                    label: t("environments.surveys.edit.equals"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equals
                },
                {
                    label: t("environments.surveys.edit.does_not_equal"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEqual
                },
                {
                    label: t("environments.surveys.edit.contains"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.contains
                },
                {
                    label: t("environments.surveys.edit.does_not_contain"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotContain
                },
                {
                    label: t("environments.surveys.edit.starts_with"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.startsWith
                },
                {
                    label: t("environments.surveys.edit.does_not_start_with"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotStartWith
                },
                {
                    label: t("environments.surveys.edit.ends_with"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.endsWith
                },
                {
                    label: t("environments.surveys.edit.does_not_end_with"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEndWith
                }
            ]
        },
        ["variable.number"]: {
            options: [
                {
                    label: "=",
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equals
                },
                {
                    label: "!=",
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEqual
                },
                {
                    label: ">",
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isGreaterThan
                },
                {
                    label: "<",
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isLessThan
                },
                {
                    label: ">=",
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isGreaterThanOrEqual
                },
                {
                    label: "<=",
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.isLessThanOrEqual
                }
            ]
        },
        hiddenField: {
            options: [
                {
                    label: t("environments.surveys.edit.equals"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.equals
                },
                {
                    label: t("environments.surveys.edit.does_not_equal"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEqual
                },
                {
                    label: t("environments.surveys.edit.contains"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.contains
                },
                {
                    label: t("environments.surveys.edit.does_not_contain"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotContain
                },
                {
                    label: t("environments.surveys.edit.starts_with"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.startsWith
                },
                {
                    label: t("environments.surveys.edit.does_not_start_with"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotStartWith
                },
                {
                    label: t("environments.surveys.edit.ends_with"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.endsWith
                },
                {
                    label: t("environments.surveys.edit.does_not_end_with"),
                    value: types/* ZSurveyLogicConditionsOperator */.pK.Enum.doesNotEndWith
                }
            ]
        }
    };
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/lib/utils.tsx








// formats the text to highlight specific parts of the text with slashes
const formatTextWithSlashes = (text)=>{
    const regex = /\/(.*?)\\/g;
    const parts = text.split(regex);
    return parts.map((part, index)=>{
        // Check if the part was inside slashes
        if (index % 2 !== 0) {
            return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                className: "mx-1 rounded-md bg-slate-100 p-1 px-2 text-xs",
                children: part
            }, index);
        } else {
            return part;
        }
    });
};
const getQuestionIconMapping = (t)=>(0,questions/* getQuestionTypes */._2)(t).reduce((prev, curr)=>({
            ...prev,
            [curr.id]: curr.icon
        }), {});
const getConditionValueOptions = (localSurvey, currQuestionIdx, t)=>{
    const hiddenFields = localSurvey.hiddenFields?.fieldIds ?? [];
    const variables = localSurvey.variables ?? [];
    const questions = localSurvey.questions;
    const groupedOptions = [];
    const questionOptions = questions.filter((_, idx)=>idx <= currQuestionIdx).map((question)=>{
        return {
            icon: getQuestionIconMapping(t)[question.type],
            label: (0,utils/* getLocalizedValue */.bT)(question.headline, "default"),
            value: question.id,
            meta: {
                type: "question"
            }
        };
    });
    const variableOptions = variables.map((variable)=>{
        return {
            icon: variable.type === "number" ? file_digit/* default */.A : file_type_2/* default */.A,
            label: variable.name,
            value: variable.id,
            meta: {
                type: "variable"
            }
        };
    });
    const hiddenFieldsOptions = hiddenFields.map((field)=>{
        return {
            icon: eye_off/* default */.A,
            label: field,
            value: field,
            meta: {
                type: "hiddenField"
            }
        };
    });
    if (questionOptions.length > 0) {
        groupedOptions.push({
            label: t("common.questions"),
            value: "questions",
            options: questionOptions
        });
    }
    if (variableOptions.length > 0) {
        groupedOptions.push({
            label: t("common.variables"),
            value: "variables",
            options: variableOptions
        });
    }
    if (hiddenFieldsOptions.length > 0) {
        groupedOptions.push({
            label: t("common.hidden_fields"),
            value: "hiddenFields",
            options: hiddenFieldsOptions
        });
    }
    return groupedOptions;
};
const replaceEndingCardHeadlineRecall = (survey, language)=>{
    const modifiedSurvey = structuredClone(survey);
    modifiedSurvey.endings.forEach((ending)=>{
        if (ending.type === "endScreen") {
            ending.headline = (0,recall/* recallToHeadline */.fV)(ending.headline || {}, modifiedSurvey, false, language);
        }
    });
    return modifiedSurvey;
};
const getActionObjectiveOptions = (t)=>[
        {
            label: t("environments.surveys.edit.calculate"),
            value: "calculate"
        },
        {
            label: t("environments.surveys.edit.require_answer"),
            value: "requireAnswer"
        },
        {
            label: t("environments.surveys.edit.jump_to_question"),
            value: "jumpToQuestion"
        }
    ];
const hasJumpToQuestionAction = (actions)=>{
    return actions.some((action)=>action.objective === "jumpToQuestion");
};
const getQuestionOperatorOptions = (question, t)=>{
    let options;
    if (question.type === "openText") {
        const inputType = question.inputType === "number" ? "number" : "text";
        options = getLogicRules(t).question[`openText.${inputType}`].options;
    } else {
        options = getLogicRules(t).question[question.type].options;
    }
    if (question.required) {
        options = options.filter((option)=>option.value !== "isSkipped");
    }
    return options;
};
const getDefaultOperatorForQuestion = (question, t)=>{
    const options = getQuestionOperatorOptions(question, t);
    return options[0].value.toString();
};
const getConditionOperatorOptions = (condition, localSurvey, t)=>{
    if (condition.leftOperand.type === "variable") {
        const variables = localSurvey.variables ?? [];
        const variableType = variables.find((variable)=>variable.id === condition.leftOperand.value)?.type || "text";
        return getLogicRules(t)[`variable.${variableType}`].options;
    } else if (condition.leftOperand.type === "hiddenField") {
        return getLogicRules(t).hiddenField.options;
    } else if (condition.leftOperand.type === "question") {
        const questions = localSurvey.questions ?? [];
        const question = questions.find((question)=>question.id === condition.leftOperand.value);
        if (!question) return [];
        return getQuestionOperatorOptions(question, t);
    }
    return [];
};
const getMatchValueProps = (condition, localSurvey, questionIdx, t)=>{
    if ([
        "isAccepted",
        "isBooked",
        "isClicked",
        "isCompletelySubmitted",
        "isPartiallySubmitted",
        "isSkipped",
        "isSubmitted"
    ].includes(condition.operator)) {
        return {
            show: false,
            options: []
        };
    }
    let questions = localSurvey.questions.filter((_, idx)=>idx <= questionIdx);
    let variables = localSurvey.variables ?? [];
    let hiddenFields = localSurvey.hiddenFields?.fieldIds ?? [];
    const selectedQuestion = questions.find((question)=>question.id === condition.leftOperand.value);
    const selectedVariable = variables.find((variable)=>variable.id === condition.leftOperand.value);
    if (condition.leftOperand.type === "question") {
        questions = questions.filter((question)=>question.id !== condition.leftOperand.value);
    } else if (condition.leftOperand.type === "variable") {
        variables = variables.filter((variable)=>variable.id !== condition.leftOperand.value);
    } else if (condition.leftOperand.type === "hiddenField") {
        hiddenFields = hiddenFields.filter((field)=>field !== condition.leftOperand.value);
    }
    if (condition.leftOperand.type === "question") {
        if (selectedQuestion?.type === types/* TSurveyQuestionTypeEnum */.wn.OpenText) {
            const allowedQuestionTypes = [
                types/* TSurveyQuestionTypeEnum */.wn.OpenText
            ];
            if (selectedQuestion.inputType === "number") {
                allowedQuestionTypes.push(types/* TSurveyQuestionTypeEnum */.wn.Rating, types/* TSurveyQuestionTypeEnum */.wn.NPS);
            }
            if ([
                "equals",
                "doesNotEqual"
            ].includes(condition.operator)) {
                if (selectedQuestion.inputType !== "number") {
                    allowedQuestionTypes.push(types/* TSurveyQuestionTypeEnum */.wn.Date, types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle, types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti);
                }
            }
            const allowedQuestions = questions.filter((question)=>allowedQuestionTypes.includes(question.type));
            const questionOptions = allowedQuestions.map((question)=>{
                return {
                    icon: getQuestionIconMapping(t)[question.type],
                    label: (0,utils/* getLocalizedValue */.bT)(question.headline, "default"),
                    value: question.id,
                    meta: {
                        type: "question"
                    }
                };
            });
            const variableOptions = variables.filter((variable)=>selectedQuestion.inputType !== "number" ? variable.type === "text" : variable.type === "number").map((variable)=>{
                return {
                    icon: variable.type === "number" ? file_digit/* default */.A : file_type_2/* default */.A,
                    label: variable.name,
                    value: variable.id,
                    meta: {
                        type: "variable"
                    }
                };
            });
            const hiddenFieldsOptions = hiddenFields.map((field)=>{
                return {
                    icon: eye_off/* default */.A,
                    label: field,
                    value: field,
                    meta: {
                        type: "hiddenField"
                    }
                };
            });
            const groupedOptions = [];
            if (questionOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.questions"),
                    value: "questions",
                    options: questionOptions
                });
            }
            if (variableOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.variables"),
                    value: "variables",
                    options: variableOptions
                });
            }
            if (hiddenFieldsOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.hidden_fields"),
                    value: "hiddenFields",
                    options: hiddenFieldsOptions
                });
            }
            return {
                show: true,
                showInput: true,
                inputType: selectedQuestion.inputType === "number" ? "number" : "text",
                options: groupedOptions
            };
        } else if (selectedQuestion?.type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle || selectedQuestion?.type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti) {
            const choices = selectedQuestion.choices.map((choice)=>{
                return {
                    label: (0,utils/* getLocalizedValue */.bT)(choice.label, "default"),
                    value: choice.id,
                    meta: {
                        type: "static"
                    }
                };
            });
            return {
                show: true,
                showInput: false,
                options: [
                    {
                        label: t("common.choices"),
                        value: "choices",
                        options: choices
                    }
                ]
            };
        } else if (selectedQuestion?.type === types/* TSurveyQuestionTypeEnum */.wn.PictureSelection) {
            const choices = selectedQuestion.choices.map((choice, idx)=>{
                return {
                    imgSrc: choice.imageUrl,
                    label: `${t("environments.surveys.edit.picture_idx")} ${idx + 1}`,
                    value: choice.id,
                    meta: {
                        type: "static"
                    }
                };
            });
            return {
                show: true,
                showInput: false,
                options: [
                    {
                        label: t("common.choices"),
                        value: "choices",
                        options: choices
                    }
                ]
            };
        } else if (selectedQuestion?.type === types/* TSurveyQuestionTypeEnum */.wn.Rating) {
            const choices = Array.from({
                length: selectedQuestion.range
            }, (_, idx)=>{
                return {
                    label: `${idx + 1}`,
                    value: idx + 1,
                    meta: {
                        type: "static"
                    }
                };
            });
            const numberVariables = variables.filter((variable)=>variable.type === "number");
            const variableOptions = numberVariables.map((variable)=>{
                return {
                    icon: file_digit/* default */.A,
                    label: variable.name,
                    value: variable.id,
                    meta: {
                        type: "variable"
                    }
                };
            });
            const groupedOptions = [];
            if (choices.length > 0) {
                groupedOptions.push({
                    label: t("common.choices"),
                    value: "choices",
                    options: choices
                });
            }
            if (variableOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.variables"),
                    value: "variables",
                    options: variableOptions
                });
            }
            return {
                show: true,
                showInput: false,
                options: groupedOptions
            };
        } else if (selectedQuestion?.type === types/* TSurveyQuestionTypeEnum */.wn.NPS) {
            const choices = Array.from({
                length: 11
            }, (_, idx)=>{
                return {
                    label: `${idx}`,
                    value: idx,
                    meta: {
                        type: "static"
                    }
                };
            });
            const numberVariables = variables.filter((variable)=>variable.type === "number");
            const variableOptions = numberVariables.map((variable)=>{
                return {
                    icon: file_digit/* default */.A,
                    label: variable.name,
                    value: variable.id,
                    meta: {
                        type: "variable"
                    }
                };
            });
            const groupedOptions = [];
            if (choices.length > 0) {
                groupedOptions.push({
                    label: t("common.choices"),
                    value: "choices",
                    options: choices
                });
            }
            if (variableOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.variables"),
                    value: "variables",
                    options: variableOptions
                });
            }
            return {
                show: true,
                showInput: false,
                options: groupedOptions
            };
        } else if (selectedQuestion?.type === types/* TSurveyQuestionTypeEnum */.wn.Date) {
            const openTextQuestions = questions.filter((question)=>[
                    types/* TSurveyQuestionTypeEnum */.wn.OpenText,
                    types/* TSurveyQuestionTypeEnum */.wn.Date
                ].includes(question.type));
            const questionOptions = openTextQuestions.map((question)=>{
                return {
                    icon: getQuestionIconMapping(t)[question.type],
                    label: (0,utils/* getLocalizedValue */.bT)(question.headline, "default"),
                    value: question.id,
                    meta: {
                        type: "question"
                    }
                };
            });
            const stringVariables = variables.filter((variable)=>variable.type === "text");
            const variableOptions = stringVariables.map((variable)=>{
                return {
                    icon: file_type_2/* default */.A,
                    label: variable.name,
                    value: variable.id,
                    meta: {
                        type: "variable"
                    }
                };
            });
            const hiddenFieldsOptions = hiddenFields.map((field)=>{
                return {
                    icon: eye_off/* default */.A,
                    label: field,
                    value: field,
                    meta: {
                        type: "hiddenField"
                    }
                };
            });
            const groupedOptions = [];
            if (questionOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.questions"),
                    value: "questions",
                    options: questionOptions
                });
            }
            if (variableOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.variables"),
                    value: "variables",
                    options: variableOptions
                });
            }
            if (hiddenFieldsOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.hidden_fields"),
                    value: "hiddenFields",
                    options: hiddenFieldsOptions
                });
            }
            return {
                show: true,
                showInput: true,
                inputType: "date",
                options: groupedOptions
            };
        }
    } else if (condition.leftOperand.type === "variable") {
        if (selectedVariable?.type === "text") {
            const allowedQuestionTypes = [
                types/* TSurveyQuestionTypeEnum */.wn.OpenText,
                types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle
            ];
            if ([
                "equals",
                "doesNotEqual"
            ].includes(condition.operator)) {
                allowedQuestionTypes.push(types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti, types/* TSurveyQuestionTypeEnum */.wn.Date);
            }
            const allowedQuestions = questions.filter((question)=>allowedQuestionTypes.includes(question.type));
            const questionOptions = allowedQuestions.map((question)=>{
                return {
                    icon: getQuestionIconMapping(t)[question.type],
                    label: (0,utils/* getLocalizedValue */.bT)(question.headline, "default"),
                    value: question.id,
                    meta: {
                        type: "question"
                    }
                };
            });
            const stringVariables = variables.filter((variable)=>variable.type === "text");
            const variableOptions = stringVariables.map((variable)=>{
                return {
                    icon: file_type_2/* default */.A,
                    label: variable.name,
                    value: variable.id,
                    meta: {
                        type: "variable"
                    }
                };
            });
            const hiddenFieldsOptions = hiddenFields.map((field)=>{
                return {
                    icon: eye_off/* default */.A,
                    label: field,
                    value: field,
                    meta: {
                        type: "hiddenField"
                    }
                };
            });
            const groupedOptions = [];
            if (questionOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.questions"),
                    value: "questions",
                    options: questionOptions
                });
            }
            if (variableOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.variables"),
                    value: "variables",
                    options: variableOptions
                });
            }
            if (hiddenFieldsOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.hidden_fields"),
                    value: "hiddenFields",
                    options: hiddenFieldsOptions
                });
            }
            return {
                show: true,
                showInput: true,
                inputType: "text",
                options: groupedOptions
            };
        } else if (selectedVariable?.type === "number") {
            const allowedQuestions = questions.filter((question)=>[
                    types/* TSurveyQuestionTypeEnum */.wn.Rating,
                    types/* TSurveyQuestionTypeEnum */.wn.NPS
                ].includes(question.type) || question.type === types/* TSurveyQuestionTypeEnum */.wn.OpenText && question.inputType === "number");
            const questionOptions = allowedQuestions.map((question)=>{
                return {
                    icon: getQuestionIconMapping(t)[question.type],
                    label: (0,utils/* getLocalizedValue */.bT)(question.headline, "default"),
                    value: question.id,
                    meta: {
                        type: "question"
                    }
                };
            });
            const numberVariables = variables.filter((variable)=>variable.type === "number");
            const variableOptions = numberVariables.map((variable)=>{
                return {
                    icon: file_digit/* default */.A,
                    label: variable.name,
                    value: variable.id,
                    meta: {
                        type: "variable"
                    }
                };
            });
            const hiddenFieldsOptions = hiddenFields.map((field)=>{
                return {
                    icon: eye_off/* default */.A,
                    label: field,
                    value: field,
                    meta: {
                        type: "hiddenField"
                    }
                };
            });
            const groupedOptions = [];
            if (questionOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.questions"),
                    value: "questions",
                    options: questionOptions
                });
            }
            if (variableOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.variables"),
                    value: "variables",
                    options: variableOptions
                });
            }
            if (hiddenFieldsOptions.length > 0) {
                groupedOptions.push({
                    label: t("common.hidden_fields"),
                    value: "hiddenFields",
                    options: hiddenFieldsOptions
                });
            }
            return {
                show: true,
                showInput: true,
                inputType: "number",
                options: groupedOptions
            };
        }
    } else if (condition.leftOperand.type === "hiddenField") {
        const allowedQuestionTypes = [
            types/* TSurveyQuestionTypeEnum */.wn.OpenText,
            types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle
        ];
        if ([
            "equals",
            "doesNotEqual"
        ].includes(condition.operator)) {
            allowedQuestionTypes.push(types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti, types/* TSurveyQuestionTypeEnum */.wn.Date);
        }
        const allowedQuestions = questions.filter((question)=>allowedQuestionTypes.includes(question.type));
        const questionOptions = allowedQuestions.map((question)=>{
            return {
                icon: getQuestionIconMapping(t)[question.type],
                label: (0,utils/* getLocalizedValue */.bT)(question.headline, "default"),
                value: question.id,
                meta: {
                    type: "question"
                }
            };
        });
        const variableOptions = variables.filter((variable)=>variable.type === "text").map((variable)=>{
            return {
                icon: file_type_2/* default */.A,
                label: variable.name,
                value: variable.id,
                meta: {
                    type: "variable"
                }
            };
        });
        const hiddenFieldsOptions = hiddenFields.map((field)=>{
            return {
                icon: eye_off/* default */.A,
                label: field,
                value: field,
                meta: {
                    type: "hiddenField"
                }
            };
        });
        const groupedOptions = [];
        if (questionOptions.length > 0) {
            groupedOptions.push({
                label: t("common.questions"),
                value: "questions",
                options: questionOptions
            });
        }
        if (variableOptions.length > 0) {
            groupedOptions.push({
                label: t("common.variables"),
                value: "variables",
                options: variableOptions
            });
        }
        if (hiddenFieldsOptions.length > 0) {
            groupedOptions.push({
                label: t("common.hidden_fields"),
                value: "hiddenFields",
                options: hiddenFieldsOptions
            });
        }
        return {
            show: true,
            showInput: true,
            inputType: "text",
            options: groupedOptions
        };
    }
    return {
        show: false,
        options: []
    };
};
const getActionTargetOptions = (action, localSurvey, currQuestionIdx, t)=>{
    let questions = localSurvey.questions.filter((_, idx)=>idx > currQuestionIdx);
    if (action.objective === "requireAnswer") {
        questions = questions.filter((question)=>!question.required);
    }
    const questionOptions = questions.map((question)=>{
        return {
            icon: getQuestionIconMapping(t)[question.type],
            label: (0,utils/* getLocalizedValue */.bT)(question.headline, "default"),
            value: question.id
        };
    });
    if (action.objective === "requireAnswer") return questionOptions;
    const endingCardOptions = localSurvey.endings.map((ending)=>{
        return {
            label: ending.type === "endScreen" ? (0,utils/* getLocalizedValue */.bT)(ending.headline, "default") || t("environments.surveys.edit.end_screen_card") : ending.label || t("environments.surveys.edit.redirect_thank_you_card"),
            value: ending.id
        };
    });
    return [
        ...questionOptions,
        ...endingCardOptions
    ];
};
const getActionVariableOptions = (localSurvey)=>{
    const variables = localSurvey.variables ?? [];
    return variables.map((variable)=>{
        return {
            icon: variable.type === "number" ? file_digit/* default */.A : file_type_2/* default */.A,
            label: variable.name,
            value: variable.id,
            meta: {
                variableType: variable.type
            }
        };
    });
};
const getActionOperatorOptions = (t, variableType)=>{
    if (variableType === "number") {
        return [
            {
                label: t("environments.surveys.edit.add"),
                value: "add"
            },
            {
                label: t("environments.surveys.edit.subtract"),
                value: "subtract"
            },
            {
                label: t("environments.surveys.edit.multiply"),
                value: "multiply"
            },
            {
                label: t("environments.surveys.edit.divide"),
                value: "divide"
            },
            {
                label: t("environments.surveys.edit.assign"),
                value: "assign"
            }
        ];
    } else if (variableType === "text") {
        return [
            {
                label: t("environments.surveys.edit.assign"),
                value: "assign"
            },
            {
                label: t("environments.surveys.edit.concat"),
                value: "concat"
            }
        ];
    }
    return [];
};
const getActionValueOptions = (variableId, localSurvey, questionIdx, t)=>{
    const hiddenFields = localSurvey.hiddenFields?.fieldIds ?? [];
    let variables = localSurvey.variables ?? [];
    const questions = localSurvey.questions.filter((_, idx)=>idx <= questionIdx);
    const hiddenFieldsOptions = hiddenFields.map((field)=>{
        return {
            icon: eye_off/* default */.A,
            label: field,
            value: field,
            meta: {
                type: "hiddenField"
            }
        };
    });
    const selectedVariable = variables.find((variable)=>variable.id === variableId);
    variables = variables.filter((variable)=>variable.id !== variableId);
    if (!selectedVariable) return [];
    if (selectedVariable.type === "text") {
        const allowedQuestions = questions.filter((question)=>[
                types/* TSurveyQuestionTypeEnum */.wn.OpenText,
                types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle,
                types/* TSurveyQuestionTypeEnum */.wn.Rating,
                types/* TSurveyQuestionTypeEnum */.wn.NPS,
                types/* TSurveyQuestionTypeEnum */.wn.Date
            ].includes(question.type));
        const questionOptions = allowedQuestions.map((question)=>{
            return {
                icon: getQuestionIconMapping(t)[question.type],
                label: (0,utils/* getLocalizedValue */.bT)(question.headline, "default"),
                value: question.id,
                meta: {
                    type: "question"
                }
            };
        });
        const stringVariables = variables.filter((variable)=>variable.type === "text");
        const variableOptions = stringVariables.map((variable)=>{
            return {
                icon: file_type_2/* default */.A,
                label: variable.name,
                value: variable.id,
                meta: {
                    type: "variable"
                }
            };
        });
        const groupedOptions = [];
        if (questionOptions.length > 0) {
            groupedOptions.push({
                label: t("common.questions"),
                value: "questions",
                options: questionOptions
            });
        }
        if (variableOptions.length > 0) {
            groupedOptions.push({
                label: t("common.variables"),
                value: "variables",
                options: variableOptions
            });
        }
        if (hiddenFieldsOptions.length > 0) {
            groupedOptions.push({
                label: t("common.hidden_fields"),
                value: "hiddenFields",
                options: hiddenFieldsOptions
            });
        }
        return groupedOptions;
    } else if (selectedVariable.type === "number") {
        const allowedQuestions = questions.filter((question)=>[
                types/* TSurveyQuestionTypeEnum */.wn.Rating,
                types/* TSurveyQuestionTypeEnum */.wn.NPS
            ].includes(question.type) || question.type === types/* TSurveyQuestionTypeEnum */.wn.OpenText && question.inputType === "number");
        const questionOptions = allowedQuestions.map((question)=>{
            return {
                icon: getQuestionIconMapping(t)[question.type],
                label: (0,utils/* getLocalizedValue */.bT)(question.headline, "default"),
                value: question.id,
                meta: {
                    type: "question"
                }
            };
        });
        const numberVariables = variables.filter((variable)=>variable.type === "number");
        const variableOptions = numberVariables.map((variable)=>{
            return {
                icon: file_digit/* default */.A,
                label: variable.name,
                value: variable.id,
                meta: {
                    type: "variable"
                }
            };
        });
        const groupedOptions = [];
        if (questionOptions.length > 0) {
            groupedOptions.push({
                label: t("common.questions"),
                value: "questions",
                options: questionOptions
            });
        }
        if (variableOptions.length > 0) {
            groupedOptions.push({
                label: t("common.variables"),
                value: "variables",
                options: variableOptions
            });
        }
        if (hiddenFieldsOptions.length > 0) {
            groupedOptions.push({
                label: t("common.hidden_fields"),
                value: "hiddenFields",
                options: hiddenFieldsOptions
            });
        }
        return groupedOptions;
    }
    return [];
};
const isUsedInLeftOperand = (leftOperand, type, id)=>{
    switch(type){
        case "question":
            return leftOperand.type === "question" && leftOperand.value === id;
        case "hiddenField":
            return leftOperand.type === "hiddenField" && leftOperand.value === id;
        case "variable":
            return leftOperand.type === "variable" && leftOperand.value === id;
        default:
            return false;
    }
};
const isUsedInRightOperand = (rightOperand, type, id)=>{
    switch(type){
        case "question":
            return rightOperand.type === "question" && rightOperand.value === id;
        case "hiddenField":
            return rightOperand.type === "hiddenField" && rightOperand.value === id;
        case "variable":
            return rightOperand.type === "variable" && rightOperand.value === id;
        default:
            return false;
    }
};
const findQuestionUsedInLogic = (survey, questionId)=>{
    const isUsedInCondition = (condition)=>{
        if (isConditionGroup(condition)) {
            // It's a TConditionGroup
            return condition.conditions.some(isUsedInCondition);
        } else {
            // It's a TSingleCondition
            return condition.rightOperand && isUsedInRightOperand(condition.rightOperand, "question", questionId) || isUsedInLeftOperand(condition.leftOperand, "question", questionId);
        }
    };
    const isUsedInAction = (action)=>{
        return action.objective === "jumpToQuestion" && action.target === questionId || action.objective === "requireAnswer" && action.target === questionId;
    };
    const isUsedInLogicRule = (logicRule)=>{
        return isUsedInCondition(logicRule.conditions) || logicRule.actions.some(isUsedInAction);
    };
    return survey.questions.findIndex((question)=>question.logicFallback === questionId || question.id !== questionId && question.logic?.some(isUsedInLogicRule));
};
const findOptionUsedInLogic = (survey, questionId, optionId)=>{
    const isUsedInCondition = (condition)=>{
        if (isConditionGroup(condition)) {
            // It's a TConditionGroup
            return condition.conditions.some(isUsedInCondition);
        } else {
            // It's a TSingleCondition
            return isUsedInOperand(condition);
        }
    };
    const isUsedInOperand = (condition)=>{
        if (condition.leftOperand.type === "question" && condition.leftOperand.value === questionId) {
            if (condition.rightOperand && condition.rightOperand.type === "static") {
                if (Array.isArray(condition.rightOperand.value)) {
                    return condition.rightOperand.value.includes(optionId);
                } else {
                    return condition.rightOperand.value === optionId;
                }
            }
        }
        return false;
    };
    const isUsedInLogicRule = (logicRule)=>{
        return isUsedInCondition(logicRule.conditions);
    };
    return survey.questions.findIndex((question)=>question.logic?.some(isUsedInLogicRule));
};
const findVariableUsedInLogic = (survey, variableId)=>{
    const isUsedInCondition = (condition)=>{
        if (isConditionGroup(condition)) {
            // It's a TConditionGroup
            return condition.conditions.some(isUsedInCondition);
        } else {
            // It's a TSingleCondition
            return condition.rightOperand && isUsedInRightOperand(condition.rightOperand, "variable", variableId) || isUsedInLeftOperand(condition.leftOperand, "variable", variableId);
        }
    };
    const isUsedInAction = (action)=>{
        return action.objective === "calculate" && action.variableId === variableId;
    };
    const isUsedInLogicRule = (logicRule)=>{
        return isUsedInCondition(logicRule.conditions) || logicRule.actions.some(isUsedInAction);
    };
    return survey.questions.findIndex((question)=>question.logic?.some(isUsedInLogicRule));
};
const findHiddenFieldUsedInLogic = (survey, hiddenFieldId)=>{
    const isUsedInCondition = (condition)=>{
        if (isConditionGroup(condition)) {
            // It's a TConditionGroup
            return condition.conditions.some(isUsedInCondition);
        } else {
            // It's a TSingleCondition
            return condition.rightOperand && isUsedInRightOperand(condition.rightOperand, "hiddenField", hiddenFieldId) || isUsedInLeftOperand(condition.leftOperand, "hiddenField", hiddenFieldId);
        }
    };
    const isUsedInLogicRule = (logicRule)=>{
        return isUsedInCondition(logicRule.conditions);
    };
    return survey.questions.findIndex((question)=>question.logic?.some(isUsedInLogicRule));
};
const getSurveyFollowUpActionDefaultBody = (t)=>{
    return t("templates.follow_ups_modal_action_body");
};
const findEndingCardUsedInLogic = (survey, endingCardId)=>{
    const isUsedInAction = (action)=>{
        return action.objective === "jumpToQuestion" && action.target === endingCardId;
    };
    const isUsedInLogicRule = (logicRule)=>{
        return logicRule.actions.some(isUsedInAction);
    };
    return survey.questions.findIndex((question)=>question.logicFallback === endingCardId || question.logic?.some(isUsedInLogicRule));
};

// EXTERNAL MODULE: ./modules/ui/lib/utils.ts
var lib_utils = __webpack_require__(444671);
// EXTERNAL MODULE: ../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js
var react = __webpack_require__(891616);
;// ./modules/survey-follow-ups/components/follow-up-action-multi-email-input.tsx



const FollowUpActionMultiEmailInput = ({ emails, setEmails, isInvalid })=>{
    const [inputValue, setInputValue] = (0,react.useState)("");
    const [error, setError] = (0,react.useState)("");
    // Email validation regex
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const handleAddEmail = ()=>{
        const email = inputValue.trim();
        if (!email) return;
        if (!emailRegex.test(email)) {
            setError("Please enter a valid email address");
            return;
        }
        if (emails.includes(email)) {
            setError("This email has already been added");
            return;
        }
        setEmails([
            ...emails,
            email
        ]);
        setInputValue("");
        setError("");
    };
    const handleKeyDown = (e)=>{
        // Clear error when user starts typing
        if (error) setError("");
        // Handle email addition on Space or Comma
        if (e.key === " " || e.key === ",") {
            e.preventDefault();
            handleAddEmail();
        }
        // Handle backspace to remove last email
        if (e.key === "Backspace" && inputValue === "" && emails.length > 0) {
            const newEmails = [
                ...emails
            ];
            setEmails(newEmails.slice(0, -1));
        }
    };
    const removeEmail = (indexToRemove)=>{
        setEmails(emails.filter((_, index)=>index !== indexToRemove));
    };
    const handleInputBlur = ()=>{
        handleAddEmail();
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: (0,lib_utils.cn)("w-full max-w-2xl"),
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: (0,lib_utils.cn)("flex flex-wrap items-center gap-2 rounded-md border px-2 py-1", isInvalid ? "border-red-500" : "border-slate-300"),
                children: [
                    emails.map((email, index)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "group flex items-center gap-1 rounded border border-slate-200 bg-slate-100 px-2 py-1 text-sm",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                    className: "text-slate-900",
                                    children: email
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("button", {
                                    onClick: ()=>removeEmail(index),
                                    className: "px-1 text-lg font-medium leading-none text-slate-500",
                                    children: "\xd7"
                                })
                            ]
                        }, index)),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("input", {
                        type: "text",
                        value: inputValue,
                        onChange: (e)=>setInputValue(e.target.value),
                        onKeyDown: handleKeyDown,
                        onBlur: handleInputBlur,
                        placeholder: emails.length === 0 ? "Write an email & press space bar" : "",
                        className: "min-w-[180px] flex-1 border-none p-0 py-1 text-sm placeholder:text-slate-400 focus:ring-0"
                    })
                ]
            }),
            error && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                className: "mt-1 text-sm text-red-500",
                children: error
            })
        ]
    });
};
/* harmony default export */ const follow_up_action_multi_email_input = (FollowUpActionMultiEmailInput);

// EXTERNAL MODULE: ./modules/ui/components/button/index.tsx
var components_button = __webpack_require__(248852);
// EXTERNAL MODULE: ./modules/ui/components/checkbox/index.tsx
var components_checkbox = __webpack_require__(879387);
// EXTERNAL MODULE: ./modules/ui/components/editor/styles-editor-frontend.css
var styles_editor_frontend = __webpack_require__(673398);
// EXTERNAL MODULE: ./modules/ui/components/editor/styles-editor.css
var styles_editor = __webpack_require__(403275);
;// ../../node_modules/lexical/Lexical.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function Lexical_prod_e(e){return{}}const Lexical_prod_t={},Lexical_prod_n={},Lexical_prod_r={},Lexical_prod_i={},Lexical_prod_s={},Lexical_prod_o={},Lexical_prod_l={},Lexical_prod_c={},Lexical_prod_a={},Lexical_prod_u={},Lexical_prod_f={},Lexical_prod_d={},Lexical_prod_h={},Lexical_prod_g={},Lexical_prod_={},Lexical_prod_p={},Lexical_prod_y={},Lexical_prod_m={},Lexical_prod_x={},Lexical_prod_v={},Lexical_prod_S={},Lexical_prod_C={},Lexical_prod_T={},Lexical_prod_k={},Lexical_prod_b={},Lexical_prod_w={},Lexical_prod_N={},Lexical_prod_E={},Lexical_prod_P={},Lexical_prod_F={},Lexical_prod_L={},Lexical_prod_O={},Lexical_prod_D={},Lexical_prod_M={},Lexical_prod_I={},Lexical_prod_A={},Lexical_prod_B={},z={},Lexical_prod_W={},Lexical_prod_R={},Lexical_prod_K={},J={},Lexical_prod_$={},Lexical_prod_U={},V={},Lexical_prod_j="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,Lexical_prod_H=Lexical_prod_j&&"documentMode"in document?document.documentMode:null,q=Lexical_prod_j&&/Mac|iPod|iPhone|iPad/.test(navigator.platform),G=Lexical_prod_j&&/^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent),Q=!(!Lexical_prod_j||!("InputEvent"in window)||Lexical_prod_H)&&"getTargetRanges"in new window.InputEvent("input"),X=Lexical_prod_j&&/Version\/[\d.]+.*Safari/.test(navigator.userAgent),Y=Lexical_prod_j&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,Z=Lexical_prod_j&&/Android/.test(navigator.userAgent),Lexical_prod_ee=Lexical_prod_j&&/^(?=.*Chrome).*/i.test(navigator.userAgent),Lexical_prod_te=Lexical_prod_j&&Z&&Lexical_prod_ee,ne=Lexical_prod_j&&/AppleWebKit\/[\d.]+/.test(navigator.userAgent)&&!Lexical_prod_ee,re=1,ie=3,se=0,oe=1,le=2,ce=0,ae=1,ue=2,fe=1,de=2,he=4,ge=8,_e=16,pe=32,ye=64,me=128,xe=112|(3|he|ge)|me,ve=1,Se=2,Ce=3,Te=4,ke=5,be=6,we=X||Y||ne?" ":"​",Ne="\n\n",Ee=G?" ":we,Pe="֑-߿יִ-﷽ﹰ-ﻼ",Fe="A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿‎Ⰰ-﬜︀-﹯﻽-￿",Le=new RegExp("^[^"+Fe+"]*["+Pe+"]"),Oe=new RegExp("^[^"+Pe+"]*["+Fe+"]"),De={bold:1,code:16,highlight:me,italic:2,strikethrough:he,subscript:32,superscript:64,underline:ge},Me={directionless:1,unmergeable:2},Ie={center:Se,end:be,justify:Te,left:ve,right:Ce,start:ke},Ae={[Se]:"center",[be]:"end",[Te]:"justify",[ve]:"left",[Ce]:"right",[ke]:"start"},Be={normal:0,segmented:2,token:1},ze={[ce]:"normal",[ue]:"segmented",[ae]:"token"};function We(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Re=We((function(e){const t=new URLSearchParams;t.append("code",e);for(let e=1;e<arguments.length;e++)t.append("v",arguments[e]);throw Error(`Minified Lexical error #${e}; visit https://lexical.dev/docs/error?${t} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));function Ke(...e){const t=[];for(const n of e)if(n&&"string"==typeof n)for(const[e]of n.matchAll(/\S+/g))t.push(e);return t}const Je=100;let $e=!1,Ue=0;function Ve(e){Ue=e.timeStamp}function je(e,t,n){const r="BR"===e.nodeName,i=t.__lexicalLineBreak;return i&&(e===i||r&&e.previousSibling===i)||r&&void 0!==kt(e,n)}function He(e,t,n){const r=vn(n._window);let i=null,s=null;null!==r&&r.anchorNode===e&&(i=r.anchorOffset,s=r.focusOffset);const o=e.nodeValue;null!==o&&zt(t,o,i,s,!1)}function qe(e,t,n){if(ki(e)){const t=e.anchor.getNode();if(t.is(n)&&e.format!==t.getFormat())return!1}return t.nodeType===ie&&n.isAttached()}function Ge(e,t,n,r){for(let i=e;i&&!An(i);i=rn(i)){const e=kt(i,t);if(void 0!==e){const t=Ct(e,n);if(t)return Es(t)?void 0:[i,t]}else if(i===r)return[r,Pt(n)]}}function Qe(e,t,n){$e=!0;const r=performance.now()-Ue>Je;try{Ss(e,(()=>{const i=Ri()||function(e){return e.getEditorState().read((()=>{const e=Ri();return null!==e?e.clone():null}))}(e),s=new Map,o=e.getRootElement(),l=e._editorState,c=e._blockCursorElement;let a=!1,u="";for(let n=0;n<t.length;n++){const f=t[n],d=f.type,h=f.target,g=Ge(h,e,l,o);if(!g)continue;const[_,p]=g;if("characterData"===d)r&&hi(p)&&qe(i,h,p)&&He(h,p,e);else if("childList"===d){a=!0;const t=f.addedNodes;for(let n=0;n<t.length;n++){const r=t[n],i=Tt(r),s=r.parentNode;if(null!=s&&r!==c&&null===i&&!je(r,s,e)){if(G){const e=r.innerText||r.nodeValue;e&&(u+=e)}s.removeChild(r)}}const n=f.removedNodes,r=n.length;if(r>0){let t=0;for(let i=0;i<r;i++){const r=n[i];(je(r,h,e)||c===r)&&(h.appendChild(r),t++)}r!==t&&s.set(_,p)}}}if(s.size>0)for(const[t,n]of s)n.reconcileObservedMutation(t,e);const f=n.takeRecords();if(f.length>0){for(let t=0;t<f.length;t++){const n=f[t],r=n.addedNodes,i=n.target;for(let t=0;t<r.length;t++){const n=r[t],s=n.parentNode;null==s||"BR"!==n.nodeName||je(n,i,e)||s.removeChild(n)}}n.takeRecords()}null!==i&&(a&&(i.dirty=!0,Ft(i)),G&&Zt(e)&&i.insertRawText(u))}))}finally{$e=!1}}function Xe(e){const t=e._observer;if(null!==t){Qe(e,t.takeRecords(),t)}}function Ye(e){!function(e){0===Ue&&an(e).addEventListener("textInput",Ve,!0)}(e),e._observer=new MutationObserver(((t,n)=>{Qe(e,t,n)}))}function Ze(e,t){const n=e.__mode,r=e.__format,i=e.__style,s=t.__mode,o=t.__format,l=t.__style;return!(null!==n&&n!==s||null!==r&&r!==o||null!==i&&i!==l)}function et(e,t){const n=e.mergeWithSibling(t),r=ls()._normalizedNodes;return r.add(e.__key),r.add(t.__key),n}function tt(e){let t,n,r=e;if(""!==r.__text||!r.isSimpleText()||r.isUnmergeable()){for(;null!==(t=r.getPreviousSibling())&&hi(t)&&t.isSimpleText()&&!t.isUnmergeable();){if(""!==t.__text){if(Ze(t,r)){r=et(t,r);break}break}t.remove()}for(;null!==(n=r.getNextSibling())&&hi(n)&&n.isSimpleText()&&!n.isUnmergeable();){if(""!==n.__text){if(Ze(r,n)){r=et(r,n);break}break}n.remove()}}else r.remove()}function nt(e){return rt(e.anchor),rt(e.focus),e}function rt(e){for(;"element"===e.type;){const t=e.getNode(),n=e.offset;let r,i;if(n===t.getChildrenSize()?(r=t.getChildAtIndex(n-1),i=!0):(r=t.getChildAtIndex(n),i=!1),hi(r)){e.set(r.__key,i?r.getTextContentSize():0,"text");break}if(!bs(r))break;e.set(r.__key,i?r.getChildrenSize():0,"element")}}let it=1;function st(){it=1}const ot="function"==typeof queueMicrotask?queueMicrotask:e=>{Promise.resolve().then(e)};function lt(e){const t=document.activeElement;if(null===t)return!1;const n=t.nodeName;return Es(bt(e))&&("INPUT"===n||"TEXTAREA"===n||"true"===t.contentEditable&&null==ft(t))}function ct(e,t,n){const r=e.getRootElement();try{return null!==r&&r.contains(t)&&r.contains(n)&&null!==t&&!lt(t)&&ut(t)===e}catch(e){return!1}}function at(e){return e instanceof Hs}function ut(e){let t=e;for(;null!=t;){const e=ft(t);if(at(e))return e;t=rn(t)}return null}function ft(e){return e?e.__lexicalEditor:null}function dt(e){return e.isToken()||e.isSegmented()}function ht(e){return e.nodeType===ie}function gt(e){let t=e;for(;null!=t;){if(ht(t))return t;t=t.firstChild}return null}function _t(e,t,n){const r=De[t];if(null!==n&&(e&r)==(n&r))return e;let i=e^r;return"subscript"===t?i&=~De.superscript:"superscript"===t&&(i&=~De.subscript),i}function pt(e){return hi(e)||Gr(e)||Es(e)}function yt(e,t){if(null!=t)return void(e.__key=t);is(),ss();const n=ls(),r=os(),i=""+it++;r._nodeMap.set(i,e),bs(e)?n._dirtyElements.set(i,!0):n._dirtyLeaves.add(i),n._cloneNotNeeded.add(i),n._dirtyType=oe,e.__key=i}function mt(e){const t=e.getParent();if(null!==t){const n=e.getWritable(),r=t.getWritable(),i=e.getPreviousSibling(),s=e.getNextSibling();if(null===i)if(null!==s){const e=s.getWritable();r.__first=s.__key,e.__prev=null}else r.__first=null;else{const e=i.getWritable();if(null!==s){const t=s.getWritable();t.__prev=e.__key,e.__next=t.__key}else e.__next=null;n.__prev=null}if(null===s)if(null!==i){const e=i.getWritable();r.__last=i.__key,e.__next=null}else r.__last=null;else{const e=s.getWritable();if(null!==i){const t=i.getWritable();t.__next=e.__key,e.__prev=t.__key}else e.__prev=null;n.__next=null}r.__size--,n.__parent=null}}function xt(e){ss();const t=e.getLatest(),n=t.__parent,r=os(),i=ls(),s=r._nodeMap,o=i._dirtyElements;null!==n&&function(e,t,n){let r=e;for(;null!==r;){if(n.has(r))return;const e=t.get(r);if(void 0===e)break;n.set(r,!1),r=e.__parent}}(n,s,o);const l=t.__key;i._dirtyType=oe,bs(e)?o.set(l,!0):i._dirtyLeaves.add(l)}function vt(e){is();const t=ls(),n=t._compositionKey;if(e!==n){if(t._compositionKey=e,null!==n){const e=Ct(n);null!==e&&e.getWritable()}if(null!==e){const t=Ct(e);null!==t&&t.getWritable()}}}function St(){if(rs())return null;return ls()._compositionKey}function Ct(e,t){const n=(t||os())._nodeMap.get(e);return void 0===n?null:n}function Tt(e,t){const n=kt(e,ls());return void 0!==n?Ct(n,t):null}function kt(e,t){return e[`__lexicalKey_${t._key}`]}function bt(e,t){let n=e;for(;null!=n;){const e=Tt(n,t);if(null!==e)return e;n=rn(n)}return null}function wt(e){const t=e._decorators,n=Object.assign({},t);return e._pendingDecorators=n,n}function Nt(e){return e.read((()=>Et().getTextContent()))}function Et(){return Pt(os())}function Pt(e){return e._nodeMap.get("root")}function Ft(e){is();const t=os();null!==e&&(e.dirty=!0,e.setCachedNodes(null)),t._selection=e}function Lt(e){const t=ls(),n=function(e,t){let n=e;for(;null!=n;){const e=kt(n,t);if(void 0!==e)return e;n=rn(n)}return null}(e,t);if(null===n){return e===t.getRootElement()?Ct("root"):null}return Ct(n)}function Ot(e,t){return t?e.getTextContentSize():0}function Dt(e){return/[\uD800-\uDBFF][\uDC00-\uDFFF]/g.test(e)}function Mt(e){const t=[];let n=e;for(;null!==n;)t.push(n),n=n._parentEditor;return t}function It(){return Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,5)}function At(e){return e.nodeType===ie?e.nodeValue:null}function Bt(e,t,n){const r=vn(t._window);if(null===r)return;const i=r.anchorNode;let{anchorOffset:s,focusOffset:o}=r;if(null!==i){let t=At(i);const r=bt(i);if(null!==t&&hi(r)){if(t===we&&n){const e=n.length;t=n,s=e,o=e}null!==t&&zt(r,t,s,o,e)}}}function zt(e,t,n,r,i){let s=e;if(s.isAttached()&&(i||!s.isDirty())){const o=s.isComposing();let l=t;(o||i)&&t[t.length-1]===we&&(l=t.slice(0,-1));const c=s.getTextContent();if(i||l!==c){if(""===l){if(vt(null),X||Y||ne)s.remove();else{const e=ls();setTimeout((()=>{e.update((()=>{s.isAttached()&&s.remove()}))}),20)}return}const t=s.getParent(),i=Ki(),c=s.getTextContentSize(),a=St(),u=s.getKey();if(s.isToken()||null!==a&&u===a&&!o||ki(i)&&(null!==t&&!t.canInsertTextBefore()&&0===i.anchor.offset||i.anchor.key===e.__key&&0===i.anchor.offset&&!s.canInsertTextBefore()&&!o||i.focus.key===e.__key&&i.focus.offset===c&&!s.canInsertTextAfter()&&!o))return void s.markDirty();const f=Ri();if(!ki(f)||null===n||null===r)return void s.setTextContent(l);if(f.setTextNodeRange(s,n,s,r),s.isSegmented()){const e=di(s.getTextContent());s.replace(e),s=e}s.setTextContent(l)}}}function Wt(e,t){if(t.isSegmented())return!0;if(!e.isCollapsed())return!1;const n=e.anchor.offset,r=t.getParentOrThrow(),i=t.isToken();return 0===n?!t.canInsertTextBefore()||!r.canInsertTextBefore()&&!t.isComposing()||i||function(e){const t=e.getPreviousSibling();return(hi(t)||bs(t)&&t.isInline())&&!t.canInsertTextAfter()}(t):n===t.getTextContentSize()&&(!t.canInsertTextAfter()||!r.canInsertTextAfter()&&!t.isComposing()||i)}function Rt(e){return"ArrowLeft"===e}function Kt(e){return"ArrowRight"===e}function Jt(e,t){return q?e:t}function $t(e){return"Enter"===e}function Ut(e){return"Backspace"===e}function Vt(e){return"Delete"===e}function jt(e,t,n){return"a"===e.toLowerCase()&&Jt(t,n)}function Ht(){const e=Et();Ft(nt(e.select(0,e.getChildrenSize())))}function qt(e,t){void 0===e.__lexicalClassNameCache&&(e.__lexicalClassNameCache={});const n=e.__lexicalClassNameCache,r=n[t];if(void 0!==r)return r;const i=e[t];if("string"==typeof i){const e=Ke(i);return n[t]=e,e}return i}function Gt(e,t,n,r,i){if(0===n.size)return;const s=r.__type,o=r.__key,l=t.get(s);void 0===l&&Re(33,s);const c=l.klass;let a=e.get(c);void 0===a&&(a=new Map,e.set(c,a));const u=a.get(o),f="destroyed"===u&&"created"===i;(void 0===u||f)&&a.set(o,f?"updated":i)}function Qt(e){const t=e.getType(),n=os();if(n._readOnly){const e=On(n).get(t);return e?Array.from(e.values()):[]}const r=n._nodeMap,i=[];for(const[,n]of r)n instanceof e&&n.__type===t&&n.isAttached()&&i.push(n);return i}function Xt(e,t,n){const r=e.getParent();let i=n,s=e;return null!==r&&(t&&0===n?(i=s.getIndexWithinParent(),s=r):t||n!==s.getChildrenSize()||(i=s.getIndexWithinParent()+1,s=r)),s.getChildAtIndex(t?i-1:i)}function Yt(e,t){const n=e.offset;if("element"===e.type){return Xt(e.getNode(),t,n)}{const r=e.getNode();if(t&&0===n||!t&&n===r.getTextContentSize()){const e=t?r.getPreviousSibling():r.getNextSibling();return null===e?Xt(r.getParentOrThrow(),t,r.getIndexWithinParent()+(t?0:1)):e}}return null}function Zt(e){const t=an(e).event,n=t&&t.inputType;return"insertFromPaste"===n||"insertFromPasteAsQuotation"===n}function en(e,t,n){return ms(e,t,n)}function tn(e){return!Fs(e)&&!e.isLastChild()&&!e.isInline()}function nn(e,t){const n=e._keyToDOMMap.get(t);return void 0===n&&Re(75,t),n}function rn(e){const t=e.assignedSlot||e.parentElement;return null!==t&&11===t.nodeType?t.host:t}function sn(e){return ls()._updateTags.has(e)}function on(e){is();ls()._updateTags.add(e)}function ln(e){is();ls()._deferred.push(e)}function cn(e,t){let n=e.getParent();for(;null!==n;){if(n.is(t))return!0;n=n.getParent()}return!1}function an(e){const t=e._window;return null===t&&Re(78),t}function un(e){return bs(e)&&e.isInline()||Es(e)&&e.isInline()}function fn(e){let t=e.getParentOrThrow();for(;null!==t;){if(dn(t))return t;t=t.getParentOrThrow()}return t}function dn(e){return Fs(e)||bs(e)&&e.isShadowRoot()}function hn(e){const t=e.constructor.clone(e);return yt(t,null),t}function gn(e){const t=ls(),n=e.constructor.getType(),r=t._nodes.get(n);void 0===r&&Re(200,e.constructor.name,n);const{replace:i,replaceWithKlass:s}=r;if(null!==i){const t=i(e),r=t.constructor;return null!==s?t instanceof s||Re(201,s.name,s.getType(),r.name,r.getType(),e.constructor.name,n):t instanceof e.constructor&&r!==e.constructor||Re(202,r.name,r.getType(),e.constructor.name,n),t.__key===e.__key&&Re(203,e.constructor.name,n,r.name,r.getType()),t}return e}function _n(e,t){!Fs(e.getParent())||bs(t)||Es(t)||Re(99)}function pn(e){const t=Ct(e);return null===t&&Re(63,e),t}function yn(e){return(Es(e)||bs(e)&&!e.canBeEmpty())&&!e.isInline()}function mn(e,t,n){n.style.removeProperty("caret-color"),t._blockCursorElement=null;const r=e.parentElement;null!==r&&r.removeChild(e)}function xn(e,t,n){let r=e._blockCursorElement;if(ki(n)&&n.isCollapsed()&&"element"===n.anchor.type&&t.contains(document.activeElement)){const i=n.anchor,s=i.getNode(),o=i.offset;let l=!1,c=null;if(o===s.getChildrenSize()){yn(s.getChildAtIndex(o-1))&&(l=!0)}else{const t=s.getChildAtIndex(o);if(null!==t&&yn(t)){const n=t.getPreviousSibling();(null===n||yn(n))&&(l=!0,c=e.getElementByKey(t.__key))}}if(l){const n=e.getElementByKey(s.__key);return null===r&&(e._blockCursorElement=r=function(e){const t=e.theme,n=document.createElement("div");n.contentEditable="false",n.setAttribute("data-lexical-cursor","true");let r=t.blockCursor;if(void 0!==r){if("string"==typeof r){const e=Ke(r);r=t.blockCursor=e}void 0!==r&&n.classList.add(...r)}return n}(e._config)),t.style.caretColor="transparent",void(null===c?n.appendChild(r):n.insertBefore(r,c))}}null!==r&&mn(r,e,t)}function vn(e){return Lexical_prod_j?(e||window).getSelection():null}function Sn(e,t){let n=e.getChildAtIndex(t);null==n&&(n=e),dn(e)&&Re(102);const r=e=>{const t=e.getParentOrThrow(),i=dn(t),s=e!==n||i?hn(e):e;if(i)return bs(e)&&bs(s)||Re(133),e.insertAfter(s),[e,s,s];{const[n,i,o]=r(t),l=e.getNextSiblings();return o.append(s,...l),[n,i,s]}},[i,s]=r(n);return[i,s]}function Cn(e){return Tn(e)&&"A"===e.tagName}function Tn(e){return 1===e.nodeType}function kn(e){return 11===e.nodeType}function bn(e){const t=new RegExp(/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var|#text)$/,"i");return null!==e.nodeName.match(t)}function wn(e){const t=new RegExp(/^(address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hr|li|main|nav|noscript|ol|p|pre|section|table|td|tfoot|ul|video)$/,"i");return null!==e.nodeName.match(t)}function Nn(e){if(Es(e)&&!e.isInline())return!0;if(!bs(e)||dn(e))return!1;const t=e.getFirstChild(),n=null===t||Gr(t)||hi(t)||t.isInline();return!e.isInline()&&!1!==e.canBeEmpty()&&n}function En(e,t){let n=e;for(;null!==n&&null!==n.getParent()&&!t(n);)n=n.getParentOrThrow();return t(n)?n:null}function Pn(){return ls()}const Fn=new WeakMap,Ln=new Map;function On(e){if(!e._readOnly&&e.isEmpty())return Ln;e._readOnly||Re(192);let t=Fn.get(e);if(!t){t=new Map,Fn.set(e,t);for(const[n,r]of e._nodeMap){const e=r.__type;let i=t.get(e);i||(i=new Map,t.set(e,i)),i.set(n,r)}}return t}function Dn(e){const t=e.constructor.clone(e);return t.afterCloneFrom(e),t}function Mn(e,t){const n=(parseInt(e.style.paddingInlineStart,10)||0)/40;t.setIndent(n)}function In(e){e.__lexicalUnmanaged=!0}function An(e){return!0===e.__lexicalUnmanaged}function Bn(e,t,n,r,i,s){let o=e.getFirstChild();for(;null!==o;){const e=o.__key;o.__parent===t&&(bs(o)&&Bn(o,e,n,r,i,s),n.has(e)||s.delete(e),i.push(e)),o=o.getNextSibling()}}let zn,Wn,Rn,Kn,Jn,$n,Un,Vn,jn,Hn,qn="",Gn="",Qn=null,Xn="",Yn="",Zn=!1,er=!1,tr=null;function nr(e,t){const n=Un.get(e);if(null!==t){const n=xr(e);n.parentNode===t&&t.removeChild(n)}if(Vn.has(e)||Wn._keyToDOMMap.delete(e),bs(n)){const e=gr(n,Un);rr(e,0,e.length-1,null)}void 0!==n&&Gt(Hn,Rn,Kn,n,"destroyed")}function rr(e,t,n,r){let i=t;for(;i<=n;++i){const t=e[i];void 0!==t&&nr(t,r)}}function ir(e,t){e.setProperty("text-align",t)}const sr="40px";function or(e,t){const n=zn.theme.indent;if("string"==typeof n){const r=e.classList.contains(n);t>0&&!r?e.classList.add(n):t<1&&r&&e.classList.remove(n)}const r=getComputedStyle(e).getPropertyValue("--lexical-indent-base-value")||sr;e.style.setProperty("padding-inline-start",0===t?"":`calc(${t} * ${r})`)}function lr(e,t){const n=e.style;0===t?ir(n,""):t===ve?ir(n,"left"):t===Se?ir(n,"center"):t===Ce?ir(n,"right"):t===Te?ir(n,"justify"):t===ke?ir(n,"start"):t===be&&ir(n,"end")}function cr(e,t){const n=Vn.get(e);void 0===n&&Re(60);const r=n.createDOM(zn,Wn);if(function(e,t,n){const r=n._keyToDOMMap;(function(e,t,n){e[`__lexicalKey_${t._key}`]=n})(t,n,e),r.set(e,t)}(e,r,Wn),hi(n)?r.setAttribute("data-lexical-text","true"):Es(n)&&r.setAttribute("data-lexical-decorator","true"),bs(n)){const e=n.__indent,t=n.__size;if(0!==e&&or(r,e),0!==t){const e=t-1;!function(e,t,n,r){const i=Gn;Gn="",ar(e,n,0,t,n.getDOMSlot(r)),dr(n,r),Gn=i}(gr(n,Vn),e,n,r)}const i=n.__format;0!==i&&lr(r,i),n.isInline()||fr(null,n,r),tn(n)&&(qn+=Ne,Yn+=Ne)}else{const t=n.getTextContent();if(Es(n)){const t=n.decorate(Wn,zn);null!==t&&pr(e,t),r.contentEditable="false"}else hi(n)&&(n.isDirectionless()||(Gn+=t));qn+=t,Yn+=t}return null!==t&&t.insertChild(r),Gt(Hn,Rn,Kn,n,"created"),r}function ar(e,t,n,r,i){const s=qn;qn="";let o=n;for(;o<=r;++o){cr(e[o],i);const t=Vn.get(e[o]);null!==t&&hi(t)&&(null===Qn&&(Qn=t.getFormat()),""===Xn&&(Xn=t.getStyle()))}tn(t)&&(qn+=Ne);i.element.__lexicalTextContent=qn,qn=s+qn}function ur(e,t){if(e){const n=e.__last;if(n){const e=t.get(n);if(e)return Gr(e)?"line-break":Es(e)&&e.isInline()?"decorator":null}return"empty"}return null}function fr(e,t,n){const r=ur(e,Un),i=ur(t,Vn);r!==i&&t.getDOMSlot(n).setManagedLineBreak(i)}function dr(e,t){const n=t.__lexicalDirTextContent||"",r=t.__lexicalDir||"";if(n!==Gn||r!==tr){const n=""===Gn,s=n?tr:(i=Gn,Le.test(i)?"rtl":Oe.test(i)?"ltr":null);if(s!==r){const i=t.classList,o=zn.theme;let l=null!==r?o[r]:void 0,c=null!==s?o[s]:void 0;if(void 0!==l){if("string"==typeof l){const e=Ke(l);l=o[r]=e}i.remove(...l)}if(null===s||n&&"ltr"===s)t.removeAttribute("dir");else{if(void 0!==c){if("string"==typeof c){const e=Ke(c);c=o[s]=e}void 0!==c&&i.add(...c)}t.dir=s}if(!er){e.getWritable().__dir=s}}tr=s,t.__lexicalDirTextContent=Gn,t.__lexicalDir=s}var i}function hr(e,t,n){const r=Gn;var i;Gn="",Qn=null,Xn="",function(e,t,n){const r=qn,i=e.__size,s=t.__size;qn="";const o=n.element;if(1===i&&1===s){const n=e.__first,r=t.__first;if(n===r)_r(n,o);else{const e=xr(n),t=cr(r,null);try{o.replaceChild(t,e)}catch(i){if("object"==typeof i&&null!=i){const s=`${i.toString()} Parent: ${o.tagName}, new child: {tag: ${t.tagName} key: ${r}}, old child: {tag: ${e.tagName}, key: ${n}}.`;throw new Error(s)}throw i}nr(n,null)}const i=Vn.get(r);hi(i)&&(null===Qn&&(Qn=i.getFormat()),""===Xn&&(Xn=i.getStyle()))}else{const r=gr(e,Un),l=gr(t,Vn);if(r.length!==i&&Re(227),l.length!==s&&Re(228),0===i)0!==s&&ar(l,t,0,s-1,n);else if(0===s){if(0!==i){const e=null==n.after&&null==n.before&&null==n.element.__lexicalLineBreak;rr(r,0,i-1,e?null:o),e&&(o.textContent="")}}else!function(e,t,n,r,i,s){const o=r-1,l=i-1;let c,a,u=s.getFirstChild(),f=0,d=0;for(;f<=o&&d<=l;){const e=t[f],r=n[d];if(e===r)u=yr(_r(r,s.element)),f++,d++;else{void 0===c&&(c=new Set(t)),void 0===a&&(a=new Set(n));const i=a.has(e),o=c.has(r);if(i)if(o){const e=nn(Wn,r);e===u?u=yr(_r(r,s.element)):(s.withBefore(u).insertChild(e),_r(r,s.element)),f++,d++}else cr(r,s.withBefore(u)),d++;else u=yr(xr(e)),nr(e,s.element),f++}const i=Vn.get(r);null!==i&&hi(i)&&(null===Qn&&(Qn=i.getFormat()),""===Xn&&(Xn=i.getStyle()))}const h=f>o,g=d>l;if(h&&!g){const t=n[l+1],r=void 0===t?null:Wn.getElementByKey(t);ar(n,e,d,l,s.withBefore(r))}else g&&!h&&rr(t,f,o,s.element)}(t,r,l,i,s,n)}tn(t)&&(qn+=Ne);o.__lexicalTextContent=qn,qn=r+qn}(e,t,t.getDOMSlot(n)),dr(t,n),Ws(i=t)&&null!=Qn&&Qn!==i.__textFormat&&!er&&(i.setTextFormat(Qn),i.setTextStyle(Xn)),function(e){Ws(e)&&""!==Xn&&Xn!==e.__textStyle&&!er&&e.setTextStyle(Xn)}(t),Gn=r}function gr(e,t){const n=[];let r=e.__first;for(;null!==r;){const e=t.get(r);void 0===e&&Re(101),n.push(r),r=e.__next}return n}function _r(e,t){const n=Un.get(e);let r=Vn.get(e);void 0!==n&&void 0!==r||Re(61);const i=Zn||$n.has(e)||Jn.has(e),s=nn(Wn,e);if(n===r&&!i){if(bs(n)){const e=s.__lexicalTextContent;void 0!==e&&(qn+=e,Yn+=e);const t=s.__lexicalDirTextContent;void 0!==t&&(Gn+=t)}else{const e=n.getTextContent();hi(n)&&!n.isDirectionless()&&(Gn+=e),Yn+=e,qn+=e}return s}if(n!==r&&i&&Gt(Hn,Rn,Kn,r,"updated"),r.updateDOM(n,s,zn)){const n=cr(e,null);return null===t&&Re(62),t.replaceChild(n,s),nr(e,null),n}if(bs(n)&&bs(r)){const e=r.__indent;e!==n.__indent&&or(s,e);const t=r.__format;t!==n.__format&&lr(s,t),i&&(hr(n,r,s),Fs(r)||r.isInline()||fr(n,r,s)),tn(r)&&(qn+=Ne,Yn+=Ne)}else{const t=r.getTextContent();if(Es(r)){const t=r.decorate(Wn,zn);null!==t&&pr(e,t)}else hi(r)&&!r.isDirectionless()&&(Gn+=t);qn+=t,Yn+=t}if(!er&&Fs(r)&&r.__cachedText!==Yn){const e=r.getWritable();e.__cachedText=Yn,r=e}return s}function pr(e,t){let n=Wn._pendingDecorators;const r=Wn._decorators;if(null===n){if(r[e]===t)return;n=wt(Wn)}n[e]=t}function yr(e){let t=e.nextSibling;return null!==t&&t===Wn._blockCursorElement&&(t=t.nextSibling),t}function mr(e,t,n,r,i,s){qn="",Yn="",Gn="",Zn=r===le,tr=null,Wn=n,zn=n._config,Rn=n._nodes,Kn=Wn._listeners.mutation,Jn=i,$n=s,Un=e._nodeMap,Vn=t._nodeMap,er=t._readOnly,jn=new Map(n._keyToDOMMap);const o=new Map;return Hn=o,_r("root",null),Wn=void 0,Rn=void 0,Jn=void 0,$n=void 0,Un=void 0,Vn=void 0,zn=void 0,jn=void 0,Hn=void 0,o}function xr(e){const t=jn.get(e);return void 0===t&&Re(75,e),t}const vr=Object.freeze({}),Sr=30,Cr=[["keydown",function(e,t){if(Tr=e.timeStamp,kr=e.key,t.isComposing())return;const{key:n,shiftKey:r,ctrlKey:o,metaKey:l,altKey:c}=e;if(en(t,Lexical_prod_,e))return;if(null==n)return;if(function(e,t,n,r){return Kt(e)&&!t&&!r&&!n}(n,o,c,l))en(t,Lexical_prod_p,e);else if(function(e,t,n,r,i){return Kt(e)&&!r&&!n&&(t||i)}(n,o,r,c,l))en(t,Lexical_prod_y,e);else if(function(e,t,n,r){return Rt(e)&&!t&&!r&&!n}(n,o,c,l))en(t,Lexical_prod_m,e);else if(function(e,t,n,r,i){return Rt(e)&&!r&&!n&&(t||i)}(n,o,r,c,l))en(t,Lexical_prod_x,e);else if(function(e,t,n){return function(e){return"ArrowUp"===e}(e)&&!t&&!n}(n,o,l))en(t,Lexical_prod_v,e);else if(function(e,t,n){return function(e){return"ArrowDown"===e}(e)&&!t&&!n}(n,o,l))en(t,Lexical_prod_S,e);else if(function(e,t){return $t(e)&&t}(n,r))Fr=!0,en(t,Lexical_prod_C,e);else if(function(e){return" "===e}(n))en(t,Lexical_prod_T,e);else if(function(e,t){return q&&t&&"o"===e.toLowerCase()}(n,o))e.preventDefault(),Fr=!0,en(t,Lexical_prod_s,!0);else if(function(e,t){return $t(e)&&!t}(n,r))Fr=!1,en(t,Lexical_prod_C,e);else if(function(e,t,n,r){return q?!t&&!n&&(Ut(e)||"h"===e.toLowerCase()&&r):!(r||t||n)&&Ut(e)}(n,c,l,o))Ut(n)?en(t,Lexical_prod_k,e):(e.preventDefault(),en(t,Lexical_prod_i,!0));else if(function(e){return"Escape"===e}(n))en(t,Lexical_prod_b,e);else if(function(e,t,n,r,i){return q?!(n||r||i)&&(Vt(e)||"d"===e.toLowerCase()&&t):!(t||r||i)&&Vt(e)}(n,o,r,c,l))Vt(n)?en(t,Lexical_prod_w,e):(e.preventDefault(),en(t,Lexical_prod_i,!1));else if(function(e,t,n){return Ut(e)&&(q?t:n)}(n,c,o))e.preventDefault(),en(t,Lexical_prod_u,!0);else if(function(e,t,n){return Vt(e)&&(q?t:n)}(n,c,o))e.preventDefault(),en(t,Lexical_prod_u,!1);else if(function(e,t){return q&&t&&Ut(e)}(n,l))e.preventDefault(),en(t,Lexical_prod_f,!0);else if(function(e,t){return q&&t&&Vt(e)}(n,l))e.preventDefault(),en(t,Lexical_prod_f,!1);else if(function(e,t,n,r){return"b"===e.toLowerCase()&&!t&&Jt(n,r)}(n,c,l,o))e.preventDefault(),en(t,Lexical_prod_d,"bold");else if(function(e,t,n,r){return"u"===e.toLowerCase()&&!t&&Jt(n,r)}(n,c,l,o))e.preventDefault(),en(t,Lexical_prod_d,"underline");else if(function(e,t,n,r){return"i"===e.toLowerCase()&&!t&&Jt(n,r)}(n,c,l,o))e.preventDefault(),en(t,Lexical_prod_d,"italic");else if(function(e,t,n,r){return"Tab"===e&&!t&&!n&&!r}(n,c,o,l))en(t,Lexical_prod_N,e);else if(function(e,t,n,r){return"z"===e.toLowerCase()&&!t&&Jt(n,r)}(n,r,l,o))e.preventDefault(),en(t,Lexical_prod_h,void 0);else if(function(e,t,n,r){return q?"z"===e.toLowerCase()&&n&&t:"y"===e.toLowerCase()&&r||"z"===e.toLowerCase()&&r&&t}(n,r,l,o))e.preventDefault(),en(t,Lexical_prod_g,void 0);else{const i=t._editorState._selection;null===i||ki(i)?!G&&jt(n,l,o)&&(e.preventDefault(),en(t,z,e)):!function(e,t,n,r){return!t&&"c"===e.toLowerCase()&&(q?n:r)}(n,r,l,o)?!function(e,t,n,r){return!t&&"x"===e.toLowerCase()&&(q?n:r)}(n,r,l,o)?jt(n,l,o)&&(e.preventDefault(),en(t,z,e)):(e.preventDefault(),en(t,Lexical_prod_B,e)):(e.preventDefault(),en(t,Lexical_prod_A,e))}(function(e,t,n,r){return e||t||n||r})(o,r,c,l)&&en(t,V,e)}],["pointerdown",function(e,t){const n=e.target,r=e.pointerType;n instanceof Node&&"touch"!==r&&Ss(t,(()=>{Es(bt(n))||(Pr=!0)}))}],["compositionstart",function(e,t){Ss(t,(()=>{const n=Ri();if(ki(n)&&!t.isComposing()){const r=n.anchor,i=n.anchor.getNode();vt(r.key),(e.timeStamp<Tr+Sr||"element"===r.type||!n.isCollapsed()||i.getFormat()!==n.format||hi(i)&&i.getStyle()!==n.style)&&en(t,Lexical_prod_l,Ee)}}))}],["compositionend",function(e,t){G?Lr=!0:Ss(t,(()=>{Br(t,e.data)}))}],["input",function(e,t){e.stopPropagation(),Ss(t,(()=>{const n=Ri(),r=e.data,i=Ar(e);if(null!=r&&ki(n)&&Dr(n,i,r,e.timeStamp,!1)){Lr&&(Br(t,r),Lr=!1);const i=n.anchor.getNode(),s=vn(t._window);if(null===s)return;const o=n.isBackward(),c=o?n.anchor.offset:n.focus.offset,a=o?n.focus.offset:n.anchor.offset;Q&&!n.isCollapsed()&&hi(i)&&null!==s.anchorNode&&i.getTextContent().slice(0,c)+r+i.getTextContent().slice(c+a)===At(s.anchorNode)||en(t,Lexical_prod_l,r);const u=r.length;G&&u>1&&"insertCompositionText"===e.inputType&&!t.isComposing()&&(n.anchor.offset-=u),X||Y||ne||!t.isComposing()||(Tr=0,vt(null))}else{Bt(!1,t,null!==r?r:void 0),Lr&&(Br(t,r||void 0),Lr=!1)}is(),Xe(ls())})),wr=null}],["click",function(e,t){Ss(t,(()=>{const n=Ri(),i=vn(t._window),s=Ki();if(i)if(ki(n)){const t=n.anchor,r=t.getNode();if("element"===t.type&&0===t.offset&&n.isCollapsed()&&!Fs(r)&&1===Et().getChildrenSize()&&r.getTopLevelElementOrThrow().isEmpty()&&null!==s&&n.is(s))i.removeAllRanges(),n.dirty=!0;else if(3===e.detail&&!n.isCollapsed()){r!==n.focus.getNode()&&(bs(r)?r.select(0):r.getParentOrThrow().select(0))}}else if("touch"===e.pointerType){const n=i.anchorNode;if(null!==n){const r=n.nodeType;if(r===re||r===ie){Ft(Wi(s,i,t,e))}}}en(t,Lexical_prod_r,e)}))}],["cut",vr],["copy",vr],["dragstart",vr],["dragover",vr],["dragend",vr],["paste",vr],["focus",vr],["blur",vr],["drop",vr]];Q&&Cr.push(["beforeinput",(e,t)=>function(e,t){const n=e.inputType,r=Ar(e);if("deleteCompositionText"===n||G&&Zt(t))return;if("insertCompositionText"===n)return;Ss(t,(()=>{const _=Ri();if("deleteContentBackward"===n){if(null===_){const e=Ki();if(!ki(e))return;Ft(e.clone())}if(ki(_)){const n=_.anchor.key===_.focus.key;if(p=e.timeStamp,"MediaLast"===kr&&p<Tr+Sr&&t.isComposing()&&n){if(vt(null),Tr=0,setTimeout((()=>{Ss(t,(()=>{vt(null)}))}),Sr),ki(_)){const e=_.anchor.getNode();e.markDirty(),_.format=e.getFormat(),hi(e)||Re(142),_.style=e.getStyle()}}else{vt(null),e.preventDefault();const r=_.anchor.getNode(),s=r.getTextContent(),o=r.canInsertTextAfter(),l=0===_.anchor.offset&&_.focus.offset===s.length;Lexical_prod_te&&n&&!l&&o||en(t,Lexical_prod_i,!0)}return}}var p;if(!ki(_))return;const y=e.data;null!==wr&&Bt(!1,t,wr),_.dirty&&null===wr||!_.isCollapsed()||Fs(_.anchor.getNode())||null===r||_.applyDOMRange(r),wr=null;const m=_.anchor,x=_.focus,v=m.getNode(),S=x.getNode();if("insertText"!==n&&"insertTranspose"!==n)switch(e.preventDefault(),n){case"insertFromYank":case"insertFromDrop":case"insertReplacementText":en(t,Lexical_prod_l,e);break;case"insertFromComposition":vt(null),en(t,Lexical_prod_l,e);break;case"insertLineBreak":vt(null),en(t,Lexical_prod_s,!1);break;case"insertParagraph":vt(null),Fr&&!Y?(Fr=!1,en(t,Lexical_prod_s,!1)):en(t,Lexical_prod_o,void 0);break;case"insertFromPaste":case"insertFromPasteAsQuotation":en(t,Lexical_prod_c,e);break;case"deleteByComposition":(function(e,t){return e!==t||bs(e)||bs(t)||!e.isToken()||!t.isToken()})(v,S)&&en(t,Lexical_prod_a,e);break;case"deleteByDrag":case"deleteByCut":en(t,Lexical_prod_a,e);break;case"deleteContent":en(t,Lexical_prod_i,!1);break;case"deleteWordBackward":en(t,Lexical_prod_u,!0);break;case"deleteWordForward":en(t,Lexical_prod_u,!1);break;case"deleteHardLineBackward":case"deleteSoftLineBackward":en(t,Lexical_prod_f,!0);break;case"deleteContentForward":case"deleteHardLineForward":case"deleteSoftLineForward":en(t,Lexical_prod_f,!1);break;case"formatStrikeThrough":en(t,Lexical_prod_d,"strikethrough");break;case"formatBold":en(t,Lexical_prod_d,"bold");break;case"formatItalic":en(t,Lexical_prod_d,"italic");break;case"formatUnderline":en(t,Lexical_prod_d,"underline");break;case"historyUndo":en(t,Lexical_prod_h,void 0);break;case"historyRedo":en(t,Lexical_prod_g,void 0)}else{if("\n"===y)e.preventDefault(),en(t,Lexical_prod_s,!1);else if(y===Ne)e.preventDefault(),en(t,Lexical_prod_o,void 0);else if(null==y&&e.dataTransfer){const t=e.dataTransfer.getData("text/plain");e.preventDefault(),_.insertRawText(t)}else null!=y&&Dr(_,r,y,e.timeStamp,!0)?(e.preventDefault(),en(t,Lexical_prod_l,y)):wr=y;br=e.timeStamp}}))}(e,t)]);let Tr=0,kr=null,br=0,wr=null;const Nr=new WeakMap;let Er=!1,Pr=!1,Fr=!1,Lr=!1,Or=[0,"",0,"root",0];function Dr(e,t,n,r,i){const s=e.anchor,o=e.focus,l=s.getNode(),c=ls(),a=vn(c._window),u=null!==a?a.anchorNode:null,f=s.key,d=c.getElementByKey(f),h=n.length;return f!==o.key||!hi(l)||(!i&&(!Q||br<r+50)||l.isDirty()&&h<2||Dt(n))&&s.offset!==o.offset&&!l.isComposing()||dt(l)||l.isDirty()&&h>1||(i||!Q)&&null!==d&&!l.isComposing()&&u!==gt(d)||null!==a&&null!==t&&(!t.collapsed||t.startContainer!==a.anchorNode||t.startOffset!==a.anchorOffset)||l.getFormat()!==e.format||l.getStyle()!==e.style||Wt(e,l)}function Mr(e,t){return null!==e&&null!==e.nodeValue&&e.nodeType===ie&&0!==t&&t!==e.nodeValue.length}function Ir(e,n,r){const{anchorNode:i,anchorOffset:s,focusNode:o,focusOffset:l}=e;Er&&(Er=!1,Mr(i,s)&&Mr(o,l))||Ss(n,(()=>{if(!r)return void Ft(null);if(!ct(n,i,o))return;const c=Ri();if(ki(c)){const t=c.anchor,r=t.getNode();if(c.isCollapsed()){"Range"===e.type&&e.anchorNode===e.focusNode&&(c.dirty=!0);const i=an(n).event,s=i?i.timeStamp:performance.now(),[o,l,a,u,f]=Or,d=Et(),h=!1===n.isComposing()&&""===d.getTextContent();if(s<f+200&&t.offset===a&&t.key===u)c.format=o,c.style=l;else if("text"===t.type)hi(r)||Re(141),c.format=r.getFormat(),c.style=r.getStyle();else if("element"===t.type&&!h){const e=t.getNode();c.style="",e instanceof As&&0===e.getChildrenSize()?(c.format=e.getTextFormat(),c.style=e.getTextStyle()):c.format=0}}else{const e=t.key,n=c.focus.key,r=c.getNodes(),i=r.length,o=c.isBackward(),a=o?l:s,u=o?s:l,f=o?n:e,d=o?e:n;let h=xe,g=!1;for(let e=0;e<i;e++){const t=r[e],n=t.getTextContentSize();if(hi(t)&&0!==n&&!(0===e&&t.__key===f&&a===n||e===i-1&&t.__key===d&&0===u)&&(g=!0,h&=t.getFormat(),0===h))break}c.format=g?h:0}}en(n,Lexical_prod_t,void 0)}))}function Ar(e){if(!e.getTargetRanges)return null;const t=e.getTargetRanges();return 0===t.length?null:t[0]}function Br(e,t){const n=e._compositionKey;if(vt(null),null!==n&&null!=t){if(""===t){const t=Ct(n),r=gt(e.getElementByKey(n));return void(null!==r&&null!==r.nodeValue&&hi(t)&&zt(t,r.nodeValue,null,null,!0))}if("\n"===t[t.length-1]){const t=Ri();if(ki(t)){const n=t.focus;return t.anchor.set(n.key,n.offset,n.type),void en(e,Lexical_prod_C,null)}}}Bt(!0,e,t)}function zr(e){let t=e.__lexicalEventHandles;return void 0===t&&(t=[],e.__lexicalEventHandles=t),t}const Wr=new Map;function Rr(e){const t=e.target,n=vn(null==t?null:9===t.nodeType?t.defaultView:t.ownerDocument.defaultView);if(null===n)return;const r=ut(n.anchorNode);if(null===r)return;Pr&&(Pr=!1,Ss(r,(()=>{const t=Ki(),i=n.anchorNode;if(null===i)return;const s=i.nodeType;if(s!==re&&s!==ie)return;Ft(Wi(t,n,r,e))})));const i=Mt(r),s=i[i.length-1],o=s._key,l=Wr.get(o),c=l||s;c!==r&&Ir(n,c,!1),Ir(n,r,!0),r!==s?Wr.set(o,r):l&&Wr.delete(o)}function Kr(e){e._lexicalHandled=!0}function Jr(e){return!0===e._lexicalHandled}function $r(e){const t=e.ownerDocument,n=Nr.get(t);void 0===n&&Re(162);const r=n-1;r>=0||Re(164),Nr.set(t,r),0===r&&t.removeEventListener("selectionchange",Rr);const i=ft(e);at(i)?(!function(e){if(null!==e._parentEditor){const t=Mt(e),n=t[t.length-1]._key;Wr.get(n)===e&&Wr.delete(n)}else Wr.delete(e._key)}(i),e.__lexicalEditor=null):i&&Re(198);const s=zr(e);for(let e=0;e<s.length;e++)s[e]();e.__lexicalEventHandles=[]}function Ur(e,t,n){is();const r=e.__key,i=e.getParent();if(null===i)return;const s=function(e){const t=Ri();if(!ki(t)||!bs(e))return t;const{anchor:n,focus:r}=t,i=n.getNode(),s=r.getNode();return cn(i,e)&&n.set(e.__key,0,"element"),cn(s,e)&&r.set(e.__key,0,"element"),t}(e);let o=!1;if(ki(s)&&t){const t=s.anchor,n=s.focus;t.key===r&&(Ui(t,e,i,e.getPreviousSibling(),e.getNextSibling()),o=!0),n.key===r&&(Ui(n,e,i,e.getPreviousSibling(),e.getNextSibling()),o=!0)}else wi(s)&&t&&e.isSelected()&&e.selectPrevious();if(ki(s)&&t&&!o){const t=e.getIndexWithinParent();mt(e),Ji(s,i,t,-1)}else mt(e);n||dn(i)||i.canBeEmpty()||!i.isEmpty()||Ur(i,t),t&&Fs(i)&&i.isEmpty()&&i.selectEnd()}class Vr{static getType(){Re(64,this.name)}static clone(e){Re(65,this.name)}afterCloneFrom(e){this.__parent=e.__parent,this.__next=e.__next,this.__prev=e.__prev}constructor(e){this.__type=this.constructor.getType(),this.__parent=null,this.__prev=null,this.__next=null,yt(this,e)}getType(){return this.__type}isInline(){Re(137,this.constructor.name)}isAttached(){let e=this.__key;for(;null!==e;){if("root"===e)return!0;const t=Ct(e);if(null===t)break;e=t.__parent}return!1}isSelected(e){const t=e||Ri();if(null==t)return!1;const n=t.getNodes().some((e=>e.__key===this.__key));if(hi(this))return n;if(ki(t)&&"element"===t.anchor.type&&"element"===t.focus.type){if(t.isCollapsed())return!1;const e=this.getParent();if(Es(this)&&this.isInline()&&e){const n=t.isBackward()?t.focus:t.anchor,r=n.getNode();if(n.offset===r.getChildrenSize()&&r.is(e)&&r.getLastChildOrThrow().is(this))return!1}}return n}getKey(){return this.__key}getIndexWithinParent(){const e=this.getParent();if(null===e)return-1;let t=e.getFirstChild(),n=0;for(;null!==t;){if(this.is(t))return n;n++,t=t.getNextSibling()}return-1}getParent(){const e=this.getLatest().__parent;return null===e?null:Ct(e)}getParentOrThrow(){const e=this.getParent();return null===e&&Re(66,this.__key),e}getTopLevelElement(){let e=this;for(;null!==e;){const t=e.getParent();if(dn(t))return bs(e)||e===this&&Es(e)||Re(194),e;e=t}return null}getTopLevelElementOrThrow(){const e=this.getTopLevelElement();return null===e&&Re(67,this.__key),e}getParents(){const e=[];let t=this.getParent();for(;null!==t;)e.push(t),t=t.getParent();return e}getParentKeys(){const e=[];let t=this.getParent();for(;null!==t;)e.push(t.__key),t=t.getParent();return e}getPreviousSibling(){const e=this.getLatest().__prev;return null===e?null:Ct(e)}getPreviousSiblings(){const e=[],t=this.getParent();if(null===t)return e;let n=t.getFirstChild();for(;null!==n&&!n.is(this);)e.push(n),n=n.getNextSibling();return e}getNextSibling(){const e=this.getLatest().__next;return null===e?null:Ct(e)}getNextSiblings(){const e=[];let t=this.getNextSibling();for(;null!==t;)e.push(t),t=t.getNextSibling();return e}getCommonAncestor(e){const t=this.getParents(),n=e.getParents();bs(this)&&t.unshift(this),bs(e)&&n.unshift(e);const r=t.length,i=n.length;if(0===r||0===i||t[r-1]!==n[i-1])return null;const s=new Set(n);for(let e=0;e<r;e++){const n=t[e];if(s.has(n))return n}return null}is(e){return null!=e&&this.__key===e.__key}isBefore(e){if(this===e)return!1;if(e.isParentOf(this))return!0;if(this.isParentOf(e))return!1;const t=this.getCommonAncestor(e);let n=0,r=0,i=this;for(;;){const e=i.getParentOrThrow();if(e===t){n=i.getIndexWithinParent();break}i=e}for(i=e;;){const e=i.getParentOrThrow();if(e===t){r=i.getIndexWithinParent();break}i=e}return n<r}isParentOf(e){const t=this.__key;if(t===e.__key)return!1;let n=e;for(;null!==n;){if(n.__key===t)return!0;n=n.getParent()}return!1}getNodesBetween(e){const t=this.isBefore(e),n=[],r=new Set;let i=this;for(;null!==i;){const s=i.__key;if(r.has(s)||(r.add(s),n.push(i)),i===e)break;const o=bs(i)?t?i.getFirstChild():i.getLastChild():null;if(null!==o){i=o;continue}const l=t?i.getNextSibling():i.getPreviousSibling();if(null!==l){i=l;continue}const c=i.getParentOrThrow();if(r.has(c.__key)||n.push(c),c===e)break;let a=null,u=c;do{if(null===u&&Re(68),a=t?u.getNextSibling():u.getPreviousSibling(),u=u.getParent(),null===u)break;null!==a||r.has(u.__key)||n.push(u)}while(null===a);i=a}return t||n.reverse(),n}isDirty(){const e=ls()._dirtyLeaves;return null!==e&&e.has(this.__key)}getLatest(){const e=Ct(this.__key);return null===e&&Re(113),e}getWritable(){is();const e=os(),t=ls(),n=e._nodeMap,r=this.__key,i=this.getLatest(),s=t._cloneNotNeeded,o=Ri();if(null!==o&&o.setCachedNodes(null),s.has(r))return xt(i),i;const l=Dn(i);return s.add(r),xt(l),n.set(r,l),l}getTextContent(){return""}getTextContentSize(){return this.getTextContent().length}createDOM(e,t){Re(70)}updateDOM(e,t,n){Re(71)}exportDOM(e){return{element:this.createDOM(e._config,e)}}exportJSON(){Re(72)}static importJSON(e){Re(18,this.name)}static transform(){return null}remove(e){Ur(this,!0,e)}replace(e,t){is();let n=Ri();null!==n&&(n=n.clone()),_n(this,e);const r=this.getLatest(),i=this.__key,s=e.__key,o=e.getWritable(),l=this.getParentOrThrow().getWritable(),c=l.__size;mt(o);const a=r.getPreviousSibling(),u=r.getNextSibling(),f=r.__prev,d=r.__next,h=r.__parent;if(Ur(r,!1,!0),null===a)l.__first=s;else{a.getWritable().__next=s}if(o.__prev=f,null===u)l.__last=s;else{u.getWritable().__prev=s}if(o.__next=d,o.__parent=h,l.__size=c,t&&(bs(this)&&bs(o)||Re(139),this.getChildren().forEach((e=>{o.append(e)}))),ki(n)){Ft(n);const e=n.anchor,t=n.focus;e.key===i&&Si(e,o),t.key===i&&Si(t,o)}return St()===i&&vt(s),o}insertAfter(e,t=!0){is(),_n(this,e);const n=this.getWritable(),r=e.getWritable(),i=r.getParent(),s=Ri();let o=!1,l=!1;if(null!==i){const t=e.getIndexWithinParent();if(mt(r),ki(s)){const e=i.__key,n=s.anchor,r=s.focus;o="element"===n.type&&n.key===e&&n.offset===t+1,l="element"===r.type&&r.key===e&&r.offset===t+1}}const c=this.getNextSibling(),a=this.getParentOrThrow().getWritable(),u=r.__key,f=n.__next;if(null===c)a.__last=u;else{c.getWritable().__prev=u}if(a.__size++,n.__next=u,r.__next=f,r.__prev=n.__key,r.__parent=n.__parent,t&&ki(s)){const e=this.getIndexWithinParent();Ji(s,a,e+1);const t=a.__key;o&&s.anchor.set(t,e+2,"element"),l&&s.focus.set(t,e+2,"element")}return e}insertBefore(e,t=!0){is(),_n(this,e);const n=this.getWritable(),r=e.getWritable(),i=r.__key;mt(r);const s=this.getPreviousSibling(),o=this.getParentOrThrow().getWritable(),l=n.__prev,c=this.getIndexWithinParent();if(null===s)o.__first=i;else{s.getWritable().__next=i}o.__size++,n.__prev=i,r.__prev=l,r.__next=n.__key,r.__parent=n.__parent;const a=Ri();if(t&&ki(a)){Ji(a,this.getParentOrThrow(),c)}return e}isParentRequired(){return!1}createParentElementNode(){return zs()}selectStart(){return this.selectPrevious()}selectEnd(){return this.selectNext(0,0)}selectPrevious(e,t){is();const n=this.getPreviousSibling(),r=this.getParentOrThrow();if(null===n)return r.select(0,0);if(bs(n))return n.select();if(!hi(n)){const e=n.getIndexWithinParent()+1;return r.select(e,e)}return n.select(e,t)}selectNext(e,t){is();const n=this.getNextSibling(),r=this.getParentOrThrow();if(null===n)return r.select();if(bs(n))return n.select(0,0);if(!hi(n)){const e=n.getIndexWithinParent();return r.select(e,e)}return n.select(e,t)}markDirty(){this.getWritable()}reconcileObservedMutation(e,t){this.markDirty()}}class jr extends Vr{static getType(){return"linebreak"}static clone(e){return new jr(e.__key)}constructor(e){super(e)}getTextContent(){return"\n"}createDOM(){return document.createElement("br")}updateDOM(){return!1}static importDOM(){return{br:e=>function(e){const t=e.parentElement;if(null!==t&&wn(t)){const n=t.firstChild;if(n===e||n.nextSibling===e&&Qr(n)){const n=t.lastChild;if(n===e||n.previousSibling===e&&Qr(n))return!0}}return!1}(e)||function(e){const t=e.parentElement;if(null!==t&&wn(t)){const n=t.firstChild;if(n===e||n.nextSibling===e&&Qr(n))return!1;const r=t.lastChild;if(r===e||r.previousSibling===e&&Qr(r))return!0}return!1}(e)?null:{conversion:Hr,priority:0}}}static importJSON(e){return qr()}exportJSON(){return{type:"linebreak",version:1}}}function Hr(e){return{node:qr()}}function qr(){return gn(new jr)}function Gr(e){return e instanceof jr}function Qr(e){return e.nodeType===ie&&/^( |\t|\r?\n)+$/.test(e.textContent||"")}function Xr(e,t){return 16&t?"code":t&me?"mark":32&t?"sub":64&t?"sup":null}function Yr(e,t){return 1&t?"strong":2&t?"em":"span"}function Zr(e,t,n,r,i){const s=r.classList;let o=qt(i,"base");void 0!==o&&s.add(...o),o=qt(i,"underlineStrikethrough");let l=!1;const c=t&ge&&t&he;void 0!==o&&(n&ge&&n&he?(l=!0,c||s.add(...o)):c&&s.remove(...o));for(const e in De){const r=De[e];if(o=qt(i,e),void 0!==o)if(n&r){if(l&&("underline"===e||"strikethrough"===e)){t&r&&s.remove(...o);continue}t&r&&(!c||"underline"!==e)&&"strikethrough"!==e||s.add(...o)}else t&r&&s.remove(...o)}}function ei(e,t,n){const r=t.firstChild,i=n.isComposing(),s=e+(i?we:"");if(null==r)t.textContent=s;else{const e=r.nodeValue;if(e!==s)if(i||G){const[t,n,i]=function(e,t){const n=e.length,r=t.length;let i=0,s=0;for(;i<n&&i<r&&e[i]===t[i];)i++;for(;s+i<n&&s+i<r&&e[n-s-1]===t[r-s-1];)s++;return[i,n-i-s,t.slice(i,r-s)]}(e,s);0!==n&&r.deleteData(t,n),r.insertData(t,i)}else r.nodeValue=s}}function ti(e,t,n,r,i,s){ei(i,e,t);const o=s.theme.text;void 0!==o&&Zr(0,0,r,e,o)}function ni(e,t){const n=document.createElement(t);return n.appendChild(e),n}class ri extends Vr{static getType(){return"text"}static clone(e){return new ri(e.__text,e.__key)}afterCloneFrom(e){super.afterCloneFrom(e),this.__format=e.__format,this.__style=e.__style,this.__mode=e.__mode,this.__detail=e.__detail}constructor(e,t){super(t),this.__text=e,this.__format=0,this.__style="",this.__mode=0,this.__detail=0}getFormat(){return this.getLatest().__format}getDetail(){return this.getLatest().__detail}getMode(){const e=this.getLatest();return ze[e.__mode]}getStyle(){return this.getLatest().__style}isToken(){return 1===this.getLatest().__mode}isComposing(){return this.__key===St()}isSegmented(){return 2===this.getLatest().__mode}isDirectionless(){return!!(1&this.getLatest().__detail)}isUnmergeable(){return!!(2&this.getLatest().__detail)}hasFormat(e){const t=De[e];return!!(this.getFormat()&t)}isSimpleText(){return"text"===this.__type&&0===this.__mode}getTextContent(){return this.getLatest().__text}getFormatFlags(e,t){return _t(this.getLatest().__format,e,t)}canHaveFormat(){return!0}createDOM(e,t){const n=this.__format,r=Xr(0,n),i=Yr(0,n),s=null===r?i:r,o=document.createElement(s);let l=o;this.hasFormat("code")&&o.setAttribute("spellcheck","false"),null!==r&&(l=document.createElement(i),o.appendChild(l));ti(l,this,0,n,this.__text,e);const c=this.__style;return""!==c&&(o.style.cssText=c),o}updateDOM(e,t,n){const r=this.__text,i=e.__format,s=this.__format,o=Xr(0,i),l=Xr(0,s),c=Yr(0,i),a=Yr(0,s);if((null===o?c:o)!==(null===l?a:l))return!0;if(o===l&&c!==a){const e=t.firstChild;null==e&&Re(48);const i=document.createElement(a);return ti(i,this,0,s,r,n),t.replaceChild(i,e),!1}let u=t;null!==l&&null!==o&&(u=t.firstChild,null==u&&Re(49)),ei(r,u,this);const f=n.theme.text;void 0!==f&&i!==s&&Zr(0,i,s,u,f);const d=e.__style,h=this.__style;return d!==h&&(t.style.cssText=h),!1}static importDOM(){return{"#text":()=>({conversion:ci,priority:0}),b:()=>({conversion:si,priority:0}),code:()=>({conversion:fi,priority:0}),em:()=>({conversion:fi,priority:0}),i:()=>({conversion:fi,priority:0}),s:()=>({conversion:fi,priority:0}),span:()=>({conversion:ii,priority:0}),strong:()=>({conversion:fi,priority:0}),sub:()=>({conversion:fi,priority:0}),sup:()=>({conversion:fi,priority:0}),u:()=>({conversion:fi,priority:0})}}static importJSON(e){const t=di(e.text);return t.setFormat(e.format),t.setDetail(e.detail),t.setMode(e.mode),t.setStyle(e.style),t}exportDOM(e){let{element:t}=super.exportDOM(e);return null!==t&&Tn(t)||Re(132),t.style.whiteSpace="pre-wrap",this.hasFormat("bold")&&(t=ni(t,"b")),this.hasFormat("italic")&&(t=ni(t,"i")),this.hasFormat("strikethrough")&&(t=ni(t,"s")),this.hasFormat("underline")&&(t=ni(t,"u")),{element:t}}exportJSON(){return{detail:this.getDetail(),format:this.getFormat(),mode:this.getMode(),style:this.getStyle(),text:this.getTextContent(),type:"text",version:1}}selectionTransform(e,t){}setFormat(e){const t=this.getWritable();return t.__format="string"==typeof e?De[e]:e,t}setDetail(e){const t=this.getWritable();return t.__detail="string"==typeof e?Me[e]:e,t}setStyle(e){const t=this.getWritable();return t.__style=e,t}toggleFormat(e){const t=_t(this.getFormat(),e,null);return this.setFormat(t)}toggleDirectionless(){const e=this.getWritable();return e.__detail^=1,e}toggleUnmergeable(){const e=this.getWritable();return e.__detail^=2,e}setMode(e){const t=Be[e];if(this.__mode===t)return this;const n=this.getWritable();return n.__mode=t,n}setTextContent(e){if(this.__text===e)return this;const t=this.getWritable();return t.__text=e,t}select(e,t){is();let n=e,r=t;const i=Ri(),s=this.getTextContent(),o=this.__key;if("string"==typeof s){const e=s.length;void 0===n&&(n=e),void 0===r&&(r=e)}else n=0,r=0;if(!ki(i))return Ii(o,n,o,r,"text","text");{const e=St();e!==i.anchor.key&&e!==i.focus.key||vt(o),i.setTextNodeRange(this,n,this,r)}return i}selectStart(){return this.select(0,0)}selectEnd(){const e=this.getTextContentSize();return this.select(e,e)}spliceText(e,t,n,r){const i=this.getWritable(),s=i.__text,o=n.length;let l=e;l<0&&(l=o+l,l<0&&(l=0));const c=Ri();if(r&&ki(c)){const t=e+o;c.setTextNodeRange(i,t,i,t)}const a=s.slice(0,l)+n+s.slice(l+t);return i.__text=a,i}canInsertTextBefore(){return!0}canInsertTextAfter(){return!0}splitText(...e){is();const t=this.getLatest(),n=t.getTextContent(),r=t.__key,i=St(),s=new Set(e),o=[],l=n.length;let c="";for(let e=0;e<l;e++)""!==c&&s.has(e)&&(o.push(c),c=""),c+=n[e];""!==c&&o.push(c);const a=o.length;if(0===a)return[];if(o[0]===n)return[t];const u=o[0],f=t.getParent();let d;const h=t.getFormat(),g=t.getStyle(),_=t.__detail;let p=!1;t.isSegmented()?(d=di(u),d.__format=h,d.__style=g,d.__detail=_,p=!0):(d=t.getWritable(),d.__text=u);const y=Ri(),m=[d];let x=u.length;for(let e=1;e<a;e++){const t=o[e],n=t.length,s=di(t).getWritable();s.__format=h,s.__style=g,s.__detail=_;const l=s.__key,c=x+n;if(ki(y)){const e=y.anchor,t=y.focus;e.key===r&&"text"===e.type&&e.offset>x&&e.offset<=c&&(e.key=l,e.offset-=x,y.dirty=!0),t.key===r&&"text"===t.type&&t.offset>x&&t.offset<=c&&(t.key=l,t.offset-=x,y.dirty=!0)}i===r&&vt(l),x=c,m.push(s)}if(null!==f){!function(e){const t=e.getPreviousSibling(),n=e.getNextSibling();null!==t&&xt(t),null!==n&&xt(n)}(this);const e=f.getWritable(),t=this.getIndexWithinParent();p?(e.splice(t,0,m),this.remove()):e.splice(t,1,m),ki(y)&&Ji(y,f,t,a-1)}return m}mergeWithSibling(e){const t=e===this.getPreviousSibling();t||e===this.getNextSibling()||Re(50);const n=this.__key,r=e.__key,i=this.__text,s=i.length;St()===r&&vt(n);const o=Ri();if(ki(o)){const i=o.anchor,l=o.focus;null!==i&&i.key===r&&(Vi(i,t,n,e,s),o.dirty=!0),null!==l&&l.key===r&&(Vi(l,t,n,e,s),o.dirty=!0)}const l=e.__text,c=t?l+i:i+l;this.setTextContent(c);const a=this.getWritable();return e.remove(),a}isTextEntity(){return!1}}function ii(e){return{forChild:gi(e.style),node:null}}function si(e){const t=e,n="normal"===t.style.fontWeight;return{forChild:gi(t.style,n?void 0:"bold"),node:null}}const oi=new WeakMap;function li(e){return"PRE"===e.nodeName||e.nodeType===re&&void 0!==e.style&&void 0!==e.style.whiteSpace&&e.style.whiteSpace.startsWith("pre")}function ci(e){const t=e;null===e.parentElement&&Re(129);let n=t.textContent||"";if(null!==function(e){let t,n=e.parentNode;const r=[e];for(;null!==n&&void 0===(t=oi.get(n))&&!li(n);)r.push(n),n=n.parentNode;const i=void 0===t?n:t;for(let e=0;e<r.length;e++)oi.set(r[e],i);return i}(t)){const e=n.split(/(\r?\n|\t)/),t=[],r=e.length;for(let n=0;n<r;n++){const r=e[n];"\n"===r||"\r\n"===r?t.push(qr()):"\t"===r?t.push(pi()):""!==r&&t.push(di(r))}return{node:t}}if(n=n.replace(/\r/g,"").replace(/[ \t\n]+/g," "),""===n)return{node:null};if(" "===n[0]){let e=t,r=!0;for(;null!==e&&null!==(e=ai(e,!1));){const t=e.textContent||"";if(t.length>0){/[ \t\n]$/.test(t)&&(n=n.slice(1)),r=!1;break}}r&&(n=n.slice(1))}if(" "===n[n.length-1]){let e=t,r=!0;for(;null!==e&&null!==(e=ai(e,!0));){if((e.textContent||"").replace(/^( |\t|\r?\n)+/,"").length>0){r=!1;break}}r&&(n=n.slice(0,n.length-1))}return""===n?{node:null}:{node:di(n)}}function ai(e,t){let n=e;for(;;){let e;for(;null===(e=t?n.nextSibling:n.previousSibling);){const e=n.parentElement;if(null===e)return null;n=e}if(n=e,n.nodeType===re){const e=n.style.display;if(""===e&&!bn(n)||""!==e&&!e.startsWith("inline"))return null}let r=n;for(;null!==(r=t?n.firstChild:n.lastChild);)n=r;if(n.nodeType===ie)return n;if("BR"===n.nodeName)return null}}const ui={code:"code",em:"italic",i:"italic",s:"strikethrough",strong:"bold",sub:"subscript",sup:"superscript",u:"underline"};function fi(e){const t=ui[e.nodeName.toLowerCase()];return void 0===t?{node:null}:{forChild:gi(e.style,t),node:null}}function di(e=""){return gn(new ri(e))}function hi(e){return e instanceof ri}function gi(e,t){const n=e.fontWeight,r=e.textDecoration.split(" "),i="700"===n||"bold"===n,s=r.includes("line-through"),o="italic"===e.fontStyle,l=r.includes("underline"),c=e.verticalAlign;return e=>hi(e)?(i&&!e.hasFormat("bold")&&e.toggleFormat("bold"),s&&!e.hasFormat("strikethrough")&&e.toggleFormat("strikethrough"),o&&!e.hasFormat("italic")&&e.toggleFormat("italic"),l&&!e.hasFormat("underline")&&e.toggleFormat("underline"),"sub"!==c||e.hasFormat("subscript")||e.toggleFormat("subscript"),"super"!==c||e.hasFormat("superscript")||e.toggleFormat("superscript"),t&&!e.hasFormat(t)&&e.toggleFormat(t),e):e}class _i extends ri{static getType(){return"tab"}static clone(e){return new _i(e.__key)}afterCloneFrom(e){super.afterCloneFrom(e),this.__text=e.__text}constructor(e){super("\t",e),this.__detail=2}static importDOM(){return null}static importJSON(e){const t=pi();return t.setFormat(e.format),t.setStyle(e.style),t}exportJSON(){return{...super.exportJSON(),type:"tab",version:1}}setTextContent(e){Re(126)}setDetail(e){Re(127)}setMode(e){Re(128)}canInsertTextBefore(){return!1}canInsertTextAfter(){return!1}}function pi(){return gn(new _i)}function yi(e){return e instanceof _i}class mi{constructor(e,t,n){this._selection=null,this.key=e,this.offset=t,this.type=n}is(e){return this.key===e.key&&this.offset===e.offset&&this.type===e.type}isBefore(e){let t=this.getNode(),n=e.getNode();const r=this.offset,i=e.offset;if(bs(t)){const e=t.getDescendantByIndex(r);t=null!=e?e:t}if(bs(n)){const e=n.getDescendantByIndex(i);n=null!=e?e:n}return t===n?r<i:t.isBefore(n)}getNode(){const e=Ct(this.key);return null===e&&Re(20),e}set(e,t,n){const r=this._selection,i=this.key;this.key=e,this.offset=t,this.type=n,rs()||(St()===i&&vt(e),null!==r&&(r.setCachedNodes(null),r.dirty=!0))}}function xi(e,t,n){return new mi(e,t,n)}function vi(e,t){let n=t.__key,r=e.offset,i="element";if(hi(t)){i="text";const e=t.getTextContentSize();r>e&&(r=e)}else if(!bs(t)){const e=t.getNextSibling();if(hi(e))n=e.__key,r=0,i="text";else{const e=t.getParent();e&&(n=e.__key,r=t.getIndexWithinParent()+1)}}e.set(n,r,i)}function Si(e,t){if(bs(t)){const n=t.getLastDescendant();bs(n)||hi(n)?vi(e,n):vi(e,t)}else vi(e,t)}function Ci(e,t,n,r){e.key=t,e.offset=n,e.type=r}class Ti{constructor(e){this._cachedNodes=null,this._nodes=e,this.dirty=!1}getCachedNodes(){return this._cachedNodes}setCachedNodes(e){this._cachedNodes=e}is(e){if(!wi(e))return!1;const t=this._nodes,n=e._nodes;return t.size===n.size&&Array.from(t).every((e=>n.has(e)))}isCollapsed(){return!1}isBackward(){return!1}getStartEndPoints(){return null}add(e){this.dirty=!0,this._nodes.add(e),this._cachedNodes=null}delete(e){this.dirty=!0,this._nodes.delete(e),this._cachedNodes=null}clear(){this.dirty=!0,this._nodes.clear(),this._cachedNodes=null}has(e){return this._nodes.has(e)}clone(){return new Ti(new Set(this._nodes))}extract(){return this.getNodes()}insertRawText(e){}insertText(){}insertNodes(e){const t=this.getNodes(),n=t.length,r=t[n-1];let i;if(hi(r))i=r.select();else{const e=r.getIndexWithinParent()+1;i=r.getParentOrThrow().select(e,e)}i.insertNodes(e);for(let e=0;e<n;e++)t[e].remove()}getNodes(){const e=this._cachedNodes;if(null!==e)return e;const t=this._nodes,n=[];for(const e of t){const t=Ct(e);null!==t&&n.push(t)}return rs()||(this._cachedNodes=n),n}getTextContent(){const e=this.getNodes();let t="";for(let n=0;n<e.length;n++)t+=e[n].getTextContent();return t}}function ki(e){return e instanceof bi}class bi{constructor(e,t,n,r){this.anchor=e,this.focus=t,e._selection=this,t._selection=this,this._cachedNodes=null,this.format=n,this.style=r,this.dirty=!1}getCachedNodes(){return this._cachedNodes}setCachedNodes(e){this._cachedNodes=e}is(e){return!!ki(e)&&(this.anchor.is(e.anchor)&&this.focus.is(e.focus)&&this.format===e.format&&this.style===e.style)}isCollapsed(){return this.anchor.is(this.focus)}getNodes(){const e=this._cachedNodes;if(null!==e)return e;const t=this.anchor,n=this.focus,r=t.isBefore(n),i=r?t:n,s=r?n:t;let o=i.getNode(),l=s.getNode();const c=i.offset,a=s.offset;if(bs(o)){const e=o.getDescendantByIndex(c);o=null!=e?e:o}if(bs(l)){let e=l.getDescendantByIndex(a);null!==e&&e!==o&&l.getChildAtIndex(a)===e&&(e=e.getPreviousSibling()),l=null!=e?e:l}let u;return u=o.is(l)?bs(o)&&o.getChildrenSize()>0?[]:[o]:o.getNodesBetween(l),rs()||(this._cachedNodes=u),u}setTextNodeRange(e,t,n,r){Ci(this.anchor,e.__key,t,"text"),Ci(this.focus,n.__key,r,"text"),this._cachedNodes=null,this.dirty=!0}getTextContent(){const e=this.getNodes();if(0===e.length)return"";const t=e[0],n=e[e.length-1],r=this.anchor,i=this.focus,s=r.isBefore(i),[o,l]=Ei(this);let c="",a=!0;for(let u=0;u<e.length;u++){const f=e[u];if(bs(f)&&!f.isInline())a||(c+="\n"),a=!f.isEmpty();else if(a=!1,hi(f)){let e=f.getTextContent();f===t?f===n?"element"===r.type&&"element"===i.type&&i.offset!==r.offset||(e=o<l?e.slice(o,l):e.slice(l,o)):e=s?e.slice(o):e.slice(l):f===n&&(e=s?e.slice(0,l):e.slice(0,o)),c+=e}else!Es(f)&&!Gr(f)||f===n&&this.isCollapsed()||(c+=f.getTextContent())}return c}applyDOMRange(e){const t=ls(),n=t.getEditorState()._selection,r=Di(e.startContainer,e.startOffset,e.endContainer,e.endOffset,t,n);if(null===r)return;const[i,s]=r;Ci(this.anchor,i.key,i.offset,i.type),Ci(this.focus,s.key,s.offset,s.type),this._cachedNodes=null}clone(){const e=this.anchor,t=this.focus;return new bi(xi(e.key,e.offset,e.type),xi(t.key,t.offset,t.type),this.format,this.style)}toggleFormat(e){this.format=_t(this.format,e,null),this.dirty=!0}setStyle(e){this.style=e,this.dirty=!0}hasFormat(e){const t=De[e];return!!(this.format&t)}insertRawText(e){const t=e.split(/(\r?\n|\t)/),n=[],r=t.length;for(let e=0;e<r;e++){const r=t[e];"\n"===r||"\r\n"===r?n.push(qr()):"\t"===r?n.push(pi()):n.push(di(r))}this.insertNodes(n)}insertText(e){const t=this.anchor,n=this.focus,r=this.format,i=this.style;let s=t,o=n;!this.isCollapsed()&&n.isBefore(t)&&(s=n,o=t),"element"===s.type&&function(e,t,n,r){const i=e.getNode(),s=i.getChildAtIndex(e.offset),o=di(),l=Fs(i)?zs().append(o):o;o.setFormat(n),o.setStyle(r),null===s?i.append(l):s.insertBefore(l),e.is(t)&&t.set(o.__key,0,"text"),e.set(o.__key,0,"text")}(s,o,r,i);const l=s.offset;let c=o.offset;const a=this.getNodes(),u=a.length;let f=a[0];hi(f)||Re(26);const d=f.getTextContent().length,h=f.getParentOrThrow();let g=a[u-1];if(1===u&&"element"===o.type&&(c=d,o.set(s.key,c,"text")),this.isCollapsed()&&l===d&&(f.isSegmented()||f.isToken()||!f.canInsertTextAfter()||!h.canInsertTextAfter()&&null===f.getNextSibling())){let t=f.getNextSibling();if(hi(t)&&t.canInsertTextBefore()&&!dt(t)||(t=di(),t.setFormat(r),t.setStyle(i),h.canInsertTextAfter()?f.insertAfter(t):h.insertAfter(t)),t.select(0,0),f=t,""!==e)return void this.insertText(e)}else if(this.isCollapsed()&&0===l&&(f.isSegmented()||f.isToken()||!f.canInsertTextBefore()||!h.canInsertTextBefore()&&null===f.getPreviousSibling())){let t=f.getPreviousSibling();if(hi(t)&&!dt(t)||(t=di(),t.setFormat(r),h.canInsertTextBefore()?f.insertBefore(t):h.insertBefore(t)),t.select(),f=t,""!==e)return void this.insertText(e)}else if(f.isSegmented()&&l!==d){const e=di(f.getTextContent());e.setFormat(r),f.replace(e),f=e}else if(!this.isCollapsed()&&""!==e){const t=g.getParent();if(!h.canInsertTextBefore()||!h.canInsertTextAfter()||bs(t)&&(!t.canInsertTextBefore()||!t.canInsertTextAfter()))return this.insertText(""),Oi(this.anchor,this.focus,null),void this.insertText(e)}if(1===u){if(f.isToken()){const t=di(e);return t.select(),void f.replace(t)}const t=f.getFormat(),n=f.getStyle();if(l!==c||t===r&&n===i){if(yi(f)){const t=di(e);return t.setFormat(r),t.setStyle(i),t.select(),void f.replace(t)}}else{if(""!==f.getTextContent()){const t=di(e);if(t.setFormat(r),t.setStyle(i),t.select(),0===l)f.insertBefore(t,!1);else{const[e]=f.splitText(l);e.insertAfter(t,!1)}return void(t.isComposing()&&"text"===this.anchor.type&&(this.anchor.offset-=e.length))}f.setFormat(r),f.setStyle(i)}const s=c-l;f=f.spliceText(l,s,e,!0),""===f.getTextContent()?f.remove():"text"===this.anchor.type&&(f.isComposing()?this.anchor.offset-=e.length:(this.format=t,this.style=n))}else{const t=new Set([...f.getParentKeys(),...g.getParentKeys()]),n=bs(f)?f:f.getParentOrThrow();let r=bs(g)?g:g.getParentOrThrow(),i=g;if(!n.is(r)&&r.isInline())do{i=r,r=r.getParentOrThrow()}while(r.isInline());if("text"===o.type&&(0!==c||""===g.getTextContent())||"element"===o.type&&g.getIndexWithinParent()<c)if(hi(g)&&!g.isToken()&&c!==g.getTextContentSize()){if(g.isSegmented()){const e=di(g.getTextContent());g.replace(e),g=e}Fs(o.getNode())||"text"!==o.type||(g=g.spliceText(0,c,"")),t.add(g.__key)}else{const e=g.getParentOrThrow();e.canBeEmpty()||1!==e.getChildrenSize()?g.remove():e.remove()}else t.add(g.__key);const s=r.getChildren(),h=new Set(a),_=n.is(r),p=n.isInline()&&null===f.getNextSibling()?n:f;for(let e=s.length-1;e>=0;e--){const t=s[e];if(t.is(f)||bs(t)&&t.isParentOf(f))break;t.isAttached()&&(!h.has(t)||t.is(i)?_||p.insertAfter(t,!1):t.remove())}if(!_){let e=r,n=null;for(;null!==e;){const r=e.getChildren(),i=r.length;(0===i||r[i-1].is(n))&&(t.delete(e.__key),n=e),e=e.getParent()}}if(f.isToken())if(l===d)f.select();else{const t=di(e);t.select(),f.replace(t)}else f=f.spliceText(l,d-l,e,!0),""===f.getTextContent()?f.remove():f.isComposing()&&"text"===this.anchor.type&&(this.anchor.offset-=e.length);for(let e=1;e<u;e++){const n=a[e],r=n.__key;t.has(r)||n.remove()}}}removeText(){if(this.isCollapsed())return;const{anchor:e,focus:t}=this,n=this.getNodes(),r=this.isBackward()?t:e,i=this.isBackward()?e:t;let s=r.getNode(),o=i.getNode();const l=En(s,Nn),c=En(o,Nn);hi(s)&&s.isToken()&&r.offset<s.getTextContentSize()&&(r.offset=0),i.offset>0&&hi(o)&&o.isToken()&&(i.offset=o.getTextContentSize()),n.forEach((e=>{cn(s,e)||cn(o,e)||e.getKey()===s.getKey()||e.getKey()===o.getKey()||e.remove()}));const a=(e,t)=>{if(""===e.getTextContent())e.remove();else if(0!==t&&dt(e)){const t=di(e.getTextContent());return t.setFormat(e.getFormat()),t.setStyle(e.getStyle()),e.replace(t)}};if(s===o&&hi(s)){const n=Math.abs(t.offset-e.offset);return s.spliceText(r.offset,n,"",!0),void a(s,n)}if(hi(s)){const e=s.getTextContentSize()-r.offset;s.spliceText(r.offset,e,""),s=a(s,e)||s}hi(o)&&(o.spliceText(0,i.offset,""),o=a(o,i.offset)||o),s.isAttached()&&hi(s)?s.selectEnd():o.isAttached()&&hi(o)&&o.selectStart();bs(l)&&bs(c)&&l!==c&&(l.append(...c.getChildren()),c.remove(),i.set(r.key,r.offset,r.type))}formatText(e,t=null){if(this.isCollapsed())return this.toggleFormat(e),void vt(null);const n=this.getNodes(),r=[];for(const e of n)hi(e)&&r.push(e);const i=t=>{n.forEach((n=>{if(Ws(n)){const r=n.getFormatFlags(e,t);n.setTextFormat(r)}}))},s=r.length;if(0===s)return this.toggleFormat(e),vt(null),void i(t);const o=this.anchor,l=this.focus,c=this.isBackward(),a=c?l:o,u=c?o:l;let f=0,d=r[0],h="element"===a.type?0:a.offset;if("text"===a.type&&h===d.getTextContentSize()&&(f=1,d=r[1],h=0),null==d)return;const g=d.getFormatFlags(e,t);i(g);const _=s-1;let p=r[_];const y="text"===u.type?u.offset:p.getTextContentSize();if(d.is(p)){if(h===y)return;if(dt(d)||0===h&&y===d.getTextContentSize())d.setFormat(g);else{const e=d.splitText(h,y),t=0===h?e[0]:e[1];t.setFormat(g),"text"===a.type&&a.set(t.__key,0,"text"),"text"===u.type&&u.set(t.__key,y-h,"text")}return void(this.format=g)}0===h||dt(d)||([,d]=d.splitText(h),h=0),d.setFormat(g);const m=p.getFormatFlags(e,g);y>0&&(y===p.getTextContentSize()||dt(p)||([p]=p.splitText(y)),p.setFormat(m));for(let t=f+1;t<_;t++){const n=r[t],i=n.getFormatFlags(e,m);n.setFormat(i)}"text"===a.type&&a.set(d.__key,h,"text"),"text"===u.type&&u.set(p.__key,y,"text"),this.format=g|m}insertNodes(e){if(0===e.length)return;if("root"===this.anchor.key){this.insertParagraph();const t=Ri();return ki(t)||Re(134),t.insertNodes(e)}const t=(this.isBackward()?this.focus:this.anchor).getNode(),n=En(t,Nn),r=e[e.length-1];if(bs(n)&&"__language"in n){if("__language"in e[0])this.insertText(e[0].getTextContent());else{const t=Gi(this);n.splice(t,0,e),r.selectEnd()}return}if(!e.some((e=>(bs(e)||Es(e))&&!e.isInline()))){bs(n)||Re(211,t.constructor.name,t.getType());const i=Gi(this);return n.splice(i,0,e),void r.selectEnd()}const i=function(e){const t=zs();let n=null;for(let r=0;r<e.length;r++){const i=e[r],s=Gr(i);if(s||Es(i)&&i.isInline()||bs(i)&&i.isInline()||hi(i)||i.isParentRequired()){if(null===n&&(n=i.createParentElementNode(),t.append(n),s))continue;null!==n&&n.append(i)}else t.append(i),n=null}return t}(e),s=i.getLastDescendant(),o=i.getChildren(),l=!bs(n)||!n.isEmpty()?this.insertParagraph():null,c=o[o.length-1];let a=o[0];var u;bs(u=a)&&Nn(u)&&!u.isEmpty()&&bs(n)&&(!n.isEmpty()||n.canMergeWhenEmpty())&&(bs(n)||Re(211,t.constructor.name,t.getType()),n.append(...a.getChildren()),a=o[1]),a&&(null===n&&Re(212,t.constructor.name,t.getType()),function(e,t,n){const r=t.getParentOrThrow().getLastChild();let i=t;const s=[t];for(;i!==r;)i.getNextSibling()||Re(140),i=i.getNextSibling(),s.push(i);let o=e;for(const e of s)o=o.insertAfter(e)}(n,a));const f=En(s,Nn);l&&bs(f)&&(l.canMergeWhenEmpty()||Nn(c))&&(f.append(...l.getChildren()),l.remove()),bs(n)&&n.isEmpty()&&n.remove(),s.selectEnd();const d=bs(n)?n.getLastChild():null;Gr(d)&&f!==n&&d.remove()}insertParagraph(){if("root"===this.anchor.key){const e=zs();return Et().splice(this.anchor.offset,0,[e]),e.select(),e}const e=Gi(this),t=En(this.anchor.getNode(),Nn);bs(t)||Re(213);const n=t.getChildAtIndex(e),r=n?[n,...n.getNextSiblings()]:[],i=t.insertNewAfter(this,!1);return i?(i.append(...r),i.selectStart(),i):null}insertLineBreak(e){const t=qr();if(this.insertNodes([t]),e){const e=t.getParentOrThrow(),n=t.getIndexWithinParent();e.select(n,n)}}extract(){const e=this.getNodes(),t=e.length,n=t-1,r=this.anchor,i=this.focus;let s=e[0],o=e[n];const[l,c]=Ei(this);if(0===t)return[];if(1===t){if(hi(s)&&!this.isCollapsed()){const e=l>c?c:l,t=l>c?l:c,n=s.splitText(e,t),r=0===e?n[0]:n[1];return null!=r?[r]:[]}return[s]}const a=r.isBefore(i);if(hi(s)){const t=a?l:c;t===s.getTextContentSize()?e.shift():0!==t&&([,s]=s.splitText(t),e[0]=s)}if(hi(o)){const t=o.getTextContent().length,r=a?c:l;0===r?e.pop():r!==t&&([o]=o.splitText(r),e[n]=o)}return e}modify(e,t,n){const r=this.focus,i=this.anchor,s="move"===e,o=Yt(r,t);if(Es(o)&&!o.isIsolated()){if(s&&o.isKeyboardSelectable()){const e=Bi();return e.add(o.__key),void Ft(e)}const e=t?o.getPreviousSibling():o.getNextSibling();if(hi(e)){const n=e.__key,o=t?e.getTextContent().length:0;return r.set(n,o,"text"),void(s&&i.set(n,o,"text"))}{const n=o.getParentOrThrow();let l,c;return bs(e)?(c=e.__key,l=t?e.getChildrenSize():0):(l=o.getIndexWithinParent(),c=n.__key,t||l++),r.set(c,l,"element"),void(s&&i.set(c,l,"element"))}}const l=ls(),c=vn(l._window);if(!c)return;const a=l._blockCursorElement,u=l._rootElement;if(null===u||null===a||!bs(o)||o.isInline()||o.canBeEmpty()||mn(a,l,u),function(e,t,n,r){e.modify(t,n,r)}(c,e,t?"backward":"forward",n),c.rangeCount>0){const e=c.getRangeAt(0),n=this.anchor.getNode(),r=Fs(n)?n:fn(n);if(this.applyDOMRange(e),this.dirty=!0,!s){const n=this.getNodes(),i=[];let s=!1;for(let e=0;e<n.length;e++){const t=n[e];cn(t,r)?i.push(t):s=!0}if(s&&i.length>0)if(t){const e=i[0];bs(e)?e.selectStart():e.getParentOrThrow().selectStart()}else{const e=i[i.length-1];bs(e)?e.selectEnd():e.getParentOrThrow().selectEnd()}c.anchorNode===e.startContainer&&c.anchorOffset===e.startOffset||function(e){const t=e.focus,n=e.anchor,r=n.key,i=n.offset,s=n.type;Ci(n,t.key,t.offset,t.type),Ci(t,r,i,s),e._cachedNodes=null}(this)}}}forwardDeletion(e,t,n){if(!n&&("element"===e.type&&bs(t)&&e.offset===t.getChildrenSize()||"text"===e.type&&e.offset===t.getTextContentSize())){const e=t.getParent(),n=t.getNextSibling()||(null===e?null:e.getNextSibling());if(bs(n)&&n.isShadowRoot())return!0}return!1}deleteCharacter(e){const n=this.isCollapsed();if(this.isCollapsed()){const n=this.anchor;let r=n.getNode();if(this.forwardDeletion(n,r,e))return;const i=this.focus,s=Yt(i,e);if(Es(s)&&!s.isIsolated()){if(s.isKeyboardSelectable()&&bs(r)&&0===r.getChildrenSize()){r.remove();const e=Bi();e.add(s.__key),Ft(e)}else{s.remove();ls().dispatchCommand(Lexical_prod_t,void 0)}return}if(!e&&bs(s)&&bs(r)&&r.isEmpty())return r.remove(),void s.selectStart();if(this.modify("extend",e,"character"),this.isCollapsed()){if(e&&0===n.offset){if(("element"===n.type?n.getNode():n.getNode().getParentOrThrow()).collapseAtStart(this))return}}else{const t="text"===i.type?i.getNode():null;if(r="text"===n.type?n.getNode():null,null!==t&&t.isSegmented()){const n=i.offset,s=t.getTextContentSize();if(t.is(r)||e&&n!==s||!e&&0!==n)return void Pi(t,e,n)}else if(null!==r&&r.isSegmented()){const i=n.offset,s=r.getTextContentSize();if(r.is(t)||e&&0!==i||!e&&i!==s)return void Pi(r,e,i)}!function(e,t){const n=e.anchor,r=e.focus,i=n.getNode(),s=r.getNode();if(i===s&&"text"===n.type&&"text"===r.type){const e=n.offset,s=r.offset,o=e<s,l=o?e:s,c=o?s:e,a=c-1;if(l!==a){Dt(i.getTextContent().slice(l,c))||(t?r.offset=a:n.offset=a)}}}(this,e)}}if(this.removeText(),e&&!n&&this.isCollapsed()&&"element"===this.anchor.type&&0===this.anchor.offset){const e=this.anchor.getNode();e.isEmpty()&&Fs(e.getParent())&&0===e.getIndexWithinParent()&&e.collapseAtStart(this)}}deleteLine(e){if(this.isCollapsed()){const t="element"===this.anchor.type;if(t&&this.insertText(" "),this.modify("extend",e,"lineboundary"),this.isCollapsed()&&0===this.anchor.offset&&this.modify("extend",e,"character"),t){const t=e?this.anchor:this.focus;t.set(t.key,t.offset+1,t.type)}}this.removeText()}deleteWord(e){if(this.isCollapsed()){const t=this.anchor,n=t.getNode();if(this.forwardDeletion(t,n,e))return;this.modify("extend",e,"word")}this.removeText()}isBackward(){return this.focus.isBefore(this.anchor)}getStartEndPoints(){return[this.anchor,this.focus]}}function wi(e){return e instanceof Ti}function Ni(e){const t=e.offset;if("text"===e.type)return t;const n=e.getNode();return t===n.getChildrenSize()?n.getTextContent().length:0}function Ei(e){const t=e.getStartEndPoints();if(null===t)return[0,0];const[n,r]=t;return"element"===n.type&&"element"===r.type&&n.key===r.key&&n.offset===r.offset?[0,0]:[Ni(n),Ni(r)]}function Pi(e,t,n){const r=e,i=r.getTextContent().split(/(?=\s)/g),s=i.length;let o=0,l=0;for(let e=0;e<s;e++){const r=e===s-1;if(l=o,o+=i[e].length,t&&o===n||o>n||r){i.splice(e,1),r&&(l=void 0);break}}const c=i.join("").trim();""===c?r.remove():(r.setTextContent(c),r.select(l,l))}function Fi(e,t,n,r){let i,s=t;if(e.nodeType===re){let o=!1;const l=e.childNodes,c=l.length,a=r._blockCursorElement;s===c&&(o=!0,s=c-1);let u=l[s],f=!1;if(u===a)u=l[s+1],f=!0;else if(null!==a){const n=a.parentNode;if(e===n){t>Array.prototype.indexOf.call(n.children,a)&&s--}}if(i=Lt(u),hi(i))s=Ot(i,o);else{let l=Lt(e);if(null===l)return null;if(bs(l)){const c=r.getElementByKey(l.getKey());null===c&&Re(214);const a=l.getDOMSlot(c);[l,s]=a.resolveChildIndex(l,c,e,t),bs(l)||Re(215),o&&s>=l.getChildrenSize()&&(s=Math.max(0,l.getChildrenSize()-1));let u=l.getChildAtIndex(s);if(bs(u)&&function(e,t,n){const r=e.getParent();return null===n||null===r||!r.canBeEmpty()||r!==n.getNode()}(u,0,n)){const e=o?u.getLastDescendant():u.getFirstDescendant();null===e?l=u:(u=e,l=bs(u)?u:u.getParentOrThrow()),s=0}hi(u)?(i=u,l=null,s=Ot(u,o)):u!==l&&o&&!f&&(bs(l)||Re(216),s=Math.min(l.getChildrenSize(),s+1))}else{const n=l.getIndexWithinParent();s=0===t&&Es(l)&&Lt(e)===l?n:n+1,l=l.getParentOrThrow()}if(bs(l))return xi(l.__key,s,"element")}}else i=Lt(e);return hi(i)?xi(i.__key,s,"text"):null}function Li(e,t,n){const r=e.offset,i=e.getNode();if(0===r){const r=i.getPreviousSibling(),s=i.getParent();if(t){if((n||!t)&&null===r&&bs(s)&&s.isInline()){const t=s.getPreviousSibling();hi(t)&&(e.key=t.__key,e.offset=t.getTextContent().length)}}else bs(r)&&!n&&r.isInline()?(e.key=r.__key,e.offset=r.getChildrenSize(),e.type="element"):hi(r)&&(e.key=r.__key,e.offset=r.getTextContent().length)}else if(r===i.getTextContent().length){const r=i.getNextSibling(),s=i.getParent();if(t&&bs(r)&&r.isInline())e.key=r.__key,e.offset=0,e.type="element";else if((n||t)&&null===r&&bs(s)&&s.isInline()&&!s.canInsertTextAfter()){const t=s.getNextSibling();hi(t)&&(e.key=t.__key,e.offset=0)}}}function Oi(e,t,n){if("text"===e.type&&"text"===t.type){const r=e.isBefore(t),i=e.is(t);Li(e,r,i),Li(t,!r,i),i&&(t.key=e.key,t.offset=e.offset,t.type=e.type);const s=ls();if(s.isComposing()&&s._compositionKey!==e.key&&ki(n)){const r=n.anchor,i=n.focus;Ci(e,r.key,r.offset,r.type),Ci(t,i.key,i.offset,i.type)}}}function Di(e,t,n,r,i,s){if(null===e||null===n||!ct(i,e,n))return null;const o=Fi(e,t,ki(s)?s.anchor:null,i);if(null===o)return null;const l=Fi(n,r,ki(s)?s.focus:null,i);if(null===l)return null;if("element"===o.type&&"element"===l.type){const t=Lt(e),r=Lt(n);if(Es(t)&&Es(r))return null}return Oi(o,l,s),[o,l]}function Mi(e){return bs(e)&&!e.isInline()}function Ii(e,t,n,r,i,s){const o=os(),l=new bi(xi(e,t,i),xi(n,r,s),0,"");return l.dirty=!0,o._selection=l,l}function Ai(){const e=xi("root",0,"element"),t=xi("root",0,"element");return new bi(e,t,0,"")}function Bi(){return new Ti(new Set)}function zi(e,t){return Wi(null,e,t,null)}function Wi(e,t,n,r){const i=n._window;if(null===i)return null;const s=r||i.event,o=s?s.type:void 0,l="selectionchange"===o,c=!$e&&(l||"beforeinput"===o||"compositionstart"===o||"compositionend"===o||"click"===o&&s&&3===s.detail||"drop"===o||void 0===o);let a,u,f,d;if(ki(e)&&!c)return e.clone();if(null===t)return null;if(a=t.anchorNode,u=t.focusNode,f=t.anchorOffset,d=t.focusOffset,l&&ki(e)&&!ct(n,a,u))return e.clone();const h=Di(a,f,u,d,n,e);if(null===h)return null;const[g,_]=h;return new bi(g,_,ki(e)?e.format:0,ki(e)?e.style:"")}function Ri(){return os()._selection}function Ki(){return ls()._editorState._selection}function Ji(e,t,n,r=1){const i=e.anchor,s=e.focus,o=i.getNode(),l=s.getNode();if(!t.is(o)&&!t.is(l))return;const c=t.__key;if(e.isCollapsed()){const t=i.offset;if(n<=t&&r>0||n<t&&r<0){const n=Math.max(0,t+r);i.set(c,n,"element"),s.set(c,n,"element"),$i(e)}}else{const o=e.isBackward(),l=o?s:i,a=l.getNode(),u=o?i:s,f=u.getNode();if(t.is(a)){const e=l.offset;(n<=e&&r>0||n<e&&r<0)&&l.set(c,Math.max(0,e+r),"element")}if(t.is(f)){const e=u.offset;(n<=e&&r>0||n<e&&r<0)&&u.set(c,Math.max(0,e+r),"element")}}$i(e)}function $i(e){const t=e.anchor,n=t.offset,r=e.focus,i=r.offset,s=t.getNode(),o=r.getNode();if(e.isCollapsed()){if(!bs(s))return;const e=s.getChildrenSize(),i=n>=e,o=i?s.getChildAtIndex(e-1):s.getChildAtIndex(n);if(hi(o)){let e=0;i&&(e=o.getTextContentSize()),t.set(o.__key,e,"text"),r.set(o.__key,e,"text")}}else{if(bs(s)){const e=s.getChildrenSize(),r=n>=e,i=r?s.getChildAtIndex(e-1):s.getChildAtIndex(n);if(hi(i)){let e=0;r&&(e=i.getTextContentSize()),t.set(i.__key,e,"text")}}if(bs(o)){const e=o.getChildrenSize(),t=i>=e,n=t?o.getChildAtIndex(e-1):o.getChildAtIndex(i);if(hi(n)){let e=0;t&&(e=n.getTextContentSize()),r.set(n.__key,e,"text")}}}}function Ui(e,t,n,r,i){let s=null,o=0,l=null;null!==r?(s=r.__key,hi(r)?(o=r.getTextContentSize(),l="text"):bs(r)&&(o=r.getChildrenSize(),l="element")):null!==i&&(s=i.__key,hi(i)?l="text":bs(i)&&(l="element")),null!==s&&null!==l?e.set(s,o,l):(o=t.getIndexWithinParent(),-1===o&&(o=n.getChildrenSize()),e.set(n.__key,o,"element"))}function Vi(e,t,n,r,i){"text"===e.type?(e.key=n,t||(e.offset+=i)):e.offset>r.getIndexWithinParent()&&(e.offset-=1)}function ji(e,t,n,r,i,s,o){const l=r.anchorNode,c=r.focusNode,a=r.anchorOffset,u=r.focusOffset,f=document.activeElement;if(i.has("collaboration")&&f!==s||null!==f&&lt(f))return;if(!ki(t))return void(null!==e&&ct(n,l,c)&&r.removeAllRanges());const d=t.anchor,h=t.focus,g=d.key,_=h.key,p=nn(n,g),y=nn(n,_),m=d.offset,x=h.offset,v=t.format,S=t.style,C=t.isCollapsed();let T=p,k=y,b=!1;if("text"===d.type){T=gt(p);const e=d.getNode();b=e.getFormat()!==v||e.getStyle()!==S}else ki(e)&&"text"===e.anchor.type&&(b=!0);var w,N,E,P,F;if(("text"===h.type&&(k=gt(y)),null!==T&&null!==k)&&(C&&(null===e||b||ki(e)&&(e.format!==v||e.style!==S))&&(w=v,N=S,E=m,P=g,F=performance.now(),Or=[w,N,E,P,F]),a!==m||u!==x||l!==T||c!==k||"Range"===r.type&&C||(null!==f&&s.contains(f)||s.focus({preventScroll:!0}),"element"===d.type))){try{r.setBaseAndExtent(T,m,k,x)}catch(e){}if(!i.has("skip-scroll-into-view")&&t.isCollapsed()&&null!==s&&s===document.activeElement){const e=t instanceof bi&&"element"===t.anchor.type?T.childNodes[m]||null:r.rangeCount>0?r.getRangeAt(0):null;if(null!==e){let t;if(e instanceof Text){const n=document.createRange();n.selectNode(e),t=n.getBoundingClientRect()}else t=e.getBoundingClientRect();!function(e,t,n){const r=n.ownerDocument,i=r.defaultView;if(null===i)return;let{top:s,bottom:o}=t,l=0,c=0,a=n;for(;null!==a;){const t=a===r.body;if(t)l=0,c=an(e).innerHeight;else{const e=a.getBoundingClientRect();l=e.top,c=e.bottom}let n=0;if(s<l?n=-(l-s):o>c&&(n=o-c),0!==n)if(t)i.scrollBy(0,n);else{const e=a.scrollTop;a.scrollTop+=n;const t=a.scrollTop-e;s-=t,o-=t}if(t)break;a=rn(a)}}(n,t,s)}}Er=!0}}function Hi(e){let t=Ri()||Ki();null===t&&(t=Et().selectEnd()),t.insertNodes(e)}function qi(){const e=Ri();return null===e?"":e.getTextContent()}function Gi(e){let t=e;e.isCollapsed()||t.removeText();const n=Ri();ki(n)&&(t=n),ki(t)||Re(161);const r=t.anchor;let i=r.getNode(),s=r.offset;for(;!Nn(i);)[i,s]=Qi(i,s);return s}function Qi(e,t){const n=e.getParent();if(!n){const e=zs();return Et().append(e),e.select(),[Et(),0]}if(hi(e)){const r=e.splitText(t);if(0===r.length)return[n,e.getIndexWithinParent()];const i=0===t?0:1;return[n,r[0].getIndexWithinParent()+i]}if(!bs(e)||0===t)return[n,e.getIndexWithinParent()];const r=e.getChildAtIndex(t);if(r){const n=new bi(xi(e.__key,t,"element"),xi(e.__key,t,"element"),0,""),i=e.insertNewAfter(n);i&&i.append(r,...r.getNextSiblings())}return[n,e.getIndexWithinParent()+1]}let Xi=null,Yi=null,Zi=!1,es=!1,ts=0;const ns={characterData:!0,childList:!0,subtree:!0};function rs(){return Zi||null!==Xi&&Xi._readOnly}function is(){Zi&&Re(13)}function ss(){ts>99&&Re(14)}function os(){return null===Xi&&Re(195,cs()),Xi}function ls(){return null===Yi&&Re(196,cs()),Yi}function cs(){let e=0;const t=new Set,n=Hs.version;if("undefined"!=typeof window)for(const r of document.querySelectorAll("[contenteditable]")){const i=ft(r);if(at(i))e++;else if(i){let e=String(i.constructor.version||"<0.17.1");e===n&&(e+=" (separately built, likely a bundler configuration issue)"),t.add(e)}}let r=` Detected on the page: ${e} compatible editor(s) with version ${n}`;return t.size&&(r+=` and incompatible editors with versions ${Array.from(t).join(", ")}`),r}function as(){return Yi}function us(e,t,n){const r=t.__type,i=function(e,t){const n=e._nodes.get(t);return void 0===n&&Re(30,t),n}(e,r);let s=n.get(r);void 0===s&&(s=Array.from(i.transforms),n.set(r,s));const o=s.length;for(let e=0;e<o&&(s[e](t),t.isAttached());e++);}function fs(e,t){return void 0!==e&&e.__key!==t&&e.isAttached()}function ds(e,t){if(!t)return;const n=e._updateTags;let r=t;Array.isArray(t)||(r=[t]);for(const e of r)n.add(e)}function hs(e){return gs(e,ls()._nodes)}function gs(e,t){const n=e.type,r=t.get(n);void 0===r&&Re(17,n);const i=r.klass;e.type!==i.getType()&&Re(18,i.name);const s=i.importJSON(e),o=e.children;if(bs(s)&&Array.isArray(o))for(let e=0;e<o.length;e++){const n=gs(o[e],t);s.append(n)}return s}function _s(e,t,n){const r=Xi,i=Zi,s=Yi;Xi=t,Zi=!0,Yi=e;try{return n()}finally{Xi=r,Zi=i,Yi=s}}function ps(e,n){const r=e._pendingEditorState,i=e._rootElement,s=e._headless||null===i;if(null===r)return;const o=e._editorState,l=o._selection,c=r._selection,a=e._dirtyType!==se,u=Xi,f=Zi,d=Yi,h=e._updating,g=e._observer;let _=null;if(e._pendingEditorState=null,e._editorState=r,!s&&a&&null!==g){Yi=e,Xi=r,Zi=!1,e._updating=!0;try{const t=e._dirtyType,n=e._dirtyElements,i=e._dirtyLeaves;g.disconnect(),_=mr(o,r,e,t,n,i)}catch(t){if(t instanceof Error&&e._onError(t),es)throw t;return Vs(e,null,i,r),Ye(e),e._dirtyType=le,es=!0,ps(e,o),void(es=!1)}finally{g.observe(i,ns),e._updating=h,Xi=u,Zi=f,Yi=d}}r._readOnly||(r._readOnly=!0);const p=e._dirtyLeaves,y=e._dirtyElements,m=e._normalizedNodes,x=e._updateTags,v=e._deferred;a&&(e._dirtyType=se,e._cloneNotNeeded.clear(),e._dirtyLeaves=new Set,e._dirtyElements=new Map,e._normalizedNodes=new Set,e._updateTags=new Set),function(e,t){const n=e._decorators;let r=e._pendingDecorators||n;const i=t._nodeMap;let s;for(s in r)i.has(s)||(r===n&&(r=wt(e)),delete r[s])}(e,r);const S=s?null:vn(e._window);if(e._editable&&null!==S&&(a||null===c||c.dirty)){Yi=e,Xi=r;try{if(null!==g&&g.disconnect(),a||null===c||c.dirty){const t=e._blockCursorElement;null!==t&&mn(t,e,i),ji(l,c,e,S,x,i)}xn(e,i,c),null!==g&&g.observe(i,ns)}finally{Yi=d,Xi=u}}null!==_&&function(e,t,n,r,i){const s=Array.from(e._listeners.mutation),o=s.length;for(let e=0;e<o;e++){const[o,l]=s[e],c=t.get(l);void 0!==c&&o(c,{dirtyLeaves:r,prevEditorState:i,updateTags:n})}}(e,_,x,p,o),ki(c)||null===c||null!==l&&l.is(c)||e.dispatchCommand(Lexical_prod_t,void 0);const C=e._pendingDecorators;null!==C&&(e._decorators=C,e._pendingDecorators=null,ys("decorator",e,!0,C)),function(e,t,n){const r=Nt(t),i=Nt(n);r!==i&&ys("textcontent",e,!0,i)}(e,n||o,r),ys("update",e,!0,{dirtyElements:y,dirtyLeaves:p,editorState:r,normalizedNodes:m,prevEditorState:n||o,tags:x}),function(e,t){if(e._deferred=[],0!==t.length){const n=e._updating;e._updating=!0;try{for(let e=0;e<t.length;e++)t[e]()}finally{e._updating=n}}}(e,v),function(e){const t=e._updates;if(0!==t.length){const n=t.shift();if(n){const[t,r]=n;vs(e,t,r)}}}(e)}function ys(e,t,n,...r){const i=t._updating;t._updating=n;try{const n=Array.from(t._listeners[e]);for(let e=0;e<n.length;e++)n[e].apply(null,r)}finally{t._updating=i}}function ms(e,t,n){if(!1===e._updating||Yi!==e){let r=!1;return e.update((()=>{r=ms(e,t,n)})),r}const r=Mt(e);for(let i=4;i>=0;i--)for(let s=0;s<r.length;s++){const o=r[s]._commands.get(t);if(void 0!==o){const t=o[i];if(void 0!==t){const r=Array.from(t),i=r.length;for(let t=0;t<i;t++)if(!0===r[t](n,e))return!0}}}return!1}function xs(e,t){const n=e._updates;let r=t||!1;for(;0!==n.length;){const t=n.shift();if(t){const[n,i]=t;let s;if(void 0!==i){if(s=i.onUpdate,i.skipTransforms&&(r=!0),i.discrete){const t=e._pendingEditorState;null===t&&Re(191),t._flushSync=!0}s&&e._deferred.push(s),ds(e,i.tag)}n()}}return r}function vs(e,t,n){const r=e._updateTags;let i,s=!1,o=!1;void 0!==n&&(i=n.onUpdate,ds(e,n.tag),s=n.skipTransforms||!1,o=n.discrete||!1),i&&e._deferred.push(i);const l=e._editorState;let c=e._pendingEditorState,a=!1;(null===c||c._readOnly)&&(c=e._pendingEditorState=Ls(c||l),a=!0),c._flushSync=o;const u=Xi,f=Zi,d=Yi,h=e._updating;Xi=c,Zi=!1,e._updating=!0,Yi=e;try{a&&(e._headless?null!==l._selection&&(c._selection=l._selection.clone()):c._selection=function(e){const t=e.getEditorState()._selection,n=vn(e._window);return ki(t)||null==t?Wi(t,n,e,null):t.clone()}(e));const n=e._compositionKey;t(),s=xs(e,s),function(e,t){const n=t.getEditorState()._selection,r=e._selection;if(ki(r)){const e=r.anchor,t=r.focus;let i;if("text"===e.type&&(i=e.getNode(),i.selectionTransform(n,r)),"text"===t.type){const e=t.getNode();i!==e&&e.selectionTransform(n,r)}}}(c,e),e._dirtyType!==se&&(s?function(e,t){const n=t._dirtyLeaves,r=e._nodeMap;for(const e of n){const t=r.get(e);hi(t)&&t.isAttached()&&t.isSimpleText()&&!t.isUnmergeable()&&tt(t)}}(c,e):function(e,t){const n=t._dirtyLeaves,r=t._dirtyElements,i=e._nodeMap,s=St(),o=new Map;let l=n,c=l.size,a=r,u=a.size;for(;c>0||u>0;){if(c>0){t._dirtyLeaves=new Set;for(const e of l){const r=i.get(e);hi(r)&&r.isAttached()&&r.isSimpleText()&&!r.isUnmergeable()&&tt(r),void 0!==r&&fs(r,s)&&us(t,r,o),n.add(e)}if(l=t._dirtyLeaves,c=l.size,c>0){ts++;continue}}t._dirtyLeaves=new Set,t._dirtyElements=new Map;for(const e of a){const n=e[0],l=e[1];if("root"!==n&&!l)continue;const c=i.get(n);void 0!==c&&fs(c,s)&&us(t,c,o),r.set(n,l)}l=t._dirtyLeaves,c=l.size,a=t._dirtyElements,u=a.size,ts++}t._dirtyLeaves=n,t._dirtyElements=r}(c,e),xs(e),function(e,t,n,r){const i=e._nodeMap,s=t._nodeMap,o=[];for(const[e]of r){const t=s.get(e);void 0!==t&&(t.isAttached()||(bs(t)&&Bn(t,e,i,s,o,r),i.has(e)||r.delete(e),o.push(e)))}for(const e of o)s.delete(e);for(const e of n){const t=s.get(e);void 0===t||t.isAttached()||(i.has(e)||n.delete(e),s.delete(e))}}(l,c,e._dirtyLeaves,e._dirtyElements));n!==e._compositionKey&&(c._flushSync=!0);const r=c._selection;if(ki(r)){const e=c._nodeMap,t=r.anchor.key,n=r.focus.key;void 0!==e.get(t)&&void 0!==e.get(n)||Re(19)}else wi(r)&&0===r._nodes.size&&(c._selection=null)}catch(t){return t instanceof Error&&e._onError(t),e._pendingEditorState=l,e._dirtyType=le,e._cloneNotNeeded.clear(),e._dirtyLeaves=new Set,e._dirtyElements.clear(),void ps(e)}finally{Xi=u,Zi=f,Yi=d,e._updating=h,ts=0}const g=e._dirtyType!==se||function(e,t){const n=t.getEditorState()._selection,r=e._selection;if(null!==r){if(r.dirty||!r.is(n))return!0}else if(null!==n)return!0;return!1}(c,e);g?c._flushSync?(c._flushSync=!1,ps(e)):a&&ot((()=>{ps(e)})):(c._flushSync=!1,a&&(r.clear(),e._deferred=[],e._pendingEditorState=null))}function Ss(e,t,n){e._updating?e._updates.push([t,n]):vs(e,t,n)}class Cs{constructor(e,t,n){this.element=e,this.before=t||null,this.after=n||null}withBefore(e){return new Cs(this.element,e,this.after)}withAfter(e){return new Cs(this.element,this.before,e)}withElement(e){return new Cs(e,this.before,this.after)}insertChild(e){const t=this.before||this.getManagedLineBreak();return null!==t&&t.parentElement!==this.element&&Re(222),this.element.insertBefore(e,t),this}removeChild(e){return e.parentElement!==this.element&&Re(223),this.element.removeChild(e),this}replaceChild(e,t){return t.parentElement!==this.element&&Re(224),this.element.replaceChild(e,t),this}getFirstChild(){const e=this.after?this.after.nextSibling:this.element.firstChild;return e===this.before||e===this.getManagedLineBreak()?null:e}getManagedLineBreak(){return this.element.__lexicalLineBreak||null}setManagedLineBreak(e){if(null===e)this.removeManagedLineBreak();else{const t="decorator"===e&&(Y||X);this.insertManagedLineBreak(t)}}removeManagedLineBreak(){const e=this.getManagedLineBreak();if(e){const t=this.element,n="IMG"===e.nodeName?e.nextSibling:null;n&&t.removeChild(n),t.removeChild(e),t.__lexicalLineBreak=void 0}}insertManagedLineBreak(e){const t=this.getManagedLineBreak();if(t){if(e===("IMG"===t.nodeName))return;this.removeManagedLineBreak()}const n=this.element,r=this.before,i=document.createElement("br");if(n.insertBefore(i,r),e){const e=document.createElement("img");e.setAttribute("data-lexical-linebreak","true"),e.style.cssText="display: inline !important; border: 0px !important; margin: 0px !important;",e.alt="",n.insertBefore(e,i),n.__lexicalLineBreak=e}else n.__lexicalLineBreak=i}getFirstChildOffset(){let e=0;for(let t=this.after;null!==t;t=t.previousSibling)e++;return e}resolveChildIndex(e,t,n,r){if(n===this.element){const t=this.getFirstChildOffset();return[e,Math.min(t+e.getChildrenSize(),Math.max(t,r))]}const i=Ts(t,n);i.push(r);const s=Ts(t,this.element);let o=e.getIndexWithinParent();for(let e=0;e<s.length;e++){const t=i[e],n=s[e];if(void 0===t||t<n)break;if(t>n){o+=1;break}}return[e.getParentOrThrow(),o]}}function Ts(e,t){const n=[];let r=t;for(;r!==e&&null!==r;r=t.parentNode){let e=0;for(let t=r.previousSibling;null!==t;t=r.previousSibling)e++;n.push(e)}return r!==e&&Re(225),n.reverse()}class ks extends Vr{constructor(e){super(e),this.__first=null,this.__last=null,this.__size=0,this.__format=0,this.__style="",this.__indent=0,this.__dir=null}afterCloneFrom(e){super.afterCloneFrom(e),this.__first=e.__first,this.__last=e.__last,this.__size=e.__size,this.__indent=e.__indent,this.__format=e.__format,this.__style=e.__style,this.__dir=e.__dir}getFormat(){return this.getLatest().__format}getFormatType(){const e=this.getFormat();return Ae[e]||""}getStyle(){return this.getLatest().__style}getIndent(){return this.getLatest().__indent}getChildren(){const e=[];let t=this.getFirstChild();for(;null!==t;)e.push(t),t=t.getNextSibling();return e}getChildrenKeys(){const e=[];let t=this.getFirstChild();for(;null!==t;)e.push(t.__key),t=t.getNextSibling();return e}getChildrenSize(){return this.getLatest().__size}isEmpty(){return 0===this.getChildrenSize()}isDirty(){const e=ls()._dirtyElements;return null!==e&&e.has(this.__key)}isLastChild(){const e=this.getLatest(),t=this.getParentOrThrow().getLastChild();return null!==t&&t.is(e)}getAllTextNodes(){const e=[];let t=this.getFirstChild();for(;null!==t;){if(hi(t)&&e.push(t),bs(t)){const n=t.getAllTextNodes();e.push(...n)}t=t.getNextSibling()}return e}getFirstDescendant(){let e=this.getFirstChild();for(;bs(e);){const t=e.getFirstChild();if(null===t)break;e=t}return e}getLastDescendant(){let e=this.getLastChild();for(;bs(e);){const t=e.getLastChild();if(null===t)break;e=t}return e}getDescendantByIndex(e){const t=this.getChildren(),n=t.length;if(e>=n){const e=t[n-1];return bs(e)&&e.getLastDescendant()||e||null}const r=t[e];return bs(r)&&r.getFirstDescendant()||r||null}getFirstChild(){const e=this.getLatest().__first;return null===e?null:Ct(e)}getFirstChildOrThrow(){const e=this.getFirstChild();return null===e&&Re(45,this.__key),e}getLastChild(){const e=this.getLatest().__last;return null===e?null:Ct(e)}getLastChildOrThrow(){const e=this.getLastChild();return null===e&&Re(96,this.__key),e}getChildAtIndex(e){const t=this.getChildrenSize();let n,r;if(e<t/2){for(n=this.getFirstChild(),r=0;null!==n&&r<=e;){if(r===e)return n;n=n.getNextSibling(),r++}return null}for(n=this.getLastChild(),r=t-1;null!==n&&r>=e;){if(r===e)return n;n=n.getPreviousSibling(),r--}return null}getTextContent(){let e="";const t=this.getChildren(),n=t.length;for(let r=0;r<n;r++){const i=t[r];e+=i.getTextContent(),bs(i)&&r!==n-1&&!i.isInline()&&(e+=Ne)}return e}getTextContentSize(){let e=0;const t=this.getChildren(),n=t.length;for(let r=0;r<n;r++){const i=t[r];e+=i.getTextContentSize(),bs(i)&&r!==n-1&&!i.isInline()&&(e+=Ne.length)}return e}getDirection(){return this.getLatest().__dir}hasFormat(e){if(""!==e){const t=Ie[e];return!!(this.getFormat()&t)}return!1}select(e,t){is();const n=Ri();let r=e,i=t;const s=this.getChildrenSize();if(!this.canBeEmpty())if(0===e&&0===t){const e=this.getFirstChild();if(hi(e)||bs(e))return e.select(0,0)}else if(!(void 0!==e&&e!==s||void 0!==t&&t!==s)){const e=this.getLastChild();if(hi(e)||bs(e))return e.select()}void 0===r&&(r=s),void 0===i&&(i=s);const o=this.__key;return ki(n)?(n.anchor.set(o,r,"element"),n.focus.set(o,i,"element"),n.dirty=!0,n):Ii(o,r,o,i,"element","element")}selectStart(){const e=this.getFirstDescendant();return e?e.selectStart():this.select()}selectEnd(){const e=this.getLastDescendant();return e?e.selectEnd():this.select()}clear(){const e=this.getWritable();return this.getChildren().forEach((e=>e.remove())),e}append(...e){return this.splice(this.getChildrenSize(),0,e)}setDirection(e){const t=this.getWritable();return t.__dir=e,t}setFormat(e){return this.getWritable().__format=""!==e?Ie[e]:0,this}setStyle(e){return this.getWritable().__style=e||"",this}setIndent(e){return this.getWritable().__indent=e,this}splice(e,t,n){const r=n.length,i=this.getChildrenSize(),s=this.getWritable();e+t<=i||Re(226,String(e),String(t),String(i));const o=s.__key,l=[],c=[],a=this.getChildAtIndex(e+t);let u=null,f=i-t+r;if(0!==e)if(e===i)u=this.getLastChild();else{const t=this.getChildAtIndex(e);null!==t&&(u=t.getPreviousSibling())}if(t>0){let e=null===u?this.getFirstChild():u.getNextSibling();for(let n=0;n<t;n++){null===e&&Re(100);const t=e.getNextSibling(),n=e.__key;mt(e.getWritable()),c.push(n),e=t}}let d=u;for(let e=0;e<r;e++){const t=n[e];null!==d&&t.is(d)&&(u=d=d.getPreviousSibling());const r=t.getWritable();r.__parent===o&&f--,mt(r);const i=t.__key;if(null===d)s.__first=i,r.__prev=null;else{const e=d.getWritable();e.__next=i,r.__prev=e.__key}t.__key===o&&Re(76),r.__parent=o,l.push(i),d=t}if(e+t===i){if(null!==d){d.getWritable().__next=null,s.__last=d.__key}}else if(null!==a){const e=a.getWritable();if(null!==d){const t=d.getWritable();e.__prev=d.__key,t.__next=a.__key}else e.__prev=null}if(s.__size=f,c.length){const e=Ri();if(ki(e)){const t=new Set(c),n=new Set(l),{anchor:r,focus:i}=e;ws(r,t,n)&&Ui(r,r.getNode(),this,u,a),ws(i,t,n)&&Ui(i,i.getNode(),this,u,a),0!==f||this.canBeEmpty()||dn(this)||this.remove()}}return s}getDOMSlot(e){return new Cs(e)}exportDOM(e){const{element:t}=super.exportDOM(e);if(t&&Tn(t)){const e=this.getIndent();e>0&&(t.style.paddingInlineStart=40*e+"px")}return{element:t}}exportJSON(){return{children:[],direction:this.getDirection(),format:this.getFormatType(),indent:this.getIndent(),type:"element",version:1}}insertNewAfter(e,t){return null}canIndent(){return!0}collapseAtStart(e){return!1}excludeFromCopy(e){return!1}canReplaceWith(e){return!0}canInsertAfter(e){return!0}canBeEmpty(){return!0}canInsertTextBefore(){return!0}canInsertTextAfter(){return!0}isInline(){return!1}isShadowRoot(){return!1}canMergeWith(e){return!1}extractWithChild(e,t,n){return!1}canMergeWhenEmpty(){return!1}reconcileObservedMutation(e,t){const n=this.getDOMSlot(e);let r=n.getFirstChild();for(let e=this.getFirstChild();e;e=e.getNextSibling()){const i=t.getElementByKey(e.getKey());null!==i&&(null==r?(n.insertChild(i),r=i):r!==i&&n.replaceChild(i,r),r=r.nextSibling)}}}function bs(e){return e instanceof ks}function ws(e,t,n){let r=e.getNode();for(;r;){const e=r.__key;if(t.has(e)&&!n.has(e))return!0;r=r.getParent()}return!1}class Ns extends Vr{constructor(e){super(e)}decorate(e,t){Re(47)}isIsolated(){return!1}isInline(){return!0}isKeyboardSelectable(){return!0}}function Es(e){return e instanceof Ns}class Ps extends ks{static getType(){return"root"}static clone(){return new Ps}constructor(){super("root"),this.__cachedText=null}getTopLevelElementOrThrow(){Re(51)}getTextContent(){const e=this.__cachedText;return!rs()&&ls()._dirtyType!==se||null===e?super.getTextContent():e}remove(){Re(52)}replace(e){Re(53)}insertBefore(e){Re(54)}insertAfter(e){Re(55)}updateDOM(e,t){return!1}append(...e){for(let t=0;t<e.length;t++){const n=e[t];bs(n)||Es(n)||Re(56)}return super.append(...e)}static importJSON(e){const t=Et();return t.setFormat(e.format),t.setIndent(e.indent),t.setDirection(e.direction),t}exportJSON(){return{children:[],direction:this.getDirection(),format:this.getFormatType(),indent:this.getIndent(),type:"root",version:1}}collapseAtStart(){return!0}}function Fs(e){return e instanceof Ps}function Ls(e){return new Ms(new Map(e._nodeMap))}function Os(){return new Ms(new Map([["root",new Ps]]))}function Ds(e){const t=e.exportJSON(),n=e.constructor;if(t.type!==n.getType()&&Re(130,n.name),bs(e)){const r=t.children;Array.isArray(r)||Re(59,n.name);const i=e.getChildren();for(let e=0;e<i.length;e++){const t=Ds(i[e]);r.push(t)}}return t}class Ms{constructor(e,t){this._nodeMap=e,this._selection=t||null,this._flushSync=!1,this._readOnly=!1}isEmpty(){return 1===this._nodeMap.size&&null===this._selection}read(e,t){return _s(t&&t.editor||null,this,e)}clone(e){const t=new Ms(this._nodeMap,void 0===e?this._selection:e);return t._readOnly=!0,t}toJSON(){return _s(null,this,(()=>({root:Ds(Et())})))}}class Is extends ks{static getType(){return"artificial"}createDOM(e){return document.createElement("div")}}class As extends ks{constructor(e){super(e),this.__textFormat=0,this.__textStyle=""}static getType(){return"paragraph"}getTextFormat(){return this.getLatest().__textFormat}setTextFormat(e){const t=this.getWritable();return t.__textFormat=e,t}hasTextFormat(e){const t=De[e];return!!(this.getTextFormat()&t)}getFormatFlags(e,t){return _t(this.getLatest().__textFormat,e,t)}getTextStyle(){return this.getLatest().__textStyle}setTextStyle(e){const t=this.getWritable();return t.__textStyle=e,t}static clone(e){return new As(e.__key)}afterCloneFrom(e){super.afterCloneFrom(e),this.__textFormat=e.__textFormat,this.__textStyle=e.__textStyle}createDOM(e){const t=document.createElement("p"),n=qt(e.theme,"paragraph");if(void 0!==n){t.classList.add(...n)}return t}updateDOM(e,t,n){return!1}static importDOM(){return{p:e=>({conversion:Bs,priority:0})}}exportDOM(e){const{element:t}=super.exportDOM(e);if(t&&Tn(t)){this.isEmpty()&&t.append(document.createElement("br"));const e=this.getFormatType();t.style.textAlign=e;const n=this.getDirection();n&&(t.dir=n)}return{element:t}}static importJSON(e){const t=zs();return t.setFormat(e.format),t.setIndent(e.indent),t.setDirection(e.direction),t.setTextFormat(e.textFormat),t}exportJSON(){return{...super.exportJSON(),textFormat:this.getTextFormat(),textStyle:this.getTextStyle(),type:"paragraph",version:1}}insertNewAfter(e,t){const n=zs();n.setTextFormat(e.format),n.setTextStyle(e.style);const r=this.getDirection();return n.setDirection(r),n.setFormat(this.getFormatType()),n.setStyle(this.getTextStyle()),this.insertAfter(n,t),n}collapseAtStart(){const e=this.getChildren();if(0===e.length||hi(e[0])&&""===e[0].getTextContent().trim()){if(null!==this.getNextSibling())return this.selectNext(),this.remove(),!0;if(null!==this.getPreviousSibling())return this.selectPrevious(),this.remove(),!0}return!1}}function Bs(e){const t=zs();return e.style&&(t.setFormat(e.style.textAlign),Mn(e,t)),{node:t}}function zs(){return gn(new As)}function Ws(e){return e instanceof As}const Rs=0,Ks=1,Js=2,$s=3,Us=4;function Vs(e,t,n,r){const i=e._keyToDOMMap;i.clear(),e._editorState=Os(),e._pendingEditorState=r,e._compositionKey=null,e._dirtyType=se,e._cloneNotNeeded.clear(),e._dirtyLeaves=new Set,e._dirtyElements.clear(),e._normalizedNodes=new Set,e._updateTags=new Set,e._updates=[],e._blockCursorElement=null;const s=e._observer;null!==s&&(s.disconnect(),e._observer=null),null!==t&&(t.textContent=""),null!==n&&(n.textContent="",i.set("root",n))}function js(e){const t=e||{},n=as(),r=t.theme||{},i=void 0===e?n:t.parentEditor||null,s=t.disableEvents||!1,o=Os(),l=t.namespace||(null!==i?i._config.namespace:It()),c=t.editorState,a=[Ps,ri,jr,_i,As,Is,...t.nodes||[]],{onError:u,html:f}=t,d=void 0===t.editable||t.editable;let h;if(void 0===e&&null!==n)h=n._nodes;else{h=new Map;for(let e=0;e<a.length;e++){let t=a[e],n=null,r=null;if("function"!=typeof t){const e=t;t=e.replace,n=e.with,r=e.withKlass||null}const i=t.getType(),s=t.transform(),o=new Set;null!==s&&o.add(s),h.set(i,{exportDOM:f&&f.export?f.export.get(t):void 0,klass:t,replace:n,replaceWithKlass:r,transforms:o})}}const g=new Hs(o,i,h,{disableEvents:s,namespace:l,theme:r},u||console.error,function(e,t){const n=new Map,r=new Set,i=e=>{Object.keys(e).forEach((t=>{let r=n.get(t);void 0===r&&(r=[],n.set(t,r)),r.push(e[t])}))};return e.forEach((e=>{const t=e.klass.importDOM;if(null==t||r.has(t))return;r.add(t);const n=t.call(e.klass);null!==n&&i(n)})),t&&i(t),n}(h,f?f.import:void 0),d);return void 0!==c&&(g._pendingEditorState=c,g._dirtyType=le),g}class Hs{constructor(e,t,n,r,i,s,o){this._parentEditor=t,this._rootElement=null,this._editorState=e,this._pendingEditorState=null,this._compositionKey=null,this._deferred=[],this._keyToDOMMap=new Map,this._updates=[],this._updating=!1,this._listeners={decorator:new Set,editable:new Set,mutation:new Map,root:new Set,textcontent:new Set,update:new Set},this._commands=new Map,this._config=r,this._nodes=n,this._decorators={},this._pendingDecorators=null,this._dirtyType=se,this._cloneNotNeeded=new Set,this._dirtyLeaves=new Set,this._dirtyElements=new Map,this._normalizedNodes=new Set,this._updateTags=new Set,this._observer=null,this._key=It(),this._onError=i,this._htmlConversions=s,this._editable=o,this._headless=null!==t&&t._headless,this._window=null,this._blockCursorElement=null}isComposing(){return null!=this._compositionKey}registerUpdateListener(e){const t=this._listeners.update;return t.add(e),()=>{t.delete(e)}}registerEditableListener(e){const t=this._listeners.editable;return t.add(e),()=>{t.delete(e)}}registerDecoratorListener(e){const t=this._listeners.decorator;return t.add(e),()=>{t.delete(e)}}registerTextContentListener(e){const t=this._listeners.textcontent;return t.add(e),()=>{t.delete(e)}}registerRootListener(e){const t=this._listeners.root;return e(this._rootElement,null),t.add(e),()=>{e(null,this._rootElement),t.delete(e)}}registerCommand(e,t,n){void 0===n&&Re(35);const r=this._commands;r.has(e)||r.set(e,[new Set,new Set,new Set,new Set,new Set]);const i=r.get(e);void 0===i&&Re(36,String(e));const s=i[n];return s.add(t),()=>{s.delete(t),i.every((e=>0===e.size))&&r.delete(e)}}registerMutationListener(e,t,n){const r=this.resolveRegisteredNodeAfterReplacements(this.getRegisteredNode(e)).klass,i=this._listeners.mutation;i.set(t,r);const s=n&&n.skipInitialization;return void 0!==s&&s||this.initializeMutationListener(t,r),()=>{i.delete(t)}}getRegisteredNode(e){const t=this._nodes.get(e.getType());return void 0===t&&Re(37,e.name),t}resolveRegisteredNodeAfterReplacements(e){for(;e.replaceWithKlass;)e=this.getRegisteredNode(e.replaceWithKlass);return e}initializeMutationListener(e,t){const n=this._editorState,r=On(n).get(t.getType());if(!r)return;const i=new Map;for(const e of r.keys())i.set(e,"created");i.size>0&&e(i,{dirtyLeaves:new Set,prevEditorState:n,updateTags:new Set(["registerMutationListener"])})}registerNodeTransformToKlass(e,t){const n=this.getRegisteredNode(e);return n.transforms.add(t),n}registerNodeTransform(e,t){const n=this.registerNodeTransformToKlass(e,t),r=[n],i=n.replaceWithKlass;if(null!=i){const e=this.registerNodeTransformToKlass(i,t);r.push(e)}var s,o;return s=this,o=e.getType(),Ss(s,(()=>{const e=os();if(e.isEmpty())return;if("root"===o)return void Et().markDirty();const t=e._nodeMap;for(const[,e]of t)e.markDirty()}),null===s._pendingEditorState?{tag:"history-merge"}:void 0),()=>{r.forEach((e=>e.transforms.delete(t)))}}hasNode(e){return this._nodes.has(e.getType())}hasNodes(e){return e.every(this.hasNode.bind(this))}dispatchCommand(e,t){return en(this,e,t)}getDecorators(){return this._decorators}getRootElement(){return this._rootElement}getKey(){return this._key}setRootElement(e){const t=this._rootElement;if(e!==t){const n=qt(this._config.theme,"root"),r=this._pendingEditorState||this._editorState;if(this._rootElement=e,Vs(this,t,e,r),null!==t&&(this._config.disableEvents||$r(t),null!=n&&t.classList.remove(...n)),null!==e){const t=function(e){const t=e.ownerDocument;return t&&t.defaultView||null}(e),r=e.style;r.userSelect="text",r.whiteSpace="pre-wrap",r.wordBreak="break-word",e.setAttribute("data-lexical-editor","true"),this._window=t,this._dirtyType=le,Ye(this),this._updateTags.add("history-merge"),ps(this),this._config.disableEvents||function(e,t){const n=e.ownerDocument,r=Nr.get(n);(void 0===r||r<1)&&n.addEventListener("selectionchange",Rr),Nr.set(n,(r||0)+1),e.__lexicalEditor=t;const i=zr(e);for(let n=0;n<Cr.length;n++){const[r,s]=Cr[n],o="function"==typeof s?e=>{Jr(e)||(Kr(e),(t.isEditable()||"click"===r)&&s(e,t))}:e=>{if(Jr(e))return;Kr(e);const n=t.isEditable();switch(r){case"cut":return n&&en(t,Lexical_prod_B,e);case"copy":return en(t,Lexical_prod_A,e);case"paste":return n&&en(t,Lexical_prod_c,e);case"dragstart":return n&&en(t,Lexical_prod_D,e);case"dragover":return n&&en(t,Lexical_prod_M,e);case"dragend":return n&&en(t,Lexical_prod_I,e);case"focus":return n&&en(t,Lexical_prod_$,e);case"blur":return n&&en(t,Lexical_prod_U,e);case"drop":return n&&en(t,Lexical_prod_L,e)}};e.addEventListener(r,o),i.push((()=>{e.removeEventListener(r,o)}))}}(e,this),null!=n&&e.classList.add(...n)}else this._editorState=r,this._pendingEditorState=null,this._window=null;ys("root",this,!1,e,t)}}getElementByKey(e){return this._keyToDOMMap.get(e)||null}getEditorState(){return this._editorState}setEditorState(e,t){e.isEmpty()&&Re(38);let n=e;n._readOnly&&(n=Ls(e),n._selection=e._selection?e._selection.clone():null),Xe(this);const r=this._pendingEditorState,i=this._updateTags,s=void 0!==t?t.tag:null;null===r||r.isEmpty()||(null!=s&&i.add(s),ps(this)),this._pendingEditorState=n,this._dirtyType=le,this._dirtyElements.set("root",!1),this._compositionKey=null,null!=s&&i.add(s),this._updating||ps(this)}parseEditorState(e,t){return function(e,t,n){const r=Os(),i=Xi,s=Zi,o=Yi,l=t._dirtyElements,c=t._dirtyLeaves,a=t._cloneNotNeeded,u=t._dirtyType;t._dirtyElements=new Map,t._dirtyLeaves=new Set,t._cloneNotNeeded=new Set,t._dirtyType=0,Xi=r,Zi=!1,Yi=t;try{const i=t._nodes;gs(e.root,i),n&&n(),r._readOnly=!0}catch(e){e instanceof Error&&t._onError(e)}finally{t._dirtyElements=l,t._dirtyLeaves=c,t._cloneNotNeeded=a,t._dirtyType=u,Xi=i,Zi=s,Yi=o}return r}("string"==typeof e?JSON.parse(e):e,this,t)}read(e){return ps(this),this.getEditorState().read(e,{editor:this})}update(e,t){Ss(this,e,t)}focus(e,t={}){const n=this._rootElement;null!==n&&(n.setAttribute("autocapitalize","off"),Ss(this,(()=>{const e=Ri(),n=Et();null!==e?e.dirty=!0:0!==n.getChildrenSize()&&("rootStart"===t.defaultSelection?n.selectStart():n.selectEnd())}),{onUpdate:()=>{n.removeAttribute("autocapitalize"),e&&e()},tag:"focus"}),null===this._pendingEditorState&&n.removeAttribute("autocapitalize"))}blur(){const e=this._rootElement;null!==e&&e.blur();const t=vn(this._window);null!==t&&t.removeAllRanges()}isEditable(){return this._editable}setEditable(e){this._editable!==e&&(this._editable=e,ys("editable",this,!0,e))}toJSON(){return{editorState:this._editorState.toJSON()}}}Hs.version="0.21.0+prod.esm";

;// ../../node_modules/@lexical/utils/LexicalUtils.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalUtils_prod_p(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var LexicalUtils_prod_h=LexicalUtils_prod_p((function(e){const t=new URLSearchParams;t.append("code",e);for(let e=1;e<arguments.length;e++)t.append("v",arguments[e]);throw Error(`Minified Lexical error #${e}; visit https://lexical.dev/docs/error?${t} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));const LexicalUtils_prod_m="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,LexicalUtils_prod_v=LexicalUtils_prod_m&&"documentMode"in document?document.documentMode:null,LexicalUtils_prod_y=LexicalUtils_prod_m&&/Mac|iPod|iPhone|iPad/.test(navigator.platform),LexicalUtils_prod_w=LexicalUtils_prod_m&&/^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent),LexicalUtils_prod_E=!(!LexicalUtils_prod_m||!("InputEvent"in window)||LexicalUtils_prod_v)&&"getTargetRanges"in new window.InputEvent("input"),LexicalUtils_prod_x=LexicalUtils_prod_m&&/Version\/[\d.]+.*Safari/.test(navigator.userAgent),LexicalUtils_prod_P=LexicalUtils_prod_m&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,LexicalUtils_prod_S=LexicalUtils_prod_m&&/Android/.test(navigator.userAgent),LexicalUtils_prod_b=LexicalUtils_prod_m&&/^(?=.*Chrome).*/i.test(navigator.userAgent),LexicalUtils_prod_L=(/* unused pure expression or super */ null && (LexicalUtils_prod_m&&LexicalUtils_prod_S&&LexicalUtils_prod_b)),LexicalUtils_prod_A=LexicalUtils_prod_m&&/AppleWebKit\/[\d.]+/.test(navigator.userAgent)&&!LexicalUtils_prod_b;function LexicalUtils_prod_C(...e){const t=[];for(const n of e)if(n&&"string"==typeof n)for(const[e]of n.matchAll(/\S+/g))t.push(e);return t}function LexicalUtils_prod_N(...e){return()=>{for(let t=e.length-1;t>=0;t--)e[t]();e.length=0}}function LexicalUtils_prod_B(e){return`${e}px`}const LexicalUtils_prod_T={attributes:!0,characterData:!0,childList:!0,subtree:!0};function LexicalUtils_prod_M(t,n,o){let l=null,r=null,i=null,s=[];const u=document.createElement("div");function c(){null===l&&LexicalUtils_prod_h(182),null===r&&LexicalUtils_prod_h(183);const{left:e,top:i}=r.getBoundingClientRect(),c=g(t,n);var d,f;u.isConnected||(f=u,(d=r).insertBefore(f,d.firstChild));let a=!1;for(let t=0;t<c.length;t++){const n=c[t],o=s[t]||document.createElement("div"),l=o.style;"absolute"!==l.position&&(l.position="absolute",a=!0);const r=LexicalUtils_prod_B(n.left-e);l.left!==r&&(l.left=r,a=!0);const d=LexicalUtils_prod_B(n.top-i);l.top!==d&&(o.style.top=d,a=!0);const f=LexicalUtils_prod_B(n.width);l.width!==f&&(o.style.width=f,a=!0);const g=LexicalUtils_prod_B(n.height);l.height!==g&&(o.style.height=g,a=!0),o.parentNode!==u&&(u.append(o),a=!0),s[t]=o}for(;s.length>c.length;)s.pop();a&&o(s)}function d(){r=null,l=null,null!==i&&i.disconnect(),i=null,u.remove();for(const e of s)e.remove();s=[]}u.style.position="relative";const f=t.registerRootListener((function n(){const o=t.getRootElement();if(null===o)return d();const s=o.parentElement;if(null===s||!e(s))return d();d(),l=o,r=s,i=new MutationObserver((e=>{const o=t.getRootElement(),i=o&&o.parentElement;if(o!==l||i!==r)return n();for(const t of e)if(!u.contains(t.target))return c()})),i.observe(s,LexicalUtils_prod_T),c()}));return()=>{f(),d()}}function LexicalUtils_prod_R(e,r){let i=null,s=null,u=null,c=null,d=()=>{};function f(f){f.read((()=>{const f=t();if(!n(f))return i=null,s=null,u=null,c=null,d(),void(d=()=>{});const{anchor:a,focus:g}=f,p=a.getNode(),h=p.getKey(),m=a.offset,v=g.getNode(),y=v.getKey(),w=g.offset,E=e.getElementByKey(h),x=e.getElementByKey(y),P=null===i||null===E||m!==s||h!==i.getKey()||p!==i&&(!o(i)||p.updateDOM(i,E,e._config)),S=null===u||null===x||w!==c||y!==u.getKey()||v!==u&&(!o(u)||v.updateDOM(u,x,e._config));if(P||S){const t=e.getElementByKey(a.getNode().getKey()),n=e.getElementByKey(g.getNode().getKey());if(null!==t&&null!==n){const o=document.createRange();let i,s,u,c;g.isBefore(a)?(i=n,s=g.offset,u=t,c=a.offset):(i=t,s=a.offset,u=n,c=g.offset);const f=l(i),p=l(u);o.setStart(f||i,s),o.setEnd(p||u,c),d(),d=LexicalUtils_prod_M(e,o,(e=>{if(void 0===r)for(const t of e){const e=t.style;"Highlight"!==e.background&&(e.background="Highlight"),"HighlightText"!==e.color&&(e.color="HighlightText"),e.marginTop!==LexicalUtils_prod_B(-1.5)&&(e.marginTop=LexicalUtils_prod_B(-1.5)),e.paddingTop!==LexicalUtils_prod_B(4)&&(e.paddingTop=LexicalUtils_prod_B(4)),e.paddingBottom!==LexicalUtils_prod_B(0)&&(e.paddingBottom=LexicalUtils_prod_B(0))}else r(e)}))}}i=p,s=m,u=v,c=w}))}return f(e.getEditorState()),LexicalUtils_prod_N(e.registerUpdateListener((({editorState:e})=>f(e))),d,(()=>{d()}))}function LexicalUtils_prod_(e){let t=null;const n=()=>{const n=getSelection(),o=n&&n.anchorNode,l=e.getRootElement();null!==o&&null!==l&&l.contains(o)?null!==t&&(t(),t=null):null===t&&(t=LexicalUtils_prod_R(e))};return document.addEventListener("selectionchange",n),()=>{null!==t&&t(),document.removeEventListener("selectionchange",n)}}const LexicalUtils_prod_K=(/* unused pure expression or super */ null && (LexicalUtils_prod_E)),LexicalUtils_prod_O=LexicalUtils_prod_m,LexicalUtils_prod_D=(/* unused pure expression or super */ null && (LexicalUtils_prod_S)),LexicalUtils_prod_H=(/* unused pure expression or super */ null && (LexicalUtils_prod_L)),LexicalUtils_prod_I=(/* unused pure expression or super */ null && (LexicalUtils_prod_y)),LexicalUtils_prod_k=(/* unused pure expression or super */ null && (LexicalUtils_prod_A)),LexicalUtils_prod_z=(/* unused pure expression or super */ null && (LexicalUtils_prod_b)),LexicalUtils_prod_F=LexicalUtils_prod_w,LexicalUtils_prod_$=(/* unused pure expression or super */ null && (LexicalUtils_prod_P)),LexicalUtils_prod_U=(/* unused pure expression or super */ null && (LexicalUtils_prod_x));function LexicalUtils_prod_W(e,...t){const n=LexicalUtils_prod_C(...t);n.length>0&&e.classList.add(...n)}function LexicalUtils_prod_j(e,...t){const n=LexicalUtils_prod_C(...t);n.length>0&&e.classList.remove(...n)}function LexicalUtils_prod_V(e,t){for(const n of t)if(e.type.startsWith(n))return!0;return!1}function LexicalUtils_prod_q(e,t){const n=e[Symbol.iterator]();return new Promise(((e,o)=>{const l=[],r=()=>{const{done:i,value:s}=n.next();if(i)return e(l);const u=new FileReader;u.addEventListener("error",o),u.addEventListener("load",(()=>{const e=u.result;"string"==typeof e&&l.push({file:s,result:e}),r()})),LexicalUtils_prod_V(s,t)?u.readAsDataURL(s):r()};r()}))}function LexicalUtils_prod_G(e,t){return Array.from(LexicalUtils_prod_X(e,t))}const LexicalUtils_prod_J={done:!0,value:void 0},LexicalUtils_prod_Q=e=>({done:!1,value:e});function LexicalUtils_prod_X(e,t){const n=(e||r()).getLatest(),o=LexicalUtils_prod_Z(n),l=t;let s=n,u=o,c=!0;const d={next(){if(null===s)return LexicalUtils_prod_J;if(c)return c=!1,LexicalUtils_prod_Q({depth:u,node:s});if(s===l)return LexicalUtils_prod_J;if(i(s)&&s.getChildrenSize()>0)s=s.getFirstChild(),u++;else{let e;[s,e]=LexicalUtils_prod_Y(s)||[null,0],u+=e,null==l&&u<=o&&(s=null)}return null===s?LexicalUtils_prod_J:LexicalUtils_prod_Q({depth:u,node:s})},[Symbol.iterator]:()=>d};return d}function LexicalUtils_prod_Y(e){let t=e,n=null,o=0;for(;null===n&&null!==t;)n=t.getNextSibling(),null===n?(t=t.getParent(),o--):t=n;return null===t?null:[t,o]}function LexicalUtils_prod_Z(e){let t=e,n=0;for(;null!==(t=t.getParent());)n++;return n}function LexicalUtils_prod_ee(e){let t=e;if(i(t)&&t.getChildrenSize()>0)t=t.getLastChild();else{let e=null;for(;null===e&&null!==t;)e=t.getPreviousSibling(),t=null===e?t.getParent():e}return t}function LexicalUtils_prod_te(e,t){let n=e;for(;null!=n;){if(n instanceof t)return n;n=n.getParent()}return null}function LexicalUtils_prod_ne(e){const t=LexicalUtils_prod_oe(e,(e=>bs(e)&&!e.isInline()));return bs(t)||LexicalUtils_prod_h(4,e.__key),t}const LexicalUtils_prod_oe=(e,t)=>{let n=e;for(;n!==Et()&&null!=n;){if(t(n))return n;n=n.getParent()}return null};function LexicalUtils_prod_le(e,t,n,o){const l=e=>e instanceof t;return e.registerNodeTransform(t,(e=>{const t=(e=>{const t=e.getChildren();for(let e=0;e<t.length;e++){const n=t[e];if(l(n))return null}let n=e,o=e;for(;null!==n;)if(o=n,n=n.getParent(),l(n))return{child:o,parent:n};return null})(e);if(null!==t){const{child:l,parent:r}=t;if(l.is(e)){o(r,e);const t=l.getNextSiblings(),i=t.length;if(r.insertAfter(l),0!==i){const e=n(r);l.insertAfter(e);for(let n=0;n<i;n++)e.append(t[n])}r.canBeEmpty()||0!==r.getChildrenSize()||r.remove()}}}))}function LexicalUtils_prod_re(e,t){const n=new Map,o=e._pendingEditorState;for(const[e,o]of t._nodeMap)n.set(e,s(o));o&&(o._nodeMap=n),e._dirtyType=2;const l=t._selection;u(null===l?null:l.clone())}function LexicalUtils_prod_ie(e){const l=t()||c();if(n(l)){const{focus:t}=l,n=t.getNode(),r=t.offset;if(d(n)){const t=n.getChildAtIndex(r);null==t?n.append(e):t.insertBefore(e),e.selectNext()}else{let t,l;o(n)?(t=n.getParentOrThrow(),l=n.getIndexWithinParent(),r>0&&(l+=1,n.splitText(r))):(t=n,l=r);const[,i]=f(t,l);i.insertBefore(e),i.selectStart()}}else{if(null!=l){const t=l.getNodes();t[t.length-1].getTopLevelElementOrThrow().insertAfter(e)}else{r().append(e)}const t=a();e.insertAfter(t),t.select()}return e.getLatest()}function LexicalUtils_prod_se(e,t){const n=t();return e.replace(n),n.append(e),n}function LexicalUtils_prod_ue(e,t){return null!==e&&Object.getPrototypeOf(e).constructor.name===t.name}function LexicalUtils_prod_ce(e,t){const n=[];for(let o=0;o<e.length;o++){const l=t(e[o]);null!==l&&n.push(l)}return n}function LexicalUtils_prod_de(e,t){const n=e.getFirstChild();null!==n?n.insertBefore(t):e.append(t)}let LexicalUtils_prod_fe=!(LexicalUtils_prod_F||!LexicalUtils_prod_O)&&void 0;function LexicalUtils_prod_ae(e){let t=1;if(function(){if(void 0===LexicalUtils_prod_fe){const e=document.createElement("div");e.style.cssText="position: absolute; opacity: 0; width: 100px; left: -1000px;",document.body.appendChild(e);const t=e.getBoundingClientRect();e.style.setProperty("zoom","2"),LexicalUtils_prod_fe=e.getBoundingClientRect().width===t.width,document.body.removeChild(e)}return LexicalUtils_prod_fe}())for(;e;)t*=Number(window.getComputedStyle(e).getPropertyValue("zoom")),e=e.parentElement;return t}function LexicalUtils_prod_ge(e){return null!==e._parentEditor}

// EXTERNAL MODULE: ../../node_modules/prismjs/prism.js
var prism = __webpack_require__(973711);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-clike.js
var prism_clike = __webpack_require__(141901);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-javascript.js
var prism_javascript = __webpack_require__(960048);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-markup.js
var prism_markup = __webpack_require__(614087);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-markdown.js
var prism_markdown = __webpack_require__(287414);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-c.js
var prism_c = __webpack_require__(809598);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-css.js
var prism_css = __webpack_require__(570476);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-objectivec.js
var prism_objectivec = __webpack_require__(509899);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-sql.js
var prism_sql = __webpack_require__(642207);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-powershell.js
var prism_powershell = __webpack_require__(224002);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-python.js
var prism_python = __webpack_require__(938445);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-rust.js
var prism_rust = __webpack_require__(193145);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-swift.js
var prism_swift = __webpack_require__(304664);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-typescript.js
var prism_typescript = __webpack_require__(113136);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-java.js
var prism_java = __webpack_require__(638779);
// EXTERNAL MODULE: ../../node_modules/prismjs/components/prism-cpp.js
var prism_cpp = __webpack_require__(612886);
;// ../../node_modules/@lexical/code/LexicalCode.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function LexicalCode_prod_w(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var LexicalCode_prod_P=LexicalCode_prod_w((function(t){const e=new URLSearchParams;e.append("code",t);for(let t=1;t<arguments.length;t++)e.append("v",arguments[t]);throw Error(`Minified Lexical error #${t}; visit https://lexical.dev/docs/error?${e} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));const LexicalCode_prod_k=globalThis.Prism||window.Prism,LexicalCode_prod_L=t=>{try{return!!t&&LexicalCode_prod_k.languages.hasOwnProperty(t)}catch(t){return!1}};function LexicalCode_prod_A(e,n){for(const r of e.childNodes){if(Tn(r)&&r.tagName===n)return!0;LexicalCode_prod_A(r,n)}return!1}const LexicalCode_prod_O="data-language",LexicalCode_prod_M="data-highlight-language";class LexicalCode_prod_H extends ks{static getType(){return"code"}static clone(t){return new LexicalCode_prod_H(t.__language,t.__key)}constructor(t,e){super(e),this.__language=t,this.__isSyntaxHighlightSupported=LexicalCode_prod_L(t)}createDOM(t){const n=document.createElement("code");LexicalUtils_prod_W(n,t.theme.code),n.setAttribute("spellcheck","false");const r=this.getLanguage();return r&&(n.setAttribute(LexicalCode_prod_O,r),this.getIsSyntaxHighlightSupported()&&n.setAttribute(LexicalCode_prod_M,r)),n}updateDOM(t,e,n){const r=this.__language,o=t.__language;return r?r!==o&&(e.setAttribute(LexicalCode_prod_O,r),this.__isSyntaxHighlightSupported&&e.setAttribute(LexicalCode_prod_M,r)):o&&(e.removeAttribute(LexicalCode_prod_O),t.__isSyntaxHighlightSupported&&e.removeAttribute(LexicalCode_prod_M)),!1}exportDOM(t){const n=document.createElement("pre");LexicalUtils_prod_W(n,t._config.theme.code),n.setAttribute("spellcheck","false");const r=this.getLanguage();return r&&(n.setAttribute(LexicalCode_prod_O,r),this.getIsSyntaxHighlightSupported()&&n.setAttribute(LexicalCode_prod_M,r)),{element:n}}static importDOM(){return{code:t=>null!=t.textContent&&(/\r?\n/.test(t.textContent)||LexicalCode_prod_A(t,"BR"))?{conversion:LexicalCode_prod_E,priority:1}:null,div:()=>({conversion:LexicalCode_prod_B,priority:1}),pre:()=>({conversion:LexicalCode_prod_E,priority:0}),table:t=>LexicalCode_prod_F(t)?{conversion:LexicalCode_prod_I,priority:3}:null,td:t=>{const e=t,n=e.closest("table");return e.classList.contains("js-file-line")||n&&LexicalCode_prod_F(n)?{conversion:LexicalCode_prod_J,priority:3}:null},tr:t=>{const e=t.closest("table");return e&&LexicalCode_prod_F(e)?{conversion:LexicalCode_prod_J,priority:3}:null}}}static importJSON(t){const e=LexicalCode_prod_D(t.language);return e.setFormat(t.format),e.setIndent(t.indent),e.setDirection(t.direction),e}exportJSON(){return{...super.exportJSON(),language:this.getLanguage(),type:"code",version:1}}insertNewAfter(t,e=!0){const n=this.getChildren(),r=n.length;if(r>=2&&"\n"===n[r-1].getTextContent()&&"\n"===n[r-2].getTextContent()&&t.isCollapsed()&&t.anchor.key===this.__key&&t.anchor.offset===r){n[r-1].remove(),n[r-2].remove();const t=zs();return this.insertAfter(t,e),t}const{anchor:o,focus:a}=t,g=(o.isBefore(a)?o:a).getNode();if(hi(g)){let t=LexicalCode_prod_tt(g);const e=[];for(;;)if(yi(t))e.push(pi()),t=t.getNextSibling();else{if(!LexicalCode_prod_Z(t))break;{let n=0;const r=t.getTextContent(),o=t.getTextContentSize();for(;n<o&&" "===r[n];)n++;if(0!==n&&e.push(LexicalCode_prod_Y(" ".repeat(n))),n!==o)break;t=t.getNextSibling()}}const n=g.splitText(o.offset)[0],r=0===o.offset?0:1,i=n.getIndexWithinParent()+r,s=g.getParentOrThrow(),a=[qr(),...e];s.splice(i,0,a);const f=e[e.length-1];f?f.select():0===o.offset?n.selectPrevious():n.getNextSibling().selectNext(0,0)}if(LexicalCode_prod_z(g)){const{offset:e}=t.anchor;g.splice(e,0,[qr()]),g.select(e+1,e+1)}return null}canIndent(){return!1}collapseAtStart(){const t=zs();return this.getChildren().forEach((e=>t.append(e))),this.replace(t),!0}setLanguage(t){const e=this.getWritable();e.__language=t,e.__isSyntaxHighlightSupported=LexicalCode_prod_L(t)}getLanguage(){return this.getLatest().__language}getIsSyntaxHighlightSupported(){return this.getLatest().__isSyntaxHighlightSupported}}function LexicalCode_prod_D(t){return gn(new LexicalCode_prod_H(t))}function LexicalCode_prod_z(t){return t instanceof LexicalCode_prod_H}function LexicalCode_prod_E(t){return{node:LexicalCode_prod_D(t.getAttribute(LexicalCode_prod_O))}}function LexicalCode_prod_B(t){const e=t,n=LexicalCode_prod_R(e);return n||function(t){let e=t.parentElement;for(;null!==e;){if(LexicalCode_prod_R(e))return!0;e=e.parentElement}return!1}(e)?{node:n?LexicalCode_prod_D():null}:{node:null}}function LexicalCode_prod_I(){return{node:LexicalCode_prod_D()}}function LexicalCode_prod_J(){return{node:null}}function LexicalCode_prod_R(t){return null!==t.style.fontFamily.match("monospace")}function LexicalCode_prod_F(t){return t.classList.contains("js-file-line-container")}const LexicalCode_prod_K="javascript",LexicalCode_prod_q={c:"C",clike:"C-like",cpp:"C++",css:"CSS",html:"HTML",java:"Java",js:"JavaScript",markdown:"Markdown",objc:"Objective-C",plain:"Plain Text",powershell:"PowerShell",py:"Python",rust:"Rust",sql:"SQL",swift:"Swift",typescript:"TypeScript",xml:"XML"},LexicalCode_prod_U={cpp:"cpp",java:"java",javascript:"js",md:"markdown",plaintext:"plain",python:"py",text:"plain",ts:"typescript"};function LexicalCode_prod_W(t){return LexicalCode_prod_U[t]||t}function LexicalCode_prod_$(t){const e=LexicalCode_prod_W(t);return LexicalCode_prod_q[e]||e}const LexicalCode_prod_Q=()=>LexicalCode_prod_K,LexicalCode_prod_X=()=>Object.keys(LexicalCode_prod_k.languages).filter((t=>"function"!=typeof LexicalCode_prod_k.languages[t])).sort();class LexicalCode_prod_G extends ri{constructor(t,e,n){super(t,n),this.__highlightType=e}static getType(){return"code-highlight"}static clone(t){return new LexicalCode_prod_G(t.__text,t.__highlightType||void 0,t.__key)}getHighlightType(){return this.getLatest().__highlightType}canHaveFormat(){return!1}createDOM(t){const n=super.createDOM(t),r=LexicalCode_prod_V(t.theme,this.__highlightType);return LexicalUtils_prod_W(n,r),n}updateDOM(t,r,o){const i=super.updateDOM(t,r,o),s=LexicalCode_prod_V(o.theme,t.__highlightType),l=LexicalCode_prod_V(o.theme,this.__highlightType);return s!==l&&(s&&LexicalUtils_prod_j(r,s),l&&LexicalUtils_prod_W(r,l)),i}static importJSON(t){const e=LexicalCode_prod_Y(t.text,t.highlightType);return e.setFormat(t.format),e.setDetail(t.detail),e.setMode(t.mode),e.setStyle(t.style),e}exportJSON(){return{...super.exportJSON(),highlightType:this.getHighlightType(),type:"code-highlight",version:1}}setFormat(t){return this}isParentRequired(){return!0}createParentElementNode(){return LexicalCode_prod_D()}}function LexicalCode_prod_V(t,e){return e&&t&&t.codeHighlight&&t.codeHighlight[e]}function LexicalCode_prod_Y(t,e){return gn(new LexicalCode_prod_G(t,e))}function LexicalCode_prod_Z(t){return t instanceof LexicalCode_prod_G}function LexicalCode_prod_tt(t){let e=t,n=t;for(;LexicalCode_prod_Z(n)||yi(n);)e=n,n=n.getPreviousSibling();return e}function LexicalCode_prod_et(t){let e=t,n=t;for(;LexicalCode_prod_Z(n)||l(n);)e=n,n=n.getNextSibling();return e}const LexicalCode_prod_nt={defaultLanguage:LexicalCode_prod_K,tokenize(t,e){return LexicalCode_prod_k.tokenize(t,LexicalCode_prod_k.languages[e||""]||LexicalCode_prod_k.languages[this.defaultLanguage])}};function LexicalCode_prod_rt(t,e){let n=null,r=null,o=t,i=e,s=t.getTextContent();for(;;){if(0===i){if(o=o.getPreviousSibling(),null===o)break;if(LexicalCode_prod_Z(o)||l(o)||f(o)||LexicalCode_prod_P(167),f(o)){n={node:o,offset:1};break}i=Math.max(0,o.getTextContentSize()-1),s=o.getTextContent()}else i--;const t=s[i];LexicalCode_prod_Z(o)&&" "!==t&&(r={node:o,offset:i})}if(null!==r)return r;let u=null;if(e<t.getTextContentSize())LexicalCode_prod_Z(t)&&(u=t.getTextContent()[e]);else{const e=t.getNextSibling();LexicalCode_prod_Z(e)&&(u=e.getTextContent()[0])}if(null!==u&&" "!==u)return n;{const r=function(t,e){let n=t,r=e,o=t.getTextContent(),i=t.getTextContentSize();for(;;){if(!LexicalCode_prod_Z(n)||r===i){if(n=n.getNextSibling(),null===n||f(n))return null;LexicalCode_prod_Z(n)&&(r=0,o=n.getTextContent(),i=n.getTextContentSize())}if(LexicalCode_prod_Z(n)){if(" "!==o[r])return{node:n,offset:r};r++}}}(t,e);return null!==r?r:n}}function LexicalCode_prod_ot(t){const e=LexicalCode_prod_et(t);return f(e)&&LexicalCode_prod_P(168),e}function LexicalCode_prod_it(t,e,n){const r=t.getParent();LexicalCode_prod_z(r)?LexicalCode_prod_ut(r,e,n):LexicalCode_prod_Z(t)&&t.replace(p(t.__text))}function LexicalCode_prod_st(t,e){const n=e.getElementByKey(t.getKey());if(null===n)return;const r=t.getChildren(),o=r.length;if(o===n.__cachedChildrenLength)return;n.__cachedChildrenLength=o;let i="1",s=1;for(let t=0;t<o;t++)f(r[t])&&(i+="\n"+ ++s);n.setAttribute("data-gutter",i)}const LexicalCode_prod_lt=new Set;function LexicalCode_prod_ut(t,e,n){const r=t.getKey();LexicalCode_prod_lt.has(r)||(LexicalCode_prod_lt.add(r),void 0===t.getLanguage()&&t.setLanguage(n.defaultLanguage),e.update((()=>{!function(t,e){const n=h(t);if(!LexicalCode_prod_z(n)||!n.isAttached())return;const r=d();if(!m(r))return void e();const o=r.anchor,i=o.offset,l="element"===o.type&&f(n.getChildAtIndex(o.offset-1));let u=0;if(!l){const t=o.getNode();u=i+t.getPreviousSiblings().reduce(((t,e)=>t+e.getTextContentSize()),0)}if(!e())return;if(l)return void o.getNode().select(i,i);n.getChildren().some((t=>{const e=s(t);if(e||f(t)){const n=t.getTextContentSize();if(e&&n>=u)return t.select(u,u),!0;u-=n}return!1}))}(r,(()=>{const e=h(r);if(!LexicalCode_prod_z(e)||!e.isAttached())return!1;const o=e.getTextContent(),i=LexicalCode_prod_ct(n.tokenize(o,e.getLanguage()||n.defaultLanguage)),s=function(t,e){let n=0;for(;n<t.length&&LexicalCode_prod_at(t[n],e[n]);)n++;const r=t.length,o=e.length,i=Math.min(r,o)-n;let s=0;for(;s<i;)if(s++,!LexicalCode_prod_at(t[r-s],e[o-s])){s--;break}const l=n,u=r-s,c=e.slice(n,o-s);return{from:l,nodesForReplacement:c,to:u}}(e.getChildren(),i),{from:l,to:u,nodesForReplacement:c}=s;return!(l===u&&!c.length)&&(t.splice(l,u-l,c),!0)}))}),{onUpdate:()=>{LexicalCode_prod_lt.delete(r)},skipTransforms:!0}))}function LexicalCode_prod_ct(t,e){const n=[];for(const r of t)if("string"==typeof r){const t=r.split(/(\n|\t)/),o=t.length;for(let r=0;r<o;r++){const o=t[r];"\n"===o||"\r\n"===o?n.push(c()):"\t"===o?n.push(u()):o.length>0&&n.push(LexicalCode_prod_Y(o,e))}}else{const{content:t}=r;"string"==typeof t?n.push(...LexicalCode_prod_ct([t],r.type)):Array.isArray(t)&&n.push(...LexicalCode_prod_ct(t,r.type))}return n}function LexicalCode_prod_at(t,e){return LexicalCode_prod_Z(t)&&LexicalCode_prod_Z(e)&&t.__text===e.__text&&t.__highlightType===e.__highlightType||l(t)&&l(e)||f(t)&&f(e)}function LexicalCode_prod_gt(t){if(!m(t))return!1;const e=t.anchor.getNode(),n=t.focus.getNode();if(e.is(n)&&LexicalCode_prod_z(e))return!0;const r=e.getParent();return LexicalCode_prod_z(r)&&r.is(n.getParent())}function LexicalCode_prod_ft(t){const e=t.getNodes(),n=[[]];if(1===e.length&&LexicalCode_prod_z(e[0]))return n;let r=n[0];for(let t=0;t<e.length;t++){const o=e[t];LexicalCode_prod_Z(o)||l(o)||f(o)||LexicalCode_prod_P(169),f(o)?0!==t&&r.length>0&&(r=[],n.push(r)):r.push(o)}return n}function LexicalCode_prod_pt(t){const e=d();if(!m(e)||!LexicalCode_prod_gt(e))return!1;const n=LexicalCode_prod_ft(e),r=n.length;if(n.length>1){for(let e=0;e<r;e++){const r=n[e];if(r.length>0){let n=r[0];0===e&&(n=LexicalCode_prod_tt(n)),null!==n&&(t===y?n.insertBefore(u()):l(n)&&n.remove())}}return!0}const o=e.getNodes()[0];if(LexicalCode_prod_z(o)||LexicalCode_prod_Z(o)||l(o)||f(o)||LexicalCode_prod_P(171),LexicalCode_prod_z(o))return t===y&&e.insertNodes([u()]),!0;const i=LexicalCode_prod_tt(o);return null===i&&LexicalCode_prod_P(172),t===y?f(i)?i.insertAfter(u()):i.insertBefore(u()):l(i)&&i.remove(),!0}function LexicalCode_prod_ht(t,e){const n=d();if(!m(n))return!1;const{anchor:r,focus:o}=n,i=r.offset,s=o.offset,u=r.getNode(),c=o.getNode(),a=t===_;if(!LexicalCode_prod_gt(n)||!LexicalCode_prod_Z(u)&&!l(u)||!LexicalCode_prod_Z(c)&&!l(c))return!1;if(!e.altKey){if(n.isCollapsed()){const t=u.getParentOrThrow();if(a&&0===i&&null===u.getPreviousSibling()){if(null===t.getPreviousSibling())return t.selectPrevious(),e.preventDefault(),!0}else if(!a&&i===u.getTextContentSize()&&null===u.getNextSibling()){if(null===t.getNextSibling())return t.selectNext(),e.preventDefault(),!0}}return!1}let g,p;if(u.isBefore(c)?(g=LexicalCode_prod_tt(u),p=LexicalCode_prod_et(c)):(g=LexicalCode_prod_tt(c),p=LexicalCode_prod_et(u)),null==g||null==p)return!1;const h=g.getNodesBetween(p);for(let t=0;t<h.length;t++){const e=h[t];if(!LexicalCode_prod_Z(e)&&!l(e)&&!f(e))return!1}e.preventDefault(),e.stopPropagation();const y=a?g.getPreviousSibling():p.getNextSibling();if(!f(y))return!0;const x=a?y.getPreviousSibling():y.getNextSibling();if(null==x)return!0;const S=LexicalCode_prod_Z(x)||l(x)||f(x)?a?LexicalCode_prod_tt(x):LexicalCode_prod_et(x):null;let v=null!=S?S:x;return y.remove(),h.forEach((t=>t.remove())),t===_?(h.forEach((t=>v.insertBefore(t))),v.insertBefore(y)):(v.insertAfter(y),v=y,h.forEach((t=>{v.insertAfter(t),v=t}))),n.setTextNodeRange(u,i,c,s),!0}function LexicalCode_prod_dt(t,e){const n=d();if(!m(n))return!1;const{anchor:r,focus:o}=n,i=r.getNode(),s=o.getNode(),u=t===v;if(!LexicalCode_prod_gt(n)||!LexicalCode_prod_Z(i)&&!l(i)||!LexicalCode_prod_Z(s)&&!l(s))return!1;if(u){const t=LexicalCode_prod_rt(s,o.offset);if(null!==t){const{node:e,offset:r}=t;f(e)?e.selectNext(0,0):n.setTextNodeRange(e,r,e,r)}else s.getParentOrThrow().selectStart()}else{LexicalCode_prod_ot(s).select()}return e.preventDefault(),e.stopPropagation(),!0}function LexicalCode_prod_mt(t,e){if(!t.hasNodes([LexicalCode_prod_H,LexicalCode_prod_G]))throw new Error("CodeHighlightPlugin: CodeNode or CodeHighlightNode not registered on editor");return null==e&&(e=LexicalCode_prod_nt),r(t.registerMutationListener(LexicalCode_prod_H,(e=>{t.update((()=>{for(const[n,r]of e)if("destroyed"!==r){const e=h(n);null!==e&&LexicalCode_prod_st(e,t)}}))}),{skipInitialization:!1}),t.registerNodeTransform(LexicalCode_prod_H,(n=>LexicalCode_prod_ut(n,t,e))),t.registerNodeTransform(g,(n=>LexicalCode_prod_it(n,t,e))),t.registerNodeTransform(LexicalCode_prod_G,(n=>LexicalCode_prod_it(n,t,e))),t.registerCommand(T,(e=>{const n=function(t){const e=d();if(!m(e)||!LexicalCode_prod_gt(e))return null;const n=t?x:y,r=t?x:S;if(LexicalCode_prod_ft(e).length>1)return n;const o=e.getNodes()[0];if(LexicalCode_prod_z(o)||LexicalCode_prod_Z(o)||l(o)||f(o)||LexicalCode_prod_P(170),LexicalCode_prod_z(o))return n;const i=LexicalCode_prod_tt(o),s=LexicalCode_prod_et(o),u=e.anchor,c=e.focus;let a,g;return c.isBefore(u)?(a=c,g=u):(a=u,g=c),null!==i&&null!==s&&a.key===i.getKey()&&0===a.offset&&g.key===s.getKey()&&g.offset===s.getTextContentSize()?n:r}(e.shiftKey);return null!==n&&(e.preventDefault(),t.dispatchCommand(n,void 0),!0)}),b),t.registerCommand(S,(()=>!!LexicalCode_prod_gt(d())&&(C([u()]),!0)),b),t.registerCommand(y,(t=>LexicalCode_prod_pt(y)),b),t.registerCommand(x,(t=>LexicalCode_prod_pt(x)),b),t.registerCommand(_,(t=>LexicalCode_prod_ht(_,t)),b),t.registerCommand(j,(t=>LexicalCode_prod_ht(j,t)),b),t.registerCommand(N,(t=>LexicalCode_prod_dt(N,t)),b),t.registerCommand(v,(t=>LexicalCode_prod_dt(v,t)),b))}

;// ../../node_modules/@lexical/link/LexicalLink.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const LexicalLink_prod_o=new Set(["http:","https:","mailto:","sms:","tel:"]);class LexicalLink_prod_a extends ks{static getType(){return"link"}static clone(t){return new LexicalLink_prod_a(t.__url,{rel:t.__rel,target:t.__target,title:t.__title},t.__key)}constructor(t,e={},r){super(r);const{target:i=null,rel:n=null,title:l=null}=e;this.__url=t,this.__target=i,this.__rel=n,this.__title=l}createDOM(e){const r=document.createElement("a");return r.href=this.sanitizeUrl(this.__url),null!==this.__target&&(r.target=this.__target),null!==this.__rel&&(r.rel=this.__rel),null!==this.__title&&(r.title=this.__title),LexicalUtils_prod_W(r,e.theme.link),r}updateDOM(t,e,r){if(e instanceof HTMLAnchorElement){const r=this.__url,i=this.__target,n=this.__rel,l=this.__title;r!==t.__url&&(e.href=r),i!==t.__target&&(i?e.target=i:e.removeAttribute("target")),n!==t.__rel&&(n?e.rel=n:e.removeAttribute("rel")),l!==t.__title&&(l?e.title=l:e.removeAttribute("title"))}return!1}static importDOM(){return{a:t=>({conversion:LexicalLink_prod_h,priority:1})}}static importJSON(t){const e=LexicalLink_prod_c(t.url,{rel:t.rel,target:t.target,title:t.title});return e.setFormat(t.format),e.setIndent(t.indent),e.setDirection(t.direction),e}sanitizeUrl(t){try{const e=new URL(t);if(!LexicalLink_prod_o.has(e.protocol))return"about:blank"}catch(e){return t}return t}exportJSON(){return{...super.exportJSON(),rel:this.getRel(),target:this.getTarget(),title:this.getTitle(),type:"link",url:this.getURL(),version:1}}getURL(){return this.getLatest().__url}setURL(t){this.getWritable().__url=t}getTarget(){return this.getLatest().__target}setTarget(t){this.getWritable().__target=t}getRel(){return this.getLatest().__rel}setRel(t){this.getWritable().__rel=t}getTitle(){return this.getLatest().__title}setTitle(t){this.getWritable().__title=t}insertNewAfter(t,e=!0){const r=LexicalLink_prod_c(this.__url,{rel:this.__rel,target:this.__target,title:this.__title});return this.insertAfter(r,e),r}canInsertTextBefore(){return!1}canInsertTextAfter(){return!1}canBeEmpty(){return!1}isInline(){return!0}extractWithChild(t,e,r){if(!ki(e))return!1;const i=e.anchor.getNode(),n=e.focus.getNode();return this.isParentOf(i)&&this.isParentOf(n)&&e.getTextContent().length>0}isEmailURI(){return this.__url.startsWith("mailto:")}isWebSiteURI(){return this.__url.startsWith("https://")||this.__url.startsWith("http://")}}function LexicalLink_prod_h(t){let r=null;if(Cn(t)){const e=t.textContent;(null!==e&&""!==e||t.children.length>0)&&(r=LexicalLink_prod_c(t.getAttribute("href")||"",{rel:t.getAttribute("rel"),target:t.getAttribute("target"),title:t.getAttribute("title")}))}return{node:r}}function LexicalLink_prod_c(t,e){return gn(new LexicalLink_prod_a(t,e))}function LexicalLink_prod_g(t){return t instanceof LexicalLink_prod_a}class LexicalLink_prod_f extends LexicalLink_prod_a{constructor(t,e={},r){super(t,e,r),this.__isUnlinked=void 0!==e.isUnlinked&&null!==e.isUnlinked&&e.isUnlinked}static getType(){return"autolink"}static clone(t){return new LexicalLink_prod_f(t.__url,{isUnlinked:t.__isUnlinked,rel:t.__rel,target:t.__target,title:t.__title},t.__key)}getIsUnlinked(){return this.__isUnlinked}setIsUnlinked(t){const e=this.getWritable();return e.__isUnlinked=t,e}createDOM(t){return this.__isUnlinked?document.createElement("span"):super.createDOM(t)}updateDOM(t,e,r){return super.updateDOM(t,e,r)||t.__isUnlinked!==this.__isUnlinked}static importJSON(t){const e=LexicalLink_prod_d(t.url,{isUnlinked:t.isUnlinked,rel:t.rel,target:t.target,title:t.title});return e.setFormat(t.format),e.setIndent(t.indent),e.setDirection(t.direction),e}static importDOM(){return null}exportJSON(){return{...super.exportJSON(),isUnlinked:this.__isUnlinked,type:"autolink",version:1}}insertNewAfter(t,e=!0){const r=this.getParentOrThrow().insertNewAfter(t,e);if(bs(r)){const t=LexicalLink_prod_d(this.__url,{isUnlinked:this.__isUnlinked,rel:this.__rel,target:this.__target,title:this.__title});return r.append(t),t}return null}}function LexicalLink_prod_d(t,e){return gn(new LexicalLink_prod_f(t,e))}function LexicalLink_prod_p(t){return t instanceof LexicalLink_prod_f}const LexicalLink_prod_U=Lexical_prod_e("TOGGLE_LINK_COMMAND");function LexicalLink_prod_m(t,e={}){const{target:i,title:n}=e,s=void 0===e.rel?"noreferrer":e.rel,o=Ri();if(!ki(o))return;const a=o.extract();if(null===t)a.forEach((t=>{const e=LexicalUtils_prod_oe(t,(t=>!LexicalLink_prod_p(t)&&LexicalLink_prod_g(t)));if(e){const t=e.getChildren();for(let r=0;r<t.length;r++)e.insertBefore(t[r]);e.remove()}}));else{if(1===a.length){const e=function(t,e){let r=t;for(;null!==r&&null!==r.getParent()&&!e(r);)r=r.getParentOrThrow();return e(r)?r:null}(a[0],LexicalLink_prod_g);if(null!==e)return e.setURL(t),void 0!==i&&e.setTarget(i),null!==s&&e.setRel(s),void(void 0!==n&&e.setTitle(n))}let e=null,r=null;a.forEach((l=>{const _=l.getParent();if(_!==r&&null!==_&&(!bs(l)||l.isInline())){if(LexicalLink_prod_g(_))return r=_,_.setURL(t),void 0!==i&&_.setTarget(i),null!==s&&r.setRel(s),void(void 0!==n&&r.setTitle(n));if(_.is(e)||(e=_,r=LexicalLink_prod_c(t,{rel:s,target:i,title:n}),LexicalLink_prod_g(_)?null===l.getPreviousSibling()?_.insertBefore(r):_.insertAfter(r):l.insertBefore(r)),LexicalLink_prod_g(l)){if(l.is(r))return;if(null!==r){const t=l.getChildren();for(let e=0;e<t.length;e++)r.append(t[e])}l.remove()}else null!==r&&r.append(l)}}))}}const LexicalLink_prod_k=(/* unused pure expression or super */ null && (LexicalLink_prod_m));

;// ../../node_modules/@lexical/list/LexicalList.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalList_prod_v(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var LexicalList_prod_y=LexicalList_prod_v((function(e){const t=new URLSearchParams;t.append("code",e);for(let e=1;e<arguments.length;e++)t.append("v",arguments[e]);throw Error(`Minified Lexical error #${e}; visit https://lexical.dev/docs/error?${t} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));function LexicalList_prod_C(e){let t=1,n=e.getParent();for(;null!=n;){if(LexicalList_prod_V(n)){const e=n.getParent();if(LexicalList_prod_H(e)){t++,n=e.getParent();continue}LexicalList_prod_y(40)}return t}return t}function LexicalList_prod_k(e){let t=e.getParent();LexicalList_prod_H(t)||LexicalList_prod_y(40);let n=t;for(;null!==n;)n=n.getParent(),LexicalList_prod_H(n)&&(t=n);return t}function LexicalList_prod_T(e){let t=[];const n=e.getChildren().filter(LexicalList_prod_V);for(let e=0;e<n.length;e++){const r=n[e],i=r.getFirstChild();LexicalList_prod_H(i)?t=t.concat(LexicalList_prod_T(i)):t.push(r)}return t}function LexicalList_prod_b(e){return LexicalList_prod_V(e)&&LexicalList_prod_H(e.getFirstChild())}function LexicalList_prod_S(e){return LexicalList_prod_W().append(e)}function LexicalList_prod_P(e,t){return LexicalList_prod_V(e)&&(0===t.length||1===t.length&&e.is(t[0])&&0===e.getChildrenSize())}function LexicalList_prod_A(e,t){e.update((()=>{const e=Ri();if(null!==e){const n=e.getNodes();if(ki(e)){const r=e.getStartEndPoints();null===r&&LexicalList_prod_y(143);const[i]=r,s=i.getNode(),o=s.getParent();if(LexicalList_prod_P(s,n)){const e=LexicalList_prod_q(t);if(dn(o)){s.replace(e);const t=LexicalList_prod_W();bs(s)&&(t.setFormat(s.getFormatType()),t.setIndent(s.getIndent())),e.append(t)}else if(LexicalList_prod_V(s)){const t=s.getParentOrThrow();LexicalList_prod_N(e,t.getChildren()),t.replace(e)}return}}const r=new Set;for(let e=0;e<n.length;e++){const i=n[e];if(!bs(i)||!i.isEmpty()||LexicalList_prod_V(i)||r.has(i.getKey())){if(pt(i)){let e=i.getParent();for(;null!=e;){const n=e.getKey();if(LexicalList_prod_H(e)){if(!r.has(n)){const i=LexicalList_prod_q(t);LexicalList_prod_N(i,e.getChildren()),e.replace(i),r.add(n)}break}{const i=e.getParent();if(dn(i)&&!r.has(n)){r.add(n),LexicalList_prod_x(e,t);break}e=i}}}}else LexicalList_prod_x(i,t)}}}))}function LexicalList_prod_N(e,t){e.splice(e.getChildrenSize(),0,t)}function LexicalList_prod_x(e,t){if(LexicalList_prod_H(e))return e;const n=e.getPreviousSibling(),r=e.getNextSibling(),i=LexicalList_prod_W();let s;if(LexicalList_prod_N(i,e.getChildren()),LexicalList_prod_H(n)&&t===n.getListType())n.append(i),LexicalList_prod_H(r)&&t===r.getListType()&&(LexicalList_prod_N(n,r.getChildren()),r.remove()),s=n;else if(LexicalList_prod_H(r)&&t===r.getListType())r.getFirstChildOrThrow().insertBefore(i),s=r;else{const n=LexicalList_prod_q(t);n.append(i),e.replace(n),s=n}return i.setFormat(e.getFormatType()),i.setIndent(e.getIndent()),e.remove(),s}function LexicalList_prod_L(e,t){const n=e.getLastChild(),r=t.getFirstChild();n&&r&&LexicalList_prod_b(n)&&LexicalList_prod_b(r)&&(LexicalList_prod_L(n.getFirstChild(),r.getFirstChild()),r.remove());const i=t.getChildren();i.length>0&&e.append(...i),t.remove()}function LexicalList_prod_O(t){t.update((()=>{const t=Ri();if(ki(t)){const n=new Set,r=t.getNodes(),i=t.anchor.getNode();if(LexicalList_prod_P(i,r))n.add(LexicalList_prod_k(i));else for(let t=0;t<r.length;t++){const i=r[t];if(pt(i)){const t=LexicalUtils_prod_te(i,LexicalList_prod_I);null!=t&&n.add(LexicalList_prod_k(t))}}for(const e of n){let n=e;const r=LexicalList_prod_T(e);for(const e of r){const r=zs();LexicalList_prod_N(r,e.getChildren()),n.insertAfter(r),n=r,e.__key===t.anchor.key&&t.anchor.set(r.getKey(),0,"element"),e.__key===t.focus.key&&t.focus.set(r.getKey(),0,"element"),e.remove()}e.remove()}}}))}function LexicalList_prod_E(e){const t=new Set;if(LexicalList_prod_b(e)||t.has(e.getKey()))return;const n=e.getParent(),r=e.getNextSibling(),i=e.getPreviousSibling();if(LexicalList_prod_b(r)&&LexicalList_prod_b(i)){const n=i.getFirstChild();if(LexicalList_prod_H(n)){n.append(e);const i=r.getFirstChild();if(LexicalList_prod_H(i)){LexicalList_prod_N(n,i.getChildren()),r.remove(),t.add(r.getKey())}}}else if(LexicalList_prod_b(r)){const t=r.getFirstChild();if(LexicalList_prod_H(t)){const n=t.getFirstChild();null!==n&&n.insertBefore(e)}}else if(LexicalList_prod_b(i)){const t=i.getFirstChild();LexicalList_prod_H(t)&&t.append(e)}else if(LexicalList_prod_H(n)){const t=LexicalList_prod_W(),s=LexicalList_prod_q(n.getListType());t.append(s),s.append(e),i?i.insertAfter(t):r?r.insertBefore(t):n.append(t)}}function LexicalList_prod_M(e){if(LexicalList_prod_b(e))return;const t=e.getParent(),n=t?t.getParent():void 0;if(LexicalList_prod_H(n?n.getParent():void 0)&&LexicalList_prod_V(n)&&LexicalList_prod_H(t)){const r=t?t.getFirstChild():void 0,i=t?t.getLastChild():void 0;if(e.is(r))n.insertBefore(e),t.isEmpty()&&n.remove();else if(e.is(i))n.insertAfter(e),t.isEmpty()&&n.remove();else{const r=t.getListType(),i=LexicalList_prod_W(),s=LexicalList_prod_q(r);i.append(s),e.getPreviousSiblings().forEach((e=>s.append(e)));const o=LexicalList_prod_W(),c=LexicalList_prod_q(r);o.append(c),LexicalList_prod_N(c,e.getNextSiblings()),n.insertBefore(i),n.insertAfter(o),n.replace(e)}}}function LexicalList_prod_F(){const e=Ri();if(!ki(e)||!e.isCollapsed())return!1;const t=e.anchor.getNode();if(!LexicalList_prod_V(t)||0!==t.getChildrenSize())return!1;const n=LexicalList_prod_k(t),r=t.getParent();LexicalList_prod_H(r)||LexicalList_prod_y(40);const i=r.getParent();let l;if(dn(i))l=zs(),n.insertAfter(l);else{if(!LexicalList_prod_V(i))return!1;l=LexicalList_prod_W(),i.insertAfter(l)}l.select();const a=t.getNextSiblings();if(a.length>0){const e=LexicalList_prod_q(r.getListType());if(Ws(l))l.insertAfter(e);else{const t=LexicalList_prod_W();t.append(e),l.insertAfter(t)}a.forEach((t=>{t.remove(),e.append(t)}))}return function(e){let t=e;for(;null==t.getNextSibling()&&null==t.getPreviousSibling();){const e=t.getParent();if(null==e||!LexicalList_prod_V(t)&&!LexicalList_prod_H(t))break;t=e}t.remove()}(t),!0}function LexicalList_prod_w(...e){const t=[];for(const n of e)if(n&&"string"==typeof n)for(const[e]of n.matchAll(/\S+/g))t.push(e);return t}class LexicalList_prod_I extends ks{static getType(){return"listitem"}static clone(e){return new LexicalList_prod_I(e.__value,e.__checked,e.__key)}constructor(e,t,n){super(n),this.__value=void 0===e?1:e,this.__checked=t}createDOM(e){const t=document.createElement("li"),n=this.getParent();return LexicalList_prod_H(n)&&"check"===n.getListType()&&LexicalList_prod_R(t,this,null),t.value=this.__value,LexicalList_prod_D(t,e.theme,this),t}updateDOM(e,t,n){const r=this.getParent();return LexicalList_prod_H(r)&&"check"===r.getListType()&&LexicalList_prod_R(t,this,e),t.value=this.__value,LexicalList_prod_D(t,n.theme,this),!1}static transform(){return e=>{if(LexicalList_prod_V(e)||LexicalList_prod_y(144),null==e.__checked)return;const t=e.getParent();LexicalList_prod_H(t)&&"check"!==t.getListType()&&null!=e.getChecked()&&e.setChecked(void 0)}}static importDOM(){return{li:()=>({conversion:LexicalList_prod_B,priority:0})}}static importJSON(e){const t=LexicalList_prod_W();return t.setChecked(e.checked),t.setValue(e.value),t.setFormat(e.format),t.setDirection(e.direction),t}exportDOM(e){const t=this.createDOM(e._config);return t.style.textAlign=this.getFormatType(),{element:t}}exportJSON(){return{...super.exportJSON(),checked:this.getChecked(),type:"listitem",value:this.getValue(),version:1}}append(...e){for(let t=0;t<e.length;t++){const n=e[t];if(bs(n)&&this.canMergeWith(n)){const e=n.getChildren();this.append(...e),n.remove()}else super.append(n)}return this}replace(e,t){if(LexicalList_prod_V(e))return super.replace(e);this.setIndent(0);const n=this.getParentOrThrow();if(!LexicalList_prod_H(n))return e;if(n.__first===this.getKey())n.insertBefore(e);else if(n.__last===this.getKey())n.insertAfter(e);else{const t=LexicalList_prod_q(n.getListType());let r=this.getNextSibling();for(;r;){const e=r;r=r.getNextSibling(),t.append(e)}n.insertAfter(e),e.insertAfter(t)}return t&&(bs(e)||LexicalList_prod_y(139),this.getChildren().forEach((t=>{e.append(t)}))),this.remove(),0===n.getChildrenSize()&&n.remove(),e}insertAfter(e,t=!0){const n=this.getParentOrThrow();if(LexicalList_prod_H(n)||LexicalList_prod_y(39),LexicalList_prod_V(e))return super.insertAfter(e,t);const r=this.getNextSiblings();if(n.insertAfter(e,t),0!==r.length){const i=LexicalList_prod_q(n.getListType());r.forEach((e=>i.append(e))),e.insertAfter(i,t)}return e}remove(e){const t=this.getPreviousSibling(),n=this.getNextSibling();super.remove(e),t&&n&&LexicalList_prod_b(t)&&LexicalList_prod_b(n)&&(LexicalList_prod_L(t.getFirstChild(),n.getFirstChild()),n.remove())}insertNewAfter(e,t=!0){const n=LexicalList_prod_W(null==this.__checked&&void 0);return this.insertAfter(n,t),n}collapseAtStart(e){const t=zs();this.getChildren().forEach((e=>t.append(e)));const n=this.getParentOrThrow(),r=n.getParentOrThrow(),i=LexicalList_prod_V(r);if(1===n.getChildrenSize())if(i)n.remove(),r.select();else{n.insertBefore(t),n.remove();const r=e.anchor,i=e.focus,s=t.getKey();"element"===r.type&&r.getNode().is(this)&&r.set(s,r.offset,"element"),"element"===i.type&&i.getNode().is(this)&&i.set(s,i.offset,"element")}else n.insertBefore(t),this.remove();return!0}getValue(){return this.getLatest().__value}setValue(e){this.getWritable().__value=e}getChecked(){const e=this.getLatest();let t;const n=this.getParent();return LexicalList_prod_H(n)&&(t=n.getListType()),"check"===t?Boolean(e.__checked):void 0}setChecked(e){this.getWritable().__checked=e}toggleChecked(){this.setChecked(!this.__checked)}getIndent(){const e=this.getParent();if(null===e)return this.getLatest().__indent;let t=e.getParentOrThrow(),n=0;for(;LexicalList_prod_V(t);)t=t.getParentOrThrow().getParentOrThrow(),n++;return n}setIndent(e){"number"!=typeof e&&LexicalList_prod_y(117),(e=Math.floor(e))>=0||LexicalList_prod_y(199);let t=this.getIndent();for(;t!==e;)t<e?(LexicalList_prod_E(this),t++):(LexicalList_prod_M(this),t--);return this}canInsertAfter(e){return LexicalList_prod_V(e)}canReplaceWith(e){return LexicalList_prod_V(e)}canMergeWith(e){return Ws(e)||LexicalList_prod_V(e)}extractWithChild(e,t){if(!ki(t))return!1;const n=t.anchor.getNode(),r=t.focus.getNode();return this.isParentOf(n)&&this.isParentOf(r)&&this.getTextContent().length===t.getTextContent().length}isParentRequired(){return!0}createParentElementNode(){return LexicalList_prod_q("bullet")}canMergeWhenEmpty(){return!0}}function LexicalList_prod_D(e,r,i){const s=[],o=[],c=r.list,l=c?c.listitem:void 0;let a;if(c&&c.nested&&(a=c.nested.listitem),void 0!==l&&s.push(...LexicalList_prod_w(l)),c){const e=i.getParent(),t=LexicalList_prod_H(e)&&"check"===e.getListType(),n=i.getChecked();t&&!n||o.push(c.listitemUnchecked),t&&n||o.push(c.listitemChecked),t&&s.push(n?c.listitemChecked:c.listitemUnchecked)}if(void 0!==a){const e=LexicalList_prod_w(a);i.getChildren().some((e=>LexicalList_prod_H(e)))?s.push(...e):o.push(...e)}o.length>0&&LexicalUtils_prod_j(e,...o),s.length>0&&LexicalUtils_prod_W(e,...s)}function LexicalList_prod_R(e,t,n,r){LexicalList_prod_H(t.getFirstChild())?(e.removeAttribute("role"),e.removeAttribute("tabIndex"),e.removeAttribute("aria-checked")):(e.setAttribute("role","checkbox"),e.setAttribute("tabIndex","-1"),n&&t.__checked===n.__checked||e.setAttribute("aria-checked",t.getChecked()?"true":"false"))}function LexicalList_prod_B(e){if(e.classList.contains("task-list-item"))for(const t of e.children)if("INPUT"===t.tagName)return LexicalList_prod_K(t);const t=e.getAttribute("aria-checked");return{node:LexicalList_prod_W("true"===t||"false"!==t&&void 0)}}function LexicalList_prod_K(e){if(!("checkbox"===e.getAttribute("type")))return{node:null};return{node:LexicalList_prod_W(e.hasAttribute("checked"))}}function LexicalList_prod_W(e){return gn(new LexicalList_prod_I(void 0,e))}function LexicalList_prod_V(e){return e instanceof LexicalList_prod_I}class LexicalList_prod_J extends ks{static getType(){return"list"}static clone(e){const t=e.__listType||LexicalList_prod_j[e.__tag];return new LexicalList_prod_J(t,e.__start,e.__key)}constructor(e,t,n){super(n);const r=LexicalList_prod_j[e]||e;this.__listType=r,this.__tag="number"===r?"ol":"ul",this.__start=t}getTag(){return this.__tag}setListType(e){const t=this.getWritable();t.__listType=e,t.__tag="number"===e?"ol":"ul"}getListType(){return this.__listType}getStart(){return this.__start}createDOM(e,t){const n=this.__tag,r=document.createElement(n);return 1!==this.__start&&r.setAttribute("start",String(this.__start)),r.__lexicalListType=this.__listType,LexicalList_prod_z(r,e.theme,this),r}updateDOM(e,t,n){return e.__tag!==this.__tag||(LexicalList_prod_z(t,n.theme,this),!1)}static transform(){return e=>{LexicalList_prod_H(e)||LexicalList_prod_y(163),function(e){const t=e.getNextSibling();LexicalList_prod_H(t)&&e.getListType()===t.getListType()&&LexicalList_prod_L(e,t)}(e),function(e){const t="check"!==e.getListType();let n=e.getStart();for(const r of e.getChildren())LexicalList_prod_V(r)&&(r.getValue()!==n&&r.setValue(n),t&&null!=r.getLatest().__checked&&r.setChecked(void 0),LexicalList_prod_H(r.getFirstChild())||n++)}(e)}}static importDOM(){return{ol:()=>({conversion:LexicalList_prod_$,priority:0}),ul:()=>({conversion:LexicalList_prod_$,priority:0})}}static importJSON(e){const t=LexicalList_prod_q(e.listType,e.start);return t.setFormat(e.format),t.setIndent(e.indent),t.setDirection(e.direction),t}exportDOM(e){const t=this.createDOM(e._config,e);return t&&Tn(t)&&(1!==this.__start&&t.setAttribute("start",String(this.__start)),"check"===this.__listType&&t.setAttribute("__lexicalListType","check")),{element:t}}exportJSON(){return{...super.exportJSON(),listType:this.getListType(),start:this.getStart(),tag:this.getTag(),type:"list",version:1}}canBeEmpty(){return!1}canIndent(){return!1}append(...e){for(let t=0;t<e.length;t++){const n=e[t];if(LexicalList_prod_V(n))super.append(n);else{const e=LexicalList_prod_W();if(LexicalList_prod_H(n))e.append(n);else if(bs(n))if(n.isInline())e.append(n);else{const t=di(n.getTextContent());e.append(t)}else e.append(n);super.append(e)}}return this}extractWithChild(e){return LexicalList_prod_V(e)}}function LexicalList_prod_z(e,r,i){const s=[],o=[],c=r.list;if(void 0!==c){const e=c[`${i.__tag}Depth`]||[],t=LexicalList_prod_C(i)-1,n=t%e.length,r=e[n],l=c[i.__tag];let a;const h=c.nested,u=c.checklist;if(void 0!==h&&h.list&&(a=h.list),void 0!==l&&s.push(l),void 0!==u&&"check"===i.__listType&&s.push(u),void 0!==r){s.push(...LexicalList_prod_w(r));for(let t=0;t<e.length;t++)t!==n&&o.push(i.__tag+t)}if(void 0!==a){const e=LexicalList_prod_w(a);t>1?s.push(...e):o.push(...e)}}o.length>0&&LexicalUtils_prod_j(e,...o),s.length>0&&LexicalUtils_prod_W(e,...s)}function LexicalList_prod_U(e){const t=[];for(let n=0;n<e.length;n++){const r=e[n];if(LexicalList_prod_V(r)){t.push(r);const e=r.getChildren();e.length>1&&e.forEach((e=>{LexicalList_prod_H(e)&&t.push(LexicalList_prod_S(e))}))}else t.push(LexicalList_prod_S(r))}return t}function LexicalList_prod_$(e){const t=e.nodeName.toLowerCase();let n=null;if("ol"===t){n=LexicalList_prod_q("number",e.start)}else"ul"===t&&(n=function(e){if("check"===e.getAttribute("__lexicallisttype")||e.classList.contains("contains-task-list"))return!0;for(const t of e.childNodes)if(Tn(t)&&t.hasAttribute("aria-checked"))return!0;return!1}(e)?LexicalList_prod_q("check"):LexicalList_prod_q("bullet"));return{after:LexicalList_prod_U,node:n}}const LexicalList_prod_j={ol:"number",ul:"bullet"};function LexicalList_prod_q(e,t=1){return gn(new LexicalList_prod_J(e,t))}function LexicalList_prod_H(e){return e instanceof LexicalList_prod_J}const LexicalList_prod_G=Lexical_prod_e("INSERT_UNORDERED_LIST_COMMAND"),LexicalList_prod_Q=Lexical_prod_e("INSERT_ORDERED_LIST_COMMAND"),LexicalList_prod_X=Lexical_prod_e("INSERT_CHECK_LIST_COMMAND"),LexicalList_prod_Y=Lexical_prod_e("REMOVE_LIST_COMMAND");function LexicalList_prod_Z(e){return LexicalUtils_prod_N(e.registerCommand(LexicalList_prod_Q,(()=>(LexicalList_prod_A(e,"number"),!0)),Ks),e.registerCommand(LexicalList_prod_G,(()=>(LexicalList_prod_A(e,"bullet"),!0)),Ks),e.registerCommand(LexicalList_prod_Y,(()=>(LexicalList_prod_O(e),!0)),Ks),e.registerCommand(Lexical_prod_o,(()=>!!LexicalList_prod_F()),Ks))}

;// ../../node_modules/@lexical/selection/LexicalSelection.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalSelection_prod_m(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var LexicalSelection_prod_T=LexicalSelection_prod_m((function(e){const t=new URLSearchParams;t.append("code",e);for(let e=1;e<arguments.length;e++)t.append("v",arguments[e]);throw Error(`Minified Lexical error #${e}; visit https://lexical.dev/docs/error?${t} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));const LexicalSelection_prod_x=new Map;function LexicalSelection_prod_S(e){let t=e;for(;null!=t;){if(t.nodeType===Node.TEXT_NODE)return t;t=t.firstChild}return null}function LexicalSelection_prod_v(e){const t=e.parentNode;if(null==t)throw new Error("Should never happen");return[t,Array.from(t.childNodes).indexOf(e)]}function LexicalSelection_prod_C(t,n,l,o,r){const s=n.getKey(),i=o.getKey(),c=document.createRange();let f=t.getElementByKey(s),u=t.getElementByKey(i),g=l,a=r;if(e(n)&&(f=LexicalSelection_prod_S(f)),e(o)&&(u=LexicalSelection_prod_S(u)),void 0===n||void 0===o||null===f||null===u)return null;"BR"===f.nodeName&&([f,g]=LexicalSelection_prod_v(f)),"BR"===u.nodeName&&([u,a]=LexicalSelection_prod_v(u));const d=f.firstChild;f===u&&null!=d&&"BR"===d.nodeName&&0===g&&0===a&&(a=1);try{c.setStart(f,g),c.setEnd(u,a)}catch(e){return null}return!c.collapsed||g===a&&s===i||(c.setStart(u,a),c.setEnd(f,g)),c}function LexicalSelection_prod_P(e,t){const n=e.getRootElement();if(null===n)return[];const l=n.getBoundingClientRect(),o=getComputedStyle(n),r=parseFloat(o.paddingLeft)+parseFloat(o.paddingRight),s=Array.from(t.getClientRects());let i,c=s.length;s.sort(((e,t)=>{const n=e.top-t.top;return Math.abs(n)<=3?e.left-t.left:n}));for(let e=0;e<c;e++){const t=s[e],n=i&&i.top<=t.top&&i.top+i.height>t.top&&i.left+i.width>t.left,o=t.width+r===l.width;n||o?(s.splice(e--,1),c--):i=t}return s}function LexicalSelection_prod_w(e){const t={};if(!e)return t;const n=e.split(";");for(const e of n)if(""!==e){const[n,l]=e.split(/:([^]+)/);n&&l&&(t[n.trim()]=l.trim())}return t}function LexicalSelection_prod_N(e){let t=LexicalSelection_prod_x.get(e);return void 0===t&&(t=LexicalSelection_prod_w(e),LexicalSelection_prod_x.set(e,t)),t}function LexicalSelection_prod_E(e){let t="";for(const n in e)n&&(t+=`${n}: ${e[n]};`);return t}function LexicalSelection_prod_F(e,n){const l=e.getStartEndPoints();if(n.isSelected(e)&&!n.isSegmented()&&!n.isToken()&&null!==l){const[o,r]=l,s=e.isBackward(),i=o.getNode(),c=r.getNode(),f=n.is(i),u=n.is(c);if(f||u){const[l,o]=Ei(e),r=i.is(c),f=n.is(s?c:i),u=n.is(s?i:c);let g,a=0;if(r)a=l>o?o:l,g=l>o?l:o;else if(f){a=s?o:l,g=void 0}else if(u){a=0,g=s?l:o}return n.__text=n.__text.slice(a,g),n}}return n}function LexicalSelection_prod_K(e){if("text"===e.type)return e.offset===e.getNode().getTextContentSize();const t=e.getNode();return bs(t)||LexicalSelection_prod_T(177),e.offset===t.getChildrenSize()}function LexicalSelection_prod_I(t,c,f){let u=c.getNode(),g=f;if(n(u)){const e=u.getDescendantByIndex(c.offset);null!==e&&(u=e)}for(;g>0&&null!==u;){if(n(u)){const e=u.getLastDescendant();null!==e&&(u=e)}let f=u.getPreviousSibling(),a=0;if(null===f){let e=u.getParentOrThrow(),t=e.getPreviousSibling();for(;null===t;){if(e=e.getParent(),null===e){f=null;break}t=e.getPreviousSibling()}null!==e&&(a=e.isInline()?0:2,f=t)}let d=u.getTextContent();""===d&&n(u)&&!u.isInline()&&(d="\n\n");const p=d.length;if(!e(u)||g>=p){const e=u.getParent();u.remove(),null==e||0!==e.getChildrenSize()||l(e)||e.remove(),g-=p+a,u=f}else{const n=u.getKey(),l=t.getEditorState().read((()=>{const t=o(n);return e(t)&&t.isSimpleText()?t.getTextContent():null})),f=p-g,a=d.slice(0,f);if(null!==l&&l!==d){const e=r();let t=u;if(u.isSimpleText())u.setTextContent(l);else{const e=s(l);u.replace(e),t=e}if(i(e)&&e.isCollapsed()){const n=e.anchor.offset;t.select(n,n)}}else if(u.isSimpleText()){const e=c.key===n;let t=c.offset;t<g&&(t=p);const l=e?t-g:0,o=e?t:f;if(e&&0===l){const[e]=u.splitText(l,o);e.remove()}else{const[,e]=u.splitText(l,o);e.remove()}}else{const e=s(a);u.replace(e)}g=0}}}function LexicalSelection_prod_O(e){const t=e.getStyle(),n=LexicalSelection_prod_w(t);LexicalSelection_prod_x.set(t,n)}function LexicalSelection_prod_B(e,t){const n=LexicalSelection_prod_N("getStyle"in e?e.getStyle():e.style),l=Object.entries(t).reduce(((t,[l,o])=>("function"==typeof o?t[l]=o(n[l],e):null===o?delete t[l]:t[l]=o,t)),{...n}||{}),o=LexicalSelection_prod_E(l);e.setStyle(o),LexicalSelection_prod_x.set(o,l)}function LexicalSelection_prod_k(t,n){const l=t.getNodes(),o=l.length,r=t.getStartEndPoints();if(null===r)return;const[s,f]=r,u=o-1;let g=l[0],a=l[u];if(t.isCollapsed()&&i(t))return void LexicalSelection_prod_B(t,n);const d=g.getTextContent().length,p=f.offset;let h=s.offset;const y=s.isBefore(f);let m=y?h:p,T=y?p:h;const x=y?s.type:f.type,S=y?f.type:s.type,v=y?f.key:s.key;if(e(g)&&m===d){const t=g.getNextSibling();e(t)&&(h=0,m=0,g=t)}if(1===l.length){if(e(g)&&g.canHaveFormat()){if(m="element"===x?0:h>p?p:h,T="element"===S?d:h>p?h:p,m===T)return;if(c(g)||0===m&&T===d)LexicalSelection_prod_B(g,n),g.select(m,T);else{const e=g.splitText(m,T),t=0===m?e[0]:e[1];LexicalSelection_prod_B(t,n),t.select(0,T-m)}}}else{if(e(g)&&m<g.getTextContentSize()&&g.canHaveFormat()&&(0===m||c(g)||(g=g.splitText(m)[1],m=0,y?s.set(g.getKey(),m,"text"):f.set(g.getKey(),m,"text")),LexicalSelection_prod_B(g,n)),e(a)&&a.canHaveFormat()){const e=a.getTextContent().length;a.__key!==v&&0!==T&&(T=e),T===e||c(a)||([a]=a.splitText(T)),0===T&&"element"!==S||LexicalSelection_prod_B(a,n)}for(let t=1;t<u;t++){const o=l[t],r=o.getKey();e(o)&&o.canHaveFormat()&&r!==g.getKey()&&r!==a.getKey()&&!o.isToken()&&LexicalSelection_prod_B(o,n)}}}function LexicalSelection_prod_b(e,t){if(null===e)return;const l=e.getStartEndPoints(),o=l?l[0]:null;if(null!==o&&"root"===o.key){const e=t(),n=f(),l=n.getFirstChild();return void(l?l.replace(e,!0):n.append(e))}const r=e.getNodes(),s=null!==o&&function(e,t){let n=e;for(;null!==n&&null!==n.getParent()&&!t(n);)n=n.getParentOrThrow();return t(n)?n:null}(o.getNode(),LexicalSelection_prod_W);s&&-1===r.indexOf(s)&&r.push(s);for(let e=0;e<r.length;e++){const l=r[e];if(!LexicalSelection_prod_W(l))continue;n(l)||LexicalSelection_prod_T(178);const o=t();o.setFormat(l.getFormatType()),o.setIndent(l.getIndent()),l.replace(o,!0)}}function LexicalSelection_prod_R(e){return e.getNode().isAttached()}function LexicalSelection_prod_(e){let t=e;for(;null!==t&&!dn(t);){const e=t.getLatest(),n=t.getParent();0===e.getChildrenSize()&&t.remove(!0),t=n}}function LexicalSelection_prod_z(e,t,n=null){const l=e.getStartEndPoints(),o=l?l[0]:null,r=e.getNodes(),s=r.length;if(null!==o&&(0===s||1===s&&"element"===o.type&&0===o.getNode().getChildrenSize())){const e="text"===o.type?o.getNode().getParentOrThrow():o.getNode(),l=e.getChildren();let r=t();return r.setFormat(e.getFormatType()),r.setIndent(e.getIndent()),l.forEach((e=>r.append(e))),n&&(r=n.append(r)),void e.replace(r)}let i=null,c=[];for(let l=0;l<s;l++){const o=r[l];dn(o)?(LexicalSelection_prod_A(e,c,c.length,t,n),c=[],i=o):null===i||null!==i&&cn(o,i)?c.push(o):(LexicalSelection_prod_A(e,c,c.length,t,n),c=[o])}LexicalSelection_prod_A(e,c,c.length,t,n)}function LexicalSelection_prod_A(e,t,l,o,s=null){if(0===t.length)return;const c=t[0],f=new Map,g=[];let p=bs(c)?c:c.getParentOrThrow();p.isInline()&&(p=p.getParentOrThrow());let h=!1;for(;null!==p;){const e=p.getPreviousSibling();if(null!==e){p=e,h=!0;break}if(p=p.getParentOrThrow(),dn(p))break}const y=new Set;for(let e=0;e<l;e++){const l=t[e];bs(l)&&0===l.getChildrenSize()&&y.add(l.getKey())}const m=new Set;for(let e=0;e<l;e++){const l=t[e];let r=l.getParent();if(null!==r&&r.isInline()&&(r=r.getParent()),null!==r&&pt(l)&&!m.has(l.getKey())){const e=r.getKey();if(void 0===f.get(e)){const t=o();t.setFormat(r.getFormatType()),t.setIndent(r.getIndent()),g.push(t),f.set(e,t),r.getChildren().forEach((e=>{t.append(e),m.add(e.getKey()),bs(e)&&e.getChildrenKeys().forEach((e=>m.add(e)))})),LexicalSelection_prod_(r)}}else if(y.has(l.getKey())){bs(l)||LexicalSelection_prod_T(179);const e=o();e.setFormat(l.getFormatType()),e.setIndent(l.getIndent()),g.push(e),l.remove(!0)}}if(null!==s)for(let e=0;e<g.length;e++){const t=g[e];s.append(t)}let x=null;if(dn(p))if(h)if(null!==s)p.insertAfter(s);else for(let e=g.length-1;e>=0;e--){const t=g[e];p.insertAfter(t)}else{const e=p.getFirstChild();if(bs(e)&&(p=e),null===e)if(s)p.append(s);else for(let e=0;e<g.length;e++){const t=g[e];p.append(t),x=t}else if(null!==s)e.insertBefore(s);else for(let t=0;t<g.length;t++){const n=g[t];e.insertBefore(n),x=n}}else if(s)p.insertAfter(s);else for(let e=g.length-1;e>=0;e--){const t=g[e];p.insertAfter(t),x=t}const S=Ki();ki(S)&&LexicalSelection_prod_R(S.anchor)&&LexicalSelection_prod_R(S.focus)?Ft(S.clone()):null!==x?x.selectEnd():e.dirty=!0}function LexicalSelection_prod_L(e,t){const l=Yt(e.focus,t);return Es(l)&&!l.isIsolated()||bs(l)&&!l.isInline()&&!l.canBeEmpty()}function LexicalSelection_prod_D(e,t,n,l){e.modify(t?"extend":"move",n,l)}function LexicalSelection_prod_M(e){const t=e.anchor.getNode();return"rtl"===(Fs(t)?t:t.getParentOrThrow()).getDirection()}function LexicalSelection_prod_$(e,t,n){const l=LexicalSelection_prod_M(e);LexicalSelection_prod_D(e,t,n?!l:l,"character")}function LexicalSelection_prod_H(t){const l=t.anchor,o=t.focus,r=l.getNode().getTopLevelElementOrThrow().getParentOrThrow();let s=r.getFirstDescendant(),i=r.getLastDescendant(),c="element",f="element",u=0;e(s)?c="text":n(s)||null===s||(s=s.getParentOrThrow()),e(i)?(f="text",u=i.getTextContentSize()):n(i)||null===i||(i=i.getParentOrThrow()),s&&i&&(l.set(s.getKey(),0,c),o.set(i.getKey(),u,f))}function LexicalSelection_prod_j(e,t,n){const l=LexicalSelection_prod_N(e.getStyle());return null!==l&&l[t]||n}function LexicalSelection_prod_U(t,n,l=""){let o=null;const r=t.getNodes(),s=t.anchor,c=t.focus,f=t.isBackward(),u=f?c.offset:s.offset,g=f?c.getNode():s.getNode();if(i(t)&&t.isCollapsed()&&""!==t.style){const e=LexicalSelection_prod_N(t.style);if(null!==e&&n in e)return e[n]}for(let t=0;t<r.length;t++){const s=r[t];if((0===t||0!==u||!s.is(g))&&e(s)){const e=LexicalSelection_prod_j(s,n,l);if(null===o)o=e;else if(o!==e){o="";break}}}return null===o?l:o}function LexicalSelection_prod_W(t){if(h(t))return!1;if(!n(t)||u(t))return!1;const l=t.getFirstChild(),o=null===l||y(l)||e(l)||l.isInline();return!t.isInline()&&!1!==t.canBeEmpty()&&o}const LexicalSelection_prod_X=(/* unused pure expression or super */ null && (LexicalSelection_prod_I));

;// ../../node_modules/@lexical/html/LexicalHtml.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalHtml_prod_h(e,n){const t=n.body?n.body.childNodes:[];let o=[];const l=[];for(let n=0;n<t.length;n++){const r=t[n];if(!LexicalHtml_prod_x.has(r.nodeName)){const n=LexicalHtml_prod_y(r,e,l,!1);null!==n&&(o=o.concat(n))}}return function(e){for(const n of e)n.getNextSibling()instanceof Is&&n.insertAfter(qr());for(const n of e){const e=n.getChildren();for(const t of e)n.insertBefore(t);n.remove()}}(l),o}function LexicalHtml_prod_m(e,n){if("undefined"==typeof document||"undefined"==typeof window&&void 0===global.window)throw new Error("To use $generateHtmlFromNodes in headless mode please initialize a headless browser implementation such as JSDom before calling this function.");const t=document.createElement("div"),l=Et().getChildren();for(let o=0;o<l.length;o++){LexicalHtml_prod_g(e,l[o],t,n)}return t.innerHTML}function LexicalHtml_prod_g(t,o,c,u=null){let f=null===u||o.isSelected(u);const a=bs(o)&&o.excludeFromCopy("html");let d=o;if(null!==u){let n=Dn(o);n=hi(n)&&null!==u?LexicalSelection_prod_F(u,n):n,d=n}const p=bs(d)?d.getChildren():[],h=t._nodes.get(d.getType());let m;m=h&&void 0!==h.exportDOM?h.exportDOM(t,d):d.exportDOM(t);const{element:x,after:y}=m;if(!x)return!1;const w=document.createDocumentFragment();for(let e=0;e<p.length;e++){const n=p[e],r=LexicalHtml_prod_g(t,n,w,u);!f&&bs(o)&&r&&o.extractWithChild(n,u,"html")&&(f=!0)}if(f&&!a){if((Tn(x)||kn(x))&&x.append(w),c.append(x),y){const e=y.call(d,x);e&&(kn(x)?x.replaceChildren(e):x.replaceWith(e))}}else c.append(w);return f}const LexicalHtml_prod_x=new Set(["STYLE","SCRIPT"]);function LexicalHtml_prod_y(e,n,o,r,i=new Map,s){let h=[];if(LexicalHtml_prod_x.has(e.nodeName))return h;let m=null;const g=function(e,n){const{nodeName:t}=e,o=n._htmlConversions.get(t.toLowerCase());let l=null;if(void 0!==o)for(const n of o){const t=n(e);null!==t&&(null===l||(l.priority||0)<=(t.priority||0))&&(l=t)}return null!==l?l.conversion:null}(e,n),b=g?g(e):null;let C=null;if(null!==b){C=b.after;const n=b.node;if(m=Array.isArray(n)?n[n.length-1]:n,null!==m){for(const[,e]of i)if(m=e(m,s),!m)break;m&&h.push(...Array.isArray(n)?n:[m])}null!=b.forChild&&i.set(e.nodeName,b.forChild)}const S=e.childNodes;let v=[];const N=(null==m||!dn(m))&&(null!=m&&Mi(m)||r);for(let e=0;e<S.length;e++)v.push(...LexicalHtml_prod_y(S[e],n,o,N,new Map(i),m));return null!=C&&(v=C(v)),wn(e)&&(v=LexicalHtml_prod_w(e,v,N?()=>{const e=new Is;return o.push(e),e}:zs)),null==m?v.length>0?h=h.concat(v):wn(e)&&function(e){if(null==e.nextSibling||null==e.previousSibling)return!1;return bn(e.nextSibling)&&bn(e.previousSibling)}(e)&&(h=h.concat(qr())):bs(m)&&m.append(...v),h}function LexicalHtml_prod_w(e,n,t){const o=e.style.textAlign,l=[];let r=[];for(let e=0;e<n.length;e++){const i=n[e];if(Mi(i))o&&!i.getFormat()&&i.setFormat(o),l.push(i);else if(r.push(i),e===n.length-1||e<n.length-1&&Mi(n[e+1])){const e=t();e.setFormat(o),e.append(...r),l.push(e),r=[]}}return l}

;// ../../node_modules/@lexical/clipboard/LexicalClipboard.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalClipboard_prod_y(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var LexicalClipboard_prod_T=LexicalClipboard_prod_y((function(t){const e=new URLSearchParams;e.append("code",t);for(let t=1;t<arguments.length;t++)e.append("v",arguments[t]);throw Error(`Minified Lexical error #${t}; visit https://lexical.dev/docs/error?${e} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));function LexicalClipboard_prod_v(e,n=Ri()){return null==n&&LexicalClipboard_prod_T(166),ki(n)&&n.isCollapsed()||0===n.getNodes().length?"":LexicalHtml_prod_m(e,n)}function LexicalClipboard_prod_C(t,e=Ri()){return null==e&&LexicalClipboard_prod_T(166),ki(e)&&e.isCollapsed()||0===e.getNodes().length?null:JSON.stringify(LexicalClipboard_prod_A(t,e))}function LexicalClipboard_prod_D(t,e){const n=t.getData("text/plain")||t.getData("text/uri-list");null!=n&&e.insertRawText(n)}function LexicalClipboard_prod_N(t,n,o){const r=t.getData("application/x-lexical-editor");if(r)try{const t=JSON.parse(r);if(t.namespace===o._config.namespace&&Array.isArray(t.nodes)){return LexicalClipboard_prod_(o,LexicalClipboard_prod_R(t.nodes),n)}}catch(t){}const c=t.getData("text/html");if(c)try{const t=(new DOMParser).parseFromString(function(t){if(window.trustedTypes&&window.trustedTypes.createPolicy){return window.trustedTypes.createPolicy("lexical",{createHTML:t=>t}).createHTML(t)}return t}(c),"text/html");return LexicalClipboard_prod_(o,LexicalHtml_prod_h(o,t),n)}catch(t){}const a=t.getData("text/plain")||t.getData("text/uri-list");if(null!=a)if(ki(n)){const t=a.split(/(\r?\n|\t)/);""===t[t.length-1]&&t.pop();for(let e=0;e<t.length;e++){const n=Ri();if(ki(n)){const o=t[e];"\n"===o||"\r\n"===o?n.insertParagraph():"\t"===o?n.insertNodes([pi()]):n.insertText(o)}}}else n.insertRawText(a)}function LexicalClipboard_prod_(t,e,n){t.dispatchCommand(Lexical_prod_n,{nodes:e,selection:n})||n.insertNodes(e)}function LexicalClipboard_prod_P(t,e,n,r=[]){let l=null===e||n.isSelected(e);const i=bs(n)&&n.excludeFromCopy("html");let s=n;if(null!==e){let t=Dn(n);t=hi(t)&&null!==e?LexicalSelection_prod_F(e,t):t,s=t}const c=bs(s)?s.getChildren():[],a=function(t){const e=t.exportJSON(),n=t.constructor;if(e.type!==n.getType()&&LexicalClipboard_prod_T(58,n.name),bs(t)){const t=e.children;Array.isArray(t)||LexicalClipboard_prod_T(59,n.name)}return e}(s);if(hi(s)){const t=s.__text;t.length>0?a.text=t:l=!1}for(let o=0;o<c.length;o++){const r=c[o],i=LexicalClipboard_prod_P(t,e,r,a.children);!l&&bs(n)&&i&&n.extractWithChild(r,e,"clone")&&(l=!0)}if(l&&!i)r.push(a);else if(Array.isArray(a.children))for(let t=0;t<a.children.length;t++){const e=a.children[t];r.push(e)}return l}function LexicalClipboard_prod_A(t,e){const n=[],o=Et().getChildren();for(let r=0;r<o.length;r++){LexicalClipboard_prod_P(t,e,o[r],n)}return{namespace:t._config.namespace,nodes:n}}function LexicalClipboard_prod_R(t){const e=[];for(let o=0;o<t.length;o++){const r=t[o],l=hs(r);hi(l)&&LexicalSelection_prod_O(l),e.push(l)}return e}let LexicalClipboard_prod_S=null;async function LexicalClipboard_prod_O(t,e,n){if(null!==LexicalClipboard_prod_S)return!1;if(null!==e)return new Promise(((o,r)=>{t.update((()=>{o(LexicalClipboard_prod_E(t,e,n))}))}));const o=t.getRootElement(),l=null==t._window?window.document:t._window.document,i=vn(t._window);if(null===o||null===i)return!1;const s=l.createElement("span");s.style.cssText="position: fixed; top: -1000px;",s.append(l.createTextNode("#")),o.append(s);const c=new Range;return c.setStart(s,0),c.setEnd(s,1),i.removeAllRanges(),i.addRange(c),new Promise(((e,o)=>{const i=t.registerCommand(Lexical_prod_A,(o=>(LexicalUtils_prod_ue(o,ClipboardEvent)&&(i(),null!==LexicalClipboard_prod_S&&(window.clearTimeout(LexicalClipboard_prod_S),LexicalClipboard_prod_S=null),e(LexicalClipboard_prod_E(t,o,n))),!0)),Us);LexicalClipboard_prod_S=window.setTimeout((()=>{i(),LexicalClipboard_prod_S=null,e(!1)}),50),l.execCommand("copy"),s.remove()}))}function LexicalClipboard_prod_E(t,e,n){if(void 0===n){const e=vn(t._window);if(!e)return!1;const o=e.anchorNode,r=e.focusNode;if(null!==o&&null!==r&&!ct(t,o,r))return!1;const l=Ri();if(null===l)return!1;n=LexicalClipboard_prod_L(l)}e.preventDefault();const o=e.clipboardData;return null!==o&&(LexicalClipboard_prod_b(o,n),!0)}const LexicalClipboard_prod_M=[["text/html",LexicalClipboard_prod_v],["application/x-lexical-editor",LexicalClipboard_prod_C]];function LexicalClipboard_prod_L(t=Ri()){const e={"text/plain":t?t.getTextContent():""};if(t){const n=Pn();for(const[o,r]of LexicalClipboard_prod_M){const l=r(n,t);null!==l&&(e[o]=l)}}return e}function LexicalClipboard_prod_b(t,e){for(const n in e){const o=e[n];void 0!==o&&t.setData(n,o)}}

;// ../../node_modules/@lexical/rich-text/LexicalRichText.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalRichText_prod_ct(t,e){if(void 0!==document.caretRangeFromPoint){const n=document.caretRangeFromPoint(t,e);return null===n?null:{node:n.startContainer,offset:n.startOffset}}if("undefined"!==document.caretPositionFromPoint){const n=document.caretPositionFromPoint(t,e);return null===n?null:{node:n.offsetNode,offset:n.offset}}return null}const LexicalRichText_prod_at="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,LexicalRichText_prod_ut=LexicalRichText_prod_at&&"documentMode"in document?document.documentMode:null,LexicalRichText_prod_lt=!(!LexicalRichText_prod_at||!("InputEvent"in window)||LexicalRichText_prod_ut)&&"getTargetRanges"in new window.InputEvent("input"),LexicalRichText_prod_dt=LexicalRichText_prod_at&&/Version\/[\d.]+.*Safari/.test(navigator.userAgent),LexicalRichText_prod_mt=LexicalRichText_prod_at&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,LexicalRichText_prod_ft=LexicalRichText_prod_at&&/^(?=.*Chrome).*/i.test(navigator.userAgent),LexicalRichText_prod_gt=LexicalRichText_prod_at&&/AppleWebKit\/[\d.]+/.test(navigator.userAgent)&&!LexicalRichText_prod_ft,LexicalRichText_prod_pt=Lexical_prod_e("DRAG_DROP_PASTE_FILE");class LexicalRichText_prod_ht extends ks{static getType(){return"quote"}static clone(t){return new LexicalRichText_prod_ht(t.__key)}constructor(t){super(t)}createDOM(t){const e=document.createElement("blockquote");return LexicalUtils_prod_W(e,t.theme.quote),e}updateDOM(t,e){return!1}static importDOM(){return{blockquote:t=>({conversion:LexicalRichText_prod_wt,priority:0})}}exportDOM(t){const{element:e}=super.exportDOM(t);if(e&&Tn(e)){this.isEmpty()&&e.append(document.createElement("br"));const t=this.getFormatType();e.style.textAlign=t;const n=this.getDirection();n&&(e.dir=n)}return{element:e}}static importJSON(t){const e=LexicalRichText_prod_Ct();return e.setFormat(t.format),e.setIndent(t.indent),e.setDirection(t.direction),e}exportJSON(){return{...super.exportJSON(),type:"quote"}}insertNewAfter(t,e){const n=zs(),r=this.getDirection();return n.setDirection(r),this.insertAfter(n,e),n}collapseAtStart(){const t=zs();return this.getChildren().forEach((e=>t.append(e))),this.replace(t),!0}canMergeWhenEmpty(){return!0}}function LexicalRichText_prod_Ct(){return gn(new LexicalRichText_prod_ht)}function LexicalRichText_prod_vt(t){return t instanceof LexicalRichText_prod_ht}class LexicalRichText_prod_yt extends ks{static getType(){return"heading"}static clone(t){return new LexicalRichText_prod_yt(t.__tag,t.__key)}constructor(t,e){super(e),this.__tag=t}getTag(){return this.__tag}createDOM(t){const e=this.__tag,n=document.createElement(e),r=t.theme.heading;if(void 0!==r){const t=r[e];LexicalUtils_prod_W(n,t)}return n}updateDOM(t,e){return!1}static importDOM(){return{h1:t=>({conversion:LexicalRichText_prod_xt,priority:0}),h2:t=>({conversion:LexicalRichText_prod_xt,priority:0}),h3:t=>({conversion:LexicalRichText_prod_xt,priority:0}),h4:t=>({conversion:LexicalRichText_prod_xt,priority:0}),h5:t=>({conversion:LexicalRichText_prod_xt,priority:0}),h6:t=>({conversion:LexicalRichText_prod_xt,priority:0}),p:t=>{const e=t.firstChild;return null!==e&&LexicalRichText_prod_Dt(e)?{conversion:()=>({node:null}),priority:3}:null},span:t=>LexicalRichText_prod_Dt(t)?{conversion:t=>({node:LexicalRichText_prod_Et("h1")}),priority:3}:null}}exportDOM(t){const{element:e}=super.exportDOM(t);if(e&&Tn(e)){this.isEmpty()&&e.append(document.createElement("br"));const t=this.getFormatType();e.style.textAlign=t;const n=this.getDirection();n&&(e.dir=n)}return{element:e}}static importJSON(t){const e=LexicalRichText_prod_Et(t.tag);return e.setFormat(t.format),e.setIndent(t.indent),e.setDirection(t.direction),e}exportJSON(){return{...super.exportJSON(),tag:this.getTag(),type:"heading",version:1}}insertNewAfter(t,e=!0){const n=t?t.anchor.offset:0,r=this.getLastDescendant(),o=!r||t&&t.anchor.key===r.getKey()&&n===r.getTextContentSize()||!t?zs():LexicalRichText_prod_Et(this.getTag()),i=this.getDirection();if(o.setDirection(i),this.insertAfter(o,e),0===n&&!this.isEmpty()&&t){const t=zs();t.select(),this.replace(t,!0)}return o}collapseAtStart(){const t=this.isEmpty()?zs():LexicalRichText_prod_Et(this.getTag());return this.getChildren().forEach((e=>t.append(e))),this.replace(t),!0}extractWithChild(){return!0}}function LexicalRichText_prod_Dt(t){return"span"===t.nodeName.toLowerCase()&&"26pt"===t.style.fontSize}function LexicalRichText_prod_xt(t){const e=t.nodeName.toLowerCase();let n=null;return"h1"!==e&&"h2"!==e&&"h3"!==e&&"h4"!==e&&"h5"!==e&&"h6"!==e||(n=LexicalRichText_prod_Et(e),null!==t.style&&(Mn(t,n),n.setFormat(t.style.textAlign))),{node:n}}function LexicalRichText_prod_wt(t){const e=LexicalRichText_prod_Ct();return null!==t.style&&(e.setFormat(t.style.textAlign),Mn(t,e)),{node:e}}function LexicalRichText_prod_Et(t){return gn(new LexicalRichText_prod_yt(t))}function LexicalRichText_prod_Nt(t){return t instanceof LexicalRichText_prod_yt}function LexicalRichText_prod_It(t){let e=null;if(LexicalUtils_prod_ue(t,DragEvent)?e=t.dataTransfer:LexicalUtils_prod_ue(t,ClipboardEvent)&&(e=t.clipboardData),null===e)return[!1,[],!1];const n=e.types,r=n.includes("Files"),o=n.includes("text/html")||n.includes("text/plain");return[r,Array.from(e.files),o]}function LexicalRichText_prod_Ot(t){const e=Ri();if(!ki(e))return!1;const n=new Set,r=e.getNodes();for(let e=0;e<r.length;e++){const o=r[e],i=o.getKey();if(n.has(i))continue;const s=LexicalUtils_prod_oe(o,(t=>bs(t)&&!t.isInline()));if(null===s)continue;const c=s.getKey();s.canIndent()&&!n.has(c)&&(n.add(c),t(s))}return n.size>0}function LexicalRichText_prod_Tt(t){const e=bt(t);return Es(e)}function LexicalRichText_prod_At(o){return LexicalUtils_prod_N(o.registerCommand(Lexical_prod_r,(t=>{const e=Ri();return!!wi(e)&&(e.clear(),!0)}),0),o.registerCommand(Lexical_prod_i,(t=>{const e=Ri();return!!ki(e)&&(e.deleteCharacter(t),!0)}),Rs),o.registerCommand(Lexical_prod_u,(t=>{const e=Ri();return!!ki(e)&&(e.deleteWord(t),!0)}),Rs),o.registerCommand(Lexical_prod_f,(t=>{const e=Ri();return!!ki(e)&&(e.deleteLine(t),!0)}),Rs),o.registerCommand(Lexical_prod_l,(e=>{const n=Ri();if("string"==typeof e)null!==n&&n.insertText(e);else{if(null===n)return!1;const r=e.dataTransfer;if(null!=r)LexicalClipboard_prod_N(r,n,o);else if(ki(n)){const t=e.data;return t&&n.insertText(t),!0}}return!0}),Rs),o.registerCommand(Lexical_prod_a,(()=>{const t=Ri();return!!ki(t)&&(t.removeText(),!0)}),Rs),o.registerCommand(Lexical_prod_d,(t=>{const e=Ri();return!!ki(e)&&(e.formatText(t),!0)}),Rs),o.registerCommand(Lexical_prod_O,(t=>{const e=Ri();if(!ki(e)&&!wi(e))return!1;const n=e.getNodes();for(const e of n){const n=LexicalUtils_prod_oe(e,(t=>bs(t)&&!t.isInline()));null!==n&&n.setFormat(t)}return!0}),Rs),o.registerCommand(Lexical_prod_s,(t=>{const e=Ri();return!!ki(e)&&(e.insertLineBreak(t),!0)}),Rs),o.registerCommand(Lexical_prod_o,(()=>{const t=Ri();return!!ki(t)&&(t.insertParagraph(),!0)}),Rs),o.registerCommand(Lexical_prod_E,(()=>(Hi([pi()]),!0)),Rs),o.registerCommand(Lexical_prod_P,(()=>LexicalRichText_prod_Ot((t=>{const e=t.getIndent();t.setIndent(e+1)}))),Rs),o.registerCommand(Lexical_prod_F,(()=>LexicalRichText_prod_Ot((t=>{const e=t.getIndent();e>0&&t.setIndent(e-1)}))),Rs),o.registerCommand(Lexical_prod_v,(t=>{const e=Ri();if(wi(e)&&!LexicalRichText_prod_Tt(t.target)){const t=e.getNodes();if(t.length>0)return t[0].selectPrevious(),!0}else if(ki(e)){const n=Yt(e.focus,!0);if(!t.shiftKey&&Es(n)&&!n.isIsolated()&&!n.isInline())return n.selectPrevious(),t.preventDefault(),!0}return!1}),Rs),o.registerCommand(Lexical_prod_S,(t=>{const e=Ri();if(wi(e)){const t=e.getNodes();if(t.length>0)return t[0].selectNext(0,0),!0}else if(ki(e)){if(function(t){const e=t.focus;return"root"===e.key&&e.offset===Et().getChildrenSize()}(e))return t.preventDefault(),!0;const n=Yt(e.focus,!1);if(!t.shiftKey&&Es(n)&&!n.isIsolated()&&!n.isInline())return n.selectNext(),t.preventDefault(),!0}return!1}),Rs),o.registerCommand(Lexical_prod_m,(t=>{const e=Ri();if(wi(e)){const n=e.getNodes();if(n.length>0)return t.preventDefault(),n[0].selectPrevious(),!0}if(!ki(e))return!1;if(LexicalSelection_prod_L(e,!0)){const n=t.shiftKey;return t.preventDefault(),LexicalSelection_prod_$(e,n,!0),!0}return!1}),Rs),o.registerCommand(Lexical_prod_p,(t=>{const e=Ri();if(wi(e)&&!LexicalRichText_prod_Tt(t.target)){const n=e.getNodes();if(n.length>0)return t.preventDefault(),n[0].selectNext(0,0),!0}if(!ki(e))return!1;const o=t.shiftKey;return!!LexicalSelection_prod_L(e,!1)&&(t.preventDefault(),LexicalSelection_prod_$(e,o,!1),!0)}),Rs),o.registerCommand(Lexical_prod_k,(t=>{if(LexicalRichText_prod_Tt(t.target))return!1;const e=Ri();if(!ki(e))return!1;const{anchor:n}=e,r=n.getNode();if(e.isCollapsed()&&0===n.offset&&!Fs(r)){if(LexicalUtils_prod_ne(r).getIndent()>0)return t.preventDefault(),o.dispatchCommand(Lexical_prod_F,void 0)}return(!LexicalRichText_prod_mt||"ko-KR"!==navigator.language)&&(t.preventDefault(),o.dispatchCommand(Lexical_prod_i,!0))}),Rs),o.registerCommand(Lexical_prod_w,(t=>{if(LexicalRichText_prod_Tt(t.target))return!1;const e=Ri();return!!ki(e)&&(t.preventDefault(),o.dispatchCommand(Lexical_prod_i,!1))}),Rs),o.registerCommand(Lexical_prod_C,(t=>{const e=Ri();if(!ki(e))return!1;if(null!==t){if((LexicalRichText_prod_mt||LexicalRichText_prod_dt||LexicalRichText_prod_gt)&&LexicalRichText_prod_lt)return!1;if(t.preventDefault(),t.shiftKey)return o.dispatchCommand(Lexical_prod_s,!1)}return o.dispatchCommand(Lexical_prod_o,void 0)}),Rs),o.registerCommand(Lexical_prod_b,(()=>{const t=Ri();return!!ki(t)&&(o.blur(),!0)}),Rs),o.registerCommand(Lexical_prod_L,(t=>{const[,e]=LexicalRichText_prod_It(t);if(e.length>0){const n=LexicalRichText_prod_ct(t.clientX,t.clientY);if(null!==n){const{offset:t,node:r}=n,i=bt(r);if(null!==i){const e=Ai();if(hi(i))e.anchor.set(i.getKey(),t,"text"),e.focus.set(i.getKey(),t,"text");else{const t=i.getParentOrThrow().getKey(),n=i.getIndexWithinParent()+1;e.anchor.set(t,n,"element"),e.focus.set(t,n,"element")}const n=nt(e);Ft(n)}o.dispatchCommand(LexicalRichText_prod_pt,e)}return t.preventDefault(),!0}const n=Ri();return!!ki(n)}),Rs),o.registerCommand(Lexical_prod_D,(t=>{const[e]=LexicalRichText_prod_It(t),n=Ri();return!(e&&!ki(n))}),Rs),o.registerCommand(Lexical_prod_M,(t=>{const[e]=LexicalRichText_prod_It(t),n=Ri();if(e&&!ki(n))return!1;const r=LexicalRichText_prod_ct(t.clientX,t.clientY);if(null!==r){const e=bt(r.node);Es(e)&&t.preventDefault()}return!0}),Rs),o.registerCommand(z,(()=>(Ht(),!0)),Rs),o.registerCommand(Lexical_prod_A,(t=>(LexicalClipboard_prod_O(o,LexicalUtils_prod_ue(t,ClipboardEvent)?t:null),!0)),Rs),o.registerCommand(Lexical_prod_B,(t=>(async function(t,n){await LexicalClipboard_prod_O(n,LexicalUtils_prod_ue(t,ClipboardEvent)?t:null),n.update((()=>{const t=Ri();ki(t)?t.removeText():wi(t)&&t.getNodes().forEach((t=>t.remove()))}))}(t,o),!0)),Rs),o.registerCommand(Lexical_prod_c,(e=>{const[,n,r]=LexicalRichText_prod_It(e);if(n.length>0&&!r)return o.dispatchCommand(LexicalRichText_prod_pt,n),!0;if(lt(e.target))return!1;return null!==Ri()&&(function(e,n){e.preventDefault(),n.update((()=>{const r=Ri(),o=LexicalUtils_prod_ue(e,InputEvent)||LexicalUtils_prod_ue(e,KeyboardEvent)?null:e.clipboardData;null!=o&&null!==r&&LexicalClipboard_prod_N(o,r,n)}),{tag:"paste"})}(e,o),!0)}),Rs))}

;// ../../node_modules/@lexical/markdown/LexicalMarkdown.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalMarkdown_prod_(t,e){const n={};for(const o of t){const t=e(o);t&&(n[t]?n[t].push(o):n[t]=[o])}return n}function LexicalMarkdown_prod_N(t){const e=LexicalMarkdown_prod_(t,(t=>t.type));return{element:e.element||[],multilineElement:e["multiline-element"]||[],textFormat:e["text-format"]||[],textMatch:e["text-match"]||[]}}const LexicalMarkdown_prod_j=/[!-/:-@[-`{-~\s]/,LexicalMarkdown_prod_I=/^\s{0,3}$/;function LexicalMarkdown_prod_z(n){if(!t(n))return!1;const o=n.getFirstChild();return null==o||1===n.getChildrenSize()&&e(o)&&LexicalMarkdown_prod_I.test(o.getTextContent())}function LexicalMarkdown_prod_A(t,e,n,i){for(const o of e){if(!o.export)continue;const e=o.export(t,(t=>LexicalMarkdown_prod_B(t,n,i)));if(null!=e)return e}return o(t)?LexicalMarkdown_prod_B(t,n,i):r(t)?t.getTextContent():null}function LexicalMarkdown_prod_B(t,n,s){const l=[],c=t.getChildren();t:for(const t of c){for(const e of s){if(!e.export)continue;const o=e.export(t,(t=>LexicalMarkdown_prod_B(t,n,s)),((t,e)=>LexicalMarkdown_prod_W(t,e,n)));if(null!=o){l.push(o);continue t}}i(t)?l.push("\n"):e(t)?l.push(LexicalMarkdown_prod_W(t,t.getTextContent(),n)):o(t)?l.push(LexicalMarkdown_prod_B(t,n,s)):r(t)&&l.push(t.getTextContent())}return l.join("")}function LexicalMarkdown_prod_W(t,e,n){const o=e.trim();let r=o;const i=new Set;for(const e of n){const n=e.format[0],o=e.tag;if(LexicalMarkdown_prod_D(t,n)&&!i.has(n)){i.add(n);LexicalMarkdown_prod_D(LexicalMarkdown_prod_U(t,!0),n)||(r=o+r);LexicalMarkdown_prod_D(LexicalMarkdown_prod_U(t,!1),n)||(r+=o)}}return e.replace(o,(()=>r))}function LexicalMarkdown_prod_U(t,n){let r=n?t.getPreviousSibling():t.getNextSibling();if(!r){const e=t.getParentOrThrow();e.isInline()&&(r=n?e.getPreviousSibling():e.getNextSibling())}for(;r;){if(o(r)){if(!r.isInline())break;const t=n?r.getLastDescendant():r.getFirstDescendant();if(e(t))return t;r=n?r.getPreviousSibling():r.getNextSibling()}if(e(r))return r;if(!o(r))return null}return null}function LexicalMarkdown_prod_D(t,n){return e(t)&&t.hasFormat(n)}const LexicalMarkdown_prod_O="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,LexicalMarkdown_prod_K=LexicalMarkdown_prod_O&&"documentMode"in document?document.documentMode:null;LexicalMarkdown_prod_O&&"InputEvent"in window&&!LexicalMarkdown_prod_K&&new window.InputEvent("input");const LexicalMarkdown_prod_V=LexicalMarkdown_prod_O&&/Version\/[\d.]+.*Safari/.test(navigator.userAgent),LexicalMarkdown_prod_q=LexicalMarkdown_prod_O&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,LexicalMarkdown_prod_G=LexicalMarkdown_prod_O&&/^(?=.*Chrome).*/i.test(navigator.userAgent),LexicalMarkdown_prod_H=LexicalMarkdown_prod_O&&/AppleWebKit\/[\d.]+/.test(navigator.userAgent)&&!LexicalMarkdown_prod_G;function LexicalMarkdown_prod_J(t,e=!1){const o=LexicalMarkdown_prod_N(t),r=function(t){const e={},n={},o=[],r="(?<![\\\\])";for(const r of t){const{tag:t}=r;e[t]=r;const i=t.replace(/(\*|\^|\+)/g,"\\$1");o.push(i),n[t]=LexicalMarkdown_prod_V||LexicalMarkdown_prod_q||LexicalMarkdown_prod_H?new RegExp(`(${i})(?![${i}\\s])(.*?[^${i}\\s])${i}(?!${i})`):new RegExp(`(?<![\\\\${i}])(${i})((\\\\${i})?.*?[^${i}\\s](\\\\${i})?)((?<!\\\\)|(?<=\\\\\\\\))(${i})(?![\\\\${i}])`)}return{fullMatchRegExpByTag:n,openTagsRegExp:new RegExp((LexicalMarkdown_prod_V||LexicalMarkdown_prod_q||LexicalMarkdown_prod_H?"":`${r}`)+"("+o.join("|")+")","g"),transformersByTag:e}}(o.textFormat);return(t,i)=>{const l=t.split("\n"),c=l.length,a=i||n();a.clear();for(let t=0;t<c;t++){const e=l[t],[n,i]=LexicalMarkdown_prod_Q(l,t,o.multilineElement,a);n?t=i:LexicalMarkdown_prod_X(e,a,o.element,r,o.textMatch)}const f=a.getChildren();for(const t of f)!e&&LexicalMarkdown_prod_z(t)&&a.getChildrenSize()>1&&t.remove();null!==s()&&a.selectStart()}}function LexicalMarkdown_prod_Q(t,e,n,o){for(const r of n){const{handleImportAfterStartMatch:n,regExpEnd:i,regExpStart:s,replace:l}=r,c=t[e].match(s);if(!c)continue;if(n){const i=n({lines:t,rootNode:o,startLineIndex:e,startMatch:c,transformer:r});if(null===i)continue;if(i)return i}const a="object"==typeof i&&"regExp"in i?i.regExp:i,f=i&&"object"==typeof i&&"optional"in i?i.optional:!i;let u=e;const g=t.length;for(;u<g;){const n=a?t[u].match(a):null;if(!n&&(!f||f&&u<g-1)){u++;continue}if(n&&e===u&&n.index===c.index){u++;continue}const r=[];if(n&&e===u)r.push(t[e].slice(c[0].length,-n[0].length));else for(let o=e;o<=u;o++)if(o===e){const e=t[o].slice(c[0].length);r.push(e)}else if(o===u&&n){const e=t[o].slice(0,-n[0].length);r.push(e)}else r.push(t[o]);if(!1!==l(o,null,c,n,r,!0))return[!0,u];break}}return[!1,e]}function LexicalMarkdown_prod_X(e,n,o,r,i){const s=l(e),f=c();f.append(s),n.append(f);for(const{regExp:t,replace:n}of o){const o=e.match(t);if(o&&(s.setTextContent(e.slice(o[0].length)),!1!==n(f,[s],o,!0)))break}if(LexicalMarkdown_prod_Y(s,r,i),f.isAttached()&&e.length>0){const e=f.getPreviousSibling();if(t(e)||C(e)||h(e)){let t=e;if(h(e)){const n=e.getLastDescendant();t=null==n?null:$(n,d)}null!=t&&t.getTextContentSize()>0&&(t.splice(t.getChildrenSize(),0,[a(),...f.getChildren()]),f.remove())}}}function LexicalMarkdown_prod_Y(t,e,n){const o=t.getTextContent(),r=function(t,e){const n=t.match(e.openTagsRegExp);if(null==n)return null;for(const o of n){const n=o.replace(/^\s/,""),r=e.fullMatchRegExpByTag[n];if(null==r)continue;const i=t.match(r),s=e.transformersByTag[n];if(null!=i&&null!=s){if(!1!==s.intraword)return i;const{index:e=0}=i,n=t[e-1],o=t[e+i[0].length];if((!n||LexicalMarkdown_prod_j.test(n))&&(!o||LexicalMarkdown_prod_j.test(o)))return i}}return null}(o,e);if(!r)return void LexicalMarkdown_prod_Z(t,n);let i,s,l;if(r[0]===o)i=t;else{const e=r.index||0,n=e+r[0].length;0===e?[i,s]=t.splitText(n):[l,i,s]=t.splitText(e,n)}i.setTextContent(r[2]);const c=e.transformersByTag[r[1]];if(c)for(const t of c.format)i.hasFormat(t)||i.toggleFormat(t);i.hasFormat("code")||LexicalMarkdown_prod_Y(i,e,n),l&&LexicalMarkdown_prod_Y(l,e,n),s&&LexicalMarkdown_prod_Y(s,e,n)}function LexicalMarkdown_prod_Z(t,e){let n=t;t:for(;n;){for(const t of e){if(!t.replace||!t.importRegExp)continue;const o=n.getTextContent().match(t.importRegExp);if(!o)continue;const r=o.index||0,i=t.getEndIndex?t.getEndIndex(n,o):r+o[0].length;if(!1===i)continue;let s,l;0===r?[s,n]=n.splitText(i):[,s,l]=n.splitText(r,i),l&&LexicalMarkdown_prod_Z(l,e),t.replace(s,o);continue t}break}}function LexicalMarkdown_prod_tt(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var LexicalMarkdown_prod_et=LexicalMarkdown_prod_tt((function(t){const e=new URLSearchParams;e.append("code",t);for(let t=1;t<arguments.length;t++)e.append("v",arguments[t]);throw Error(`Minified Lexical error #${t}; visit https://lexical.dev/docs/error?${e} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));function LexicalMarkdown_prod_nt(t,e,n){const o=n.length;for(let r=e;r>=o;r--){const e=r-o;if(LexicalMarkdown_prod_ot(t,e,n,0,o)&&" "!==t[e+o])return e}return-1}function LexicalMarkdown_prod_ot(t,e,n,o,r){for(let i=0;i<r;i++)if(t[e+i]!==n[o+i])return!1;return!0}function LexicalMarkdown_prod_rt(t,n=LexicalMarkdown_prod_At){const o=LexicalMarkdown_prod_N(n),r=LexicalMarkdown_prod_(o.textFormat,(({tag:t})=>t[t.length-1])),l=LexicalMarkdown_prod_(o.textMatch,(({trigger:t})=>t));for(const e of n){const n=e.type;if("element"===n||"text-match"===n||"multiline-element"===n){const n=e.dependencies;for(const e of n)t.hasNode(e)||LexicalMarkdown_prod_et(173,e.getType())}}const c=(t,n,c)=>{(function(t,e,n,o){const r=t.getParent();if(!dn(r)||t.getFirstChild()!==e)return!1;const i=e.getTextContent();if(" "!==i[n-1])return!1;for(const{regExp:r,replace:s}of o){const o=i.match(r);if(o&&o[0].length===(o[0].endsWith(" ")?n:n-1)){const r=e.getNextSiblings(),[i,l]=e.splitText(n);if(i.remove(),!1!==s(t,l?[l,...r]:r,o,!1))return!0}}return!1})(t,n,c,o.element)||function(t,e,n,o){const r=t.getParent();if(!dn(r)||t.getFirstChild()!==e)return!1;const i=e.getTextContent();if(" "!==i[n-1])return!1;for(const{regExpStart:r,replace:s,regExpEnd:l}of o){if(l&&!("optional"in l)||l&&"optional"in l&&!l.optional)continue;const o=i.match(r);if(o&&o[0].length===(o[0].endsWith(" ")?n:n-1)){const r=e.getNextSiblings(),[i,l]=e.splitText(n);if(i.remove(),!1!==s(t,l?[l,...r]:r,o,null,null,!1))return!0}}return!1}(t,n,c,o.multilineElement)||function(t,e,n){let o=t.getTextContent();const r=n[o[e-1]];if(null==r)return!1;e<o.length&&(o=o.slice(0,e));for(const e of r){if(!e.replace||!e.regExp)continue;const n=o.match(e.regExp);if(null===n)continue;const r=n.index||0,i=r+n[0].length;let s;return 0===r?[s]=t.splitText(i):[,s]=t.splitText(r,i),s.selectNext(0,0),e.replace(s,n),!0}return!1}(n,c,l)||function(t,n,o){const r=t.getTextContent(),l=n-1,c=r[l],a=o[c];if(!a)return!1;for(const n of a){const{tag:o}=n,a=o.length,u=l-a+1;if(a>1&&!LexicalMarkdown_prod_ot(r,u,o,0,a))continue;if(" "===r[u-1])continue;const h=r[l+1];if(!1===n.intraword&&h&&!LexicalMarkdown_prod_j.test(h))continue;const d=t;let m=d,x=LexicalMarkdown_prod_nt(r,u,o),T=m;for(;x<0&&(T=T.getPreviousSibling())&&!Gr(T);)if(hi(T)){const t=T.getTextContent();m=T,x=LexicalMarkdown_prod_nt(t,t.length,o)}if(x<0)continue;if(m===d&&x+a===u)continue;const E=m.getTextContent();if(x>0&&E[x-1]===c)continue;const C=E[x-1];if(!1===n.intraword&&C&&!LexicalMarkdown_prod_j.test(C))continue;const y=d.getTextContent(),v=y.slice(0,u)+y.slice(l+1);d.setTextContent(v);const S=m===d?v:E;m.setTextContent(S.slice(0,x)+S.slice(x+a));const b=Ri(),w=Ai();Ft(w);const $=l-a*(m===d?2:1)+1;w.anchor.set(m.__key,x,"text"),w.focus.set(d.__key,$,"text");for(const t of n.format)w.hasFormat(t)||w.formatText(t);w.anchor.set(w.focus.key,w.focus.offset,w.focus.type);for(const t of n.format)w.hasFormat(t)&&w.toggleFormat(t);return ki(b)&&(w.format=b.format),!0}}(n,c,r)};return t.registerUpdateListener((({tags:n,dirtyLeaves:o,editorState:r,prevEditorState:i})=>{if(n.has("collaboration")||n.has("historic"))return;if(t.isComposing())return;const l=r.read(Ri),a=i.read(Ri);if(!ki(a)||!ki(l)||!l.isCollapsed()||l.is(a))return;const u=l.anchor.key,g=l.anchor.offset,p=r._nodeMap.get(u);!hi(p)||!o.has(u)||1!==g&&g>a.anchor.offset+1||t.update((()=>{if(p.hasFormat("code"))return;const t=p.getParent();null===t||LexicalCode_prod_z(t)||c(t,p,l.anchor.offset)}))}))}const LexicalMarkdown_prod_it=/^(\s*)(\d{1,})\.\s/,LexicalMarkdown_prod_st=/^(\s*)[-*+]\s/,LexicalMarkdown_prod_lt=/^(\s*)(?:-\s)?\s?(\[(\s|x)?\])\s/i,LexicalMarkdown_prod_ct=/^(#{1,6})\s/,LexicalMarkdown_prod_at=/^>\s/,LexicalMarkdown_prod_ft=/^[ \t]*```(\w+)?/,LexicalMarkdown_prod_ut=/[ \t]*```$/,LexicalMarkdown_prod_gt=/^[ \t]*```[^`]+(?:(?:`{1,2}|`{4,})[^`]+)*```(?:[^`]|$)/,LexicalMarkdown_prod_pt=/^(?:\|)(.+)(?:\|)\s?$/,LexicalMarkdown_prod_ht=/^(\| ?:?-*:? ?)+\|\s?$/,LexicalMarkdown_prod_dt=t=>(e,n,o)=>{const r=t(o);r.append(...n),e.replace(r),r.select(0,0)};const LexicalMarkdown_prod_mt=t=>(e,n,o)=>{const r=e.getPreviousSibling(),i=e.getNextSibling(),s=LexicalList_prod_W("check"===t?"x"===o[3]:void 0);if(LexicalList_prod_H(i)&&i.getListType()===t){const t=i.getFirstChild();null!==t?t.insertBefore(s):i.append(s),e.remove()}else if(LexicalList_prod_H(r)&&r.getListType()===t)r.append(s),e.remove();else{const n=LexicalList_prod_q(t,"number"===t?Number(o[2]):void 0);n.append(s),e.replace(n)}s.append(...n),s.select(0,0);const l=function(t){const e=t.match(/\t/g),n=t.match(/ /g);let o=0;return e&&(o+=e.length),n&&(o+=Math.floor(n.length/4)),o}(o[1]);l&&s.setIndent(l)},LexicalMarkdown_prod_xt=(t,e,n)=>{const o=[],r=t.getChildren();let i=0;for(const s of r)if(LexicalList_prod_V(s)){if(1===s.getChildrenSize()){const t=s.getFirstChild();if(LexicalList_prod_H(t)){o.push(LexicalMarkdown_prod_xt(t,e,n+1));continue}}const r=" ".repeat(4*n),l=t.getListType(),c="number"===l?`${t.getStart()+i}. `:"check"===l?`- [${s.getChecked()?"x":" "}] `:"- ";o.push(r+c+e(s)),i++}return o.join("\n")},LexicalMarkdown_prod_Tt={dependencies:[LexicalRichText_prod_yt],export:(t,e)=>{if(!LexicalRichText_prod_Nt(t))return null;const n=Number(t.getTag().slice(1));return"#".repeat(n)+" "+e(t)},regExp:LexicalMarkdown_prod_ct,replace:LexicalMarkdown_prod_dt((t=>{const e="h"+t[1].length;return LexicalRichText_prod_Et(e)})),type:"element"},LexicalMarkdown_prod_Et={dependencies:[LexicalRichText_prod_ht],export:(t,e)=>{if(!LexicalRichText_prod_vt(t))return null;const n=e(t).split("\n"),o=[];for(const t of n)o.push("> "+t);return o.join("\n")},regExp:LexicalMarkdown_prod_at,replace:(t,e,n,o)=>{if(o){const n=t.getPreviousSibling();if(LexicalRichText_prod_vt(n))return n.splice(n.getChildrenSize(),0,[qr(),...e]),n.select(0,0),void t.remove()}const r=LexicalRichText_prod_Ct();r.append(...e),t.replace(r),r.select(0,0)},type:"element"},LexicalMarkdown_prod_Ct={dependencies:[LexicalCode_prod_H],export:t=>{if(!LexicalCode_prod_z(t))return null;const e=t.getTextContent();return"```"+(t.getLanguage()||"")+(e?"\n"+e:"")+"\n```"},regExpEnd:{optional:!0,regExp:LexicalMarkdown_prod_ut},regExpStart:LexicalMarkdown_prod_ft,replace:(t,e,n,o,r,i)=>{let s,c;if(!e&&r){if(1===r.length)o?(s=LexicalCode_prod_D(),c=n[1]+r[0]):(s=LexicalCode_prod_D(n[1]),c=r[0].startsWith(" ")?r[0].slice(1):r[0]);else{if(s=LexicalCode_prod_D(n[1]),0===r[0].trim().length)for(;r.length>0&&!r[0].length;)r.shift();else r[0]=r[0].startsWith(" ")?r[0].slice(1):r[0];for(;r.length>0&&!r[r.length-1].length;)r.pop();c=r.join("\n")}const e=di(c);s.append(e),t.append(s)}else e&&LexicalMarkdown_prod_dt((t=>LexicalCode_prod_D(t?t[1]:void 0)))(t,e,n,i)},type:"multiline-element"},LexicalMarkdown_prod_yt={dependencies:[LexicalList_prod_J,LexicalList_prod_I],export:(t,e)=>LexicalList_prod_H(t)?LexicalMarkdown_prod_xt(t,e,0):null,regExp:LexicalMarkdown_prod_st,replace:LexicalMarkdown_prod_mt("bullet"),type:"element"},LexicalMarkdown_prod_vt={dependencies:[LexicalList_prod_J,LexicalList_prod_I],export:(t,e)=>LexicalList_prod_H(t)?LexicalMarkdown_prod_xt(t,e,0):null,regExp:LexicalMarkdown_prod_lt,replace:LexicalMarkdown_prod_mt("check"),type:"element"},LexicalMarkdown_prod_St={dependencies:[LexicalList_prod_J,LexicalList_prod_I],export:(t,e)=>LexicalList_prod_H(t)?LexicalMarkdown_prod_xt(t,e,0):null,regExp:LexicalMarkdown_prod_it,replace:LexicalMarkdown_prod_mt("number"),type:"element"},LexicalMarkdown_prod_bt={format:["code"],tag:"`",type:"text-format"},LexicalMarkdown_prod_wt={format:["highlight"],tag:"==",type:"text-format"},LexicalMarkdown_prod_$t={format:["bold","italic"],tag:"***",type:"text-format"},LexicalMarkdown_prod_Ft={format:["bold","italic"],intraword:!1,tag:"___",type:"text-format"},LexicalMarkdown_prod_Pt={format:["bold"],tag:"**",type:"text-format"},LexicalMarkdown_prod_Mt={format:["bold"],intraword:!1,tag:"__",type:"text-format"},LexicalMarkdown_prod_kt={format:["strikethrough"],tag:"~~",type:"text-format"},LexicalMarkdown_prod_Lt={format:["italic"],tag:"*",type:"text-format"},LexicalMarkdown_prod_Rt={format:["italic"],intraword:!1,tag:"_",type:"text-format"},LexicalMarkdown_prod_t={dependencies:[LexicalLink_prod_a],export:(t,n,o)=>{if(!LexicalLink_prod_g(t))return null;const r=t.getTitle(),i=r?`[${t.getTextContent()}](${t.getURL()} "${r}")`:`[${t.getTextContent()}](${t.getURL()})`,s=t.getFirstChild();return 1===t.getChildrenSize()&&hi(s)?o(s,i):i},importRegExp:/(?:\[([^[]+)\])(?:\((?:([^()\s]+)(?:\s"((?:[^"]*\\")*[^"]*)"\s*)?)\))/,regExp:/(?:\[([^[]+)\])(?:\((?:([^()\s]+)(?:\s"((?:[^"]*\\")*[^"]*)"\s*)?)\))$/,replace:(t,e)=>{const[,n,o,r]=e,i=LexicalLink_prod_c(o,{title:r}),s=di(n);s.setFormat(t.getFormat()),i.append(s),t.replace(i)},trigger:")",type:"text-match"};const LexicalMarkdown_prod_Nt=[LexicalMarkdown_prod_Tt,LexicalMarkdown_prod_Et,LexicalMarkdown_prod_yt,LexicalMarkdown_prod_St],LexicalMarkdown_prod_jt=[LexicalMarkdown_prod_Ct],LexicalMarkdown_prod_It=[LexicalMarkdown_prod_bt,LexicalMarkdown_prod_$t,LexicalMarkdown_prod_Ft,LexicalMarkdown_prod_Pt,LexicalMarkdown_prod_Mt,LexicalMarkdown_prod_wt,LexicalMarkdown_prod_Lt,LexicalMarkdown_prod_Rt,LexicalMarkdown_prod_kt],LexicalMarkdown_prod_zt=[LexicalMarkdown_prod_t],LexicalMarkdown_prod_At=[...LexicalMarkdown_prod_Nt,...LexicalMarkdown_prod_jt,...LexicalMarkdown_prod_It,...LexicalMarkdown_prod_zt];function LexicalMarkdown_prod_Bt(t,e=LexicalMarkdown_prod_At,n,o=!1,r=!1){const i=o?t:function(t,e=!1){const n=t.split("\n");let o=!1;const r=[];for(let t=0;t<n.length;t++){const i=n[t],s=r[r.length-1];LexicalMarkdown_prod_gt.test(i)?r.push(i):LexicalMarkdown_prod_ft.test(i)||LexicalMarkdown_prod_ut.test(i)?(o=!o,r.push(i)):o||""===i||""===s||!s||LexicalMarkdown_prod_ct.test(s)||LexicalMarkdown_prod_ct.test(i)||LexicalMarkdown_prod_at.test(i)||LexicalMarkdown_prod_it.test(i)||LexicalMarkdown_prod_st.test(i)||LexicalMarkdown_prod_lt.test(i)||LexicalMarkdown_prod_pt.test(i)||LexicalMarkdown_prod_ht.test(i)||!e?r.push(i):r[r.length-1]=s+i}return r.join("\n")}(t,r);return LexicalMarkdown_prod_J(e,o)(i,n)}function LexicalMarkdown_prod_Wt(t=LexicalMarkdown_prod_At,e,o=!1){const r=function(t,e=!1){const o=LexicalMarkdown_prod_N(t),r=[...o.multilineElement,...o.element],i=!e,s=o.textFormat.filter((t=>1===t.format.length));return t=>{const e=[],l=(t||n()).getChildren();for(let t=0;t<l.length;t++){const n=l[t],c=LexicalMarkdown_prod_A(n,r,s,o.textMatch);null!=c&&e.push(i&&t>0&&!LexicalMarkdown_prod_z(n)&&!LexicalMarkdown_prod_z(l[t-1])?"\n".concat(c):c)}return e.join("\n")}}(t,o);return r(e)}

;// ../../node_modules/@lexical/react/LexicalComposerContext.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalComposerContext_prod_r(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var LexicalComposerContext_prod_t=LexicalComposerContext_prod_r((function(e){const n=new URLSearchParams;n.append("code",e);for(let e=1;e<arguments.length;e++)n.append("v",arguments[e]);throw Error(`Minified Lexical error #${e}; visit https://lexical.dev/docs/error?${n} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));const LexicalComposerContext_prod_l=(0,react.createContext)(null);function LexicalComposerContext_prod_o(e,n){let r=null;return null!=e&&(r=e[1]),{getTheme:function(){return null!=n?n:null!=r?r.getTheme():null}}}function LexicalComposerContext_prod_u(){const e=(0,react.useContext)(LexicalComposerContext_prod_l);return null==e&&LexicalComposerContext_prod_t(8),e}

;// ../../node_modules/@lexical/react/LexicalComposer.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const LexicalComposer_prod_s="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,LexicalComposer_prod_m=LexicalComposer_prod_s?react.useLayoutEffect:react.useEffect,LexicalComposer_prod_u={tag:"history-merge"};function LexicalComposer_prod_p({initialConfig:a,children:c}){const p=(0,react.useMemo)((()=>{const{theme:t,namespace:c,nodes:l,onError:d,editorState:m,html:p}=a,f=LexicalComposerContext_prod_o(null,t),E=js({editable:a.editable,html:p,namespace:c,nodes:l,onError:e=>d(e,E),theme:t});return function(e,t){if(null===t)return;if(void 0===t)e.update((()=>{const t=Et();if(t.isEmpty()){const o=zs();t.append(o);const n=LexicalComposer_prod_s?document.activeElement:null;(null!==Ri()||null!==n&&n===e.getRootElement())&&o.select()}}),LexicalComposer_prod_u);else if(null!==t)switch(typeof t){case"string":{const o=e.parseEditorState(t);e.setEditorState(o,LexicalComposer_prod_u);break}case"object":e.setEditorState(t,LexicalComposer_prod_u);break;case"function":e.update((()=>{Et().isEmpty()&&t(e)}),LexicalComposer_prod_u)}}(E,m),[E,f]}),[]);return LexicalComposer_prod_m((()=>{const e=a.editable,[t]=p;t.setEditable(void 0===e||e)}),[]),(0,react_jsx_runtime.jsx)(LexicalComposerContext_prod_l.Provider,{value:p,children:c})}

;// ../../node_modules/@lexical/text/LexicalText.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalText_prod_s(){return Et().getTextContent()}function LexicalText_prod_u(t,e=!0){if(t)return!1;let n=LexicalText_prod_s();return e&&(n=n.trim()),""===n}function LexicalText_prod_f(t,e){return()=>LexicalText_prod_u(t,e)}function LexicalText_prod_c(o){if(!LexicalText_prod_u(o,!1))return!1;const l=Et().getChildren(),s=l.length;if(s>1)return!1;for(let t=0;t<s;t++){const o=l[t];if(Es(o))return!1;if(bs(o)){if(!Ws(o))return!1;if(0!==o.__indent)return!1;const e=o.getChildren(),n=e.length;for(let r=0;r<n;r++){const n=e[t];if(!hi(n))return!1}}}return!0}function LexicalText_prod_g(t){return()=>LexicalText_prod_c(t)}function LexicalText_prod_a(t,e){let r=t.getFirstChild(),o=0;t:for(;null!==r;){if(n(r)){const t=r.getFirstChild();if(null!==t){r=t;continue}}else if(i(r)){const t=r.getTextContentSize();if(o+t>e)return{node:r,offset:e-o};o+=t}const t=r.getNextSibling();if(null!==t){r=t;continue}let l=r.getParent();for(;null!==l;){const t=l.getNextSibling();if(null!==t){r=t;continue t}l=l.getParent()}break}return null}function LexicalText_prod_d(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var LexicalText_prod_x=LexicalText_prod_d((function(t){const e=new URLSearchParams;e.append("code",t);for(let t=1;t<arguments.length;t++)e.append("v",arguments[t]);throw Error(`Minified Lexical error #${t}; visit https://lexical.dev/docs/error?${e} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));function LexicalText_prod_T(t,e,n,r){const s=t=>t instanceof n,u=t=>{const e=l(t.getTextContent());e.setFormat(t.getFormat()),t.replace(e)};return[t.registerNodeTransform(o,(t=>{if(!t.isSimpleText())return;let n,o=t.getPreviousSibling(),l=t.getTextContent(),f=t;if(i(o)){const n=o.getTextContent(),r=e(n+l);if(s(o)){if(null===r||0!==(t=>t.getLatest().__mode)(o))return void u(o);{const e=r.end-n.length;if(e>0){const r=n+l.slice(0,e);if(o.select(),o.setTextContent(r),e===l.length)t.remove();else{const n=l.slice(e);t.setTextContent(n)}return}}}else if(null===r||r.start<n.length)return}let c=0;for(;;){n=e(l);let t,g=null===n?"":l.slice(n.end);if(l=g,""===g){const t=f.getNextSibling();if(i(t)){g=f.getTextContent()+t.getTextContent();const n=e(g);if(null===n)return void(s(t)?u(t):t.markDirty());if(0!==n.start)return}}if(null===n)return;if(0===n.start&&i(o)&&o.isTextEntity()){c+=n.end;continue}0===n.start?[t,f]=f.splitText(n.end):[,t,f]=f.splitText(n.start+c,n.end+c),void 0===t&&LexicalText_prod_x(165,"nodeToReplace");const a=r(t);if(a.setFormat(t.getFormat()),t.replace(a),null==f)return;c=0,o=a}})),t.registerNodeTransform(n,(t=>{const n=t.getTextContent(),r=e(n);if(null===r||0!==r.start)return void u(t);if(n.length>r.end)return void t.splitText(r.end);const o=t.getPreviousSibling();i(o)&&o.isTextEntity()&&(u(o),u(t));const l=t.getNextSibling();i(l)&&l.isTextEntity()&&(u(l),s(t)&&u(t))}))]}

;// ../../node_modules/@lexical/react/LexicalContentEditable.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const LexicalContentEditable_prod_m="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?react.useLayoutEffect:react.useEffect;function LexicalContentEditable_prod_f({editor:e,ariaActiveDescendant:t,ariaAutoComplete:i,ariaControls:a,ariaDescribedBy:d,ariaErrorMessage:c,ariaExpanded:s,ariaInvalid:u,ariaLabel:f,ariaLabelledBy:b,ariaMultiline:p,ariaOwns:x,ariaRequired:E,autoCapitalize:v,className:w,id:y,role:C="textbox",spellCheck:g=!0,style:h,tabIndex:L,"data-testid":D,...I},R){const[k,q]=(0,react.useState)(e.isEditable()),z=(0,react.useCallback)((t=>{t&&t.ownerDocument&&t.ownerDocument.defaultView?e.setRootElement(t):e.setRootElement(null)}),[e]),A=(0,react.useMemo)((()=>function(...e){return t=>{e.forEach((e=>{"function"==typeof e?e(t):null!=e&&(e.current=t)}))}}(R,z)),[z,R]);return LexicalContentEditable_prod_m((()=>(q(e.isEditable()),e.registerEditableListener((e=>{q(e)})))),[e]),(0,react_jsx_runtime.jsx)("div",{"aria-activedescendant":k?t:void 0,"aria-autocomplete":k?i:"none","aria-controls":k?a:void 0,"aria-describedby":d,...null!=c?{"aria-errormessage":c}:{},"aria-expanded":k&&"combobox"===C?!!s:void 0,...null!=u?{"aria-invalid":u}:{},"aria-label":f,"aria-labelledby":b,"aria-multiline":p,"aria-owns":k?x:void 0,"aria-readonly":!k||void 0,"aria-required":E,autoCapitalize:v,className:w,contentEditable:k,"data-testid":D,id:y,ref:A,role:k?C:void 0,spellCheck:g,style:h,tabIndex:L,...I})}const LexicalContentEditable_prod_b=(0,react.forwardRef)(LexicalContentEditable_prod_f);function LexicalContentEditable_prod_p(e){return e.getEditorState().read(LexicalText_prod_g(e.isComposing()))}const LexicalContentEditable_prod_x=(0,react.forwardRef)(LexicalContentEditable_prod_E);function LexicalContentEditable_prod_E(t,i){const{placeholder:a,...r}=t,[n]=LexicalComposerContext_prod_u();return (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment,{children:[(0,react_jsx_runtime.jsx)(LexicalContentEditable_prod_b,{editor:n,...r,ref:i}),null!=a&&(0,react_jsx_runtime.jsx)(LexicalContentEditable_prod_v,{editor:n,content:a})]})}function LexicalContentEditable_prod_v({content:e,editor:i}){const a=function(e){const[t,i]=(0,react.useState)((()=>LexicalContentEditable_prod_p(e)));return LexicalContentEditable_prod_m((()=>{function t(){const t=LexicalContentEditable_prod_p(e);i(t)}return t(),LexicalUtils_prod_N(e.registerUpdateListener((()=>{t()})),e.registerEditableListener((()=>{t()})))}),[e]),t}(i),[n,o]=(0,react.useState)(i.isEditable());if((0,react.useLayoutEffect)((()=>(o(i.isEditable()),i.registerEditableListener((e=>{o(e)})))),[i]),!a)return null;let d=null;return"function"==typeof e?d=e(n):null!==e&&(d=e),null===d?null:(0,react_jsx_runtime.jsx)("div",{"aria-hidden":!0,children:d})}

;// ../../node_modules/@lexical/react/LexicalErrorBoundary.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalErrorBoundary_prod_t(r,e){return LexicalErrorBoundary_prod_t=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(r,e){return r.__proto__=e,r},LexicalErrorBoundary_prod_t(r,e)}var LexicalErrorBoundary_prod_o={error:null},LexicalErrorBoundary_prod_n=function(e){var n,a;function s(){for(var r,t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];return(r=e.call.apply(e,[this].concat(n))||this).state=LexicalErrorBoundary_prod_o,r.resetErrorBoundary=function(){for(var e,t=arguments.length,o=new Array(t),n=0;n<t;n++)o[n]=arguments[n];null==r.props.onReset||(e=r.props).onReset.apply(e,o),r.reset()},r}a=e,(n=s).prototype=Object.create(a.prototype),n.prototype.constructor=n,LexicalErrorBoundary_prod_t(n,a),s.getDerivedStateFromError=function(r){return{error:r}};var l=s.prototype;return l.reset=function(){this.setState(LexicalErrorBoundary_prod_o)},l.componentDidCatch=function(r,e){var t,o;null==(t=(o=this.props).onError)||t.call(o,r,e)},l.componentDidUpdate=function(r,e){var t,o,n,a,s=this.state.error,l=this.props.resetKeys;null!==s&&null!==e.error&&(void 0===(n=r.resetKeys)&&(n=[]),void 0===(a=l)&&(a=[]),n.length!==a.length||n.some((function(r,e){return!Object.is(r,a[e])})))&&(null==(t=(o=this.props).onResetKeysChange)||t.call(o,r.resetKeys,l),this.reset())},l.render=function(){var e=this.state.error,t=this.props,o=t.fallbackRender,n=t.FallbackComponent,a=t.fallback;if(null!==e){var s={error:e,resetErrorBoundary:this.resetErrorBoundary};if(react.isValidElement(a))return a;if("function"==typeof o)return o(s);if(n)return react.createElement(n,s);throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop")}return this.props.children},s}(react.Component);function LexicalErrorBoundary_prod_a({children:r,onError:t}){return (0,react_jsx_runtime.jsx)(LexicalErrorBoundary_prod_n,{fallback:(0,react_jsx_runtime.jsx)("div",{style:{border:"1px solid #f00",color:"#f00",padding:"8px"},children:"An error was thrown."}),onError:t,children:r})}

;// ../../node_modules/@lexical/react/LexicalLinkPlugin.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalLinkPlugin_prod_d({validateUrl:d,attributes:p}){const[f]=LexicalComposerContext_prod_u();return (0,react.useEffect)((()=>{if(!f.hasNodes([LexicalLink_prod_a]))throw new Error("LinkPlugin: LinkNode not registered on editor");return LexicalUtils_prod_N(f.registerCommand(LexicalLink_prod_U,(t=>{if(null===t)return LexicalLink_prod_m(t),!0;if("string"==typeof t)return!(void 0!==d&&!d(t))&&(LexicalLink_prod_m(t,p),!0);{const{url:r,target:o,rel:i,title:l}=t;return LexicalLink_prod_m(r,{...p,rel:i,target:o,title:l}),!0}}),Ks),void 0!==d?f.registerCommand(Lexical_prod_c,(t=>{const e=Ri();if(!ki(e)||e.isCollapsed()||!LexicalUtils_prod_ue(t,ClipboardEvent))return!1;const o=t;if(null===o.clipboardData)return!1;const i=o.clipboardData.getData("text");return!!d(i)&&(!e.getNodes().some((t=>bs(t)))&&(f.dispatchCommand(LexicalLink_prod_U,{...p,url:i}),t.preventDefault(),!0))}),Ks):()=>{})}),[f,d,p]),null}

;// ../../node_modules/@lexical/react/LexicalListPlugin.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalListPlugin_prod_n(){const[n]=LexicalComposerContext_prod_u();return (0,react.useEffect)((()=>{if(!n.hasNodes([LexicalList_prod_J,LexicalList_prod_I]))throw new Error("ListPlugin: ListNode and/or ListItemNode not registered on editor")}),[n]),function(t){(0,react.useEffect)((()=>LexicalList_prod_Z(t)),[t])}(n),null}

;// ../../node_modules/@lexical/react/useLexicalNodeSelection.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function useLexicalNodeSelection_prod_d(e,t){return e.getEditorState().read((()=>{const e=Ct(t);return null!==e&&e.isSelected()}))}function useLexicalNodeSelection_prod_u(c){const[u]=LexicalComposerContext_prod_u(),[p,s]=(0,react.useState)((()=>useLexicalNodeSelection_prod_d(u,c)));(0,react.useEffect)((()=>{let e=!0;const t=u.registerUpdateListener((()=>{e&&s(useLexicalNodeSelection_prod_d(u,c))}));return()=>{e=!1,t()}}),[u,c]);return[p,(0,react.useCallback)((e=>{u.update((()=>{let a=Ri();wi(a)||(a=Bi(),Ft(a)),wi(a)&&(e?a.add(c):a.delete(c))}))}),[u,c]),(0,react.useCallback)((()=>{u.update((()=>{const e=Ri();wi(e)&&e.clear()}))}),[u])]}

;// ../../node_modules/@lexical/react/LexicalHorizontalRuleNode.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const LexicalHorizontalRuleNode_prod_h=Lexical_prod_e("INSERT_HORIZONTAL_RULE_COMMAND");function LexicalHorizontalRuleNode_prod_g({nodeKey:i}){const[c]=LexicalComposerContext_prod_u(),[u,y,h]=useLexicalNodeSelection_prod_u(i),g=(0,react.useCallback)((e=>{const t=Ri();return u&&wi(t)&&(e.preventDefault(),c.update((()=>{t.getNodes().forEach((e=>{LexicalHorizontalRuleNode_prod_N(e)&&e.remove()}))}))),!1}),[c,u]);return (0,react.useEffect)((()=>LexicalUtils_prod_N(c.registerCommand(Lexical_prod_r,(e=>{const t=c.getElementByKey(i);return e.target===t&&(e.shiftKey||h(),y(!u),!0)}),Ks),c.registerCommand(Lexical_prod_w,g,Ks),c.registerCommand(Lexical_prod_k,g,Ks))),[h,c,u,i,g,y]),(0,react.useEffect)((()=>{const e=c.getElementByKey(i),t="selected";null!==e&&(u?LexicalUtils_prod_W(e,t):LexicalUtils_prod_j(e,t))}),[c,u,i]),null}class LexicalHorizontalRuleNode_prod_O extends Ns{static getType(){return"horizontalrule"}static clone(e){return new LexicalHorizontalRuleNode_prod_O(e.__key)}static importJSON(e){return LexicalHorizontalRuleNode_prod_E()}static importDOM(){return{hr:()=>({conversion:LexicalHorizontalRuleNode_prod_C,priority:0})}}exportJSON(){return{type:"horizontalrule",version:1}}exportDOM(){return{element:document.createElement("hr")}}createDOM(e){const t=document.createElement("hr");return LexicalUtils_prod_W(t,e.theme.hr),t}getTextContent(){return"\n"}isInline(){return!1}updateDOM(){return!1}decorate(){return (0,react_jsx_runtime.jsx)(LexicalHorizontalRuleNode_prod_g,{nodeKey:this.__key})}}function LexicalHorizontalRuleNode_prod_C(){return{node:LexicalHorizontalRuleNode_prod_E()}}function LexicalHorizontalRuleNode_prod_E(){return gn(new LexicalHorizontalRuleNode_prod_O)}function LexicalHorizontalRuleNode_prod_N(e){return e instanceof LexicalHorizontalRuleNode_prod_O}

;// ../../node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const LexicalMarkdownShortcutPlugin_prod_i=[{dependencies:[LexicalHorizontalRuleNode_prod_O],export:e=>LexicalHorizontalRuleNode_prod_N(e)?"***":null,regExp:/^(---|\*\*\*|___)\s?$/,replace:(e,r,t,o)=>{const l=LexicalHorizontalRuleNode_prod_E();o||null!=e.getNextSibling()?e.replace(l):e.insertBefore(l),l.selectNext()},type:"element"},...LexicalMarkdown_prod_At];function LexicalMarkdownShortcutPlugin_prod_a({transformers:e=LexicalMarkdownShortcutPlugin_prod_i}){const[o]=LexicalComposerContext_prod_u();return (0,react.useEffect)((()=>LexicalMarkdown_prod_rt(o,e)),[o,e]),null}

;// ../../node_modules/@lexical/react/useLexicalEditable.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const useLexicalEditable_prod_u="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?react.useLayoutEffect:react.useEffect;function useLexicalEditable_prod_c(e){return{initialValueFn:()=>e.isEditable(),subscribe:t=>e.registerEditableListener(t)}}function useLexicalEditable_prod_a(){return function(t){const[n]=LexicalComposerContext_prod_u(),c=(0,react.useMemo)((()=>t(n)),[n,t]),[a,l]=(0,react.useState)((()=>c.initialValueFn())),d=(0,react.useRef)(a);return useLexicalEditable_prod_u((()=>{const{initialValueFn:e,subscribe:t}=c,n=e();return d.current!==n&&(d.current=n,l(n)),t((e=>{d.current=e,l(e)}))}),[c,t]),a}(useLexicalEditable_prod_c)}

// EXTERNAL MODULE: ../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js
var react_dom = __webpack_require__(787377);
;// ../../node_modules/@lexical/dragon/LexicalDragon.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalDragon_prod_o(o){const i=window.location.origin,a=a=>{if(a.origin!==i)return;const r=o.getRootElement();if(document.activeElement!==r)return;const s=a.data;if("string"==typeof s){let i;try{i=JSON.parse(s)}catch(e){return}if(i&&"nuanria_messaging"===i.protocol&&"request"===i.type){const r=i.payload;if(r&&"makeChanges"===r.functionId){const i=r.args;if(i){const[r,s,c,g,d,f]=i;o.update((()=>{const o=Ri();if(ki(o)){const e=o.anchor;let t=e.getNode(),i=0,f=0;if(hi(t)&&r>=0&&s>=0&&(i=r,f=r+s,o.setTextNodeRange(t,i,t,f)),i===f&&""===c||(o.insertRawText(c),t=e.getNode()),hi(t)){i=g,f=g+d;const e=t.getTextContentSize();i=i>e?e:i,f=f>e?e:f,o.setTextNodeRange(t,i,t,f)}a.stopImmediatePropagation()}}))}}}}};return window.addEventListener("message",a,!0),()=>{window.removeEventListener("message",a,!0)}}

;// ../../node_modules/@lexical/react/LexicalRichTextPlugin.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const LexicalRichTextPlugin_prod_g="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?react.useLayoutEffect:react.useEffect;function LexicalRichTextPlugin_prod_E(t){return t.getEditorState().read(LexicalText_prod_g(t.isComposing()))}function LexicalRichTextPlugin_prod_h({contentEditable:e,placeholder:r=null,ErrorBoundary:n}){const[E]=LexicalComposerContext_prod_u(),h=function(t,e){const[r,o]=(0,react.useState)((()=>t.getDecorators()));return LexicalRichTextPlugin_prod_g((()=>t.registerDecoratorListener((t=>{(0,react_dom.flushSync)((()=>{o(t)}))}))),[t]),(0,react.useEffect)((()=>{o(t.getDecorators())}),[t]),(0,react.useMemo)((()=>{const o=[],n=Object.keys(r);for(let i=0;i<n.length;i++){const c=n[i],l=(0,react_jsx_runtime.jsx)(e,{onError:e=>t._onError(e),children:(0,react_jsx_runtime.jsx)(react.Suspense,{fallback:null,children:r[c]})}),u=t.getElementByKey(c);null!==u&&o.push((0,react_dom.createPortal)(l,u,c))}return o}),[e,r,t])}(E,n);return function(t){LexicalRichTextPlugin_prod_g((()=>LexicalUtils_prod_N(LexicalRichText_prod_At(t),LexicalDragon_prod_o(t))),[t])}(E),(0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment,{children:[e,(0,react_jsx_runtime.jsx)(LexicalRichTextPlugin_prod_w,{content:r}),h]})}function LexicalRichTextPlugin_prod_w({content:r}){const[n]=LexicalComposerContext_prod_u(),i=function(t){const[e,r]=(0,react.useState)((()=>LexicalRichTextPlugin_prod_E(t)));return LexicalRichTextPlugin_prod_g((()=>{function e(){const e=LexicalRichTextPlugin_prod_E(t);r(e)}return e(),LexicalUtils_prod_N(t.registerUpdateListener((()=>{e()})),t.registerEditableListener((()=>{e()})))}),[t]),e}(n),l=useLexicalEditable_prod_a();return i?"function"==typeof r?r(l):r:null}

;// ../../node_modules/@lexical/table/LexicalTable.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const LexicalTable_prod_ne=/^(\d+(?:\.\d+)?)px$/,LexicalTable_prod_oe={BOTH:3,COLUMN:2,NO_STATUS:0,ROW:1};class LexicalTable_prod_re extends ks{static getType(){return"tablecell"}static clone(e){return new LexicalTable_prod_re(e.__headerState,e.__colSpan,e.__width,e.__key)}afterCloneFrom(e){super.afterCloneFrom(e),this.__rowSpan=e.__rowSpan,this.__backgroundColor=e.__backgroundColor}static importDOM(){return{td:e=>({conversion:LexicalTable_prod_le,priority:0}),th:e=>({conversion:LexicalTable_prod_le,priority:0})}}static importJSON(e){const t=e.colSpan||1,n=e.rowSpan||1;return LexicalTable_prod_se(e.headerState,t,e.width||void 0).setRowSpan(n).setBackgroundColor(e.backgroundColor||null)}constructor(e=LexicalTable_prod_oe.NO_STATUS,t=1,n,o){super(o),this.__colSpan=t,this.__rowSpan=1,this.__headerState=e,this.__width=n,this.__backgroundColor=null}createDOM(t){const n=document.createElement(this.getTag());return this.__width&&(n.style.width=`${this.__width}px`),this.__colSpan>1&&(n.colSpan=this.__colSpan),this.__rowSpan>1&&(n.rowSpan=this.__rowSpan),null!==this.__backgroundColor&&(n.style.backgroundColor=this.__backgroundColor),LexicalUtils_prod_W(n,t.theme.tableCell,this.hasHeader()&&t.theme.tableCellHeader),n}exportDOM(e){const t=super.exportDOM(e);if(t.element&&Tn(t.element)){const e=t.element;e.setAttribute("data-temporary-table-cell-lexical-key",this.getKey()),e.style.border="1px solid black",this.__colSpan>1&&(e.colSpan=this.__colSpan),this.__rowSpan>1&&(e.rowSpan=this.__rowSpan),e.style.width=`${this.getWidth()||75}px`,e.style.verticalAlign="top",e.style.textAlign="start",null===this.__backgroundColor&&this.hasHeader()&&(e.style.backgroundColor="#f2f3f5")}return t}exportJSON(){return{...super.exportJSON(),backgroundColor:this.getBackgroundColor(),colSpan:this.__colSpan,headerState:this.__headerState,rowSpan:this.__rowSpan,type:"tablecell",width:this.getWidth()}}getColSpan(){return this.getLatest().__colSpan}setColSpan(e){const t=this.getWritable();return t.__colSpan=e,t}getRowSpan(){return this.getLatest().__rowSpan}setRowSpan(e){const t=this.getWritable();return t.__rowSpan=e,t}getTag(){return this.hasHeader()?"th":"td"}setHeaderStyles(e,t=LexicalTable_prod_oe.BOTH){const n=this.getWritable();return n.__headerState=e&t|n.__headerState&~t,n}getHeaderStyles(){return this.getLatest().__headerState}setWidth(e){const t=this.getWritable();return t.__width=e,t}getWidth(){return this.getLatest().__width}getBackgroundColor(){return this.getLatest().__backgroundColor}setBackgroundColor(e){const t=this.getWritable();return t.__backgroundColor=e,t}toggleHeaderStyle(e){const t=this.getWritable();return(t.__headerState&e)===e?t.__headerState-=e:t.__headerState+=e,t}hasHeaderState(e){return(this.getHeaderStyles()&e)===e}hasHeader(){return this.getLatest().__headerState!==LexicalTable_prod_oe.NO_STATUS}updateDOM(e){return e.__headerState!==this.__headerState||e.__width!==this.__width||e.__colSpan!==this.__colSpan||e.__rowSpan!==this.__rowSpan||e.__backgroundColor!==this.__backgroundColor}isShadowRoot(){return!0}collapseAtStart(){return!0}canBeEmpty(){return!1}canIndent(){return!1}}function LexicalTable_prod_le(e){const t=e,n=e.nodeName.toLowerCase();let o;LexicalTable_prod_ne.test(t.style.width)&&(o=parseFloat(t.style.width));const r=LexicalTable_prod_se("th"===n?LexicalTable_prod_oe.ROW:LexicalTable_prod_oe.NO_STATUS,t.colSpan,o);r.__rowSpan=t.rowSpan;const l=t.style.backgroundColor;""!==l&&(r.__backgroundColor=l);const s=t.style,h=(s&&s.textDecoration||"").split(" "),d="700"===s.fontWeight||"bold"===s.fontWeight,g=h.includes("line-through"),f="italic"===s.fontStyle,m=h.includes("underline");return{after:e=>(0===e.length&&e.push(zs()),e),forChild:(e,t)=>{if(LexicalTable_prod_ie(t)&&!bs(e)){const t=zs();return Gr(e)&&"\n"===e.getTextContent()?null:(hi(e)&&(d&&e.toggleFormat("bold"),g&&e.toggleFormat("strikethrough"),f&&e.toggleFormat("italic"),m&&e.toggleFormat("underline")),t.append(e),t)}return e},node:r}}function LexicalTable_prod_se(e,t=1,n){return gn(new LexicalTable_prod_re(e,t,n))}function LexicalTable_prod_ie(e){return e instanceof LexicalTable_prod_re}const LexicalTable_prod_ce=Lexical_prod_e("INSERT_TABLE_COMMAND");function LexicalTable_prod_ae(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var LexicalTable_prod_ue=LexicalTable_prod_ae((function(e){const t=new URLSearchParams;t.append("code",e);for(let e=1;e<arguments.length;e++)t.append("v",arguments[e]);throw Error(`Minified Lexical error #${e}; visit https://lexical.dev/docs/error?${t} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));const LexicalTable_prod_he="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,LexicalTable_prod_de=LexicalTable_prod_he&&"documentMode"in document?document.documentMode:null,LexicalTable_prod_ge=LexicalTable_prod_he&&/^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);LexicalTable_prod_he&&"InputEvent"in window&&!LexicalTable_prod_de&&new window.InputEvent("input");class LexicalTable_prod_fe extends ks{static getType(){return"tablerow"}static clone(e){return new LexicalTable_prod_fe(e.__height,e.__key)}static importDOM(){return{tr:e=>({conversion:LexicalTable_prod_me,priority:0})}}static importJSON(e){return LexicalTable_prod_pe(e.height)}constructor(e,t){super(t),this.__height=e}exportJSON(){return{...super.exportJSON(),...this.getHeight()&&{height:this.getHeight()},type:"tablerow",version:1}}createDOM(t){const n=document.createElement("tr");return this.__height&&(n.style.height=`${this.__height}px`),LexicalUtils_prod_W(n,t.theme.tableRow),n}extractWithChild(e,t,n){return"html"===n}isShadowRoot(){return!0}setHeight(e){return this.getWritable().__height=e,this.__height}getHeight(){return this.getLatest().__height}updateDOM(e){return e.__height!==this.__height}canBeEmpty(){return!1}canIndent(){return!1}}function LexicalTable_prod_me(e){const t=e;let n;return LexicalTable_prod_ne.test(t.style.height)&&(n=parseFloat(t.style.height)),{node:LexicalTable_prod_pe(n)}}function LexicalTable_prod_pe(e){return gn(new LexicalTable_prod_fe(e))}function LexicalTable_prod_Ce(e){return e instanceof LexicalTable_prod_fe}function LexicalTable_prod_Se(e,t,n=!0){const o=LexicalTable_prod_At();for(let r=0;r<e;r++){const e=LexicalTable_prod_pe();for(let o=0;o<t;o++){let t=LexicalTable_prod_oe.NO_STATUS;"object"==typeof n?(0===r&&n.rows&&(t|=LexicalTable_prod_oe.ROW),0===o&&n.columns&&(t|=LexicalTable_prod_oe.COLUMN)):n&&(0===r&&(t|=LexicalTable_prod_oe.ROW),0===o&&(t|=LexicalTable_prod_oe.COLUMN));const l=LexicalTable_prod_se(t),s=i();s.append(g()),l.append(s),e.append(l)}o.append(e)}return o}function LexicalTable_prod_e(e){const n=t(e,(e=>LexicalTable_prod_ie(e)));return LexicalTable_prod_ie(n)?n:null}function LexicalTable_prod_we(e){const n=t(e,(e=>LexicalTable_prod_Ce(e)));if(LexicalTable_prod_Ce(n))return n;throw new Error("Expected table cell to be inside of table row.")}function LexicalTable_prod_be(e){const n=t(e,(e=>LexicalTable_prod_$t(e)));if(LexicalTable_prod_$t(n))return n;throw new Error("Expected table cell to be inside of table.")}function LexicalTable_prod_ye(e){const t=LexicalTable_prod_we(e);return LexicalTable_prod_be(t).getChildren().findIndex((e=>e.is(t)))}function LexicalTable_prod_Ne(e){return LexicalTable_prod_we(e).getChildren().findIndex((t=>t.is(e)))}function LexicalTable_prod_xe(e,t){const n=LexicalTable_prod_be(e),{x:o,y:r}=n.getCordsFromCellNode(e,t);return{above:n.getCellNodeFromCords(o,r-1,t),below:n.getCellNodeFromCords(o,r+1,t),left:n.getCellNodeFromCords(o-1,r,t),right:n.getCellNodeFromCords(o+1,r,t)}}function LexicalTable_prod_Te(e,t){const n=e.getChildren();if(t>=n.length||t<0)throw new Error("Expected table cell to be inside of table row.");return n[t].remove(),e}function LexicalTable_prod_ve(e,t,n=!0,o,r){const l=e.getChildren();if(t>=l.length||t<0)throw new Error("Table row target index out of range");const s=l[t];if(!LexicalTable_prod_Ce(s))throw new Error("Row before insertion index does not exist.");for(let e=0;e<o;e++){const e=s.getChildren(),t=e.length,o=LexicalTable_prod_pe();for(let n=0;n<t;n++){const t=e[n];LexicalTable_prod_ie(t)||LexicalTable_prod_ue(12);const{above:l,below:s}=LexicalTable_prod_xe(t,r);let c=LexicalTable_prod_oe.NO_STATUS;const a=l&&l.getWidth()||s&&s.getWidth()||void 0;(l&&l.hasHeaderState(LexicalTable_prod_oe.COLUMN)||s&&s.hasHeaderState(LexicalTable_prod_oe.COLUMN))&&(c|=LexicalTable_prod_oe.COLUMN);const u=LexicalTable_prod_se(c,1,a);u.append(i()),o.append(u)}n?s.insertAfter(o):s.insertBefore(o)}return e}const LexicalTable_prod_Re=(e,t)=>e===LexicalTable_prod_oe.BOTH||e===t?t:LexicalTable_prod_oe.NO_STATUS;function LexicalTable_prod_Oe(e=!0){const t=f();m(t)||LexicalTable_prod_ze(t)||LexicalTable_prod_ue(188);const n=t.focus.getNode(),[o,,r]=LexicalTable_prod_Be(n),[l,s]=LexicalTable_prod_He(r,o,o),c=l[0].length,{startRow:a}=s;let u=null;if(e){const e=a+o.__rowSpan-1,t=l[e],n=LexicalTable_prod_pe();for(let o=0;o<c;o++){const{cell:r,startRow:l}=t[o];if(l+r.__rowSpan-1<=e){const e=t[o].cell.__headerState,r=LexicalTable_prod_Re(e,LexicalTable_prod_oe.COLUMN);n.append(LexicalTable_prod_se(r).append(i()))}else r.setRowSpan(r.__rowSpan+1)}const s=r.getChildAtIndex(e);LexicalTable_prod_Ce(s)||LexicalTable_prod_ue(145),s.insertAfter(n),u=n}else{const e=l[a],t=LexicalTable_prod_pe();for(let n=0;n<c;n++){const{cell:o,startRow:r}=e[n];if(r===a){const o=e[n].cell.__headerState,r=LexicalTable_prod_Re(o,LexicalTable_prod_oe.COLUMN);t.append(LexicalTable_prod_se(r).append(i()))}else o.setRowSpan(o.__rowSpan+1)}const n=r.getChildAtIndex(a);LexicalTable_prod_Ce(n)||LexicalTable_prod_ue(145),n.insertBefore(t),u=t}return u}function LexicalTable_prod_Fe(e,t,n=!0,o,r){const l=e.getChildren(),s=[];for(let e=0;e<l.length;e++){const n=l[e];if(LexicalTable_prod_Ce(n))for(let e=0;e<o;e++){const e=n.getChildren();if(t>=e.length||t<0)throw new Error("Table column target index out of range");const o=e[t];LexicalTable_prod_ie(o)||LexicalTable_prod_ue(12);const{left:l,right:c}=LexicalTable_prod_xe(o,r);let a=LexicalTable_prod_oe.NO_STATUS;(l&&l.hasHeaderState(LexicalTable_prod_oe.ROW)||c&&c.hasHeaderState(LexicalTable_prod_oe.ROW))&&(a|=LexicalTable_prod_oe.ROW);const u=LexicalTable_prod_se(a);u.append(i()),s.push({newTableCell:u,targetCell:o})}}return s.forEach((({newTableCell:e,targetCell:t})=>{n?t.insertAfter(e):t.insertBefore(e)})),e}function LexicalTable_prod_ke(e=!0){const t=f();m(t)||LexicalTable_prod_ze(t)||LexicalTable_prod_ue(188);const n=t.anchor.getNode(),o=t.focus.getNode(),[r]=LexicalTable_prod_Be(n),[l,,s]=LexicalTable_prod_Be(o),[c,a,u]=LexicalTable_prod_He(s,l,r),h=c.length,d=e?Math.max(a.startColumn,u.startColumn):Math.min(a.startColumn,u.startColumn),g=e?d+l.__colSpan-1:d-1,p=s.getFirstChild();LexicalTable_prod_Ce(p)||LexicalTable_prod_ue(120);let C=null;function S(e=LexicalTable_prod_oe.NO_STATUS){const t=LexicalTable_prod_se(e).append(i());return null===C&&(C=t),t}let _=p;e:for(let e=0;e<h;e++){if(0!==e){const e=_.getNextSibling();LexicalTable_prod_Ce(e)||LexicalTable_prod_ue(121),_=e}const t=c[e],n=t[g<0?0:g].cell.__headerState,o=LexicalTable_prod_Re(n,LexicalTable_prod_oe.ROW);if(g<0){LexicalTable_prod_$e(_,S(o));continue}const{cell:r,startColumn:l,startRow:s}=t[g];if(l+r.__colSpan-1<=g){let n=r,l=s,i=g;for(;l!==e&&n.__rowSpan>1;){if(i-=r.__colSpan,!(i>=0)){_.append(S(o));continue e}{const{cell:e,startRow:o}=t[i];n=e,l=o}}n.insertAfter(S(o))}else r.setColSpan(r.__colSpan+1)}null!==C&&LexicalTable_prod_Ae(C);const w=s.getColWidths();if(w){const e=[...w],t=g<0?0:g,n=e[t];e.splice(t,0,n),s.setColWidths(e)}return C}function LexicalTable_prod_Ke(e,t){const n=e.getChildren();for(let e=0;e<n.length;e++){const o=n[e];if(LexicalTable_prod_Ce(o)){const e=o.getChildren();if(t>=e.length||t<0)throw new Error("Table column target index out of range");e[t].remove()}}return e}function LexicalTable_prod_Ee(){const e=f();m(e)||LexicalTable_prod_ze(e)||LexicalTable_prod_ue(188);const[t,n]=e.isBackward()?[e.focus.getNode(),e.anchor.getNode()]:[e.anchor.getNode(),e.focus.getNode()],[o,,r]=LexicalTable_prod_Be(t),[l]=LexicalTable_prod_Be(n),[s,i,c]=LexicalTable_prod_He(r,o,l),{startRow:a}=i,{startRow:u}=c,h=u+l.__rowSpan-1;if(s.length===h-a+1)return void r.remove();const d=s[0].length,g=s[h+1],p=r.getChildAtIndex(h+1);for(let e=h;e>=a;e--){for(let t=d-1;t>=0;t--){const{cell:n,startRow:o,startColumn:r}=s[e][t];if(r===t&&(e===a&&o<a&&n.setRowSpan(n.__rowSpan-(o-a)),o>=a&&o+n.__rowSpan-1>h))if(n.setRowSpan(n.__rowSpan-(h-o+1)),null===p&&LexicalTable_prod_ue(122),0===t)LexicalTable_prod_$e(p,n);else{const{cell:e}=g[t-1];e.insertAfter(n)}}const t=r.getChildAtIndex(e);LexicalTable_prod_Ce(t)||LexicalTable_prod_ue(206,String(e)),t.remove()}if(void 0!==g){const{cell:e}=g[0];LexicalTable_prod_Ae(e)}else{const e=s[a-1],{cell:t}=e[0];LexicalTable_prod_Ae(t)}}function LexicalTable_prod_Me(){const e=f();m(e)||LexicalTable_prod_ze(e)||LexicalTable_prod_ue(188);const t=e.anchor.getNode(),n=e.focus.getNode(),[o,,r]=LexicalTable_prod_Be(t),[l]=LexicalTable_prod_Be(n),[s,i,c]=LexicalTable_prod_He(r,o,l),{startColumn:a}=i,{startRow:u,startColumn:h}=c,d=Math.min(a,h),g=Math.max(a+o.__colSpan-1,h+l.__colSpan-1),p=g-d+1;if(s[0].length===g-d+1)return r.selectPrevious(),void r.remove();const C=s.length;for(let e=0;e<C;e++)for(let t=d;t<=g;t++){const{cell:n,startColumn:o}=s[e][t];if(o<d){if(t===d){const e=d-o;n.setColSpan(n.__colSpan-Math.min(p,n.__colSpan-e))}}else if(o+n.__colSpan-1>g){if(t===g){const e=g-o+1;n.setColSpan(n.__colSpan-e)}}else n.remove()}const S=s[u],_=a>h?S[a+o.__colSpan]:S[h+l.__colSpan];if(void 0!==_){const{cell:e}=_;LexicalTable_prod_Ae(e)}else{const e=h<a?S[h-1]:S[a-1],{cell:t}=e;LexicalTable_prod_Ae(t)}const w=r.getColWidths();if(w){const e=[...w];e.splice(d,p),r.setColWidths(e)}}function LexicalTable_prod_Ae(e){const t=e.getFirstDescendant();null==t?e.selectStart():t.getParentOrThrow().selectStart()}function LexicalTable_prod_$e(e,t){const n=e.getFirstChild();null!==n?n.insertBefore(t):e.append(t)}function LexicalTable_prod_We(){const e=f();m(e)||LexicalTable_prod_ze(e)||LexicalTable_prod_ue(188);const t=e.anchor.getNode(),[n,o,r]=LexicalTable_prod_Be(t),l=n.__colSpan,s=n.__rowSpan;if(1===l&&1===s)return;const[c,a]=LexicalTable_prod_He(r,n,n),{startColumn:u,startRow:h}=a,d=n.__headerState&LexicalTable_prod_oe.COLUMN,g=Array.from({length:l},((e,t)=>{let n=d;for(let e=0;0!==n&&e<c.length;e++)n&=c[e][t+u].cell.__headerState;return n})),p=n.__headerState&LexicalTable_prod_oe.ROW,C=Array.from({length:s},((e,t)=>{let n=p;for(let e=0;0!==n&&e<c[0].length;e++)n&=c[t+h][e].cell.__headerState;return n}));if(l>1){for(let e=1;e<l;e++)n.insertAfter(LexicalTable_prod_se(g[e]|C[0]).append(i()));n.setColSpan(1)}if(s>1){let e;for(let t=1;t<s;t++){const n=h+t,r=c[n];e=(e||o).getNextSibling(),LexicalTable_prod_Ce(e)||LexicalTable_prod_ue(125);let s=null;for(let e=0;e<u;e++){const t=r[e],o=t.cell;t.startRow===n&&(s=o),o.__colSpan>1&&(e+=o.__colSpan-1)}if(null===s)for(let n=l-1;n>=0;n--)LexicalTable_prod_$e(e,LexicalTable_prod_se(g[n]|C[t]).append(i()));else for(let e=l-1;e>=0;e--)s.insertAfter(LexicalTable_prod_se(g[e]|C[t]).append(i()))}n.setRowSpan(1)}}function LexicalTable_prod_He(e,t,n){const[o,r,l]=LexicalTable_prod_Pe(e,t,n);return null===r&&LexicalTable_prod_ue(207),null===l&&LexicalTable_prod_ue(208),[o,r,l]}function LexicalTable_prod_Pe(e,t,n){const o=[];let r=null,l=null;function s(e){let t=o[e];return void 0===t&&(o[e]=t=[]),t}const i=e.getChildren();for(let e=0;e<i.length;e++){const o=i[e];LexicalTable_prod_Ce(o)||LexicalTable_prod_ue(209);for(let c=o.getFirstChild(),a=0;null!=c;c=c.getNextSibling()){LexicalTable_prod_ie(c)||LexicalTable_prod_ue(147);const o=s(e);for(;void 0!==o[a];)a++;const u={cell:c,startColumn:a,startRow:e},{__rowSpan:h,__colSpan:d}=c;for(let t=0;t<h&&!(e+t>=i.length);t++){const n=s(e+t);for(let e=0;e<d;e++)n[a+e]=u}null!==t&&null===r&&t.is(c)&&(r=u),null!==n&&null===l&&n.is(c)&&(l=u)}}return[o,r,l]}function LexicalTable_prod_Be(e){let n;if(e instanceof LexicalTable_prod_re)n=e;else if("__type"in e){const o=t(e,LexicalTable_prod_ie);LexicalTable_prod_ie(o)||LexicalTable_prod_ue(148),n=o}else{const o=t(e.getNode(),LexicalTable_prod_ie);LexicalTable_prod_ie(o)||LexicalTable_prod_ue(148),n=o}const o=n.getParent();LexicalTable_prod_Ce(o)||LexicalTable_prod_ue(149);const r=o.getParent();return LexicalTable_prod_$t(r)||LexicalTable_prod_ue(210),[n,o,r]}function LexicalTable_prod_Le(e,t,n){let o=Math.min(t.startColumn,n.startColumn),r=Math.min(t.startRow,n.startRow),l=Math.max(t.startColumn+t.cell.__colSpan-1,n.startColumn+n.cell.__colSpan-1),s=Math.max(t.startRow+t.cell.__rowSpan-1,n.startRow+n.cell.__rowSpan-1),i=o,c=r,a=o,u=r;function h(e){const{cell:t,startColumn:n,startRow:i}=e;o=Math.min(o,n),r=Math.min(r,i),l=Math.max(l,n+t.__colSpan-1),s=Math.max(s,i+t.__rowSpan-1)}for(;o<i||r<c||l>a||s>u;){if(o<i){const t=u-c,n=i-1;for(let o=0;o<=t;o++)h(e[c+o][n]);i=n}if(r<c){const t=a-i,n=c-1;for(let o=0;o<=t;o++)h(e[n][i+o]);c=n}if(l>a){const t=u-c,n=a+1;for(let o=0;o<=t;o++)h(e[c+o][n]);a=n}if(s>u){const t=a-i,n=u+1;for(let o=0;o<=t;o++)h(e[n][i+o]);u=n}}return{maxColumn:l,maxRow:s,minColumn:o,minRow:r}}function LexicalTable_prod_De(e){const[t,,n]=LexicalTable_prod_Be(e),o=n.getChildren(),r=o.length,l=o[0].getChildren().length,s=new Array(r);for(let e=0;e<r;e++)s[e]=new Array(l);for(let e=0;e<r;e++){const n=o[e].getChildren();let r=0;for(let o=0;o<n.length;o++){for(;s[e][r];)r++;const l=n[o],i=l.__rowSpan||1,c=l.__colSpan||1;for(let t=0;t<i;t++)for(let n=0;n<c;n++)s[e+t][r+n]=l;if(t===l)return{colSpan:c,columnIndex:r,rowIndex:e,rowSpan:i};r+=c}}return null}function LexicalTable_prod_Ie(e){const[[n,o,r,l],[s,i,c,a]]=["anchor","focus"].map((n=>{const o=e[n].getNode(),r=t(o,LexicalTable_prod_ie);LexicalTable_prod_ie(r)||LexicalTable_prod_ue(238,n,o.getKey(),o.getType());const l=r.getParent();LexicalTable_prod_Ce(l)||LexicalTable_prod_ue(239,n);const s=l.getParent();return LexicalTable_prod_$t(s)||LexicalTable_prod_ue(240,n),[o,r,l,s]}));return l.is(a)||LexicalTable_prod_ue(241),{anchorCell:o,anchorNode:n,anchorRow:r,anchorTable:l,focusCell:i,focusNode:s,focusRow:c,focusTable:a}}class LexicalTable_prod_Ue{constructor(e,t,n){this.anchor=t,this.focus=n,t._selection=this,n._selection=this,this._cachedNodes=null,this.dirty=!1,this.tableKey=e}getStartEndPoints(){return[this.anchor,this.focus]}isValid(){return"root"!==this.tableKey&&"root"!==this.anchor.key&&"element"===this.anchor.type&&"root"!==this.focus.key&&"element"===this.focus.type}isBackward(){return this.focus.isBefore(this.anchor)}getCachedNodes(){return this._cachedNodes}setCachedNodes(e){this._cachedNodes=e}is(e){return LexicalTable_prod_ze(e)&&this.tableKey===e.tableKey&&this.anchor.is(e.anchor)&&this.focus.is(e.focus)}set(e,t,n){this.dirty=this.dirty||e!==this.tableKey||t!==this.anchor.key||n!==this.focus.key,this.tableKey=e,this.anchor.key=t,this.focus.key=n,this._cachedNodes=null}clone(){return new LexicalTable_prod_Ue(this.tableKey,p(this.anchor.key,this.anchor.offset,this.anchor.type),p(this.focus.key,this.focus.offset,this.focus.type))}isCollapsed(){return!1}extract(){return this.getNodes()}insertRawText(e){}insertText(){}hasFormat(e){let t=0;this.getNodes().filter(LexicalTable_prod_ie).forEach((e=>{const n=e.getFirstChild();C(n)&&(t|=n.getTextFormat())}));const n=w[e];return!!(t&n)}insertNodes(e){const t=this.focus.getNode();c(t)||LexicalTable_prod_ue(151);S(t.select(0,t.getChildrenSize())).insertNodes(e)}getShape(){const{anchorCell:e,focusCell:t}=LexicalTable_prod_Ie(this),n=LexicalTable_prod_De(e);null===n&&LexicalTable_prod_ue(153);const o=LexicalTable_prod_De(t);null===o&&LexicalTable_prod_ue(155);const r=Math.min(n.columnIndex,o.columnIndex),l=Math.max(n.columnIndex+n.colSpan-1,o.columnIndex+o.colSpan-1),s=Math.min(n.rowIndex,o.rowIndex),i=Math.max(n.rowIndex+n.rowSpan-1,o.rowIndex+o.rowSpan-1);return{fromX:Math.min(r,l),fromY:Math.min(s,i),toX:Math.max(r,l),toY:Math.max(s,i)}}getNodes(){if(!this.isValid())return[];const e=this._cachedNodes;if(null!==e)return e;const{anchorTable:t,anchorCell:n,focusCell:o}=LexicalTable_prod_Ie(this),r=o.getParents()[1];if(r!==t){if(t.isParentOf(o)){const e=r.getParent();null==e&&LexicalTable_prod_ue(159),this.set(this.tableKey,o.getKey(),e.getKey())}else{const e=t.getParent();null==e&&LexicalTable_prod_ue(158),this.set(this.tableKey,e.getKey(),o.getKey())}return this.getNodes()}const[l,s,i]=LexicalTable_prod_He(t,n,o),{minColumn:c,maxColumn:a,minRow:u,maxRow:h}=LexicalTable_prod_Le(l,s,i),d=new Map([[t.getKey(),t]]);let g=null;for(let e=u;e<=h;e++)for(let t=c;t<=a;t++){const{cell:n}=l[e][t],o=n.getParent();LexicalTable_prod_Ce(o)||LexicalTable_prod_ue(160),o!==g&&(d.set(o.getKey(),o),g=o),d.has(n.getKey())||LexicalTable_prod_qe(n,(e=>{d.set(e.getKey(),e)}))}const f=Array.from(d.values());return _()||(this._cachedNodes=f),f}getTextContent(){const e=this.getNodes().filter((e=>LexicalTable_prod_ie(e)));let t="";for(let n=0;n<e.length;n++){const o=e[n],r=o.__parent,l=(e[n+1]||{}).__parent;t+=o.getTextContent()+(l!==r?"\n":"\t")}return t}}function LexicalTable_prod_ze(e){return e instanceof LexicalTable_prod_Ue}function LexicalTable_prod_Ye(){const e=p("root",0,"element"),t=p("root",0,"element");return new LexicalTable_prod_Ue("root",e,t)}function LexicalTable_prod_qe(e,t){const n=[[e]];for(let e=n.at(-1);void 0!==e&&n.length>0;e=n.at(-1)){const o=e.pop();void 0===o?n.pop():!1!==t(o)&&c(o)&&n.push(o.getChildren())}}function LexicalTable_prod_Xe(e,t=y()){const n=b(e);LexicalTable_prod_$t(n)||LexicalTable_prod_ue(231,e);const o=LexicalTable_prod_Ve(n,t.getElementByKey(e));return null===o&&LexicalTable_prod_ue(232,e),{tableElement:o,tableNode:n}}class LexicalTable_prod_Je{constructor(e,t){this.isHighlightingCells=!1,this.anchorX=-1,this.anchorY=-1,this.focusX=-1,this.focusY=-1,this.listenersToRemove=new Set,this.tableNodeKey=t,this.editor=e,this.table={columns:0,domRows:[],rows:0},this.tableSelection=null,this.anchorCellNodeKey=null,this.focusCellNodeKey=null,this.anchorCell=null,this.focusCell=null,this.hasHijackedSelectionStyles=!1,this.isSelecting=!1,this.shouldCheckSelection=!1,this.abortController=new AbortController,this.listenerOptions={signal:this.abortController.signal},this.nextFocus=null,this.trackTable()}getTable(){return this.table}removeListeners(){this.abortController.abort("removeListeners"),Array.from(this.listenersToRemove).forEach((e=>e())),this.listenersToRemove.clear()}$lookup(){return LexicalTable_prod_Xe(this.tableNodeKey,this.editor)}trackTable(){const e=new MutationObserver((e=>{this.editor.getEditorState().read((()=>{let t=!1;for(let n=0;n<e.length;n++){const o=e[n].target.nodeName;if("TABLE"===o||"TBODY"===o||"THEAD"===o||"TR"===o){t=!0;break}}if(!t)return;const{tableNode:n,tableElement:o}=this.$lookup();this.table=LexicalTable_prod_lt(n,o)}),{editor:this.editor})}));this.editor.getEditorState().read((()=>{const{tableNode:t,tableElement:n}=this.$lookup();this.table=LexicalTable_prod_lt(t,n),e.observe(n,{attributes:!0,childList:!0,subtree:!0})}),{editor:this.editor})}$clearHighlight(){const e=this.editor;this.isHighlightingCells=!1,this.anchorX=-1,this.anchorY=-1,this.focusX=-1,this.focusY=-1,this.tableSelection=null,this.anchorCellNodeKey=null,this.focusCellNodeKey=null,this.anchorCell=null,this.focusCell=null,this.hasHijackedSelectionStyles=!1,this.$enableHighlightStyle();const{tableNode:t,tableElement:n}=this.$lookup();LexicalTable_prod_st(e,LexicalTable_prod_lt(t,n),null),null!==f()&&(N(null),e.dispatchCommand(x,void 0))}$enableHighlightStyle(){const e=this.editor,{tableElement:t}=this.$lookup();n(t,e._config.theme.tableSelection),t.classList.remove("disable-selection"),this.hasHijackedSelectionStyles=!1}$disableHighlightStyle(){const{tableElement:t}=this.$lookup();e(t,this.editor._config.theme.tableSelection),this.hasHijackedSelectionStyles=!0}$updateTableTableSelection(e){if(null!==e){e.tableKey!==this.tableNodeKey&&LexicalTable_prod_ue(233,e.tableKey,this.tableNodeKey);const t=this.editor;this.tableSelection=e,this.isHighlightingCells=!0,this.$disableHighlightStyle(),this.updateDOMSelection(),LexicalTable_prod_st(t,this.table,this.tableSelection)}else this.$clearHighlight()}setShouldCheckSelection(){this.shouldCheckSelection=!0}getAndClearShouldCheckSelection(){return!!this.shouldCheckSelection&&(this.shouldCheckSelection=!1,!0)}setNextFocus(e){this.nextFocus=e}getAndClearNextFocus(){const{nextFocus:e}=this;return null!==e&&(this.nextFocus=null),e}updateDOMSelection(){if(null!==this.anchorCell&&null!==this.focusCell){const e=T(this.editor._window);e&&e.rangeCount>0&&e.removeAllRanges()}}$setFocusCellForSelection(e,t=!1){const n=this.editor,{tableNode:o}=this.$lookup(),r=e.x,l=e.y;if(this.focusCell=e,this.isHighlightingCells||this.anchorX===r&&this.anchorY===l&&!t){if(r===this.focusX&&l===this.focusY)return!1}else this.isHighlightingCells=!0,this.$disableHighlightStyle();if(this.focusX=r,this.focusY=l,this.isHighlightingCells){const t=LexicalTable_prod_Tt(o,e.elem);if(null!=this.tableSelection&&null!=this.anchorCellNodeKey&&null!==t)return this.focusCellNodeKey=t.getKey(),this.tableSelection=function(e,t,n){e.getKey(),t.getKey(),n.getKey();const o=f(),r=LexicalTable_prod_ze(o)?o.clone():LexicalTable_prod_Ye();return r.set(e.getKey(),t.getKey(),n.getKey()),r}(o,this.$getAnchorTableCellOrThrow(),t),N(this.tableSelection),n.dispatchCommand(x,void 0),LexicalTable_prod_st(n,this.table,this.tableSelection),!0}return!1}$getAnchorTableCell(){return this.anchorCellNodeKey?b(this.anchorCellNodeKey):null}$getAnchorTableCellOrThrow(){const e=this.$getAnchorTableCell();return null===e&&LexicalTable_prod_ue(234),e}$getFocusTableCell(){return this.focusCellNodeKey?b(this.focusCellNodeKey):null}$getFocusTableCellOrThrow(){const e=this.$getFocusTableCell();return null===e&&LexicalTable_prod_ue(235),e}$setAnchorCellForSelection(e){this.isHighlightingCells=!1,this.anchorCell=e,this.anchorX=e.x,this.anchorY=e.y;const{tableNode:t}=this.$lookup(),n=LexicalTable_prod_Tt(t,e.elem);if(null!==n){const e=n.getKey();this.tableSelection=null!=this.tableSelection?this.tableSelection.clone():LexicalTable_prod_Ye(),this.anchorCellNodeKey=e}}$formatCells(e){const t=f();LexicalTable_prod_ze(t)||LexicalTable_prod_ue(236);const n=v(),o=n.anchor,r=n.focus,l=t.getNodes().filter(LexicalTable_prod_ie);l.length>0||LexicalTable_prod_ue(237);const s=l[0].getFirstChild(),i=C(s)?s.getFormatFlags(e,null):null;l.forEach((t=>{o.set(t.getKey(),0,"element"),r.set(t.getKey(),t.getChildrenSize(),"element"),n.formatText(e,i)})),N(t),this.editor.dispatchCommand(x,void 0)}$clearText(){const{editor:e}=this,t=b(this.tableNodeKey);if(!LexicalTable_prod_$t(t))throw new Error("Expected TableNode.");const n=f();LexicalTable_prod_ze(n)||LexicalTable_prod_ue(11);const o=n.getNodes().filter(LexicalTable_prod_ie);if(o.length!==this.table.columns*this.table.rows)o.forEach((e=>{if(c(e)){const t=i(),n=g();t.append(n),e.append(t),e.getChildren().forEach((e=>{e!==t&&e.remove()}))}})),LexicalTable_prod_st(e,this.table,null),N(null),e.dispatchCommand(x,void 0);else{t.selectPrevious(),t.remove();R().selectStart()}}}const LexicalTable_prod_je="__lexicalTableSelection";function LexicalTable_prod_Ve(e,t){if(!t)return t;const n="TABLE"===t.nodeName?t:e.getDOMSlot(t).element;return"TABLE"!==n.nodeName&&LexicalTable_prod_ue(245,t.nodeName),n}function LexicalTable_prod_Ge(e){return e._window}function LexicalTable_prod_Qe(e,t){for(let n=t,o=null;null!==n;n=n.getParent()){if(e.is(n))return o;LexicalTable_prod_ie(n)&&(o=n)}return null}const LexicalTable_prod_Ze=[[Lexical_prod_S,"down"],[Lexical_prod_v,"up"],[Lexical_prod_m,"backward"],[Lexical_prod_p,"forward"]],LexicalTable_prod_et=[Lexical_prod_u,Lexical_prod_f,Lexical_prod_i],LexicalTable_prod_tt=[Lexical_prod_k,Lexical_prod_w];function LexicalTable_prod_nt(e,n,r,l){const s=r.getRootElement(),a=LexicalTable_prod_Ge(r);null!==s&&null!==a||LexicalTable_prod_ue(246);const h=new LexicalTable_prod_Je(r,e.getKey()),d=LexicalTable_prod_Ve(e,n);!function(e,t){null!==LexicalTable_prod_ot(e)&&LexicalTable_prod_ue(205);e[LexicalTable_prod_je]=t}(d,h),h.listenersToRemove.add((()=>function(e,t){LexicalTable_prod_ot(e)===t&&delete e[LexicalTable_prod_je]}(d,h)));d.addEventListener("mousedown",(t=>{if(0!==t.button)return;if(!a)return;const n=LexicalTable_prod_rt(t.target);null!==n&&r.update((()=>{const o=P();if(LexicalTable_prod_ge&&t.shiftKey&&LexicalTable_prod_ft(o,e)&&(m(o)||LexicalTable_prod_ze(o))){const r=o.anchor.getNode(),l=LexicalTable_prod_Qe(e,o.anchor.getNode());if(l)h.$setAnchorCellForSelection(LexicalTable_prod_xt(h,l)),h.$setFocusCellForSelection(n),LexicalTable_prod_bt(t);else{(e.isBefore(r)?e.selectStart():e.selectEnd()).anchor.set(o.anchor.key,o.anchor.offset,o.anchor.type)}}else h.$setAnchorCellForSelection(n)})),(()=>{if(h.isSelecting)return;const e=()=>{h.isSelecting=!1,a.removeEventListener("mouseup",e),a.removeEventListener("mousemove",t)},t=n=>{if(1&~n.buttons&&h.isSelecting)return h.isSelecting=!1,a.removeEventListener("mouseup",e),void a.removeEventListener("mousemove",t);const o=!d.contains(n.target);let l=null;if(o){for(const e of document.elementsFromPoint(n.clientX,n.clientY))if(l=d.contains(e)?LexicalTable_prod_rt(e):null,l)break}else l=LexicalTable_prod_rt(n.target);!l||null!==h.focusCell&&l.elem===h.focusCell.elem||(h.setNextFocus({focusCell:l,override:o}),r.dispatchCommand(x,void 0))};h.isSelecting=!0,a.addEventListener("mouseup",e,h.listenerOptions),a.addEventListener("mousemove",t,h.listenerOptions)})()}),h.listenerOptions);a.addEventListener("mousedown",(e=>{0===e.button&&r.update((()=>{const t=f(),n=e.target;LexicalTable_prod_ze(t)&&t.tableKey===h.tableNodeKey&&s.contains(n)&&h.$clearHighlight()}))}),h.listenerOptions);for(const[t,n]of LexicalTable_prod_Ze)h.listenersToRemove.add(r.registerCommand(t,(t=>LexicalTable_prod_wt(r,t,n,e,h)),O));h.listenersToRemove.add(r.registerCommand(F,(t=>{const n=f();if(LexicalTable_prod_ze(n)){const o=LexicalTable_prod_Qe(e,n.focus.getNode());if(null!==o)return LexicalTable_prod_bt(t),o.selectEnd(),!0}return!1}),O));const p=n=>()=>{const o=f();if(!LexicalTable_prod_ft(o,e))return!1;if(LexicalTable_prod_ze(o))return h.$clearText(),!0;if(m(o)){if(!LexicalTable_prod_ie(LexicalTable_prod_Qe(e,o.anchor.getNode())))return!1;const r=o.anchor.getNode(),l=o.focus.getNode(),s=e.isParentOf(r),i=e.isParentOf(l);if(s&&!i||i&&!s)return h.$clearText(),!0;const a=t(o.anchor.getNode(),(e=>c(e))),u=a&&t(a,(e=>c(e)&&LexicalTable_prod_ie(e.getParent())));if(!c(u)||!c(a))return!1;if(n===j&&null===u.getPreviousSibling())return!0}return!1};for(const e of LexicalTable_prod_et)h.listenersToRemove.add(r.registerCommand(e,p(e),k));const C=t=>{const n=f();if(!LexicalTable_prod_ze(n)&&!m(n))return!1;const o=e.isParentOf(n.anchor.getNode());if(o!==e.isParentOf(n.focus.getNode())){const t=o?"anchor":"focus",r=o?"focus":"anchor",{key:l,offset:s,type:i}=n[r];return e[n[t].isBefore(n[r])?"selectPrevious":"selectNext"]()[r].set(l,s,i),!1}return!!LexicalTable_prod_ze(n)&&(t&&(t.preventDefault(),t.stopPropagation()),h.$clearText(),!0)};for(const e of LexicalTable_prod_tt)h.listenersToRemove.add(r.registerCommand(e,C,k));return h.listenersToRemove.add(r.registerCommand(K,(e=>{const t=f();if(t){if(!LexicalTable_prod_ze(t)&&!m(t))return!1;ee(r,o(e,ClipboardEvent)?e:null,te(t));const n=C(e);return m(t)?(t.removeText(),!0):n}return!1}),k)),h.listenersToRemove.add(r.registerCommand(E,(n=>{const o=f();if(!LexicalTable_prod_ft(o,e))return!1;if(LexicalTable_prod_ze(o))return h.$formatCells(n),!0;if(m(o)){const e=t(o.anchor.getNode(),(e=>LexicalTable_prod_ie(e)));if(!LexicalTable_prod_ie(e))return!1}return!1}),k)),h.listenersToRemove.add(r.registerCommand(M,(t=>{const n=f();if(!LexicalTable_prod_ze(n)||!LexicalTable_prod_ft(n,e))return!1;const o=n.anchor.getNode(),r=n.focus.getNode();if(!LexicalTable_prod_ie(o)||!LexicalTable_prod_ie(r))return!1;const[l,s,i]=LexicalTable_prod_He(e,o,r),a=Math.max(s.startRow+s.cell.__rowSpan-1,i.startRow+i.cell.__rowSpan-1),u=Math.max(s.startColumn+s.cell.__colSpan-1,i.startColumn+i.cell.__colSpan-1),h=Math.min(s.startRow,i.startRow),d=Math.min(s.startColumn,i.startColumn),g=new Set;for(let e=h;e<=a;e++)for(let n=d;n<=u;n++){const o=l[e][n].cell;if(g.has(o))continue;g.add(o),o.setFormat(t);const r=o.getChildren();for(let e=0;e<r.length;e++){const n=r[e];c(n)&&!n.isInline()&&n.setFormat(t)}}return!0}),k)),h.listenersToRemove.add(r.registerCommand(A,(n=>{const o=f();if(!LexicalTable_prod_ft(o,e))return!1;if(LexicalTable_prod_ze(o))return h.$clearHighlight(),!1;if(m(o)){const l=t(o.anchor.getNode(),(e=>LexicalTable_prod_ie(e)));if(!LexicalTable_prod_ie(l))return!1;if("string"==typeof n){const t=LexicalTable_prod_Nt(r,o,e);if(t)return LexicalTable_prod_yt(t,e,[g(n)]),!0}}return!1}),k)),l&&h.listenersToRemove.add(r.registerCommand($,(n=>{const o=f();if(!m(o)||!o.isCollapsed()||!LexicalTable_prod_ft(o,e))return!1;const r=LexicalTable_prod_St(o.anchor.getNode());return!(null===r||!e.is(LexicalTable_prod_t(r)))&&(LexicalTable_prod_bt(n),function(e,n){const o="next"===n?"getNextSibling":"getPreviousSibling",r="next"===n?"getFirstChild":"getLastChild",l=e[o]();if(c(l))return l.selectEnd();const s=t(e,LexicalTable_prod_Ce);null===s&&LexicalTable_prod_ue(247);for(let e=s[o]();LexicalTable_prod_Ce(e);e=e[o]()){const t=e[r]();if(c(t))return t.selectEnd()}const i=t(s,LexicalTable_prod_$t);null===i&&LexicalTable_prod_ue(248);"next"===n?i.selectNext():i.selectPrevious()}(r,n.shiftKey?"previous":"next"),!0)}),k)),h.listenersToRemove.add(r.registerCommand(W,(t=>e.isSelected()),O)),h.listenersToRemove.add(r.registerCommand(H,(e=>{const{nodes:n,selection:o}=e,r=o.getStartEndPoints(),l=LexicalTable_prod_ze(o),s=m(o)&&null!==t(o.anchor.getNode(),(e=>LexicalTable_prod_ie(e)))&&null!==t(o.focus.getNode(),(e=>LexicalTable_prod_ie(e)))||l;if(1!==n.length||!LexicalTable_prod_$t(n[0])||!s||null===r)return!1;const[c]=r,a=n[0],h=a.getChildren(),d=a.getFirstChildOrThrow().getChildrenSize(),g=a.getChildrenSize(),f=t(c.getNode(),(e=>LexicalTable_prod_ie(e))),p=f&&t(f,(e=>LexicalTable_prod_Ce(e))),C=p&&t(p,(e=>LexicalTable_prod_$t(e)));if(!LexicalTable_prod_ie(f)||!LexicalTable_prod_Ce(p)||!LexicalTable_prod_$t(C))return!1;const S=p.getIndexWithinParent(),_=Math.min(C.getChildrenSize()-1,S+g-1),w=f.getIndexWithinParent(),b=Math.min(p.getChildrenSize()-1,w+d-1),y=Math.min(w,b),N=Math.min(S,_),x=Math.max(w,b),T=Math.max(S,_),v=C.getChildren();let R=0;for(let e=N;e<=T;e++){const t=v[e];if(!LexicalTable_prod_Ce(t))return!1;const n=h[R];if(!LexicalTable_prod_Ce(n))return!1;const o=t.getChildren(),r=n.getChildren();let l=0;for(let e=y;e<=x;e++){const t=o[e];if(!LexicalTable_prod_ie(t))return!1;const n=r[l];if(!LexicalTable_prod_ie(n))return!1;const s=t.getChildren();n.getChildren().forEach((e=>{if(u(e)){i().append(e),t.append(e)}else t.append(e)})),s.forEach((e=>e.remove())),l++}R++}return!0}),k)),h.listenersToRemove.add(r.registerCommand(x,(()=>{const n=f(),o=P(),l=h.getAndClearNextFocus();if(null!==l){const{focusCell:t}=l;if(LexicalTable_prod_ze(n)&&n.tableKey===h.tableNodeKey)return(t.x!==h.focusX||t.y!==h.focusY)&&(h.$setFocusCellForSelection(t),!0);if(t!==h.anchorCell&&LexicalTable_prod_ft(n,e))return h.$setFocusCellForSelection(t),!0}if(h.getAndClearShouldCheckSelection()&&m(o)&&m(n)&&n.isCollapsed()){const o=n.anchor.getNode(),r=e.getFirstChild(),l=LexicalTable_prod_St(o);if(null!==l&&LexicalTable_prod_Ce(r)){const n=r.getFirstChild();if(LexicalTable_prod_ie(n)&&e.is(t(l,(t=>t.is(e)||t.is(n)))))return n.selectStart(),!0}}if(m(n)){const{anchor:t,focus:o}=n,l=t.getNode(),s=o.getNode(),i=LexicalTable_prod_St(l),c=LexicalTable_prod_St(s),a=!(!i||!e.is(LexicalTable_prod_t(i))),u=!(!c||!e.is(LexicalTable_prod_t(c))),d=a!==u,g=a&&u,f=n.isBackward();if(d){const t=n.clone();if(u){const[n]=LexicalTable_prod_He(e,c,c),o=n[0][0].cell,r=n[n.length-1].at(-1).cell;t.focus.set(f?o.getKey():r.getKey(),f?o.getChildrenSize():r.getChildrenSize(),"element")}else if(a){const[n]=LexicalTable_prod_He(e,i,i),o=n[0][0].cell,r=n[n.length-1].at(-1).cell;t.anchor.set(f?r.getKey():o.getKey(),f?r.getChildrenSize():0,"element")}N(t),LexicalTable_prod_ct(r,h)}else g&&(i.is(c)||(h.$setAnchorCellForSelection(LexicalTable_prod_xt(h,i)),h.$setFocusCellForSelection(LexicalTable_prod_xt(h,c),!0)))}else if(n&&LexicalTable_prod_ze(n)&&n.is(o)&&n.tableKey===e.getKey()){const t=T(a);if(t&&t.anchorNode&&t.focusNode){const o=B(t.focusNode),l=o&&!e.isParentOf(o),s=B(t.anchorNode),i=s&&e.isParentOf(s);if(l&&i&&t.rangeCount>0){const o=L(t,r);o&&(o.anchor.set(e.getKey(),n.isBackward()?e.getChildrenSize():0,"element"),t.removeAllRanges(),N(o))}}}return n&&!n.is(o)&&(LexicalTable_prod_ze(n)||LexicalTable_prod_ze(o))&&h.tableSelection&&!h.tableSelection.is(o)?(LexicalTable_prod_ze(n)&&n.tableKey===h.tableNodeKey?h.$updateTableTableSelection(n):!LexicalTable_prod_ze(n)&&LexicalTable_prod_ze(o)&&o.tableKey===h.tableNodeKey&&h.$updateTableTableSelection(null),!1):(h.hasHijackedSelectionStyles&&!e.isSelected()?function(e,t){t.$enableHighlightStyle(),LexicalTable_prod_it(t.table,(t=>{const n=t.elem;t.highlighted=!1,LexicalTable_prod_Ct(e,t),n.getAttribute("style")||n.removeAttribute("style")}))}(r,h):!h.hasHijackedSelectionStyles&&e.isSelected()&&LexicalTable_prod_ct(r,h),!1)}),k)),h.listenersToRemove.add(r.registerCommand(D,(()=>{const t=f();if(!m(t)||!t.isCollapsed()||!LexicalTable_prod_ft(t,e))return!1;const n=LexicalTable_prod_Nt(r,t,e);return!!n&&(LexicalTable_prod_yt(n,e),!0)}),k)),h}function LexicalTable_prod_ot(e){return e[LexicalTable_prod_je]||null}function LexicalTable_prod_rt(e){let t=e;for(;null!=t;){const e=t.nodeName;if("TD"===e||"TH"===e){const e=t._cell;return void 0===e?null:e}t=t.parentNode}return null}function LexicalTable_prod_lt(e,t){const n=[],o={columns:0,domRows:n,rows:0};let r=LexicalTable_prod_Ve(e,t).querySelector("tr"),l=0,s=0;for(n.length=0;null!=r;){const e=r.nodeName;if("TD"===e||"TH"===e){const e={elem:r,hasBackgroundColor:""!==r.style.backgroundColor,highlighted:!1,x:l,y:s};r._cell=e;let t=n[s];void 0===t&&(t=n[s]=[]),t[l]=e}else{const e=r.firstChild;if(null!=e){r=e;continue}}const t=r.nextSibling;if(null!=t){l++,r=t;continue}const o=r.parentNode;if(null!=o){const e=o.nextSibling;if(null==e)break;s++,l=0,r=e}}return o.columns=l+1,o.rows=s+1,o}function LexicalTable_prod_st(e,t,n){const o=new Set(n?n.getNodes():[]);LexicalTable_prod_it(t,((t,n)=>{const r=t.elem;o.has(n)?(t.highlighted=!0,LexicalTable_prod_pt(e,t)):(t.highlighted=!1,LexicalTable_prod_Ct(e,t),r.getAttribute("style")||r.removeAttribute("style"))}))}function LexicalTable_prod_it(e,t){const{domRows:n}=e;for(let e=0;e<n.length;e++){const o=n[e];if(o)for(let n=0;n<o.length;n++){const r=o[n];if(!r)continue;const l=B(r.elem);null!==l&&t(r,l,{x:n,y:e})}}}function LexicalTable_prod_ct(e,t){t.$disableHighlightStyle(),LexicalTable_prod_it(t.table,(t=>{t.highlighted=!0,LexicalTable_prod_pt(e,t)}))}const LexicalTable_prod_at=(e,t,n,o,r)=>{const l="forward"===r;switch(r){case"backward":case"forward":return n!==(l?e.table.columns-1:0)?LexicalTable_prod_mt(t.getCellNodeFromCordsOrThrow(n+(l?1:-1),o,e.table),l):o!==(l?e.table.rows-1:0)?LexicalTable_prod_mt(t.getCellNodeFromCordsOrThrow(l?0:e.table.columns-1,o+(l?1:-1),e.table),l):l?t.selectNext():t.selectPrevious(),!0;case"up":return 0!==o?LexicalTable_prod_mt(t.getCellNodeFromCordsOrThrow(n,o-1,e.table),!1):t.selectPrevious(),!0;case"down":return o!==e.table.rows-1?LexicalTable_prod_mt(t.getCellNodeFromCordsOrThrow(n,o+1,e.table),!0):t.selectNext(),!0;default:return!1}};function LexicalTable_prod_ut(e,t){let n,o;if(t.startColumn===e.minColumn)n="minColumn";else{if(t.startColumn+t.cell.__colSpan-1!==e.maxColumn)return null;n="maxColumn"}if(t.startRow===e.minRow)o="minRow";else{if(t.startRow+t.cell.__rowSpan-1!==e.maxRow)return null;o="maxRow"}return[n,o]}function LexicalTable_prod_ht([e,t]){return["minColumn"===e?"maxColumn":"minColumn","minRow"===t?"maxRow":"minRow"]}function LexicalTable_prod_dt(e,t,[n,o]){const r=t[o],l=e[r];void 0===l&&LexicalTable_prod_ue(250,o,String(r));const s=t[n],i=l[s];return void 0===i&&LexicalTable_prod_ue(250,n,String(s)),i}function LexicalTable_prod_gt(e,t,n,o,r){const l=LexicalTable_prod_Le(t,n,o),s=function(e,t){const{minColumn:n,maxColumn:o,minRow:r,maxRow:l}=t;let s=1,i=1,c=1,a=1;const u=e[r],h=e[l];for(let e=n;e<=o;e++)s=Math.max(s,u[e].cell.__rowSpan),a=Math.max(a,h[e].cell.__rowSpan);for(let t=r;t<=l;t++)i=Math.max(i,e[t][n].cell.__colSpan),c=Math.max(c,e[t][o].cell.__colSpan);return{bottomSpan:a,leftSpan:i,rightSpan:c,topSpan:s}}(t,l),{topSpan:i,leftSpan:c,bottomSpan:a,rightSpan:u}=s,h=function(e,t){const n=LexicalTable_prod_ut(e,t);return null===n&&LexicalTable_prod_ue(249,t.cell.getKey()),n}(l,n),[d,g]=LexicalTable_prod_ht(h);let f=l[d],m=l[g];"forward"===r?f+="maxColumn"===d?1:c:"backward"===r?f-="minColumn"===d?1:u:"down"===r?m+="maxRow"===g?1:i:"up"===r&&(m-="minRow"===g?1:a);const p=t[m];if(void 0===p)return!1;const C=p[f];if(void 0===C)return!1;const[S,_]=function(e,t,n){const o=LexicalTable_prod_Le(e,t,n),r=LexicalTable_prod_ut(o,t);if(r)return[LexicalTable_prod_dt(e,o,r),LexicalTable_prod_dt(e,o,LexicalTable_prod_ht(r))];const l=LexicalTable_prod_ut(o,n);if(l)return[LexicalTable_prod_dt(e,o,LexicalTable_prod_ht(l)),LexicalTable_prod_dt(e,o,l)];const s=["minColumn","minRow"];return[LexicalTable_prod_dt(e,o,s),LexicalTable_prod_dt(e,o,LexicalTable_prod_ht(s))]}(t,n,C),w=LexicalTable_prod_xt(e,S.cell),b=LexicalTable_prod_xt(e,_.cell);return e.$setAnchorCellForSelection(w),e.$setFocusCellForSelection(b,!0),!0}function LexicalTable_prod_ft(e,t){if(m(e)||LexicalTable_prod_ze(e)){const n=t.isParentOf(e.anchor.getNode()),o=t.isParentOf(e.focus.getNode());return n&&o}return!1}function LexicalTable_prod_mt(e,t){t?e.selectStart():e.selectEnd()}function LexicalTable_prod_pt(t,n){const o=n.elem,r=t._config.theme;LexicalTable_prod_ie(B(o))||LexicalTable_prod_ue(131),e(o,r.tableCellSelected)}function LexicalTable_prod_Ct(e,t){const o=t.elem;LexicalTable_prod_ie(B(o))||LexicalTable_prod_ue(131);const r=e._config.theme;n(o,r.tableCellSelected)}function LexicalTable_prod_St(e){const n=t(e,LexicalTable_prod_ie);return LexicalTable_prod_ie(n)?n:null}function LexicalTable_prod_t(e){const n=t(e,LexicalTable_prod_$t);return LexicalTable_prod_$t(n)?n:null}function LexicalTable_prod_wt(e,n,o,r,l){if(("up"===o||"down"===o)&&function(e){const t=e.getRootElement();if(!t)return!1;return t.hasAttribute("aria-controls")&&"typeahead-menu"===t.getAttribute("aria-controls")}(e))return!1;const s=f();if(!LexicalTable_prod_ft(s,r)){if(m(s)){if("backward"===o){if(s.focus.offset>0)return!1;const e=function(e){for(let t=e,n=e;null!==n;t=n,n=n.getParent())if(c(n)){if(n!==t&&n.getFirstChild()!==t)return null;if(!n.isInline())return n}return null}(s.focus.getNode());if(!e)return!1;const t=e.getPreviousSibling();return!!LexicalTable_prod_$t(t)&&(LexicalTable_prod_bt(n),n.shiftKey?s.focus.set(t.getParentOrThrow().getKey(),t.getIndexWithinParent(),"element"):t.selectEnd(),!0)}if(n.shiftKey&&("up"===o||"down"===o)){const e=s.focus.getNode();if(!s.isCollapsed()&&("up"===o&&!s.isBackward()||"down"===o&&s.isBackward())){let l=t(e,(e=>LexicalTable_prod_$t(e)));if(LexicalTable_prod_ie(l)&&(l=t(l,LexicalTable_prod_$t)),l!==r)return!1;if(!l)return!1;const i="down"===o?l.getNextSibling():l.getPreviousSibling();if(!i)return!1;let a=0;"up"===o&&c(i)&&(a=i.getChildrenSize());let h=i;if("up"===o&&c(i)){const e=i.getLastChild();h=e||i,a=u(h)?h.getTextContentSize():0}const d=s.clone();return d.focus.set(h.getKey(),a,u(h)?"text":"element"),N(d),LexicalTable_prod_bt(n),!0}if(I(e)){const e="up"===o?s.getNodes()[s.getNodes().length-1]:s.getNodes()[0];if(e){if(null!==LexicalTable_prod_Qe(r,e)){const e=r.getFirstDescendant(),t=r.getLastDescendant();if(!e||!t)return!1;const[n]=LexicalTable_prod_Be(e),[o]=LexicalTable_prod_Be(t),s=r.getCordsFromCellNode(n,l.table),i=r.getCordsFromCellNode(o,l.table),c=r.getDOMCellFromCordsOrThrow(s.x,s.y,l.table),a=r.getDOMCellFromCordsOrThrow(i.x,i.y,l.table);return l.$setAnchorCellForSelection(c),l.$setFocusCellForSelection(a,!0),!0}}return!1}{let r=t(e,(e=>c(e)&&!e.isInline()));if(LexicalTable_prod_ie(r)&&(r=t(r,LexicalTable_prod_$t)),!r)return!1;const i="down"===o?r.getNextSibling():r.getPreviousSibling();if(LexicalTable_prod_$t(i)&&l.tableNodeKey===i.getKey()){const e=i.getFirstDescendant(),t=i.getLastDescendant();if(!e||!t)return!1;const[r]=LexicalTable_prod_Be(e),[l]=LexicalTable_prod_Be(t),c=s.clone();return c.focus.set(("up"===o?r:l).getKey(),"up"===o?0:l.getChildrenSize(),"element"),LexicalTable_prod_bt(n),N(c),!0}}}}return"down"===o&&LexicalTable_prod_Ft(e)&&l.setShouldCheckSelection(),!1}if(m(s)&&s.isCollapsed()){const{anchor:i,focus:a}=s,u=t(i.getNode(),LexicalTable_prod_ie),h=t(a.getNode(),LexicalTable_prod_ie);if(!LexicalTable_prod_ie(u)||!u.is(h))return!1;const d=LexicalTable_prod_t(u);if(d!==r&&null!=d){const t=LexicalTable_prod_Ve(d,e.getElementByKey(d.getKey()));if(null!=t)return l.table=LexicalTable_prod_lt(d,t),LexicalTable_prod_wt(e,n,o,d,l)}if("backward"===o||"forward"===o){const e=i.type,l=i.offset,a=i.getNode();if(!a)return!1;const h=s.getNodes();return(1!==h.length||!U(h[0]))&&(!!function(e,n,o,r){return function(e,t,n){return"element"===e&&("backward"===n?null===t.getPreviousSibling():null===t.getNextSibling())}(e,o,r)||function(e,n,o,r){const l=t(o,(e=>c(e)&&!e.isInline()));if(!l)return!1;const s="backward"===r?0===n:n===o.getTextContentSize();return"text"===e&&s&&("backward"===r?null===l.getPreviousSibling():null===l.getNextSibling())}(e,n,o,r)}(e,l,a,o)&&function(e,n,o,r,l){const[s,i]=LexicalTable_prod_He(r,o,o);if(!function(e,t,n){const o=e[0][0],r=e[e.length-1][e[0].length-1],{startColumn:l,startRow:s}=t;return"backward"===n?l===o.startColumn&&s===o.startRow:l===r.startColumn&&s===r.startRow}(s,i,l))return!1;const a=function(e,n,o){const r=t(e,(e=>c(e)&&!e.isInline()));if(!r)return;const l="backward"===n?r.getPreviousSibling():r.getNextSibling();return l&&LexicalTable_prod_$t(l)?l:"backward"===n?o.getPreviousSibling():o.getNextSibling()}(n,l,r);if(!a||LexicalTable_prod_$t(a))return!1;LexicalTable_prod_bt(e),"backward"===l?a.selectEnd():a.selectStart();return!0}(n,a,u,r,o))}const g=e.getElementByKey(u.__key),f=e.getElementByKey(i.key);if(null==f||null==g)return!1;let m;if("element"===i.type)m=f.getBoundingClientRect();else{const t=T(LexicalTable_prod_Ge(e));if(null===t||0===t.rangeCount)return!1;m=t.getRangeAt(0).getBoundingClientRect()}const p="up"===o?u.getFirstChild():u.getLastChild();if(null==p)return!1;const C=e.getElementByKey(p.__key);if(null==C)return!1;const S=C.getBoundingClientRect();if("up"===o?S.top>m.top-m.height:m.bottom+m.height>S.bottom){LexicalTable_prod_bt(n);const e=r.getCordsFromCellNode(u,l.table);if(!n.shiftKey)return LexicalTable_prod_at(l,r,e.x,e.y,o);{const t=r.getDOMCellFromCordsOrThrow(e.x,e.y,l.table);l.$setAnchorCellForSelection(t),l.$setFocusCellForSelection(t,!0)}return!0}}else if(LexicalTable_prod_ze(s)){const{anchor:i,focus:c}=s,a=t(i.getNode(),LexicalTable_prod_ie),u=t(c.getNode(),LexicalTable_prod_ie),[h]=s.getNodes();LexicalTable_prod_$t(h)||LexicalTable_prod_ue(251);const d=LexicalTable_prod_Ve(h,e.getElementByKey(h.getKey()));if(!LexicalTable_prod_ie(a)||!LexicalTable_prod_ie(u)||!LexicalTable_prod_$t(h)||null==d)return!1;l.$updateTableTableSelection(s);const g=LexicalTable_prod_lt(h,d),f=r.getCordsFromCellNode(a,g),m=r.getDOMCellFromCordsOrThrow(f.x,f.y,g);if(l.$setAnchorCellForSelection(m),LexicalTable_prod_bt(n),n.shiftKey){const[e,t,n]=LexicalTable_prod_He(r,a,u);return LexicalTable_prod_gt(l,e,t,n,o)}return u.selectEnd(),!0}return!1}function LexicalTable_prod_bt(e){e.preventDefault(),e.stopImmediatePropagation(),e.stopPropagation()}function LexicalTable_prod_yt(e,t,n){const o=i();"first"===e?t.insertBefore(o):t.insertAfter(o),o.append(...n||[]),o.selectEnd()}function LexicalTable_prod_Nt(e,n,o){const r=o.getParent();if(!r)return;const l=T(LexicalTable_prod_Ge(e));if(!l)return;const s=l.anchorNode,i=e.getElementByKey(r.getKey()),c=LexicalTable_prod_Ve(o,e.getElementByKey(o.getKey()));if(!s||!i||!c||!i.contains(s)||c.contains(s))return;const a=t(n.anchor.getNode(),(e=>LexicalTable_prod_ie(e)));if(!a)return;const u=t(a,(e=>LexicalTable_prod_$t(e)));if(!LexicalTable_prod_$t(u)||!u.is(o))return;const[h,d]=LexicalTable_prod_He(o,a,a),g=h[0][0],f=h[h.length-1][h[0].length-1],{startRow:m,startColumn:p}=d,C=m===g.startRow&&p===g.startColumn,S=m===f.startRow&&p===f.startColumn;return C?"first":S?"last":void 0}function LexicalTable_prod_xt(e,t){const{tableNode:n}=e.$lookup(),o=n.getCordsFromCellNode(t,e.table);return n.getDOMCellFromCordsOrThrow(o.x,o.y,e.table)}function LexicalTable_prod_Tt(e,t,n){return LexicalTable_prod_Qe(e,bt(t,n))}function LexicalTable_prod_vt(e,t,n,o){const r=e.querySelector("colgroup");if(!r)return;const l=[];for(let e=0;e<n;e++){const t=document.createElement("col"),n=o&&o[e];n&&(t.style.width=`${n}px`),l.push(t)}r.replaceChildren(...l)}function LexicalTable_prod_Rt(t,o,r){r?(LexicalUtils_prod_W(t,o.theme.tableRowStriping),t.setAttribute("data-lexical-row-striping","true")):(LexicalUtils_prod_j(t,o.theme.tableRowStriping),t.removeAttribute("data-lexical-row-striping"))}const LexicalTable_prod_Ot=new WeakSet;function LexicalTable_prod_Ft(e=Pn()){return LexicalTable_prod_Ot.has(e)}function LexicalTable_prod_kt(e,t){t?LexicalTable_prod_Ot.add(e):LexicalTable_prod_Ot.delete(e)}class LexicalTable_prod_Kt extends ks{static getType(){return"table"}getColWidths(){return this.getLatest().__colWidths}setColWidths(e){const t=this.getWritable();return t.__colWidths=e,t}static clone(e){return new LexicalTable_prod_Kt(e.__key)}afterCloneFrom(e){super.afterCloneFrom(e),this.__colWidths=e.__colWidths,this.__rowStriping=e.__rowStriping}static importDOM(){return{table:e=>({conversion:LexicalTable_prod_Mt,priority:1})}}static importJSON(e){const t=LexicalTable_prod_At();return t.__rowStriping=e.rowStriping||!1,t.__colWidths=e.colWidths,t}constructor(e){super(e),this.__rowStriping=!1}exportJSON(){return{...super.exportJSON(),colWidths:this.getColWidths(),rowStriping:this.__rowStriping?this.__rowStriping:void 0,type:"table",version:1}}extractWithChild(e,t,n){return"html"===n}getDOMSlot(e){const t="TABLE"!==e.nodeName&&e.querySelector("table")||e;return"TABLE"!==t.nodeName&&LexicalTable_prod_ue(229),super.getDOMSlot(t).withAfter(t.querySelector("colgroup"))}createDOM(t,n){const o=document.createElement("table"),r=document.createElement("colgroup");if(o.appendChild(r),LexicalTable_prod_vt(o,0,this.getColumnCount(),this.getColWidths()),In(r),LexicalUtils_prod_W(o,t.theme.table),this.__rowStriping&&LexicalTable_prod_Rt(o,t,!0),LexicalTable_prod_Ft(n)){const n=document.createElement("div"),r=t.theme.tableScrollableWrapper;return r?LexicalUtils_prod_W(n,r):n.style.cssText="overflow-x: auto;",n.appendChild(o),n}return o}updateDOM(e,t,n){return e.__rowStriping!==this.__rowStriping&&LexicalTable_prod_Rt(t,n,this.__rowStriping),LexicalTable_prod_vt(t,0,this.getColumnCount(),this.getColWidths()),!1}exportDOM(e){const t=super.exportDOM(e),{element:n}=t;return{after:e=>{if(t.after&&(e=t.after(e)),e&&Tn(e)&&"TABLE"!==e.nodeName&&(e=e.querySelector("table")),!e||!Tn(e))return null;const[n]=LexicalTable_prod_Pe(this,null,null),o=new Map;for(const e of n)for(const t of e){const e=t.cell.getKey();o.has(e)||o.set(e,{colSpan:t.cell.getColSpan(),startColumn:t.startColumn})}const l=new Set;for(const t of e.querySelectorAll(":scope > tr > [data-temporary-table-cell-lexical-key]")){const e=t.getAttribute("data-temporary-table-cell-lexical-key");if(e){const n=o.get(e);if(t.removeAttribute("data-temporary-table-cell-lexical-key"),n){o.delete(e);for(let e=0;e<n.colSpan;e++)l.add(e+n.startColumn)}}}const s=e.querySelector(":scope > colgroup");if(s){const t=Array.from(e.querySelectorAll(":scope > colgroup > col")).filter(((e,t)=>l.has(t)));s.replaceChildren(...t)}const i=e.querySelectorAll(":scope > tr");if(i.length>0){const t=document.createElement("tbody");for(const e of i)t.appendChild(e);e.append(t)}return e},element:n&&Tn(n)&&"TABLE"!==n.nodeName?n.querySelector("table"):n}}canBeEmpty(){return!1}isShadowRoot(){return!0}getCordsFromCellNode(e,t){const{rows:n,domRows:o}=t;for(let t=0;t<n;t++){const n=o[t];if(null!=n)for(let o=0;o<n.length;o++){const r=n[o];if(null==r)continue;const{elem:l}=r,s=LexicalTable_prod_Tt(this,l);if(null!==s&&e.is(s))return{x:o,y:t}}}throw new Error("Cell not found in table.")}getDOMCellFromCords(e,t,n){const{domRows:o}=n,r=o[t];if(null==r)return null;const l=r[e<r.length?e:r.length-1];return null==l?null:l}getDOMCellFromCordsOrThrow(e,t,n){const o=this.getDOMCellFromCords(e,t,n);if(!o)throw new Error("Cell not found at cords.");return o}getCellNodeFromCords(e,t,n){const o=this.getDOMCellFromCords(e,t,n);if(null==o)return null;const r=bt(o.elem);return LexicalTable_prod_ie(r)?r:null}getCellNodeFromCordsOrThrow(e,t,n){const o=this.getCellNodeFromCords(e,t,n);if(!o)throw new Error("Node at cords not TableCellNode.");return o}getRowStriping(){return Boolean(this.getLatest().__rowStriping)}setRowStriping(e){this.getWritable().__rowStriping=e}canSelectBefore(){return!0}canIndent(){return!1}getColumnCount(){const e=this.getFirstChild();if(!e)return 0;let t=0;return e.getChildren().forEach((e=>{LexicalTable_prod_ie(e)&&(t+=e.getColSpan())})),t}}function LexicalTable_prod_Et(e,t){const n=e.getElementByKey(t.getKey());return null===n&&LexicalTable_prod_ue(230),LexicalTable_prod_lt(t,n)}function LexicalTable_prod_Mt(e){const t=LexicalTable_prod_At();e.hasAttribute("data-lexical-row-striping")&&t.setRowStriping(!0);const n=e.querySelector(":scope > colgroup");if(n){let e=[];for(const t of n.querySelectorAll(":scope > col")){const n=t.style.width;if(!n||!LexicalTable_prod_ne.test(n)){e=void 0;break}e.push(parseFloat(n))}e&&t.setColWidths(e)}return{node:t}}function LexicalTable_prod_At(){return gn(new LexicalTable_prod_Kt)}function LexicalTable_prod_$t(e){return e instanceof LexicalTable_prod_Kt}

// EXTERNAL MODULE: ../../packages/lib/cn.ts
var lib_cn = __webpack_require__(983773);
;// ./modules/ui/components/editor/lib/example-theme.ts
const exampleTheme = {
    rtl: "fb-editor-rtl",
    ltr: "fb-editor-ltr",
    placeholder: "fb-editor-placeholder",
    paragraph: "fb-editor-paragraph",
    heading: {
        h1: "fb-editor-heading-h1",
        h2: "fb-editor-heading-h2"
    },
    list: {
        nested: {
            listitem: "fb-editor-nested-listitem"
        },
        ol: "fb-editor-list-ol",
        ul: "fb-editor-list-ul",
        listitem: "fb-editor-listitem"
    },
    image: "fb-editor-image",
    link: "fb-editor-link",
    text: {
        bold: "fb-editor-text-bold",
        italic: "fb-editor-text-italic"
    }
};

;// ../../node_modules/@lexical/react/LexicalAutoLinkPlugin.prod.mjs
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function LexicalAutoLinkPlugin_prod_m(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var LexicalAutoLinkPlugin_prod_T=LexicalAutoLinkPlugin_prod_m((function(t){const e=new URLSearchParams;e.append("code",t);for(let t=1;t<arguments.length;t++)e.append("v",arguments[t]);throw Error(`Minified Lexical error #${t}; visit https://lexical.dev/docs/error?${e} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}));function LexicalAutoLinkPlugin_prod_C(t,e=(t=>t)){return n=>{const r=t.exec(n);return null===r?null:{index:r.index,length:r[0].length,text:r[0],url:e(r[0])}}}function LexicalAutoLinkPlugin_prod_b(t,e){for(let n=0;n<e.length;n++){const r=e[n](t);if(r)return r}return null}const LexicalAutoLinkPlugin_prod_v=/[.,;\s]/;function LexicalAutoLinkPlugin_prod_S(t){return LexicalAutoLinkPlugin_prod_v.test(t)}function LexicalAutoLinkPlugin_prod_U(t){return LexicalAutoLinkPlugin_prod_S(t[t.length-1])}function LexicalAutoLinkPlugin_prod_L(t){return LexicalAutoLinkPlugin_prod_S(t[0])}function LexicalAutoLinkPlugin_prod_R(t){let e=t.getPreviousSibling();return bs(e)&&(e=e.getLastDescendant()),null===e||Gr(e)||hi(e)&&LexicalAutoLinkPlugin_prod_U(e.getTextContent())}function LexicalAutoLinkPlugin_prod_k(t){let e=t.getNextSibling();return bs(e)&&(e=e.getFirstDescendant()),null===e||Gr(e)||hi(e)&&LexicalAutoLinkPlugin_prod_L(e.getTextContent())}function LexicalAutoLinkPlugin_prod_y(t,e,n,r){if(!(t>0?LexicalAutoLinkPlugin_prod_S(n[t-1]):LexicalAutoLinkPlugin_prod_R(r[0])))return!1;return e<n.length?LexicalAutoLinkPlugin_prod_S(n[e]):LexicalAutoLinkPlugin_prod_k(r[r.length-1])}function LexicalAutoLinkPlugin_prod_D(t,e,n){const r=[],l=[],o=[];let i=0,s=0;const u=[...t];for(;u.length>0;){const t=u[0],g=t.getTextContent().length,c=s;s+g<=e?(r.push(t),i+=g):c>=n?o.push(t):l.push(t),s+=g,u.shift()}return[i,r,l,o]}function LexicalAutoLinkPlugin_prod_N(t,e,n,r){const o=LexicalLink_prod_d(r.url,r.attributes);if(1===t.length){let l,i=t[0];0===e?[l,i]=i.splitText(n):[,l,i]=i.splitText(e,n);const s=di(r.text);return s.setFormat(l.getFormat()),s.setDetail(l.getDetail()),s.setStyle(l.getStyle()),o.append(s),l.replace(o),i}if(t.length>1){const r=t[0];let l,i=r.getTextContent().length;0===e?l=r:[,l]=r.splitText(e);const s=[];let c;for(let e=1;e<t.length;e++){const r=t[e],l=r.getTextContent().length,o=i;if(o<n)if(i+l<=n)s.push(r);else{const[t,e]=r.splitText(n-o);s.push(t),c=e}i+=l}const f=Ri(),h=f?f.getNodes().find(hi):void 0,d=di(l.getTextContent());return d.setFormat(l.getFormat()),d.setDetail(l.getDetail()),d.setStyle(l.getStyle()),o.append(d,...s),h&&h===l&&(ki(f)?d.select(f.anchor.offset,f.focus.offset):wi(f)&&d.select(0,d.getTextContent().length)),l.replace(o),c}}function LexicalAutoLinkPlugin_prod_P(t,e,n){const r=t.getChildren(),l=r.length;for(let e=0;e<l;e++){const l=r[e];if(!hi(l)||!l.isSimpleText())return LexicalAutoLinkPlugin_prod_I(t),void n(null,t.getURL())}const o=t.getTextContent(),i=LexicalAutoLinkPlugin_prod_b(o,e);if(null===i||i.text!==o)return LexicalAutoLinkPlugin_prod_I(t),void n(null,t.getURL());if(!LexicalAutoLinkPlugin_prod_R(t)||!LexicalAutoLinkPlugin_prod_k(t))return LexicalAutoLinkPlugin_prod_I(t),void n(null,t.getURL());const s=t.getURL();if(s!==i.url&&(t.setURL(i.url),n(i.url,s)),i.attributes){const e=t.getRel();e!==i.attributes.rel&&(t.setRel(i.attributes.rel||null),n(i.attributes.rel||null,e));const r=t.getTarget();r!==i.attributes.target&&(t.setTarget(i.attributes.target||null),n(i.attributes.target||null,r))}}function LexicalAutoLinkPlugin_prod_I(t){const e=t.getChildren();for(let n=e.length-1;n>=0;n--)t.insertAfter(e[n]);return t.remove(),e.map((t=>t.getLatest()))}function LexicalAutoLinkPlugin_prod_w(l,o,f){(0,react.useEffect)((()=>{l.hasNodes([LexicalLink_prod_f])||LexicalAutoLinkPlugin_prod_T(77);const h=(t,e)=>{f&&f(t,e)};return LexicalUtils_prod_N(l.registerNodeTransform(ri,(t=>{const r=t.getParentOrThrow(),l=t.getPreviousSibling();if(LexicalLink_prod_p(r)&&!r.getIsUnlinked())LexicalAutoLinkPlugin_prod_P(r,o,h);else if(!LexicalLink_prod_g(r)){if(t.isSimpleText()&&(LexicalAutoLinkPlugin_prod_L(t.getTextContent())||!LexicalLink_prod_p(l))){const e=function(t){const e=[t];let n=t.getNextSibling();for(;null!==n&&hi(n)&&n.isSimpleText()&&(e.push(n),!/[\s]/.test(n.getTextContent()));)n=n.getNextSibling();return e}(t);!function(t,e,n){let r=[...t];const l=r.map((t=>t.getTextContent())).join("");let o,i=l,s=0;for(;(o=LexicalAutoLinkPlugin_prod_b(i,e))&&null!==o;){const t=o.index,e=t+o.length;if(LexicalAutoLinkPlugin_prod_y(s+t,s+e,l,r)){const[l,,i,u]=LexicalAutoLinkPlugin_prod_D(r,s+t,s+e),g=LexicalAutoLinkPlugin_prod_N(i,s+t-l,s+e-l,o);r=g?[g,...u]:u,n(o.url,null),s=0}else s+=e;i=i.substring(e)}}(e,o,h)}!function(t,n,r){const l=t.getPreviousSibling(),o=t.getNextSibling(),i=t.getTextContent();var s;!LexicalLink_prod_p(l)||l.getIsUnlinked()||LexicalAutoLinkPlugin_prod_L(i)&&(s=i,!(l.isEmailURI()?/^\.[a-zA-Z]{2,}/.test(s):/^\.[a-zA-Z0-9]{1,}/.test(s)))||(l.append(t),LexicalAutoLinkPlugin_prod_P(l,n,r),r(null,l.getURL())),!LexicalLink_prod_p(o)||o.getIsUnlinked()||LexicalAutoLinkPlugin_prod_U(i)||(LexicalAutoLinkPlugin_prod_I(o),LexicalAutoLinkPlugin_prod_P(o,n,r),r(null,o.getURL()))}(t,o,h)}})),l.registerCommand(LexicalLink_prod_U,(t=>{const n=Ri();if(null!==t||!ki(n))return!1;return n.extract().forEach((t=>{const n=t.getParent();if(LexicalLink_prod_p(n))return n.setIsUnlinked(!n.getIsUnlinked()),n.markDirty(),!0})),!1}),Ks))}),[l,o,f])}function LexicalAutoLinkPlugin_prod_F({matchers:t,onChange:e}){const[n]=LexicalComposerContext_prod_u();return LexicalAutoLinkPlugin_prod_w(n,t,e),null}

;// ./modules/ui/components/editor/components/auto-link-plugin.tsx


const URL_MATCHER = /((https?:\/\/(www\.)?)|(www\.))[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;
const EMAIL_MATCHER = /(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))/;
const MATCHERS = [
    (text)=>{
        const match = URL_MATCHER.exec(text);
        return match && {
            index: match.index,
            length: match[0].length,
            text: match[0],
            url: match[0]
        };
    },
    (text)=>{
        const match = EMAIL_MATCHER.exec(text);
        return match && {
            index: match.index,
            length: match[0].length,
            text: match[0],
            url: `mailto:${match[0]}`
        };
    }
];
const PlaygroundAutoLinkPlugin = ()=>{
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LexicalAutoLinkPlugin_prod_F, {
        matchers: MATCHERS
    });
};

;// ./modules/ui/components/editor/components/editor-content-checker.tsx



const EditorContentChecker = ({ onEmptyChange })=>{
    const [editor] = LexicalComposerContext_prod_u();
    (0,react.useEffect)(()=>{
        const checkIfEmpty = ()=>{
            editor.update(()=>{
                const root = Et();
                const isEmpty = root.getChildren().length === 0 || root.getTextContent().trim() === "";
                onEmptyChange(isEmpty);
            });
        };
        // Check initially and subscribe to editor updates
        checkIfEmpty();
        const unregister = editor.registerUpdateListener(()=>checkIfEmpty());
        return ()=>unregister();
    }, [
        editor,
        onEmptyChange
    ]);
    return null;
};

// EXTERNAL MODULE: ./modules/ui/components/dropdown-menu/index.tsx
var dropdown_menu = __webpack_require__(556825);
// EXTERNAL MODULE: ./modules/ui/components/input/index.tsx
var input = __webpack_require__(438624);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/chevron-down.js
var chevron_down = __webpack_require__(668382);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/createLucideIcon.js + 3 modules
var createLucideIcon = __webpack_require__(58303);
;// ../../node_modules/lucide-react/dist/esm/icons/bold.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Bold = (0,createLucideIcon/* default */.A)("Bold", [
    [
        "path",
        {
            d: "M6 12h9a4 4 0 0 1 0 8H7a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h7a4 4 0 0 1 0 8",
            key: "mg9rjx"
        }
    ]
]);
 //# sourceMappingURL=bold.js.map

;// ../../node_modules/lucide-react/dist/esm/icons/italic.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Italic = (0,createLucideIcon/* default */.A)("Italic", [
    [
        "line",
        {
            x1: "19",
            x2: "10",
            y1: "4",
            y2: "4",
            key: "15jd3p"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "5",
            y1: "20",
            y2: "20",
            key: "bu0au3"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "9",
            y1: "4",
            y2: "20",
            key: "uljnxc"
        }
    ]
]);
 //# sourceMappingURL=italic.js.map

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/link.js
var icons_link = __webpack_require__(415140);
;// ./modules/ui/components/editor/components/add-variables-dropdown.tsx



const AddVariablesDropdown = (props)=>{
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenu */.rI, {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuTrigger */.ty, {
                className: "focus:bg-muted pt-[6px]",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "items-center",
                    children: props.isTextEditor ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "hidden sm:flex",
                                children: [
                                    "add_variable",
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(chevron_down/* default */.A, {
                                        className: "ml-1 mt-[2px] h-4 w-4"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "block sm:hidden",
                                children: "+"
                            })
                        ]
                    }) : /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex",
                        children: [
                            "add_variable",
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(chevron_down/* default */.A, {
                                className: "ml-1 mt-[2px] h-4 w-4"
                            })
                        ]
                    })
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuContent */.SQ, {
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "pb-1 pt-4",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "text-subtle mb-2 px-4 text-left text-xs",
                            children: "add_dynamic_variables".toLocaleUpperCase()
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "h-64 overflow-scroll md:h-80",
                            children: props.variables.map((variable)=>/*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("button", {
                                        type: "button",
                                        className: "w-full px-4 py-2",
                                        onClick: ()=>props.addVariable(`${variable}_variable`),
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            className: "sm:grid sm:grid-cols-2",
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                    className: "mr-3 text-left md:col-span-1",
                                                    children: `{${`${variable}_variable`.toUpperCase().replace(/ /g, "_")}}`
                                                }),
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                    className: "text-default hidden text-left sm:col-span-1 sm:flex",
                                                    children: `${variable}_info`
                                                })
                                            ]
                                        })
                                    }, variable)
                                }, variable))
                        })
                    ]
                })
            })
        ]
    });
};

;// ./modules/ui/components/editor/components/toolbar-plugin.tsx
/* __next_internal_client_entry_do_not_use__ ToolbarPlugin auto */ 

















const LowPriority = 1;
const supportedBlockTypes = new Set([
    "paragraph",
    "h1",
    "h2",
    "ul",
    "ol"
]);
const blockTypeToBlockName = {
    paragraph: "Normal",
    ol: "Numbered List",
    ul: "Bulleted List",
    h1: "Large Heading",
    h2: "Small Heading"
};
const positionEditorElement = (editor, rect)=>{
    if (rect === null) {
        editor.style.opacity = "0";
        editor.style.top = "-1000px";
        editor.style.left = "-1000px";
    } else {
        editor.style.opacity = "1";
        editor.style.top = `${rect.top + rect.height + window.pageYOffset + 10}px`;
        editor.style.left = `${rect.left + window.pageXOffset - editor.offsetWidth / 2 + rect.width / 2}px`;
    }
};
const FloatingLinkEditor = ({ editor })=>{
    const editorRef = (0,react.useRef)(null);
    const mouseDownRef = (0,react.useRef)(false);
    const inputRef = (0,react.useRef)(null);
    const [linkUrl, setLinkUrl] = (0,react.useState)("");
    const [isEditMode, setEditMode] = (0,react.useState)(false);
    const [lastSelection, setLastSelection] = (0,react.useState)(null);
    const updateLinkEditor = (0,react.useCallback)(()=>{
        const selection = Ri();
        if (ki(selection)) {
            const node = getSelectedNode(selection);
            const parent = node.getParent();
            if (LexicalLink_prod_g(parent)) {
                setLinkUrl(parent.getURL());
            } else if (LexicalLink_prod_g(node)) {
                setLinkUrl(node.getURL());
            } else {
                setLinkUrl("");
            }
        }
        const editorElem = editorRef.current;
        const nativeSelection = window.getSelection();
        const activeElement = document.activeElement;
        if (editorElem === null) {
            return;
        }
        const rootElement = editor.getRootElement();
        if (selection !== null && !nativeSelection?.isCollapsed && rootElement !== null && rootElement.contains(nativeSelection?.anchorNode || null)) {
            const domRange = nativeSelection?.getRangeAt(0);
            let rect;
            if (nativeSelection?.anchorNode === rootElement) {
                let inner = rootElement;
                while(inner.firstElementChild != null){
                    inner = inner.firstElementChild;
                }
                rect = inner.getBoundingClientRect();
            } else {
                rect = domRange?.getBoundingClientRect();
            }
            if (!mouseDownRef.current) {
                positionEditorElement(editorElem, rect || null);
            }
            setLastSelection(selection);
        } else if (!activeElement || activeElement.className !== "link-input") {
            positionEditorElement(editorElem, null);
            setLastSelection(null);
            setEditMode(false);
            setLinkUrl("");
        }
        return true;
    }, [
        editor
    ]);
    (0,react.useEffect)(()=>{
        return LexicalUtils_prod_N(editor.registerUpdateListener(({ editorState })=>{
            editorState.read(()=>{
                updateLinkEditor();
            });
        }), editor.registerCommand(Lexical_prod_t, ()=>{
            updateLinkEditor();
            return true;
        }, LowPriority));
    }, [
        editor,
        updateLinkEditor
    ]);
    (0,react.useEffect)(()=>{
        editor.getEditorState().read(()=>{
            updateLinkEditor();
        });
    }, [
        editor,
        updateLinkEditor
    ]);
    (0,react.useEffect)(()=>{
        if (isEditMode && inputRef.current) {
            inputRef.current.focus();
        }
    }, [
        isEditMode
    ]);
    (0,react.useEffect)(()=>{
        setEditMode(true);
    }, []);
    const linkAttributes = {
        target: "_blank",
        rel: "noopener noreferrer"
    };
    const handleSubmit = ()=>{
        if (lastSelection && linkUrl) {
            editor.dispatchCommand(LexicalLink_prod_U, {
                url: linkUrl,
                ...linkAttributes
            });
        }
        setEditMode(false);
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
        ref: editorRef,
        className: "link-editor",
        children: isEditMode && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
            className: "flex",
            children: [
                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                    className: "bg-white",
                    ref: inputRef,
                    value: linkUrl,
                    onChange: (event)=>{
                        setLinkUrl(event.target.value);
                    },
                    onKeyDown: (event)=>{
                        if (event.key === "Enter") {
                            event.preventDefault();
                            handleSubmit();
                        } else if (event.key === "Escape") {
                            event.preventDefault();
                            setEditMode(false);
                        }
                    }
                }),
                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                    className: "py-2",
                    onClick: handleSubmit,
                    children: "Add"
                })
            ]
        })
    });
};
const getSelectedNode = (selection)=>{
    const anchor = selection.anchor;
    const focus = selection.focus;
    const anchorNode = selection.anchor.getNode();
    const focusNode = selection.focus.getNode();
    if (anchorNode === focusNode) {
        return anchorNode;
    }
    const isBackward = selection.isBackward();
    if (isBackward) {
        return LexicalSelection_prod_K(focus) ? anchorNode : focusNode;
    } else {
        return LexicalSelection_prod_K(anchor) ? focusNode : anchorNode;
    }
};
const ToolbarPlugin = (props)=>{
    const [editor] = LexicalComposerContext_prod_u();
    const toolbarRef = (0,react.useRef)(null);
    const [blockType, setBlockType] = (0,react.useState)("paragraph");
    const [isLink, setIsLink] = (0,react.useState)(false);
    const [isBold, setIsBold] = (0,react.useState)(false);
    const [isItalic, setIsItalic] = (0,react.useState)(false);
    // save ref to setText to use it in event listeners safely
    const setText = (0,react.useRef)(props.setText);
    (0,react.useEffect)(()=>{
        setText.current = props.setText;
    }, [
        props
    ]);
    const formatParagraph = ()=>{
        if (blockType !== "paragraph") {
            editor.update(()=>{
                const selection = Ri();
                if (ki(selection)) {
                    LexicalSelection_prod_z(selection, ()=>zs());
                }
            });
        }
    };
    const formatLargeHeading = ()=>{
        if (blockType !== "h1") {
            editor.update(()=>{
                const selection = Ri();
                if (ki(selection)) {
                    LexicalSelection_prod_z(selection, ()=>LexicalRichText_prod_Et("h1"));
                }
            });
        }
    };
    const formatSmallHeading = ()=>{
        if (blockType !== "h2") {
            editor.update(()=>{
                const selection = Ri();
                if (ki(selection)) {
                    LexicalSelection_prod_z(selection, ()=>LexicalRichText_prod_Et("h2"));
                }
            });
        }
    };
    const formatBulletList = ()=>{
        if (blockType !== "ul") {
            editor.dispatchCommand(LexicalList_prod_G, undefined);
        } else {
            editor.dispatchCommand(LexicalList_prod_Y, undefined);
        }
    };
    const formatNumberedList = ()=>{
        if (blockType !== "ol") {
            editor.dispatchCommand(LexicalList_prod_Q, undefined);
        } else {
            editor.dispatchCommand(LexicalList_prod_Y, undefined);
        }
    };
    const format = (newBlockType)=>{
        switch(newBlockType){
            case "paragraph":
                formatParagraph();
                break;
            case "ul":
                formatBulletList();
                break;
            case "ol":
                formatNumberedList();
                break;
            case "h1":
                formatLargeHeading();
                break;
            case "h2":
                formatSmallHeading();
                break;
        }
    };
    const updateToolbar = (0,react.useCallback)(()=>{
        const selection = Ri();
        if (ki(selection)) {
            const anchorNode = selection.anchor.getNode();
            const element = anchorNode.getKey() === "root" ? anchorNode : anchorNode.getTopLevelElementOrThrow();
            const elementKey = element.getKey();
            const elementDOM = editor.getElementByKey(elementKey);
            if (elementDOM !== null) {
                if (LexicalList_prod_H(element)) {
                    const parentList = LexicalUtils_prod_te(anchorNode, LexicalList_prod_J);
                    const type = parentList ? parentList.getTag() : element.getTag();
                    setBlockType(type);
                } else {
                    const type = LexicalRichText_prod_Nt(element) ? element.getTag() : element.getType();
                    setBlockType(type);
                }
            }
            setIsBold(selection.hasFormat("bold"));
            setIsItalic(selection.hasFormat("italic"));
            const node = getSelectedNode(selection);
            const parent = node.getParent();
            if (LexicalLink_prod_g(parent) || LexicalLink_prod_g(node)) {
                setIsLink(true);
            } else {
                setIsLink(false);
            }
        }
    }, [
        editor
    ]);
    const addVariable = (variable)=>{
        editor.update(()=>{
            const selection = Ri();
            if (ki(selection)) {
                editor.update(()=>{
                    const formatedVariable = `{${variable.toUpperCase().replace(/ /g, "_")}}`;
                    selection?.insertRawText(formatedVariable);
                });
            }
        });
    };
    (0,react.useEffect)(()=>{
        if (!props.firstRender) {
            editor.update(()=>{
                const root = Et();
                if (root) {
                    editor.update(()=>{
                        const parser = new DOMParser();
                        // Create a new TextNode
                        const dom = parser.parseFromString(props.getText(), "text/html");
                        const nodes = LexicalHtml_prod_h(editor, dom);
                        const paragraph = zs();
                        root.clear().append(paragraph);
                        paragraph.select();
                        Hi(nodes);
                    });
                }
            });
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        props.updateTemplate,
        props.firstRender
    ]);
    (0,react.useEffect)(()=>{
        if (props.setFirstRender && props.firstRender) {
            props.setFirstRender(false);
            editor.update(()=>{
                const parser = new DOMParser();
                const dom = parser.parseFromString(props.getText(), "text/html");
                const nodes = LexicalHtml_prod_h(editor, dom);
                const paragraph = zs();
                Et().clear().append(paragraph);
                paragraph.select();
                Et().select();
                Hi(nodes);
                editor.registerUpdateListener(({ editorState, prevEditorState })=>{
                    editorState.read(()=>{
                        const textInHtml = LexicalHtml_prod_m(editor).replace(/&lt;/g, "<").replace(/&gt;/g, ">");
                        setText.current(textInHtml);
                    });
                    if (!prevEditorState._selection) editor.blur();
                });
            });
        }
    }, []);
    (0,react.useEffect)(()=>{
        return LexicalUtils_prod_N(editor.registerUpdateListener(({ editorState })=>{
            editorState.read(()=>{
                updateToolbar();
            });
        }), editor.registerCommand(Lexical_prod_t, (_payload)=>{
            updateToolbar();
            return false;
        }, LowPriority));
    }, [
        editor,
        updateToolbar
    ]);
    const insertLink = (0,react.useCallback)(()=>{
        if (!isLink) {
            editor.dispatchCommand(LexicalLink_prod_U, {
                url: "https://"
            });
        } else {
            editor.dispatchCommand(LexicalLink_prod_U, null);
        }
    }, [
        editor,
        isLink
    ]);
    (0,react.useEffect)(()=>{
        return editor.registerCommand(Lexical_prod_c, (e)=>{
            const text = e.clipboardData?.getData("text/plain");
            editor.update(()=>{
                const selection = Ri();
                if (ki(selection)) {
                    selection.insertRawText(text ?? "");
                }
            });
            e.preventDefault();
            return true; // Prevent the default paste handler
        }, Us);
    }, [
        editor
    ]);
    if (!props.editable) return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_jsx_runtime.Fragment, {});
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
        className: "toolbar flex",
        ref: toolbarRef,
        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
            children: [
                !props.excludedToolbarItems?.includes("blockType") && supportedBlockTypes.has(blockType) && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_jsx_runtime.Fragment, {
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenu */.rI, {
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuTrigger */.ty, {
                                className: "text-subtle",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                            className: "icon" + blockType
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                            className: "text text-default hidden sm:flex",
                                            children: blockTypeToBlockName[blockType]
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(chevron_down/* default */.A, {
                                            className: "text-default ml-2 h-4 w-4"
                                        })
                                    ]
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuContent */.SQ, {
                                align: "start",
                                children: Object.keys(blockTypeToBlockName).map((key)=>{
                                    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                            type: "button",
                                            onClick: ()=>format(key),
                                            className: (0,lib_utils.cn)("w-full rounded-none focus:ring-0", blockType === key ? "bg-subtle w-full" : ""),
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                        className: "icon block-type " + key
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                        children: blockTypeToBlockName[key]
                                                    })
                                                ]
                                            })
                                        })
                                    }, key);
                                })
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                    children: [
                        !props.excludedToolbarItems?.includes("bold") && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                            variant: "ghost",
                            type: "button",
                            onClick: ()=>{
                                editor.dispatchCommand(Lexical_prod_d, "bold");
                            },
                            className: isBold ? "bg-subtle active-button" : "inactive-button",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Bold, {})
                        }),
                        !props.excludedToolbarItems?.includes("italic") && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                            variant: "ghost",
                            type: "button",
                            onClick: ()=>{
                                editor.dispatchCommand(Lexical_prod_d, "italic");
                            },
                            className: isItalic ? "bg-subtle active-button" : "inactive-button",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Italic, {})
                        }),
                        !props.excludedToolbarItems?.includes("link") && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                    variant: "ghost",
                                    type: "button",
                                    onClick: insertLink,
                                    className: isLink ? "bg-subtle active-button" : "inactive-button",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(icons_link/* default */.A, {})
                                }),
                                isLink ? /*#__PURE__*/ (0,react_dom.createPortal)(/*#__PURE__*/ (0,react_jsx_runtime.jsx)(FloatingLinkEditor, {
                                    editor: editor
                                }), props.container ?? document.body) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_jsx_runtime.Fragment, {})
                            ]
                        })
                    ]
                }),
                props.variables && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "ml-auto",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(AddVariablesDropdown, {
                        addVariable: addVariable,
                        isTextEditor: true,
                        variables: props.variables || []
                    })
                })
            ]
        })
    });
};

;// ./modules/ui/components/editor/components/editor.tsx
























const editorConfig = {
    theme: exampleTheme,
    onError (error) {
        throw error;
    },
    namespace: "",
    nodes: [
        LexicalRichText_prod_yt,
        LexicalList_prod_J,
        LexicalList_prod_I,
        LexicalRichText_prod_ht,
        LexicalCode_prod_H,
        LexicalCode_prod_G,
        LexicalTable_prod_Kt,
        LexicalTable_prod_re,
        LexicalTable_prod_fe,
        LexicalLink_prod_f,
        LexicalLink_prod_a
    ]
};
const Editor = (props)=>{
    const editable = props.editable ?? true;
    const editorContainerRef = (0,react.useRef)(null);
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
        className: "editor cursor-text rounded-md",
        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LexicalComposer_prod_p, {
            initialConfig: {
                ...editorConfig,
                editable
            },
            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: editorContainerRef,
                className: (0,lib_cn.cn)("editor-container rounded-md p-0", props.isInvalid && "!border !border-red-500"),
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ToolbarPlugin, {
                        getText: props.getText,
                        setText: props.setText,
                        editable: editable,
                        excludedToolbarItems: props.excludedToolbarItems,
                        variables: props.variables,
                        updateTemplate: props.updateTemplate,
                        firstRender: props.firstRender,
                        setFirstRender: props.setFirstRender,
                        container: editorContainerRef.current
                    }),
                    props.onEmptyChange ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(EditorContentChecker, {
                        onEmptyChange: props.onEmptyChange
                    }) : null,
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: (0,lib_cn.cn)("editor-inner scroll-bar", !editable && "bg-muted"),
                        style: {
                            height: props.height
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LexicalRichTextPlugin_prod_h, {
                                contentEditable: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LexicalContentEditable_prod_x, {
                                    style: {
                                        height: props.height
                                    },
                                    className: "editor-input"
                                }),
                                placeholder: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "-mt-11 cursor-text p-3 text-sm text-slate-400",
                                    children: props.placeholder || ""
                                }),
                                ErrorBoundary: LexicalErrorBoundary_prod_a
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LexicalListPlugin_prod_n, {}),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LexicalLinkPlugin_prod_d, {}),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(PlaygroundAutoLinkPlugin, {}),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LexicalMarkdownShortcutPlugin_prod_a, {
                                transformers: props.disableLists ? LexicalMarkdown_prod_At.filter((value, index)=>{
                                    if (index !== 3 && index !== 4) return value;
                                }) : LexicalMarkdown_prod_At
                            })
                        ]
                    })
                ]
            })
        })
    });
};

;// ./modules/ui/components/editor/index.ts
/* Built by the team of cal.com
https://github.com/calcom/cal.com/tree/main/packages/ui/components/editor */ 


// EXTERNAL MODULE: ./modules/ui/components/form/index.tsx
var components_form = __webpack_require__(184142);
// EXTERNAL MODULE: ./modules/ui/components/label/index.tsx
var components_label = __webpack_require__(61330);
// EXTERNAL MODULE: ./modules/ui/components/modal/index.tsx
var modal = __webpack_require__(383207);
// EXTERNAL MODULE: ./modules/ui/components/select/index.tsx
var components_select = __webpack_require__(678372);
// EXTERNAL MODULE: ../../node_modules/@hookform/resolvers/zod/dist/zod.mjs + 1 modules
var zod = __webpack_require__(311159);
// EXTERNAL MODULE: ../../node_modules/@tolgee/react/dist/tolgee-react.esm.js
var tolgee_react_esm = __webpack_require__(397674);
// EXTERNAL MODULE: ../../node_modules/isomorphic-dompurify/index.js
var isomorphic_dompurify = __webpack_require__(904855);
var isomorphic_dompurify_default = /*#__PURE__*/__webpack_require__.n(isomorphic_dompurify);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/mail.js
var mail = __webpack_require__(247503);
;// ../../node_modules/lucide-react/dist/esm/icons/zap.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Zap = (0,createLucideIcon/* default */.A)("Zap", [
    [
        "path",
        {
            d: "M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z",
            key: "1xq2db"
        }
    ]
]);
 //# sourceMappingURL=zap.js.map

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/triangle-alert.js
var triangle_alert = __webpack_require__(467935);
;// ../../node_modules/lucide-react/dist/esm/icons/handshake.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Handshake = (0,createLucideIcon/* default */.A)("Handshake", [
    [
        "path",
        {
            d: "m11 17 2 2a1 1 0 1 0 3-3",
            key: "efffak"
        }
    ],
    [
        "path",
        {
            d: "m14 14 2.5 2.5a1 1 0 1 0 3-3l-3.88-3.88a3 3 0 0 0-4.24 0l-.88.88a1 1 0 1 1-3-3l2.81-2.81a5.79 5.79 0 0 1 7.06-.87l.47.28a2 2 0 0 0 1.42.25L21 4",
            key: "9pr0kb"
        }
    ],
    [
        "path",
        {
            d: "m21 3 1 11h-2",
            key: "1tisrp"
        }
    ],
    [
        "path",
        {
            d: "M3 3 2 14l6.5 6.5a1 1 0 1 0 3-3",
            key: "1uvwmv"
        }
    ],
    [
        "path",
        {
            d: "M3 4h8",
            key: "1ep09j"
        }
    ]
]);
 //# sourceMappingURL=handshake.js.map

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/arrow-down.js
var arrow_down = __webpack_require__(807920);
// EXTERNAL MODULE: ../../node_modules/react-hook-form/dist/index.esm.mjs
var index_esm = __webpack_require__(200667);
// EXTERNAL MODULE: ../../node_modules/react-hot-toast/dist/index.mjs + 1 modules
var dist = __webpack_require__(986090);
// EXTERNAL MODULE: ../../node_modules/zod/lib/index.mjs
var lib = __webpack_require__(99922);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/types/survey-follow-up.ts

const ZCreateSurveyFollowUpFormSchema = lib.z.object({
    followUpName: lib.z.string().trim().min(1, "Name is required"),
    triggerType: lib.z.enum([
        "response",
        "endings"
    ]),
    endingIds: lib.z.array(lib.z.string().cuid2()).nullable(),
    emailTo: lib.z.string().trim().min(1, "To is required"),
    replyTo: lib.z.array(lib.z.string().email()).min(1, "Replies must have at least one email"),
    subject: lib.z.string().trim().min(1, "Subject is required"),
    body: lib.z.string().trim().min(1, "Body is required")
});

;// ./modules/survey-follow-ups/components/follow-up-modal.tsx
/* __next_internal_client_entry_do_not_use__ FollowUpModal auto */ 
























const FollowUpModal = ({ localSurvey, open, setOpen, selectedLanguageCode, mailFrom, defaultValues, mode = "create", userEmail, setLocalSurvey, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const QUESTIONS_ICON_MAP = (0,questions/* getQuestionIconMap */.Ax)(t);
    const containerRef = (0,react.useRef)(null);
    const [firstRender, setFirstRender] = (0,react.useState)(true);
    const emailSendToOptions = (0,react.useMemo)(()=>{
        const { questions } = localSurvey;
        const openTextAndContactQuestions = questions.filter((question)=>{
            if (question.type === types/* TSurveyQuestionTypeEnum */.wn.ContactInfo) {
                return true;
            }
            if (question.type === types/* TSurveyQuestionTypeEnum */.wn.OpenText) {
                if (question.inputType === "email") {
                    return true;
                }
                return false;
            }
            return false;
        });
        const hiddenFields = localSurvey.hiddenFields.enabled && localSurvey.hiddenFields.fieldIds ? {
            fieldIds: localSurvey.hiddenFields.fieldIds
        } : {
            fieldIds: []
        };
        return [
            ...openTextAndContactQuestions.map((question)=>({
                    label: (0,recall/* recallToHeadline */.fV)(question.headline, localSurvey, false, selectedLanguageCode)[selectedLanguageCode],
                    id: question.id,
                    type: question.type === types/* TSurveyQuestionTypeEnum */.wn.OpenText ? "openTextQuestion" : "contactInfoQuestion"
                })),
            ...hiddenFields.fieldIds.map((fieldId)=>({
                    label: fieldId,
                    id: fieldId,
                    type: "hiddenField"
                }))
        ];
    }, [
        localSurvey,
        selectedLanguageCode
    ]);
    const form = (0,index_esm/* useForm */.mN)({
        defaultValues: {
            followUpName: defaultValues?.followUpName ?? "",
            triggerType: defaultValues?.triggerType ?? "response",
            endingIds: defaultValues?.endingIds || null,
            emailTo: defaultValues?.emailTo ?? emailSendToOptions[0]?.id,
            replyTo: defaultValues?.replyTo ?? [
                userEmail
            ],
            subject: defaultValues?.subject ?? t("environments.surveys.edit.follow_ups_modal_action_subject"),
            body: defaultValues?.body ?? getSurveyFollowUpActionDefaultBody(t)
        },
        resolver: (0,zod/* zodResolver */.u)(ZCreateSurveyFollowUpFormSchema),
        mode: "onChange"
    });
    const formErrors = form.formState.errors;
    const formSubmitting = form.formState.isSubmitting;
    const triggerType = form.watch("triggerType");
    const handleSubmit = (data)=>{
        if (data.triggerType === "endings" && data.endingIds?.length === 0) {
            dist/* default */.Ay.error("Please select at least one ending or change the trigger type");
            return;
        }
        if (!emailSendToOptions.length) {
            dist/* default */.Ay.error("No valid options found for sending emails, please add some open-text / contact-info questions or hidden fields");
            return;
        }
        if (Object.keys(formErrors).length > 0) {
            return;
        }
        if (data.triggerType === "endings") {
            if (!data.endingIds || !data.endingIds?.length) {
                form.setError("endingIds", {
                    type: "manual",
                    message: "Please select at least one ending"
                });
                return;
            }
        }
        const getProperties = ()=>{
            if (data.triggerType === "response") {
                return null;
            }
            if (data.endingIds && data.endingIds.length > 0) {
                return {
                    endingIds: data.endingIds
                };
            }
            return null;
        };
        if (mode === "edit") {
            if (!defaultValues?.surveyFollowUpId) {
                dist/* default */.Ay.error(t("environments.surveys.edit.follow_ups_modal_edit_no_id"));
                return;
            }
            const currentFollowUp = localSurvey.followUps.find((followUp)=>followUp.id === defaultValues.surveyFollowUpId);
            const sanitizedBody = isomorphic_dompurify_default().sanitize(data.body, {
                ALLOWED_TAGS: [
                    "p",
                    "span",
                    "b",
                    "strong",
                    "i",
                    "em",
                    "a",
                    "br"
                ],
                ALLOWED_ATTR: [
                    "href",
                    "rel",
                    "dir",
                    "class"
                ],
                ALLOWED_URI_REGEXP: /^https?:\/\//,
                ADD_ATTR: [
                    "target"
                ]
            });
            const updatedFollowUp = {
                id: defaultValues.surveyFollowUpId,
                createdAt: currentFollowUp?.createdAt ?? new Date(),
                updatedAt: new Date(),
                surveyId: localSurvey.id,
                name: data.followUpName,
                trigger: {
                    type: data.triggerType,
                    properties: getProperties()
                },
                action: {
                    type: "send-email",
                    properties: {
                        to: data.emailTo,
                        from: mailFrom,
                        replyTo: data.replyTo,
                        subject: data.subject,
                        body: sanitizedBody
                    }
                }
            };
            dist/* default */.Ay.success("Survey follow up updated successfully");
            setOpen(false);
            setLocalSurvey((prev)=>{
                return {
                    ...prev,
                    followUps: prev.followUps.map((followUp)=>{
                        if (followUp.id === defaultValues.surveyFollowUpId) {
                            return updatedFollowUp;
                        }
                        return followUp;
                    })
                };
            });
            return;
        }
        const sanitizedBody = isomorphic_dompurify_default().sanitize(data.body, {
            ALLOWED_TAGS: [
                "p",
                "span",
                "b",
                "strong",
                "i",
                "em",
                "a",
                "br"
            ],
            ALLOWED_ATTR: [
                "href",
                "rel",
                "dir",
                "class"
            ],
            ALLOWED_URI_REGEXP: /^https?:\/\//,
            ADD_ATTR: [
                "target"
            ]
        });
        const newFollowUp = {
            id: (0,cuid2/* createId */.sX)(),
            createdAt: new Date(),
            updatedAt: new Date(),
            surveyId: localSurvey.id,
            name: data.followUpName,
            trigger: {
                type: data.triggerType,
                properties: getProperties()
            },
            action: {
                type: "send-email",
                properties: {
                    to: data.emailTo,
                    from: mailFrom,
                    replyTo: data.replyTo,
                    subject: data.subject,
                    body: sanitizedBody
                }
            }
        };
        dist/* default */.Ay.success("Survey follow up created successfully");
        setOpen(false);
        form.reset();
        setLocalSurvey((prev)=>{
            return {
                ...prev,
                followUps: [
                    ...prev.followUps,
                    newFollowUp
                ]
            };
        });
    };
    (0,react.useEffect)(()=>{
        if (!open) {
            setFirstRender(true); // Reset when the modal is closed
        }
    }, [
        open
    ]);
    (0,react.useEffect)(()=>{
        let timeoutId;
        if (open && containerRef.current) {
            timeoutId = setTimeout(()=>{
                if (!containerRef.current) return;
                const scrollTop = containerRef.current.scrollTop;
                if (scrollTop > 0) {
                    containerRef.current.scrollTo(0, 0);
                }
            }, 0);
        }
        // Clear the timeout when the effect is cleaned up or when open changes
        return ()=>{
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
        };
    }, [
        open,
        firstRender
    ]);
    (0,react.useEffect)(()=>{
        if (open && defaultValues) {
            form.reset({
                followUpName: defaultValues?.followUpName ?? "",
                triggerType: defaultValues?.triggerType ?? "response",
                endingIds: defaultValues?.endingIds || null,
                emailTo: defaultValues?.emailTo ?? emailSendToOptions[0]?.id,
                replyTo: defaultValues?.replyTo ?? [
                    userEmail
                ],
                subject: defaultValues?.subject ?? "Thanks for your answers!",
                body: defaultValues?.body ?? getSurveyFollowUpActionDefaultBody(t)
            });
        }
    }, [
        open,
        defaultValues,
        emailSendToOptions,
        form,
        userEmail,
        locale
    ]);
    const handleModalClose = ()=>{
        form.reset();
        setOpen(false);
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(modal/* Modal */.a, {
        open: open,
        setOpen: handleModalClose,
        noPadding: true,
        size: "md",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "flex h-full flex-col rounded-lg",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "rounded-t-lg bg-slate-100",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "flex w-full items-center justify-between p-6",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "flex items-center space-x-2",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "mr-1.5 h-6 w-6 text-slate-500",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(mail/* default */.A, {
                                        className: "h-5 w-5"
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                            className: "text-xl font-medium text-slate-700",
                                            children: mode === "edit" ? t("environments.surveys.edit.follow_ups_modal_edit_heading") : t("environments.surveys.edit.follow_ups_modal_create_heading")
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                            className: "text-sm text-slate-500",
                                            children: t("environments.surveys.edit.follow_ups_modal_subheading")
                                        })
                                    ]
                                })
                            ]
                        })
                    })
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormProvider */.Op, {
                ...form,
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
                    onSubmit: form.handleSubmit(handleSubmit),
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "mb-12 h-full max-h-[600px] overflow-auto px-6 py-4",
                            ref: containerRef,
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex flex-col space-y-4",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        className: "flex flex-col space-y-2",
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormField */.zB, {
                                            control: form.control,
                                            name: "followUpName",
                                            render: ({ field })=>{
                                                return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_form/* FormItem */.eI, {
                                                    children: [
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_form/* FormLabel */.lR, {
                                                            htmlFor: "follow-up-name",
                                                            children: [
                                                                t("environments.surveys.edit.follow_ups_modal_name_label"),
                                                                ":"
                                                            ]
                                                        }),
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormControl */.MJ, {
                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                                ...field,
                                                                type: "text",
                                                                className: "max-w-80",
                                                                isInvalid: !!formErrors.followUpName,
                                                                placeholder: t("environments.surveys.edit.follow_ups_modal_name_placeholder")
                                                            })
                                                        })
                                                    ]
                                                });
                                            }
                                        })
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "flex flex-col rounded-lg border border-slate-300",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "flex items-center gap-x-2 rounded-t-lg border-b border-slate-300 bg-slate-100 px-4 py-2",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                        className: "rounded-full border border-slate-300 bg-white p-1",
                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Zap, {
                                                            className: "h-3 w-3 text-slate-500"
                                                        })
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h2", {
                                                        className: "text-md font-semibold text-slate-900",
                                                        children: t("environments.surveys.edit.follow_ups_modal_trigger_label")
                                                    })
                                                ]
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "flex flex-col gap-4 p-4",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormField */.zB, {
                                                        control: form.control,
                                                        name: "triggerType",
                                                        render: ({ field })=>{
                                                            return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormItem */.eI, {
                                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                    className: "flex flex-col space-y-2",
                                                                    children: [
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormLabel */.lR, {
                                                                            htmlFor: "triggerType",
                                                                            children: t("environments.surveys.edit.follow_ups_modal_trigger_description")
                                                                        }),
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                            className: "max-w-80",
                                                                            children: [
                                                                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_select/* Select */.l6, {
                                                                                    defaultValue: field.value,
                                                                                    onValueChange: (value)=>field.onChange(value),
                                                                                    children: [
                                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectTrigger */.bq, {
                                                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectValue */.yv, {})
                                                                                        }),
                                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_select/* SelectContent */.gC, {
                                                                                            children: [
                                                                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectItem */.eb, {
                                                                                                    value: "response",
                                                                                                    children: t("environments.surveys.edit.follow_ups_modal_trigger_type_response")
                                                                                                }),
                                                                                                localSurvey.endings.length > 0 ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectItem */.eb, {
                                                                                                    value: "endings",
                                                                                                    children: t("environments.surveys.edit.follow_ups_modal_trigger_type_ending")
                                                                                                }) : null
                                                                                            ]
                                                                                        })
                                                                                    ]
                                                                                }),
                                                                                triggerType === "endings" && !localSurvey.endings.length ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                                    className: "mt-4 flex items-start text-yellow-600",
                                                                                    children: [
                                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(triangle_alert/* default */.A, {
                                                                                            className: "mr-2 h-5 min-h-5 w-5 min-w-5",
                                                                                            "aria-hidden": "true"
                                                                                        }),
                                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                                                            className: "text-sm",
                                                                                            children: t("environments.surveys.edit.follow_ups_modal_trigger_type_ending_warning")
                                                                                        })
                                                                                    ]
                                                                                }) : null
                                                                            ]
                                                                        })
                                                                    ]
                                                                })
                                                            });
                                                        }
                                                    }),
                                                    localSurvey.endings.length > 0 && triggerType === "endings" ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormField */.zB, {
                                                        control: form.control,
                                                        name: "endingIds",
                                                        render: ({ field })=>{
                                                            return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                className: "flex flex-col space-y-2",
                                                                children: [
                                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h3", {
                                                                        className: "text-sm font-medium text-slate-700",
                                                                        children: t("environments.surveys.edit.follow_ups_modal_trigger_type_ending_select")
                                                                    }),
                                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                        className: "flex flex-col space-y-2",
                                                                        children: [
                                                                            localSurvey.endings.map((ending)=>{
                                                                                const getEndingLabel = ()=>{
                                                                                    if (ending.type === "endScreen") {
                                                                                        return (0,utils/* getLocalizedValue */.bT)(ending.headline, selectedLanguageCode) || "Ending";
                                                                                    }
                                                                                    return ending.label || ending.url || "Ending";
                                                                                };
                                                                                return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                                                    className: "w-80 cursor-pointer rounded-md border border-slate-300 bg-slate-50 px-3 py-2 hover:bg-slate-100",
                                                                                    htmlFor: `ending-${ending.id}`,
                                                                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                                        className: "flex items-center space-x-2",
                                                                                        children: [
                                                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_checkbox/* Checkbox */.S, {
                                                                                                className: "inline",
                                                                                                checked: field.value?.includes(ending.id),
                                                                                                id: `ending-${ending.id}`,
                                                                                                onCheckedChange: (checked)=>{
                                                                                                    if (checked) {
                                                                                                        form.setValue("endingIds", [
                                                                                                            ...field.value ?? [],
                                                                                                            ending.id
                                                                                                        ]);
                                                                                                    } else {
                                                                                                        form.setValue("endingIds", (field.value ?? []).filter((id)=>id !== ending.id));
                                                                                                    }
                                                                                                }
                                                                                            }),
                                                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Handshake, {
                                                                                                className: "h-4 min-h-4 w-4 min-w-4"
                                                                                            }),
                                                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                                                                className: "overflow-hidden text-ellipsis whitespace-nowrap text-slate-900",
                                                                                                children: getEndingLabel()
                                                                                            })
                                                                                        ]
                                                                                    })
                                                                                }, ending.id);
                                                                            }),
                                                                            formErrors.endingIds ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                                                className: "mt-2",
                                                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                                                    className: "text-red-500",
                                                                                    children: formErrors.endingIds.message
                                                                                })
                                                                            }) : null
                                                                        ]
                                                                    })
                                                                ]
                                                            });
                                                        }
                                                    }) : null
                                                ]
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        className: "flex items-center justify-center",
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(arrow_down/* default */.A, {
                                            className: "h-4 w-4 text-slate-500"
                                        })
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "flex flex-col rounded-lg border border-slate-300",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "flex items-center gap-x-2 rounded-t-lg border-b border-slate-300 bg-slate-100 px-4 py-2",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                        className: "rounded-full border border-slate-300 bg-white p-1",
                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(mail/* default */.A, {
                                                            className: "h-3 w-3 text-slate-500"
                                                        })
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h2", {
                                                        className: "text-md font-semibold text-slate-900",
                                                        children: t("environments.surveys.edit.follow_ups_modal_action_label")
                                                    })
                                                ]
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "flex flex-col gap-y-4 p-4",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h2", {
                                                        className: "text-md font-semibold text-slate-900",
                                                        children: t("environments.surveys.edit.follow_ups_modal_action_email_settings")
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                        className: "flex flex-col space-y-2",
                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormField */.zB, {
                                                            control: form.control,
                                                            name: "emailTo",
                                                            render: ({ field })=>{
                                                                return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                    className: "flex flex-col space-y-2",
                                                                    children: [
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormLabel */.lR, {
                                                                            htmlFor: "emailTo",
                                                                            className: "font-medium",
                                                                            children: t("environments.surveys.edit.follow_ups_modal_action_to_label")
                                                                        }),
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormDescription */.Rr, {
                                                                            className: (0,lib_utils.cn)("text-sm", formErrors.emailTo ? "text-red-500" : "text-slate-500"),
                                                                            children: t("environments.surveys.edit.follow_ups_modal_action_to_description")
                                                                        }),
                                                                        emailSendToOptions.length === 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                            className: "mt-4 flex items-start text-yellow-600",
                                                                            children: [
                                                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(triangle_alert/* default */.A, {
                                                                                    className: "mr-2 h-5 min-h-5 w-5 min-w-5",
                                                                                    "aria-hidden": "true"
                                                                                }),
                                                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                                                    className: "text-sm",
                                                                                    children: t("environments.surveys.edit.follow_ups_modal_action_to_warning")
                                                                                })
                                                                            ]
                                                                        }),
                                                                        emailSendToOptions.length > 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                                            className: "max-w-80",
                                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormControl */.MJ, {
                                                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_select/* Select */.l6, {
                                                                                    defaultValue: field.value,
                                                                                    onValueChange: (value)=>{
                                                                                        const selectedOption = emailSendToOptions.find((option)=>option.id === value);
                                                                                        if (!selectedOption) return;
                                                                                        field.onChange(selectedOption.id);
                                                                                    },
                                                                                    children: [
                                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectTrigger */.bq, {
                                                                                            className: "overflow-hidden text-ellipsis whitespace-nowrap",
                                                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectValue */.yv, {})
                                                                                        }),
                                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectContent */.gC, {
                                                                                            children: emailSendToOptions.map((option)=>{
                                                                                                return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectItem */.eb, {
                                                                                                    value: option.id,
                                                                                                    children: option.type !== "hiddenField" ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                                                        className: "flex items-center space-x-2",
                                                                                                        children: [
                                                                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                                                                                className: "h-4 w-4",
                                                                                                                children: QUESTIONS_ICON_MAP[option.type === "openTextQuestion" ? "openText" : "contactInfo"]
                                                                                                            }),
                                                                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                                                                                className: "overflow-hidden text-ellipsis whitespace-nowrap",
                                                                                                                children: option.label
                                                                                                            })
                                                                                                        ]
                                                                                                    }) : /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                                                        className: "flex items-center space-x-2",
                                                                                                        children: [
                                                                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(eye_off/* default */.A, {
                                                                                                                className: "h-4 w-4"
                                                                                                            }),
                                                                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                                                                                children: option.label
                                                                                                            })
                                                                                                        ]
                                                                                                    })
                                                                                                }, option.id);
                                                                                            })
                                                                                        })
                                                                                    ]
                                                                                })
                                                                            })
                                                                        })
                                                                    ]
                                                                });
                                                            }
                                                        })
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                        className: "flex flex-col space-y-2",
                                                        children: [
                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h3", {
                                                                className: "text-sm font-medium text-slate-900",
                                                                children: t("environments.surveys.edit.follow_ups_modal_action_from_label")
                                                            }),
                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                                className: "text-sm text-slate-500",
                                                                children: t("environments.surveys.edit.follow_ups_modal_action_from_description")
                                                            }),
                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                                className: "w-fit rounded-md border border-slate-200 bg-slate-100 px-2 py-1",
                                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                                    className: "text-sm text-slate-900",
                                                                    children: mailFrom
                                                                })
                                                            })
                                                        ]
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                        className: "flex flex-col space-y-2",
                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormField */.zB, {
                                                            control: form.control,
                                                            name: "replyTo",
                                                            render: ({ field })=>{
                                                                return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_form/* FormItem */.eI, {
                                                                    children: [
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormLabel */.lR, {
                                                                            htmlFor: "replyTo",
                                                                            children: t("environments.surveys.edit.follow_ups_modal_action_replyTo_label")
                                                                        }),
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormDescription */.Rr, {
                                                                            className: "text-sm text-slate-500",
                                                                            children: t("environments.surveys.edit.follow_ups_modal_action_replyTo_description")
                                                                        }),
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormControl */.MJ, {
                                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(follow_up_action_multi_email_input, {
                                                                                emails: field.value,
                                                                                setEmails: field.onChange,
                                                                                isInvalid: !!formErrors.replyTo
                                                                            })
                                                                        })
                                                                    ]
                                                                });
                                                            }
                                                        })
                                                    })
                                                ]
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "flex flex-col space-y-4 p-4",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h2", {
                                                        className: "text-md font-semibold text-slate-900",
                                                        children: t("environments.surveys.edit.follow_ups_modal_action_email_content")
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormField */.zB, {
                                                        control: form.control,
                                                        name: "subject",
                                                        render: ({ field })=>{
                                                            return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormItem */.eI, {
                                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                    className: "flex flex-col space-y-2",
                                                                    children: [
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormLabel */.lR, {
                                                                            children: t("environments.surveys.edit.follow_ups_modal_action_subject_label")
                                                                        }),
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormControl */.MJ, {
                                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                                                ...field,
                                                                                className: "max-w-80",
                                                                                placeholder: t("environments.surveys.edit.follow_ups_modal_action_subject_placeholder"),
                                                                                isInvalid: !!formErrors.subject
                                                                            })
                                                                        })
                                                                    ]
                                                                })
                                                            });
                                                        }
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormField */.zB, {
                                                        control: form.control,
                                                        name: "body",
                                                        render: ({ field })=>{
                                                            return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormItem */.eI, {
                                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                    className: "flex flex-col space-y-2",
                                                                    children: [
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormLabel */.lR, {
                                                                            className: (0,lib_utils.cn)("font-medium", formErrors.body ? "text-red-500" : "text-slate-700"),
                                                                            children: t("environments.surveys.edit.follow_ups_modal_action_body_label")
                                                                        }),
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormControl */.MJ, {
                                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Editor, {
                                                                                disableLists: true,
                                                                                excludedToolbarItems: [
                                                                                    "blockType"
                                                                                ],
                                                                                getText: ()=>field.value,
                                                                                setText: (v)=>{
                                                                                    field.onChange(v);
                                                                                },
                                                                                firstRender: firstRender,
                                                                                setFirstRender: setFirstRender,
                                                                                placeholder: t("environments.surveys.edit.follow_ups_modal_action_body_placeholder"),
                                                                                onEmptyChange: (isEmpty)=>{
                                                                                    if (isEmpty) {
                                                                                        if (!formErrors.body) {
                                                                                            form.setError("body", {
                                                                                                type: "manual",
                                                                                                message: "Body is required"
                                                                                            });
                                                                                        }
                                                                                    } else {
                                                                                        if (formErrors.body) {
                                                                                            form.clearErrors("body");
                                                                                        }
                                                                                    }
                                                                                },
                                                                                isInvalid: !!formErrors.body
                                                                            })
                                                                        }),
                                                                        formErrors.body ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                                                className: "text-sm text-red-500",
                                                                                children: formErrors.body.message
                                                                            })
                                                                        }) : null
                                                                    ]
                                                                })
                                                            });
                                                        }
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "absolute bottom-0 right-0 z-20 h-12 w-full bg-white p-2",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex justify-end space-x-2",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                        type: "button",
                                        variant: "ghost",
                                        size: "sm",
                                        onClick: ()=>{
                                            setOpen(false);
                                            form.reset();
                                        },
                                        children: t("common.cancel")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                        loading: formSubmitting,
                                        size: "sm",
                                        children: t("common.save")
                                    })
                                ]
                            })
                        })
                    ]
                })
            })
        ]
    });
};

// EXTERNAL MODULE: ./modules/ui/components/badge/index.tsx
var badge = __webpack_require__(661989);
// EXTERNAL MODULE: ./modules/ui/components/confirmation-modal/index.tsx
var confirmation_modal = __webpack_require__(12199);
// EXTERNAL MODULE: ./modules/ui/components/tooltip/index.tsx
var tooltip = __webpack_require__(163701);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/trash.js
var trash = __webpack_require__(721964);
;// ./modules/survey-follow-ups/components/follow-up-item.tsx
/* __next_internal_client_entry_do_not_use__ FollowUpItem auto */ 









const FollowUpItem = ({ followUp, localSurvey, mailFrom, selectedLanguageCode, userEmail, setLocalSurvey, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [editFollowUpModalOpen, setEditFollowUpModalOpen] = (0,react.useState)(false);
    const [deleteFollowUpModalOpen, setDeleteFollowUpModalOpen] = (0,react.useState)(false);
    const isEmailToInvalid = (0,react.useMemo)(()=>{
        const { to } = followUp.action.properties;
        if (!to) return true;
        const matchedQuestion = localSurvey.questions.find((question)=>question.id === to);
        const matchedHiddenField = (localSurvey.hiddenFields?.fieldIds ?? []).find((fieldId)=>fieldId === to);
        if (!matchedQuestion && !matchedHiddenField) return true;
        if (matchedQuestion) {
            if (![
                types/* TSurveyQuestionTypeEnum */.wn.OpenText,
                types/* TSurveyQuestionTypeEnum */.wn.ContactInfo
            ].includes(matchedQuestion.type)) {
                return true;
            }
            if (matchedQuestion.type === types/* TSurveyQuestionTypeEnum */.wn.OpenText && matchedQuestion.inputType !== "email") {
                return true;
            }
        }
        return false;
    }, [
        followUp.action.properties,
        localSurvey.hiddenFields?.fieldIds,
        localSurvey.questions
    ]);
    const isEndingInvalid = (0,react.useMemo)(()=>{
        return followUp.trigger.type === "endings" && !followUp.trigger.properties?.endingIds?.length;
    }, [
        followUp.trigger.properties?.endingIds?.length,
        followUp.trigger.type
    ]);
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "relative cursor-pointer rounded-lg border border-slate-300 bg-white p-4 hover:bg-slate-50",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex flex-col space-y-2",
                        onClick: ()=>{
                            setEditFollowUpModalOpen(true);
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h3", {
                                className: "text-slate-900",
                                children: followUp.name
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex space-x-2",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(badge/* Badge */.E, {
                                        size: "normal",
                                        type: "gray",
                                        text: followUp.trigger.type === "response" ? t("environments.surveys.edit.follow_ups_item_response_tag") : t("environments.surveys.edit.follow_ups_item_ending_tag")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(badge/* Badge */.E, {
                                        size: "normal",
                                        type: "gray",
                                        text: t("environments.surveys.edit.follow_ups_item_send_email_tag")
                                    }),
                                    isEmailToInvalid || isEndingInvalid ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(badge/* Badge */.E, {
                                        size: "normal",
                                        type: "warning",
                                        text: t("environments.surveys.edit.follow_ups_item_issue_detected_tag")
                                    }) : null
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "absolute right-4 top-4",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                            tooltipContent: t("common.delete"),
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                variant: "ghost",
                                size: "icon",
                                onClick: async (e)=>{
                                    e.stopPropagation();
                                    setDeleteFollowUpModalOpen(true);
                                },
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash/* default */.A, {
                                    className: "h-4 w-4 text-slate-500"
                                })
                            })
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(FollowUpModal, {
                localSurvey: localSurvey,
                setLocalSurvey: setLocalSurvey,
                open: editFollowUpModalOpen,
                setOpen: setEditFollowUpModalOpen,
                mailFrom: mailFrom,
                selectedLanguageCode: selectedLanguageCode,
                defaultValues: {
                    surveyFollowUpId: followUp.id,
                    followUpName: followUp.name,
                    triggerType: followUp.trigger.type,
                    endingIds: followUp.trigger.type === "endings" ? followUp.trigger.properties?.endingIds : null,
                    subject: followUp.action.properties.subject,
                    body: followUp.action.properties.body,
                    emailTo: followUp.action.properties.to,
                    replyTo: followUp.action.properties.replyTo
                },
                mode: "edit",
                userEmail: userEmail,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(confirmation_modal/* ConfirmationModal */.R, {
                open: deleteFollowUpModalOpen,
                setOpen: setDeleteFollowUpModalOpen,
                buttonText: t("common.delete"),
                onConfirm: async ()=>{
                    setLocalSurvey((prev)=>{
                        return {
                            ...prev,
                            followUps: prev.followUps.map((f)=>{
                                if (f.id === followUp.id) {
                                    return {
                                        ...f,
                                        deleted: true
                                    };
                                }
                                return f;
                            })
                        };
                    });
                },
                text: t("environments.surveys.edit.follow_ups_delete_modal_text"),
                title: t("environments.surveys.edit.follow_ups_delete_modal_title"),
                buttonVariant: "destructive"
            })
        ]
    });
};

;// ../../node_modules/lucide-react/dist/esm/icons/lock.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Lock = (0,createLucideIcon/* default */.A)("Lock", [
    [
        "rect",
        {
            width: "18",
            height: "11",
            x: "3",
            y: "11",
            rx: "2",
            ry: "2",
            key: "1w4ew1"
        }
    ],
    [
        "path",
        {
            d: "M7 11V7a5 5 0 0 1 10 0v4",
            key: "fwvmzm"
        }
    ]
]);
 //# sourceMappingURL=lock.js.map

;// ./modules/survey-follow-ups/components/follow-ups-view.tsx
/* __next_internal_client_entry_do_not_use__ FollowUpsView auto */ 






const FollowUpsView = ({ localSurvey, setLocalSurvey, selectedLanguageCode, mailFrom, isSurveyFollowUpsAllowed, userEmail, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [addFollowUpModalOpen, setAddFollowUpModalOpen] = (0,react.useState)(false);
    const surveyFollowUps = localSurvey.followUps.filter((f)=>!f.deleted);
    if (!isSurveyFollowUpsAllowed) {
        return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
            className: "mt-12 space-y-4 p-5",
            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex flex-col items-center gap-y-4 rounded-xl border border-dashed border-slate-300 bg-white p-6 text-center",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "flex items-center justify-center rounded-full border border-slate-200 bg-slate-100 p-2",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Lock, {
                            className: "h-6 w-6 text-slate-500"
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                className: "text-lg font-semibold text-slate-800",
                                children: t("environments.surveys.edit.follow_ups_empty_heading")
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                className: "text-sm text-slate-500",
                                children: t("environments.surveys.edit.follow_ups_empty_description")
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                        variant: "secondary",
                        size: "sm",
                        onClick: ()=>window.open(`/environments/${localSurvey.environmentId}/settings/billing`, "_blank", "noopener,noreferrer"),
                        children: t("environments.surveys.edit.follow_ups_upgrade_button_text")
                    })
                ]
            })
        });
    }
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "mt-12 space-y-4 p-5",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "flex justify-end",
                children: surveyFollowUps.length ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                    size: "sm",
                    onClick: ()=>setAddFollowUpModalOpen(true),
                    children: [
                        "+ ",
                        t("environments.surveys.edit.follow_ups_new")
                    ]
                }) : null
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                children: !surveyFollowUps.length && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "flex flex-col items-center gap-y-4 rounded-xl border border-dashed border-slate-300 bg-white p-6 text-center",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "flex items-center justify-center rounded-full border border-slate-200 bg-slate-100 p-2",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(mail/* default */.A, {
                                className: "h-6 w-6 text-slate-500"
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "text-lg font-semibold text-slate-800",
                                    children: t("environments.surveys.edit.follow_ups_empty_heading")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "text-sm text-slate-500",
                                    children: t("environments.surveys.edit.follow_ups_empty_description")
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                            className: "w-fit",
                            size: "sm",
                            onClick: ()=>setAddFollowUpModalOpen(true),
                            children: t("environments.surveys.edit.follow_ups_new")
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "flex flex-col space-y-2",
                children: surveyFollowUps.map((followUp)=>{
                    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(FollowUpItem, {
                        followUp: followUp,
                        localSurvey: localSurvey,
                        setLocalSurvey: setLocalSurvey,
                        selectedLanguageCode: selectedLanguageCode,
                        mailFrom: mailFrom,
                        userEmail: userEmail,
                        locale: locale
                    }, followUp.id);
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(FollowUpModal, {
                localSurvey: localSurvey,
                setLocalSurvey: setLocalSurvey,
                open: addFollowUpModalOpen,
                setOpen: setAddFollowUpModalOpen,
                selectedLanguageCode: selectedLanguageCode,
                mailFrom: mailFrom,
                userEmail: userEmail,
                locale: locale
            })
        ]
    });
};

// EXTERNAL MODULE: ./modules/ui/components/preview-survey/index.tsx + 3 modules
var preview_survey = __webpack_require__(395781);
// EXTERNAL MODULE: ../../packages/lib/pollyfills/structuredClone.ts
var pollyfills_structuredClone = __webpack_require__(300189);
;// ../../packages/lib/useDocumentVisibility.ts

// This hook will listen to the visibilitychange event and run the provided function whenever the document's visibility state changes to visible
const useDocumentVisibility = (onVisible)=>{
    (0,react.useEffect)(()=>{
        const listener = ()=>{
            if (document.visibilityState === "visible") {
                onVisible();
            }
        };
        document.addEventListener("visibilitychange", listener);
        return ()=>{
            document.removeEventListener("visibilitychange", listener);
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
};

// EXTERNAL MODULE: ../../node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js
var action_client_wrapper = __webpack_require__(308441);
;// ../../node_modules/next/dist/build/webpack/loaders/next-flight-server-reference-proxy-loader.js?id=7fa07c3e18cb2b5dc0bccf1727afd30ba94425974b&name=refetchProjectAction!

const refetchProjectAction = /*#__PURE__*/(0,action_client_wrapper.createServerReference)("7fa07c3e18cb2b5dc0bccf1727afd30ba94425974b", action_client_wrapper.callServer, undefined, action_client_wrapper.findSourceMapURL, "refetchProjectAction")
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/LoadingSkeleton.tsx

const LoadingSkeleton = ()=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "flex h-full w-full flex-col items-center justify-between p-6",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "flex h-[10vh] w-full animate-pulse rounded-lg bg-slate-200 font-medium text-slate-900"
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-4 flex h-[85%] w-full flex-row",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex h-full w-1/2 flex-col justify-between space-y-2",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "ml-4 flex h-full w-1/2 flex-col",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "ph-no-capture h-full animate-pulse rounded-lg bg-slate-200"
                        })
                    })
                ]
            })
        ]
    });

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/plus.js
var plus = __webpack_require__(108996);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/AddEndingCardButton.tsx
/* __next_internal_client_entry_do_not_use__ AddEndingCardButton auto */ 


const AddEndingCardButton = ({ localSurvey, addEndingCard })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "group inline-flex rounded-lg border border-slate-300 bg-slate-50 hover:cursor-pointer hover:bg-white",
        onClick: ()=>addEndingCard(localSurvey.endings.length),
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "flex w-10 items-center justify-center rounded-l-lg bg-slate-400 transition-all duration-300 ease-in-out group-hover:bg-slate-500 group-aria-expanded:rounded-bl-none group-aria-expanded:rounded-br",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                    className: "h-6 w-6 text-white"
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "px-4 py-3 text-sm",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                    className: "font-semibold",
                    children: t("environments.surveys.edit.add_ending")
                })
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/@formkit/auto-animate/react/index.mjs + 1 modules
var auto_animate_react = __webpack_require__(611569);
// EXTERNAL MODULE: ../../node_modules/@radix-ui/react-collapsible/dist/index.mjs
var react_collapsible_dist = __webpack_require__(302792);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/SurveyVariablesCardItem.tsx
/* __next_internal_client_entry_do_not_use__ SurveyVariablesCardItem auto */ 













const SurveyVariablesCardItem = ({ variable, localSurvey, setLocalSurvey, mode })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const form = (0,index_esm/* useForm */.mN)({
        defaultValues: variable ?? {
            id: (0,cuid2/* createId */.sX)(),
            name: "",
            type: "number",
            value: 0
        },
        mode: "onChange"
    });
    const { errors } = form.formState;
    const isNameError = !!errors.name?.message;
    const variableType = form.watch("type");
    const editSurveyVariable = (0,react.useCallback)((data)=>{
        setLocalSurvey((prevSurvey)=>{
            const updatedVariables = prevSurvey.variables.map((v)=>v.id === data.id ? data : v);
            return {
                ...prevSurvey,
                variables: updatedVariables
            };
        });
    }, [
        setLocalSurvey
    ]);
    const createSurveyVariable = (data)=>{
        setLocalSurvey({
            ...localSurvey,
            variables: [
                ...localSurvey.variables,
                data
            ]
        });
        form.reset({
            id: (0,cuid2/* createId */.sX)(),
            name: "",
            type: "number",
            value: 0
        });
    };
    (0,react.useEffect)(()=>{
        if (mode === "create") {
            return;
        }
        const subscription = form.watch(()=>form.handleSubmit(editSurveyVariable)());
        return ()=>subscription.unsubscribe();
    }, [
        form,
        mode,
        editSurveyVariable
    ]);
    const onVariableDelete = (variable)=>{
        const questions = [
            ...localSurvey.questions
        ];
        const quesIdx = findVariableUsedInLogic(localSurvey, variable.id);
        if (quesIdx !== -1) {
            dist/* default */.Ay.error(t("environments.surveys.edit.variable_is_used_in_logic_of_question_please_remove_it_from_logic_first", {
                variable: variable.name,
                questionIndex: quesIdx + 1
            }));
            return;
        }
        // find if this variable is used in any question's recall and remove it for every language
        questions.forEach((question)=>{
            for (const [languageCode, headline] of Object.entries(question.headline)){
                if (headline.includes(`recall:${variable.id}`)) {
                    const recallInfo = (0,recall/* extractRecallInfo */.LW)(headline);
                    if (recallInfo) {
                        question.headline[languageCode] = headline.replace(recallInfo, "");
                    }
                }
            }
        });
        setLocalSurvey((prevSurvey)=>{
            const updatedVariables = prevSurvey.variables.filter((v)=>v.id !== variable.id);
            return {
                ...prevSurvey,
                variables: updatedVariables,
                questions
            };
        });
    };
    if (mode === "edit" && !variable) {
        return null;
    }
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormProvider */.Op, {
            ...form,
            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
                className: "mt-5",
                onSubmit: form.handleSubmit((data)=>{
                    if (mode === "create") {
                        createSurveyVariable(data);
                    } else {
                        editSurveyVariable(data);
                    }
                }),
                children: [
                    mode === "create" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                        htmlFor: "headline",
                        children: t("environments.surveys.edit.add_variable")
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "mt-2 flex w-full items-center gap-2",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormField */.zB, {
                                control: form.control,
                                name: "name",
                                rules: {
                                    pattern: {
                                        value: /^[a-z0-9_]+$/,
                                        message: t("environments.surveys.edit.only_lower_case_letters_numbers_and_underscores_are_allowed")
                                    },
                                    validate: (value)=>{
                                        // if the variable name is already taken
                                        if (mode === "create" && localSurvey.variables.find((variable)=>variable.name === value)) {
                                            return t("environments.surveys.edit.variable_name_is_already_taken_please_choose_another");
                                        }
                                        if (mode === "edit" && variable && variable.name !== value) {
                                            if (localSurvey.variables.find((variable)=>variable.name === value)) {
                                                return t("environments.surveys.edit.variable_name_is_already_taken_please_choose_another");
                                            }
                                        }
                                        // if it does not start with a letter
                                        if (!/^[a-z]/.test(value)) {
                                            return t("environments.surveys.edit.variable_name_must_start_with_a_letter");
                                        }
                                    }
                                },
                                render: ({ field })=>/*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormItem */.eI, {
                                        className: "flex-1",
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormControl */.MJ, {
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                ...field,
                                                isInvalid: isNameError,
                                                type: "text",
                                                placeholder: t("environments.surveys.edit.field_name_eg_score_price")
                                            })
                                        })
                                    })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormField */.zB, {
                                control: form.control,
                                name: "type",
                                render: ({ field })=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_select/* Select */.l6, {
                                        ...field,
                                        onValueChange: (value)=>{
                                            form.setValue("value", value === "number" ? 0 : "");
                                            field.onChange(value);
                                        },
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectTrigger */.bq, {
                                                className: "w-24",
                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectValue */.yv, {
                                                    placeholder: t("environments.surveys.edit.select_type"),
                                                    className: "text-sm"
                                                })
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_select/* SelectContent */.gC, {
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectItem */.eb, {
                                                        value: "number",
                                                        children: t("common.number")
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectItem */.eb, {
                                                        value: "text",
                                                        children: t("common.text")
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                className: "text-slate-600",
                                children: "="
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormField */.zB, {
                                control: form.control,
                                name: "value",
                                render: ({ field })=>/*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormItem */.eI, {
                                        className: "flex-1",
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormControl */.MJ, {
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                ...field,
                                                onChange: (e)=>{
                                                    field.onChange(variableType === "number" ? Number(e.target.value) : e.target.value);
                                                },
                                                placeholder: t("environments.surveys.edit.initial_value"),
                                                type: variableType === "number" ? "number" : "text"
                                            })
                                        })
                                    })
                            }),
                            mode === "create" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                variant: "secondary",
                                type: "submit",
                                className: "h-10 whitespace-nowrap",
                                children: t("environments.surveys.edit.add_variable")
                            }),
                            mode === "edit" && variable && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                variant: "ghost",
                                type: "button",
                                size: "sm",
                                className: "whitespace-nowrap",
                                onClick: ()=>onVariableDelete(variable),
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash/* default */.A, {
                                    className: "h-4 w-4"
                                })
                            })
                        ]
                    }),
                    isNameError && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                        className: "mt-1 text-sm text-red-500",
                        children: errors.name?.message
                    })
                ]
            })
        })
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/SurveyVariablesCard.tsx
/* __next_internal_client_entry_do_not_use__ SurveyVariablesCard auto */ 






const variablesCardId = `fb-variables-${Date.now()}`;
const SurveyVariablesCard = ({ localSurvey, setLocalSurvey, activeQuestionId, setActiveQuestionId })=>{
    const open = activeQuestionId === variablesCardId;
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    const setOpenState = (state)=>{
        if (state) {
            setActiveQuestionId(variablesCardId);
        } else {
            setActiveQuestionId(null);
        }
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: (0,lib_cn.cn)(open ? "shadow-lg" : "shadow-md", "group z-10 flex flex-row rounded-lg bg-white"),
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: (0,lib_cn.cn)(open ? "bg-slate-50" : "bg-white group-hover:bg-slate-50", "flex w-10 items-center justify-center rounded-l-lg border-b border-l border-t group-aria-expanded:rounded-bl-none"),
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "flex w-full justify-center",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(file_digit/* default */.A, {
                        className: "h-4 w-4"
                    })
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
                open: open,
                onOpenChange: setOpenState,
                className: "flex-1 rounded-r-lg border border-slate-200 transition-all duration-300 ease-in-out",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                        asChild: true,
                        className: "flex cursor-pointer justify-between rounded-r-lg p-4 hover:bg-slate-50",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "inline-flex",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                        className: "text-sm font-semibold",
                                        children: t("common.variables")
                                    })
                                })
                            })
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                        className: `flex flex-col px-4 ${open && "pb-6"}`,
                        ref: parent,
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "flex flex-col gap-2",
                                ref: parent,
                                children: localSurvey.variables.length > 0 ? localSurvey.variables.map((variable)=>/*#__PURE__*/ (0,react_jsx_runtime.jsx)(SurveyVariablesCardItem, {
                                        mode: "edit",
                                        variable: variable,
                                        localSurvey: localSurvey,
                                        setLocalSurvey: setLocalSurvey
                                    }, variable.id)) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "mt-2 text-sm italic text-slate-500",
                                    children: t("environments.surveys.edit.no_variables_yet_add_first_one_below")
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SurveyVariablesCardItem, {
                                mode: "create",
                                localSurvey: localSurvey,
                                setLocalSurvey: setLocalSurvey
                            })
                        ]
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ./app/lib/templates.ts
var templates = __webpack_require__(893902);
// EXTERNAL MODULE: ./modules/ui/components/advanced-option-toggle/index.tsx
var advanced_option_toggle = __webpack_require__(115713);
// EXTERNAL MODULE: ./modules/ui/components/switch/index.tsx
var components_switch = __webpack_require__(493204);
// EXTERNAL MODULE: ./modules/ui/components/upgrade-prompt/index.tsx
var upgrade_prompt = __webpack_require__(530519);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/languages.js
var languages = __webpack_require__(185861);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/arrow-up-right.js
var arrow_up_right = __webpack_require__(620394);
// EXTERNAL MODULE: ../../node_modules/next/dist/client/app-dir/link.js
var app_dir_link = __webpack_require__(36888);
var link_default = /*#__PURE__*/__webpack_require__.n(app_dir_link);
;// ./modules/ui/components/default-tag/index.tsx
/* __next_internal_client_entry_do_not_use__ DefaultTag auto */ 

const DefaultTag = ()=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
        className: "flex h-6 items-center justify-center rounded-xl bg-slate-200 px-3",
        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
            className: "text-xs",
            children: t("common.default")
        })
    });
};

;// ./modules/ee/multi-language-surveys/components/default-language-select.tsx
/* __next_internal_client_entry_do_not_use__ DefaultLanguageSelect auto */ 




function DefaultLanguageSelect({ defaultLanguage, handleDefaultLanguageChange, project, setConfirmationModalInfo, locale }) {
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "space-y-4",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                className: "text-sm",
                children: [
                    t("environments.surveys.edit.1_choose_the_default_language_for_this_survey"),
                    ":"
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex items-center space-x-4",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "w-48",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_select/* Select */.l6, {
                            defaultValue: `${defaultLanguage?.code}`,
                            disabled: Boolean(defaultLanguage),
                            onValueChange: (languageCode)=>{
                                setConfirmationModalInfo({
                                    open: true,
                                    title: t("environments.surveys.edit.confirm_default_language") + ": " + (0,utils/* getLanguageLabel */.rJ)(languageCode, locale),
                                    text: t("environments.surveys.edit.once_set_the_default_language_for_this_survey_can_only_be_changed_by_disabling_the_multi_language_option_and_deleting_all_translations"),
                                    buttonText: t("common.confirm"),
                                    onConfirm: ()=>{
                                        handleDefaultLanguageChange(languageCode);
                                    },
                                    buttonVariant: "default"
                                });
                            },
                            value: `${defaultLanguage?.code}`,
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectTrigger */.bq, {
                                    className: "xs:w-[180px] xs:text-base w-full px-4 text-xs text-slate-800 dark:border-slate-400 dark:bg-slate-700 dark:text-slate-300",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectValue */.yv, {})
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectContent */.gC, {
                                    children: project.languages.map((language)=>/*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectItem */.eb, {
                                            className: "xs:text-base px-0.5 py-1 text-xs text-slate-800 dark:bg-slate-700 dark:text-slate-300 dark:ring-slate-700",
                                            value: language.code,
                                            children: `${(0,utils/* getLanguageLabel */.rJ)(language.code, locale)} (${language.code})`
                                        }, language.id))
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(DefaultTag, {})
                ]
            })
        ]
    });
}

;// ./modules/ee/multi-language-surveys/components/language-toggle.tsx
/* __next_internal_client_entry_do_not_use__ LanguageToggle auto */ 




function LanguageToggle({ language, isChecked, onToggle, onEdit, locale }) {
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
        className: "flex flex-col space-y-4",
        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
            className: "flex items-center space-x-4",
            children: [
                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                    checked: isChecked,
                    id: `${language.code}-toggle`,
                    onClick: (e)=>{
                        e.stopPropagation();
                        onToggle();
                    }
                }),
                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                    className: "font-medium text-slate-800",
                    htmlFor: `${language.code}-toggle`,
                    children: (0,utils/* getLanguageLabel */.rJ)(language.code, locale)
                }),
                isChecked ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                    className: "cursor-pointer text-xs text-slate-600 underline",
                    onClick: onEdit,
                    children: t("environments.surveys.edit.edit_translations", {
                        lang: (0,utils/* getLanguageLabel */.rJ)(language.code, locale)
                    })
                }) : null
            ]
        })
    });
}

;// ./modules/ee/multi-language-surveys/components/secondary-language-select.tsx
/* __next_internal_client_entry_do_not_use__ SecondaryLanguageSelect auto */ 


function SecondaryLanguageSelect({ project, defaultLanguage, setSelectedLanguageCode, setActiveQuestionId, localSurvey, updateSurveyLanguages, locale }) {
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const isLanguageToggled = (language)=>{
        return localSurvey.languages.some((surveyLanguage)=>surveyLanguage.language.code === language.code && surveyLanguage.enabled);
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "space-y-4",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                className: "text-sm",
                children: [
                    t("environments.surveys.edit.2_activate_translation_for_specific_languages"),
                    ":"
                ]
            }),
            project.languages.filter((lang)=>lang.id !== defaultLanguage.id).map((language)=>/*#__PURE__*/ (0,react_jsx_runtime.jsx)(LanguageToggle, {
                    isChecked: isLanguageToggled(language),
                    language: language,
                    onEdit: ()=>{
                        setSelectedLanguageCode(language.code);
                        setActiveQuestionId(localSurvey.questions[0]?.id);
                    },
                    onToggle: ()=>{
                        updateSurveyLanguages(language);
                    },
                    locale: locale
                }, language.id))
        ]
    });
}

;// ./modules/ee/multi-language-surveys/components/multi-language-card.tsx
/* __next_internal_client_entry_do_not_use__ MultiLanguageCard auto */ 
















const MultiLanguageCard = ({ activeQuestionId, project, localSurvey, setActiveQuestionId, setLocalSurvey, isMultiLanguageAllowed, isFormbricksCloud, setSelectedLanguageCode, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const environmentId = localSurvey.environmentId;
    const open = activeQuestionId === "multiLanguage";
    const [isMultiLanguageActivated, setIsMultiLanguageActivated] = (0,react.useState)(localSurvey.languages.length > 1);
    const [confirmationModalInfo, setConfirmationModalInfo] = (0,react.useState)({
        title: "",
        open: false,
        text: "",
        buttonText: "",
        onConfirm: ()=>{}
    });
    const defaultLanguage = (0,react.useMemo)(()=>localSurvey.languages.find((language)=>language.default)?.language, [
        localSurvey.languages
    ]);
    const setOpen = (open)=>{
        if (open) {
            setActiveQuestionId("multiLanguage");
        } else {
            setActiveQuestionId(null);
        }
    };
    (0,react.useEffect)(()=>{
        if (localSurvey.languages.length === 0) {
            setIsMultiLanguageActivated(false);
        }
    }, [
        localSurvey.languages
    ]);
    const updateSurveyTranslations = (survey, updatedLanguages)=>{
        const translatedSurveyResult = (0,utils/* addMultiLanguageLabels */.Ci)(survey, (0,utils/* extractLanguageCodes */.OJ)(updatedLanguages));
        const updatedSurvey = {
            ...translatedSurveyResult,
            languages: updatedLanguages
        };
        setLocalSurvey(updatedSurvey);
    };
    const updateSurveyLanguages = (language)=>{
        let updatedLanguages = localSurvey.languages;
        const languageIndex = localSurvey.languages.findIndex((surveyLanguage)=>surveyLanguage.language.code === language.code);
        if (languageIndex >= 0) {
            // Toggle the 'enabled' property of the existing language
            updatedLanguages = updatedLanguages.map((surveyLanguage, index)=>index === languageIndex ? {
                    ...surveyLanguage,
                    enabled: !surveyLanguage.enabled
                } : surveyLanguage);
        } else {
            // Add the new language
            updatedLanguages = [
                ...updatedLanguages,
                {
                    enabled: true,
                    default: false,
                    language
                }
            ];
        }
        updateSurveyTranslations(localSurvey, updatedLanguages);
    };
    const updateSurvey = (data)=>{
        setLocalSurvey({
            ...localSurvey,
            ...data
        });
    };
    const handleDefaultLanguageChange = (languageCode)=>{
        const language = project.languages.find((lang)=>lang.code === languageCode);
        if (language) {
            let languageExists = false;
            // Update all languages and check if the new default language already exists
            const newLanguages = localSurvey.languages.map((lang)=>{
                if (lang.language.code === language.code) {
                    languageExists = true;
                    return {
                        ...lang,
                        default: true
                    };
                }
                return {
                    ...lang,
                    default: false
                };
            }) ?? [];
            if (!languageExists) {
                // If the language doesn't exist, add it as the default
                newLanguages.push({
                    enabled: true,
                    default: true,
                    language
                });
            }
            setConfirmationModalInfo({
                ...confirmationModalInfo,
                open: false
            });
            updateSurvey({
                languages: newLanguages
            });
        }
    };
    const handleActivationSwitchLogic = ()=>{
        if (isMultiLanguageActivated) {
            if (localSurvey.languages.length > 0) {
                setConfirmationModalInfo({
                    open: true,
                    title: t("environments.surveys.edit.remove_translations"),
                    text: t("environments.surveys.edit.this_action_will_remove_all_the_translations_from_this_survey"),
                    buttonText: t("environments.surveys.edit.remove_translations"),
                    buttonVariant: "destructive",
                    onConfirm: ()=>{
                        updateSurveyTranslations(localSurvey, []);
                        setIsMultiLanguageActivated(false);
                        setConfirmationModalInfo({
                            ...confirmationModalInfo,
                            open: false
                        });
                    }
                });
            } else {
                setIsMultiLanguageActivated(false);
            }
        } else {
            setIsMultiLanguageActivated(true);
        }
    };
    const handleLanguageSwitchToggle = ()=>{
        setLocalSurvey({
            ...localSurvey,
            ...{
                showLanguageSwitch: !localSurvey.showLanguageSwitch
            }
        });
    };
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: (0,lib_cn.cn)(open ? "shadow-lg" : "shadow-md", "group z-10 flex flex-row rounded-lg bg-white text-slate-900"),
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: (0,lib_cn.cn)(open ? "bg-slate-50" : "bg-white group-hover:bg-slate-50", "flex w-10 items-center justify-center rounded-l-lg border-b border-l border-t group-aria-expanded:rounded-bl-none"),
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(languages/* default */.A, {
                        className: "h-6 w-6 rounded-full bg-indigo-500 p-1 text-white"
                    })
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
                className: "flex-1 rounded-r-lg border border-slate-200 transition-all duration-300 ease-in-out",
                onOpenChange: setOpen,
                open: open,
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                        asChild: true,
                        className: "flex cursor-pointer justify-between rounded-r-lg p-4 hover:bg-slate-50",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "inline-flex",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                            className: "text-sm font-semibold",
                                            children: t("common.multiple_languages")
                                        })
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    className: "flex items-center space-x-2",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                            htmlFor: "multi-lang-toggle",
                                            children: isMultiLanguageActivated ? t("common.on") : t("common.off")
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                            checked: isMultiLanguageActivated,
                                            disabled: !isMultiLanguageAllowed || project.languages.length === 0,
                                            id: "multi-lang-toggle",
                                            onClick: ()=>{
                                                handleActivationSwitchLogic();
                                            }
                                        })
                                    ]
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                        className: `flex flex-col px-4 ${open && "pb-6"}`,
                        ref: parent,
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "space-y-4",
                            children: [
                                !isMultiLanguageAllowed && !isMultiLanguageActivated ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(upgrade_prompt/* UpgradePrompt */.d, {
                                    title: t("environments.surveys.edit.upgrade_notice_title"),
                                    description: t("environments.surveys.edit.upgrade_notice_description"),
                                    buttons: [
                                        {
                                            text: t("common.start_free_trial"),
                                            href: isFormbricksCloud ? `/environments/${environmentId}/settings/billing` : "https://formbricks.com/docs/self-hosting/license#30-day-trial-license-request"
                                        },
                                        {
                                            text: t("common.learn_more"),
                                            href: isFormbricksCloud ? `/environments/${environmentId}/settings/billing` : "https://formbricks.com/learn-more-self-hosting-license"
                                        }
                                    ]
                                }) : /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                                    children: [
                                        project.languages.length <= 1 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                            className: "mb-4 text-sm italic text-slate-500",
                                            children: project.languages.length === 0 ? t("environments.surveys.edit.no_languages_found_add_first_one_to_get_started") : t("environments.surveys.edit.you_need_to_have_two_or_more_languages_set_up_in_your_project_to_work_with_translations")
                                        }),
                                        project.languages.length > 1 && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            className: "my-4 space-y-4",
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                    children: isMultiLanguageAllowed && !isMultiLanguageActivated ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                        className: "text-sm italic text-slate-500",
                                                        children: t("environments.surveys.edit.switch_multi_lanugage_on_to_get_started")
                                                    }) : null
                                                }),
                                                isMultiLanguageActivated ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                    className: "space-y-4",
                                                    children: [
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(DefaultLanguageSelect, {
                                                            defaultLanguage: defaultLanguage,
                                                            handleDefaultLanguageChange: handleDefaultLanguageChange,
                                                            project: project,
                                                            setConfirmationModalInfo: setConfirmationModalInfo,
                                                            locale: locale
                                                        }),
                                                        defaultLanguage ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SecondaryLanguageSelect, {
                                                            defaultLanguage: defaultLanguage,
                                                            localSurvey: localSurvey,
                                                            project: project,
                                                            setActiveQuestionId: setActiveQuestionId,
                                                            setSelectedLanguageCode: setSelectedLanguageCode,
                                                            updateSurveyLanguages: updateSurveyLanguages,
                                                            locale: locale
                                                        }) : null
                                                    ]
                                                }) : null
                                            ]
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)((link_default()), {
                                            href: `/environments/${environmentId}/project/languages`,
                                            target: "_blank",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                                                className: "mt-2",
                                                size: "sm",
                                                variant: "secondary",
                                                children: [
                                                    t("environments.surveys.edit.manage_languages"),
                                                    " ",
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(arrow_up_right/* default */.A, {
                                                        className: "ml-2 h-4 w-4"
                                                    })
                                                ]
                                            })
                                        }),
                                        isMultiLanguageActivated && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                            customContainerClass: "px-0 pt-2",
                                            htmlId: "languageSwitch",
                                            isChecked: !!localSurvey.showLanguageSwitch,
                                            onToggle: handleLanguageSwitchToggle,
                                            title: t("environments.surveys.edit.show_language_switch"),
                                            description: t("environments.surveys.edit.enable_participants_to_switch_the_survey_language_at_any_point_during_the_survey"),
                                            childBorder: true
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(confirmation_modal/* ConfirmationModal */.R, {
                                    buttonText: confirmationModalInfo.buttonText,
                                    buttonVariant: confirmationModalInfo.buttonVariant,
                                    onConfirm: confirmationModalInfo.onConfirm,
                                    open: confirmationModalInfo.open,
                                    setOpen: ()=>{
                                        setConfirmationModalInfo((prev)=>({
                                                ...prev,
                                                open: !prev.open
                                            }));
                                    },
                                    text: confirmationModalInfo.text,
                                    title: confirmationModalInfo.title
                                })
                            ]
                        })
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/@dnd-kit/core/dist/core.esm.js + 1 modules
var core_esm = __webpack_require__(288187);
// EXTERNAL MODULE: ../../node_modules/@dnd-kit/sortable/dist/sortable.esm.js
var sortable_esm = __webpack_require__(797388);
// EXTERNAL MODULE: ../../packages/types/surveys/validation.ts
var validation = __webpack_require__(683637);
// EXTERNAL MODULE: ../../packages/types/segment.ts
var types_segment = __webpack_require__(528469);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/lib/validation.ts
// extend this object in order to add more validation rules






// Utility function to check if label is valid for all required languages
const isLabelValidForAllLanguages = (label, surveyLanguages)=>{
    const filteredLanguages = surveyLanguages.filter((surveyLanguages)=>{
        return surveyLanguages.enabled;
    });
    const languageCodes = (0,utils/* extractLanguageCodes */.OJ)(filteredLanguages);
    const languages = languageCodes.length === 0 ? [
        "default"
    ] : languageCodes;
    return languages.every((language)=>label && label[language] && label[language].trim() !== "");
};
// Validation logic for multiple choice questions
const handleI18nCheckForMultipleChoice = (question, languages)=>{
    const invalidLangCodes = (0,validation/* findLanguageCodesForDuplicateLabels */.Fs)(question.choices.map((choice)=>choice.label), languages);
    if (invalidLangCodes.length > 0) {
        return false;
    }
    return question.choices.every((choice)=>isLabelValidForAllLanguages(choice.label, languages));
};
const handleI18nCheckForMatrixLabels = (question, languages)=>{
    const rowsAndColumns = [
        ...question.rows,
        ...question.columns
    ];
    const invalidRowsLangCodes = (0,validation/* findLanguageCodesForDuplicateLabels */.Fs)(question.rows, languages);
    const invalidColumnsLangCodes = (0,validation/* findLanguageCodesForDuplicateLabels */.Fs)(question.columns, languages);
    if (invalidRowsLangCodes.length > 0 || invalidColumnsLangCodes.length > 0) {
        return false;
    }
    return rowsAndColumns.every((label)=>isLabelValidForAllLanguages(label, languages));
};
const handleI18nCheckForContactAndAddressFields = (question, languages)=>{
    let fields = [];
    if (question.type === "contactInfo") {
        const { firstName, lastName, phone, email, company } = question;
        fields = [
            firstName,
            lastName,
            phone,
            email,
            company
        ];
    } else if (question.type === "address") {
        const { addressLine1, addressLine2, city, state, zip, country } = question;
        fields = [
            addressLine1,
            addressLine2,
            city,
            state,
            zip,
            country
        ];
    }
    return fields.every((field)=>{
        if (field.show) {
            return isLabelValidForAllLanguages(field.placeholder, languages);
        }
        return true;
    });
};
// Validation rules
const validationRules = {
    openText: (question, languages)=>{
        return question.placeholder && (0,utils/* getLocalizedValue */.bT)(question.placeholder, "default").trim() !== "" && languages.length > 1 ? isLabelValidForAllLanguages(question.placeholder, languages) : true;
    },
    multipleChoiceMulti: (question, languages)=>{
        return handleI18nCheckForMultipleChoice(question, languages);
    },
    multipleChoiceSingle: (question, languages)=>{
        return handleI18nCheckForMultipleChoice(question, languages);
    },
    consent: (question, languages)=>{
        return isLabelValidForAllLanguages(question.label, languages);
    },
    pictureSelection: (question)=>{
        return question.choices.length >= 2;
    },
    cta: (question, languages)=>{
        return !question.required && question.dismissButtonLabel ? isLabelValidForAllLanguages(question.dismissButtonLabel, languages) : true;
    },
    matrix: (question, languages)=>{
        return handleI18nCheckForMatrixLabels(question, languages);
    },
    contactInfo: (question, languages)=>{
        return handleI18nCheckForContactAndAddressFields(question, languages);
    },
    address: (question, languages)=>{
        return handleI18nCheckForContactAndAddressFields(question, languages);
    },
    // Assuming headline is of type TI18nString
    defaultValidation: (question, languages, isFirstQuestion)=>{
        // headline and subheader are default for every question
        const isHeadlineValid = isLabelValidForAllLanguages(question.headline, languages);
        const isSubheaderValid = question.subheader && (0,utils/* getLocalizedValue */.bT)(question.subheader, "default").trim() !== "" && languages.length > 1 ? isLabelValidForAllLanguages(question.subheader, languages) : true;
        let isValid = isHeadlineValid && isSubheaderValid;
        const defaultLanguageCode = "default";
        //question specific fields
        let fieldsToValidate = [
            "html",
            "buttonLabel",
            "upperLabel",
            "backButtonLabel",
            "lowerLabel"
        ];
        // Remove backButtonLabel from validation if it is the first question
        if (isFirstQuestion) {
            fieldsToValidate = fieldsToValidate.filter((field)=>field !== "backButtonLabel");
        }
        for (const field of fieldsToValidate){
            if (question[field] && typeof question[field][defaultLanguageCode] !== "undefined" && question[field][defaultLanguageCode].trim() !== "") {
                isValid = isValid && isLabelValidForAllLanguages(question[field], languages);
            }
        }
        return isValid;
    }
};
// Main validation function
const validateQuestion = (question, surveyLanguages, isFirstQuestion)=>{
    const specificValidation = validationRules[question.type];
    const defaultValidation = validationRules.defaultValidation;
    const specificValidationResult = specificValidation ? specificValidation(question, surveyLanguages) : true;
    const defaultValidationResult = defaultValidation(question, surveyLanguages, isFirstQuestion);
    // Return true only if both specific and default validation pass
    return specificValidationResult && defaultValidationResult;
};
const validateSurveyQuestionsInBatch = (question, invalidQuestions, surveyLanguages, isFirstQuestion)=>{
    if (invalidQuestions === null) {
        return [];
    }
    if (validateQuestion(question, surveyLanguages, isFirstQuestion)) {
        return invalidQuestions.filter((id)=>id !== question.id);
    } else if (!invalidQuestions.includes(question.id)) {
        return [
            ...invalidQuestions,
            question.id
        ];
    }
    return invalidQuestions;
};
const isContentValid = (content, surveyLanguages)=>{
    return !content || isLabelValidForAllLanguages(content, surveyLanguages);
};
const isWelcomeCardValid = (card, surveyLanguages)=>{
    return isContentValid(card.headline, surveyLanguages) && isContentValid(card.html, surveyLanguages);
};
const isEndingCardValid = (card, surveyLanguages)=>{
    if (card.type === "endScreen") {
        const parseResult = lib.z.string().url().safeParse(card.buttonLink);
        if (card.buttonLabel !== undefined && !parseResult.success) {
            return false;
        }
        return isContentValid(card.headline, surveyLanguages) && isContentValid(card.subheader, surveyLanguages) && isContentValid(card.buttonLabel, surveyLanguages);
    } else {
        const parseResult = lib.z.string().url().safeParse(card.url);
        if (parseResult.success) {
            return card.label?.trim() !== "";
        } else {
            return false;
        }
    }
};
const isSurveyValid = (survey, selectedLanguageCode, t)=>{
    const questionWithEmptyFallback = (0,recall/* checkForEmptyFallBackValue */.Yk)(survey, selectedLanguageCode);
    if (questionWithEmptyFallback) {
        dist/* toast */.oR.error(t("environments.surveys.edit.fallback_missing"));
        return false;
    }
    if (survey.type === "app" && survey.segment?.id === "temp") {
        const { filters } = survey.segment;
        const parsedFilters = types_segment/* ZSegmentFilters */.Ji.safeParse(filters);
        if (!parsedFilters.success) {
            const errMsg = parsedFilters.error.issues.find((issue)=>issue.code === "custom")?.message || t("environments.surveys.edit.invalid_targeting");
            dist/* toast */.oR.error(errMsg);
            return;
        }
    }
    return true;
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/AddQuestionButton.tsx
/* __next_internal_client_entry_do_not_use__ AddQuestionButton auto */ 








const AddQuestionButton = ({ addQuestion, project, isCxMode })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [open, setOpen] = (0,react.useState)(false);
    const [hoveredQuestionId, setHoveredQuestionId] = (0,react.useState)(null);
    const availableQuestionTypes = isCxMode ? (0,questions/* getCXQuestionTypes */.di)(t) : (0,questions/* getQuestionTypes */._2)(t);
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
        open: open,
        onOpenChange: setOpen,
        className: (0,lib_cn.cn)(open ? "shadow-lg" : "shadow-md", "group w-full space-y-2 rounded-lg border border-slate-300 bg-white duration-200 hover:cursor-pointer hover:bg-slate-50"),
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                asChild: true,
                className: "group h-full w-full",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "inline-flex",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "bg-brand-dark flex w-10 items-center justify-center rounded-l-lg group-aria-expanded:rounded-bl-none group-aria-expanded:rounded-br",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "h-5 w-5 text-white"
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "px-4 py-3",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "text-sm font-semibold",
                                    children: t("environments.surveys.edit.add_question")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "mt-1 text-xs text-slate-500",
                                    children: t("environments.surveys.edit.add_a_new_question_to_your_survey")
                                })
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                className: "justify-left flex flex-col",
                ref: parent,
                children: availableQuestionTypes.map((questionType)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("button", {
                        type: "button",
                        className: "group relative mx-2 inline-flex items-center justify-between rounded p-0.5 px-4 py-2 text-sm font-medium text-slate-700 last:mb-2 hover:bg-slate-100 hover:text-slate-800",
                        onClick: ()=>{
                            addQuestion({
                                ...questions/* universalQuestionPresets */.qV,
                                ...(0,questions/* getQuestionDefaults */.xu)(questionType.id, project, t),
                                id: (0,cuid2/* createId */.sX)(),
                                type: questionType.id
                            });
                            setOpen(false);
                        },
                        onMouseEnter: ()=>setHoveredQuestionId(questionType.id),
                        onMouseLeave: ()=>setHoveredQuestionId(null),
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex items-center",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(questionType.icon, {
                                        className: "text-brand-dark -ml-0.5 mr-2 h-4 w-4",
                                        "aria-hidden": "true"
                                    }),
                                    questionType.label
                                ]
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: `absolute right-4 text-xs font-light text-slate-500 transition-opacity duration-200 ${hoveredQuestionId === questionType.id ? "opacity-100" : "opacity-0"}`,
                                children: questionType.description
                            })
                        ]
                    }, questionType.id))
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/arrow-up.js
var arrow_up = __webpack_require__(438677);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/copy.js
var copy = __webpack_require__(875677);
;// ../../node_modules/lucide-react/dist/esm/icons/ellipsis.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Ellipsis = (0,createLucideIcon/* default */.A)("Ellipsis", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "1",
            key: "41hilf"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "12",
            r: "1",
            key: "1wjl8i"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "12",
            r: "1",
            key: "1pcz8c"
        }
    ]
]);
 //# sourceMappingURL=ellipsis.js.map

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/EditorCardMenu.tsx
/* __next_internal_client_entry_do_not_use__ EditorCardMenu auto */ 










const EditorCardMenu = ({ survey, cardIdx, lastCard, duplicateCard, deleteCard, moveCard, project, card, updateCard, addCard, cardType, isCxMode = false })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const QUESTIONS_ICON_MAP = (0,questions/* getQuestionIconMap */.Ax)(t);
    const [logicWarningModal, setLogicWarningModal] = (0,react.useState)(false);
    const [changeToType, setChangeToType] = (0,react.useState)(()=>{
        if (card.type !== "endScreen" && card.type !== "redirectToUrl") {
            return card.type;
        }
        return undefined;
    });
    const isDeleteDisabled = cardType === "question" ? survey.questions.length === 1 : survey.type === "link" && survey.endings.length === 1;
    const availableQuestionTypes = isCxMode ? (0,questions/* getCXQuestionNameMap */.tb)(t) : (0,questions/* getQuestionNameMap */.iZ)(t);
    const changeQuestionType = (type)=>{
        if (!type) return;
        const { headline, required, subheader, imageUrl, videoUrl, buttonLabel, backButtonLabel } = card;
        const questionDefaults = (0,questions/* getQuestionDefaults */.xu)(type, project, t);
        if (type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle && card.type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti || type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti && card.type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle || type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti && card.type === types/* TSurveyQuestionTypeEnum */.wn.Ranking || type === types/* TSurveyQuestionTypeEnum */.wn.Ranking && card.type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti || type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle && card.type === types/* TSurveyQuestionTypeEnum */.wn.Ranking || type === types/* TSurveyQuestionTypeEnum */.wn.Ranking && card.type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle) {
            updateCard(cardIdx, {
                choices: card.choices,
                type,
                logic: undefined
            });
            return;
        }
        updateCard(cardIdx, {
            ...questionDefaults,
            type,
            headline,
            subheader,
            required,
            imageUrl,
            videoUrl,
            buttonLabel,
            backButtonLabel,
            logic: undefined
        });
    };
    const addQuestionCardBelow = (type)=>{
        const questionDefaults = (0,questions/* getQuestionDefaults */.xu)(type, project, t);
        addCard({
            ...questionDefaults,
            type,
            id: (0,cuid2/* createId */.sX)(),
            required: true
        }, cardIdx + 1);
        const section = document.getElementById(`${card.id}`);
        section?.scrollIntoView({
            behavior: "smooth",
            block: "end",
            inline: "end"
        });
    };
    const addEndingCardBelow = ()=>{
        addCard(cardIdx + 1);
    };
    const onConfirm = ()=>{
        changeQuestionType(changeToType);
        setLogicWarningModal(false);
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "flex",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                tooltipContent: t("common.move_up"),
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                    variant: "ghost",
                    size: "icon",
                    disabled: cardIdx === 0,
                    onClick: (e)=>{
                        if (cardIdx !== 0) {
                            e.stopPropagation();
                            moveCard(cardIdx, true);
                        }
                    },
                    className: "disabled:border-none",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(arrow_up/* default */.A, {})
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                tooltipContent: t("common.move_down"),
                triggerClass: "disabled:border-none",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                    variant: "ghost",
                    size: "icon",
                    disabled: lastCard,
                    onClick: (e)=>{
                        if (!lastCard) {
                            e.stopPropagation();
                            moveCard(cardIdx, false);
                        }
                    },
                    className: "disabled:border-none",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(arrow_down/* default */.A, {})
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                tooltipContent: t("common.duplicate"),
                triggerClass: "disabled:border-none",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                    variant: "ghost",
                    size: "icon",
                    onClick: (e)=>{
                        e.stopPropagation();
                        duplicateCard(cardIdx);
                    },
                    className: "disabled:border-none",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(copy/* default */.A, {})
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                tooltipContent: t("common.delete"),
                triggerClass: "disabled:border-none",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                    variant: "ghost",
                    size: "icon",
                    disabled: isDeleteDisabled,
                    onClick: (e)=>{
                        e.stopPropagation();
                        if (isDeleteDisabled) return;
                        deleteCard(cardIdx);
                    },
                    className: "disabled:border-none",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash/* default */.A, {})
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenu */.rI, {
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuTrigger */.ty, {
                        className: "h-10 w-10 rounded-lg border border-transparent p-2 hover:border-slate-200",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Ellipsis, {
                            className: "mx-auto h-4 w-4 text-slate-700 hover:text-slate-600"
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuContent */.SQ, {
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "flex flex-col",
                            children: [
                                cardType === "question" && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenuSub */.lv, {
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuSubTrigger */.nV, {
                                            className: "cursor-pointer text-sm text-slate-600 hover:text-slate-700",
                                            onClick: (e)=>e.preventDefault(),
                                            children: t("environments.surveys.edit.change_question_type")
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuSubContent */.M5, {
                                            className: "ml-2",
                                            children: Object.entries(availableQuestionTypes).map(([type, name])=>{
                                                if (type === card.type) return null;
                                                return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                                    onClick: ()=>{
                                                        setChangeToType(type);
                                                        if (card.logic) {
                                                            setLogicWarningModal(true);
                                                            return;
                                                        }
                                                        changeQuestionType(type);
                                                    },
                                                    icon: QUESTIONS_ICON_MAP[type],
                                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                        className: "ml-2",
                                                        children: name
                                                    })
                                                }, type);
                                            })
                                        })
                                    ]
                                }),
                                cardType === "ending" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                    className: "min-h-8 justify-between",
                                    onClick: (e)=>{
                                        e.preventDefault();
                                        addEndingCardBelow();
                                    },
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                        className: "text-sm",
                                        children: t("environments.surveys.edit.add_ending_below")
                                    })
                                }),
                                cardType === "question" && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenuSub */.lv, {
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuSubTrigger */.nV, {
                                            className: "cursor-pointer",
                                            onClick: (e)=>e.preventDefault(),
                                            children: t("environments.surveys.edit.add_question_below")
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuSubContent */.M5, {
                                            className: "ml-2",
                                            children: Object.entries(availableQuestionTypes).map(([type, name])=>{
                                                return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenuItem */._2, {
                                                    className: "min-h-8",
                                                    onClick: (e)=>{
                                                        e.stopPropagation();
                                                        if (cardType === "question") {
                                                            addQuestionCardBelow(type);
                                                        }
                                                    },
                                                    children: [
                                                        QUESTIONS_ICON_MAP[type],
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                            className: "ml-2",
                                                            children: name
                                                        })
                                                    ]
                                                }, type);
                                            })
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                    onClick: (e)=>{
                                        if (cardIdx !== 0) {
                                            e.stopPropagation();
                                            moveCard(cardIdx, true);
                                        }
                                    },
                                    icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(arrow_up/* default */.A, {
                                        className: "h-4 w-4"
                                    }),
                                    disabled: cardIdx === 0,
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                        children: t("common.move_up")
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                    onClick: (e)=>{
                                        if (!lastCard) {
                                            e.stopPropagation();
                                            moveCard(cardIdx, false);
                                        }
                                    },
                                    icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(arrow_down/* default */.A, {
                                        className: "h-4 w-4"
                                    }),
                                    disabled: lastCard,
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                        children: t("common.move_down")
                                    })
                                })
                            ]
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(confirmation_modal/* ConfirmationModal */.R, {
                open: logicWarningModal,
                setOpen: setLogicWarningModal,
                title: t("environments.surveys.edit.logic_error_warning"),
                text: t("environments.surveys.edit.logic_error_warning_text"),
                buttonText: t("environments.surveys.edit.change_anyway"),
                onConfirm: onConfirm
            })
        ]
    });
};

// EXTERNAL MODULE: ../../packages/lib/utils/hooks/useClickOutside.ts
var useClickOutside = __webpack_require__(593827);
;// ./modules/ee/multi-language-surveys/components/language-indicator.tsx





function LanguageIndicator({ surveyLanguages, selectedLanguageCode, setSelectedLanguageCode, setFirstRender, locale }) {
    const [showLanguageDropdown, setShowLanguageDropdown] = (0,react.useState)(false);
    const toggleDropdown = ()=>{
        setShowLanguageDropdown((prev)=>!prev);
    };
    const languageDropdownRef = (0,react.useRef)(null);
    const changeLanguage = (language)=>{
        setSelectedLanguageCode(language.default ? "default" : language.language.code);
        if (setFirstRender) {
            //for lexical editor
            setFirstRender(true);
        }
        setShowLanguageDropdown(false);
    };
    const languageToBeDisplayed = surveyLanguages.find((language)=>{
        return selectedLanguageCode === "default" ? language.default : language.language.code === selectedLanguageCode;
    });
    (0,useClickOutside/* useClickOutside */.L)(languageDropdownRef, ()=>{
        setShowLanguageDropdown(false);
    });
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "absolute right-2 top-2",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("button", {
                "aria-expanded": showLanguageDropdown,
                "aria-haspopup": "true",
                className: "relative z-20 flex items-center justify-center rounded-md bg-slate-900 p-1 px-2 text-xs text-white hover:bg-slate-700",
                onClick: toggleDropdown,
                tabIndex: -1,
                type: "button",
                children: [
                    languageToBeDisplayed ? (0,utils/* getLanguageLabel */.rJ)(languageToBeDisplayed.language.code, locale) : "",
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(chevron_down/* default */.A, {
                        className: "ml-1 h-4 w-4"
                    })
                ]
            }),
            showLanguageDropdown ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "absolute right-0 z-30 mt-1 space-y-2 rounded-md bg-slate-900 p-1 text-xs text-white",
                ref: languageDropdownRef,
                children: surveyLanguages.map((language)=>language.language.code !== languageToBeDisplayed?.language.code && language.enabled && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("button", {
                        className: "block w-full rounded-sm p-1 text-left hover:bg-slate-700",
                        onClick: ()=>{
                            changeLanguage(language);
                        },
                        type: "button",
                        children: (0,utils/* getLanguageLabel */.rJ)(language.language.code, locale)
                    }, language.language.id))
            }) : null
        ]
    });
}

;// ./modules/surveys/components/QuestionFormInput/components/MultiLangWrapper.tsx
/* __next_internal_client_entry_do_not_use__ MultiLangWrapper auto */ 





const MultiLangWrapper = ({ isTranslationIncomplete, value, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale, render, onChange })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const defaultLanguageCode = localSurvey.languages.filter((lang)=>lang.default)[0]?.language.code ?? "default";
    const usedLanguageCode = selectedLanguageCode === defaultLanguageCode ? "default" : selectedLanguageCode;
    const enabledLanguages = (0,react.useMemo)(()=>(0,utils/* getEnabledLanguages */.rc)(localSurvey.languages ?? []), [
        localSurvey.languages
    ]);
    const handleChange = (newValue, recallItems, fallbacks)=>{
        const updatedValue = {
            ...value,
            [usedLanguageCode]: recallItems && fallbacks ? (0,recall/* headlineToRecall */.jj)(newValue, recallItems, fallbacks) : newValue
        };
        onChange(updatedValue);
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "w-full",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                children: render({
                    value,
                    onChange: handleChange,
                    children: enabledLanguages.length > 1 ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LanguageIndicator, {
                        selectedLanguageCode: usedLanguageCode,
                        surveyLanguages: localSurvey.languages,
                        setSelectedLanguageCode: setSelectedLanguageCode,
                        locale: locale
                    }) : null
                })
            }),
            enabledLanguages.length > 1 && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                children: [
                    usedLanguageCode !== "default" && value && typeof value["default"] !== "undefined" && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "mt-1 text-xs text-slate-500",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("strong", {
                                children: [
                                    t("environments.project.languages.translate"),
                                    ":"
                                ]
                            }),
                            " ",
                            (0,recall/* recallToHeadline */.fV)(value, localSurvey, false, "default")["default"]
                        ]
                    }),
                    usedLanguageCode === "default" && localSurvey.languages?.length > 1 && isTranslationIncomplete && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "mt-1 text-xs text-red-400",
                        children: t("environments.project.languages.incomplete_translations")
                    })
                ]
            })
        ]
    });
};

;// ./modules/surveys/components/QuestionFormInput/components/FallbackInput.tsx




const FallbackInput = ({ filteredRecallItems, fallbacks, setFallbacks, fallbackInputRef, addFallback })=>{
    const containsEmptyFallback = ()=>{
        return Object.values(fallbacks).map((value)=>value.trim()).includes("") || Object.entries(fallbacks).length === 0;
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "absolute top-10 z-30 mt-1 rounded-md border border-slate-300 bg-slate-50 p-3 text-xs",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                className: "font-medium",
                children: "Add a placeholder to show if the question gets skipped:"
            }),
            filteredRecallItems.map((recallItem)=>{
                if (!recallItem) return;
                return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "mt-2 flex flex-col",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "flex items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                            className: "placeholder:text-md h-full bg-white",
                            ref: fallbackInputRef,
                            id: "fallback",
                            value: fallbacks[recallItem.id]?.replaceAll("nbsp", " "),
                            placeholder: "Fallback for " + recallItem.label,
                            onKeyDown: (e)=>{
                                if (e.key == "Enter") {
                                    e.preventDefault();
                                    if (containsEmptyFallback()) {
                                        dist/* toast */.oR.error("Fallback missing");
                                        return;
                                    }
                                    addFallback();
                                }
                            },
                            onChange: (e)=>{
                                const newFallbacks = {
                                    ...fallbacks
                                };
                                newFallbacks[recallItem.id] = e.target.value;
                                setFallbacks(newFallbacks);
                            }
                        })
                    })
                }, recallItem.id);
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "flex w-full justify-end",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                    className: "mt-2 h-full py-2",
                    disabled: containsEmptyFallback(),
                    onClick: (e)=>{
                        e.preventDefault();
                        addFallback();
                    },
                    children: "Add"
                })
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs + 1 modules
var react_dropdown_menu_dist = __webpack_require__(551892);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/message-square-text.js
var message_square_text = __webpack_require__(624653);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/rows-3.js
var rows_3 = __webpack_require__(187201);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/list.js
var list = __webpack_require__(766792);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/star.js
var star = __webpack_require__(696340);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/presentation.js
var presentation = __webpack_require__(523528);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/calendar-days.js
var calendar_days = __webpack_require__(617836);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/phone.js
var phone = __webpack_require__(321070);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/house.js
var house = __webpack_require__(338490);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/contact.js
var contact = __webpack_require__(359802);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/list-ordered.js
var list_ordered = __webpack_require__(16568);
;// ../../node_modules/lucide-react/dist/esm/icons/file-text.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const FileText = (0,createLucideIcon/* default */.A)("FileText", [
    [
        "path",
        {
            d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z",
            key: "1rqfz7"
        }
    ],
    [
        "path",
        {
            d: "M14 2v4a2 2 0 0 0 2 2h4",
            key: "tnqrlb"
        }
    ],
    [
        "path",
        {
            d: "M10 9H8",
            key: "b1mrlr"
        }
    ],
    [
        "path",
        {
            d: "M16 13H8",
            key: "t4e002"
        }
    ],
    [
        "path",
        {
            d: "M16 17H8",
            key: "z1uh3a"
        }
    ]
]);
 //# sourceMappingURL=file-text.js.map

;// ./modules/surveys/components/QuestionFormInput/components/RecallItemSelect.tsx







const questionIconMapping = {
    openText: message_square_text/* default */.A,
    multipleChoiceSingle: rows_3/* default */.A,
    multipleChoiceMulti: list/* default */.A,
    rating: star/* default */.A,
    nps: presentation/* default */.A,
    date: calendar_days/* default */.A,
    cal: phone/* default */.A,
    address: house/* default */.A,
    contactInfo: contact/* default */.A,
    ranking: list_ordered/* default */.A
};
const RecallItemSelect = ({ localSurvey, questionId, addRecallItem, setShowRecallItemSelect, recallItems, selectedLanguageCode })=>{
    const [searchValue, setSearchValue] = (0,react.useState)("");
    const isNotAllowedQuestionType = (question)=>{
        return question.type === "fileUpload" || question.type === "cta" || question.type === "consent" || question.type === "pictureSelection" || question.type === "cal" || question.type === "matrix";
    };
    const recallItemIds = (0,react.useMemo)(()=>{
        return recallItems.map((recallItem)=>recallItem.id);
    }, [
        recallItems
    ]);
    const hiddenFieldRecallItems = (0,react.useMemo)(()=>{
        if (localSurvey.hiddenFields.fieldIds) {
            return localSurvey.hiddenFields.fieldIds.filter((hiddenFieldId)=>{
                return !recallItemIds.includes(hiddenFieldId);
            }).map((hiddenFieldId)=>({
                    id: hiddenFieldId,
                    label: hiddenFieldId,
                    type: "hiddenField"
                }));
        }
        return [];
    }, [
        localSurvey.hiddenFields,
        recallItemIds
    ]);
    const variableRecallItems = (0,react.useMemo)(()=>{
        if (localSurvey.variables.length) {
            return localSurvey.variables.filter((variable)=>!recallItemIds.includes(variable.id)).map((variable)=>{
                return {
                    id: variable.id,
                    label: variable.name,
                    type: "variable"
                };
            });
        }
        return [];
    }, [
        localSurvey.variables,
        recallItemIds
    ]);
    const surveyQuestionRecallItems = (0,react.useMemo)(()=>{
        const isEndingCard = !localSurvey.questions.map((question)=>question.id).includes(questionId);
        const idx = isEndingCard ? localSurvey.questions.length : localSurvey.questions.findIndex((recallQuestion)=>recallQuestion.id === questionId);
        const filteredQuestions = localSurvey.questions.filter((question, index)=>{
            const notAllowed = isNotAllowedQuestionType(question);
            return !recallItemIds.includes(question.id) && !notAllowed && question.id !== questionId && idx > index;
        }).map((question)=>{
            return {
                id: question.id,
                label: question.headline[selectedLanguageCode],
                type: "question"
            };
        });
        return filteredQuestions;
    }, [
        localSurvey.questions,
        questionId,
        recallItemIds
    ]);
    const filteredRecallItems = (0,react.useMemo)(()=>{
        return [
            ...surveyQuestionRecallItems,
            ...hiddenFieldRecallItems,
            ...variableRecallItems
        ].filter((recallItems)=>{
            if (searchValue.trim() === "") return true;
            else {
                return recallItems.label.toLowerCase().startsWith(searchValue.toLowerCase());
            }
        });
    }, [
        surveyQuestionRecallItems,
        hiddenFieldRecallItems,
        variableRecallItems,
        searchValue
    ]);
    // function to modify headline (recallInfo to corresponding headline)
    const getRecallLabel = (label)=>{
        return (0,recall/* replaceRecallInfoWithUnderline */.gk)(label);
    };
    const getRecallItemIcon = (recallItem)=>{
        switch(recallItem.type){
            case "question":
                const question = localSurvey.questions.find((question)=>question.id === recallItem.id);
                if (question) {
                    return questionIconMapping[question?.type];
                }
            case "hiddenField":
                return eye_off/* default */.A;
            case "variable":
                const variable = localSurvey.variables.find((variable)=>variable.id === recallItem.id);
                return variable?.type === "number" ? file_digit/* default */.A : FileText;
        }
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_jsx_runtime.Fragment, {
        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenu */.rI, {
            defaultOpen: true,
            modal: false,
            children: [
                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuTrigger */.ty, {
                    className: "z-10 cursor-pointer",
                    asChild: true,
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "flex h-0 w-full items-center justify-between overflow-hidden"
                    })
                }),
                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenuContent */.SQ, {
                    className: "w-96 bg-slate-50 text-slate-700",
                    align: "start",
                    side: "bottom",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                            className: "m-2 text-sm font-medium",
                            children: "Recall Information from..."
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                            id: "recallItemSearchInput",
                            placeholder: "Search options",
                            className: "mb-1 w-full bg-white",
                            onChange: (e)=>setSearchValue(e.target.value),
                            autoFocus: true,
                            value: searchValue,
                            onKeyDown: (e)=>{
                                if (e.key === "ArrowDown") {
                                    document.getElementById("recallItem-0")?.focus();
                                }
                            }
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "max-h-72 overflow-y-auto overflow-x-hidden",
                            children: [
                                filteredRecallItems.map((recallItem, index)=>{
                                    const IconComponent = getRecallItemIcon(recallItem);
                                    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_dropdown_menu_dist/* DropdownMenuItem */._2, {
                                        id: "recallItem-" + index,
                                        title: recallItem.label,
                                        onSelect: ()=>{
                                            addRecallItem({
                                                id: recallItem.id,
                                                label: recallItem.label,
                                                type: recallItem.type
                                            });
                                            setShowRecallItemSelect(false);
                                        },
                                        autoFocus: false,
                                        className: "flex w-full cursor-pointer items-center rounded-md p-2 focus:bg-slate-200 focus:outline-none",
                                        onKeyDown: (e)=>{
                                            if (e.key === "ArrowUp" && index === 0) {
                                                document.getElementById("recallItemSearchInput")?.focus();
                                            } else if (e.key === "ArrowDown" && index === filteredRecallItems.length - 1) {
                                                document.getElementById("recallItemSearchInput")?.focus();
                                            }
                                        },
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                children: IconComponent && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(IconComponent, {
                                                    className: "mr-2 w-4"
                                                })
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                className: "max-w-full overflow-hidden text-ellipsis whitespace-nowrap text-sm",
                                                children: getRecallLabel(recallItem.label)
                                            })
                                        ]
                                    }, recallItem.id);
                                }),
                                filteredRecallItems.length === 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "p-2 text-sm font-medium text-slate-700",
                                    children: "No recall items found \uD83E\uDD37"
                                })
                            ]
                        })
                    ]
                })
            ]
        })
    });
};

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/pencil.js
var pencil = __webpack_require__(363557);
;// ./modules/surveys/components/QuestionFormInput/components/RecallWrapper.tsx
/* __next_internal_client_entry_do_not_use__ RecallWrapper auto */ 









const RecallWrapper = ({ value, onChange, localSurvey, questionId, render, usedLanguageCode, isRecallAllowed, onAddFallback })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [showRecallItemSelect, setShowRecallItemSelect] = (0,react.useState)(false);
    const [showFallbackInput, setShowFallbackInput] = (0,react.useState)(false);
    const [recallItems, setRecallItems] = (0,react.useState)(value.includes("#recall:") ? (0,recall/* getRecallItems */.QO)(value, localSurvey, usedLanguageCode) : []);
    const [fallbacks, setFallbacks] = (0,react.useState)(value.includes("/fallback:") ? (0,recall/* getFallbackValues */.P8)(value) : {});
    const [internalValue, setInternalValue] = (0,react.useState)((0,recall/* headlineToRecall */.jj)(value, recallItems, fallbacks));
    const [renderedText, setRenderedText] = (0,react.useState)([]);
    const fallbackInputRef = (0,react.useRef)(null);
    (0,react.useEffect)(()=>{
        setInternalValue((0,recall/* headlineToRecall */.jj)(value, recallItems, fallbacks));
    }, [
        value,
        recallItems,
        fallbacks
    ]);
    const checkForRecallSymbol = (0,react.useCallback)((str)=>{
        // Get cursor position by finding last character
        // Only trigger when @ is the last character typed
        const lastChar = str[str.length - 1];
        const shouldShow = lastChar === "@";
        setShowRecallItemSelect(shouldShow);
    }, []);
    const handleInputChange = (0,react.useCallback)((newVal)=>{
        const updatedText = {
            [usedLanguageCode]: newVal
        };
        const val = (0,recall/* recallToHeadline */.fV)(updatedText, localSurvey, false, usedLanguageCode)[usedLanguageCode];
        setInternalValue(newVal);
        if (isRecallAllowed) {
            checkForRecallSymbol(val);
        }
        onChange(newVal, recallItems, fallbacks);
    }, [
        checkForRecallSymbol,
        isRecallAllowed,
        localSurvey,
        onChange,
        recallItems,
        fallbacks,
        usedLanguageCode
    ]);
    const addRecallItem = (0,react.useCallback)((recallItem)=>{
        if (recallItem.label.trim() === "") {
            dist/* toast */.oR.error("Recall item label cannot be empty");
            return;
        }
        let recallItemTemp = (0,pollyfills_structuredClone/* structuredClone */.p)(recallItem);
        recallItemTemp.label = (0,recall/* replaceRecallInfoWithUnderline */.gk)(recallItem.label);
        const updatedRecallItems = [
            ...recallItems,
            recallItemTemp
        ];
        setRecallItems(updatedRecallItems);
        if (!Object.keys(fallbacks).includes(recallItem.id)) {
            setFallbacks((prevFallbacks)=>({
                    ...prevFallbacks,
                    [recallItem.id]: ""
                }));
        }
        setShowRecallItemSelect(false);
        let modifiedHeadlineWithId = {
            [usedLanguageCode]: internalValue
        };
        modifiedHeadlineWithId[usedLanguageCode] = modifiedHeadlineWithId[usedLanguageCode].replace(/@(\b|$)/g, `#recall:${recallItem.id}/fallback:# `);
        onChange(modifiedHeadlineWithId[usedLanguageCode], updatedRecallItems, fallbacks);
        setInternalValue(modifiedHeadlineWithId[usedLanguageCode]);
        setShowFallbackInput(true);
    }, [
        fallbacks,
        usedLanguageCode,
        internalValue,
        onChange,
        recallItems
    ]);
    const addFallback = (0,react.useCallback)(()=>{
        let newVal = internalValue;
        recallItems.forEach((item)=>{
            const recallInfo = (0,recall/* findRecallInfoById */.Xm)(newVal, item.id);
            if (recallInfo) {
                const fallbackValue = (fallbacks[item.id]?.trim() || "").replace(/ /g, "nbsp");
                let updatedFallbacks = {
                    ...fallbacks
                };
                updatedFallbacks[item.id] = fallbackValue;
                setFallbacks(updatedFallbacks);
                newVal = newVal.replace(recallInfo, `#recall:${item.id}/fallback:${fallbackValue}#`);
                onChange(newVal, recallItems, updatedFallbacks);
            }
        });
        setShowFallbackInput(false);
        setShowRecallItemSelect(false);
        onAddFallback(newVal);
    }, [
        fallbacks,
        recallItems,
        internalValue,
        onChange,
        onAddFallback
    ]);
    const filterRecallItems = (0,react.useCallback)((remainingText)=>{
        let includedRecallItems = [];
        recallItems.forEach((recallItem)=>{
            if (remainingText.includes(`@${recallItem.label}`)) {
                includedRecallItems.push(recallItem);
            } else {
                const recallItemToRemove = recallItem.label.slice(0, -1);
                const newInternalValue = internalValue.replace(`@${recallItemToRemove}`, "");
                setInternalValue(newInternalValue);
                onChange(newInternalValue, recallItems, fallbacks);
                let updatedFallback = {
                    ...fallbacks
                };
                delete updatedFallback[recallItem.id];
                setFallbacks(updatedFallback);
                setRecallItems(includedRecallItems);
            }
        });
    }, [
        fallbacks,
        internalValue,
        onChange,
        recallItems,
        setInternalValue
    ]);
    (0,react.useEffect)(()=>{
        if (showFallbackInput && fallbackInputRef.current) {
            fallbackInputRef.current.focus();
        }
    }, [
        showFallbackInput
    ]);
    (0,react.useEffect)(()=>{
        const recallItemLabels = recallItems.flatMap((recallItem)=>{
            if (!recallItem.label.includes("#recall:")) {
                return [
                    recallItem.label
                ];
            }
            const info = (0,recall/* extractRecallInfo */.LW)(recallItem.label);
            if (info) {
                const recallItemId = (0,recall/* extractId */.dP)(info);
                const recallQuestion = localSurvey.questions.find((q)=>q.id === recallItemId);
                if (recallQuestion) {
                    // replace nested recall with "___"
                    return [
                        recallItem.label.replace(info, "___")
                    ];
                }
            }
            return [];
        });
        const processInput = ()=>{
            const parts = [];
            let remainingText = (0,recall/* recallToHeadline */.fV)({
                [usedLanguageCode]: internalValue
            }, localSurvey, false, usedLanguageCode)[usedLanguageCode];
            filterRecallItems(remainingText);
            recallItemLabels.forEach((label)=>{
                const index = remainingText.indexOf("@" + label);
                if (index !== -1) {
                    if (index > 0) {
                        parts.push(/*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                            className: "whitespace-pre",
                            children: remainingText.substring(0, index)
                        }, `text-${parts.length}`));
                    }
                    parts.push(/*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                        className: "z-30 flex h-fit cursor-pointer justify-center whitespace-pre rounded-md bg-slate-100 text-sm text-transparent",
                        children: "@" + label
                    }, `recall-${parts.length}`));
                    remainingText = remainingText.substring(index + label.length + 1);
                }
            });
            if (remainingText?.length) {
                parts.push(/*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                    className: "whitespace-pre",
                    children: remainingText
                }, `remaining-${parts.length}`));
            }
            return parts;
        };
        setRenderedText(processInput());
    }, [
        internalValue,
        recallItems
    ]);
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
        className: "relative",
        children: render({
            value: internalValue,
            onChange: handleInputChange,
            highlightedJSX: renderedText,
            isRecallSelectVisible: showRecallItemSelect,
            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                children: [
                    internalValue.includes("recall:") && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        variant: "ghost",
                        type: "button",
                        className: "absolute right-2 top-full z-[1] flex h-6 cursor-pointer items-center rounded-b-lg rounded-t-none bg-slate-100 px-2.5 py-0 text-xs hover:bg-slate-200",
                        onClick: (e)=>{
                            e.preventDefault();
                            setShowFallbackInput(true);
                        },
                        children: [
                            t("environments.surveys.edit.edit_recall"),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(pencil/* default */.A, {
                                className: "h-3 w-3"
                            })
                        ]
                    }),
                    showRecallItemSelect && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(RecallItemSelect, {
                        localSurvey: localSurvey,
                        questionId: questionId,
                        addRecallItem: addRecallItem,
                        setShowRecallItemSelect: setShowRecallItemSelect,
                        recallItems: recallItems,
                        selectedLanguageCode: usedLanguageCode,
                        hiddenFields: localSurvey.hiddenFields
                    }),
                    showFallbackInput && recallItems.length > 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(FallbackInput, {
                        filteredRecallItems: recallItems,
                        fallbacks: fallbacks,
                        setFallbacks: setFallbacks,
                        fallbackInputRef: fallbackInputRef,
                        addFallback: addFallback
                    })
                ]
            })
        })
    });
};

// EXTERNAL MODULE: ./modules/ui/components/file-input/index.tsx + 2 modules
var file_input = __webpack_require__(675135);
// EXTERNAL MODULE: ../../node_modules/lodash/debounce.js
var debounce = __webpack_require__(359174);
var debounce_default = /*#__PURE__*/__webpack_require__.n(debounce);
;// ../../node_modules/lucide-react/dist/esm/icons/image-plus.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const ImagePlus = (0,createLucideIcon/* default */.A)("ImagePlus", [
    [
        "path",
        {
            d: "M16 5h6",
            key: "1vod17"
        }
    ],
    [
        "path",
        {
            d: "M19 2v6",
            key: "4bpg5p"
        }
    ],
    [
        "path",
        {
            d: "M21 11.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7.5",
            key: "1ue2ih"
        }
    ],
    [
        "path",
        {
            d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21",
            key: "1xmnt7"
        }
    ],
    [
        "circle",
        {
            cx: "9",
            cy: "9",
            r: "2",
            key: "af1f0g"
        }
    ]
]);
 //# sourceMappingURL=image-plus.js.map

;// ../../packages/lib/utils/hooks/useSyncScroll.ts

// Custom hook to synchronize the horizontal scroll position of two elements.
const useSyncScroll = (highlightContainerRef, inputRef)=>{
    (0,react.useEffect)(()=>{
        const syncScrollPosition = ()=>{
            if (highlightContainerRef.current && inputRef.current) {
                highlightContainerRef.current.scrollLeft = inputRef.current.scrollLeft;
            }
        };
        const sourceElement = inputRef.current;
        if (sourceElement) {
            sourceElement.addEventListener("scroll", syncScrollPosition);
        }
        return ()=>{
            if (sourceElement) {
                sourceElement.removeEventListener("scroll", syncScrollPosition);
            }
        };
    }, [
        inputRef,
        highlightContainerRef
    ]);
};

;// ./modules/surveys/components/QuestionFormInput/utils.ts


// Function to get index for choice /rowLabel /columnLabel
const getIndex = (id, isChoice)=>{
    if (!isChoice) return null;
    const parts = id.split("-");
    if (parts.length > 1) {
        return parseInt(parts[1], 10);
    }
    return null;
};
const getChoiceLabel = (question, choiceIdx, surveyLanguageCodes)=>{
    const choiceQuestion = question;
    return choiceQuestion.choices[choiceIdx]?.label || (0,utils/* createI18nString */.YV)("", surveyLanguageCodes);
};
const getMatrixLabel = (question, idx, surveyLanguageCodes, type)=>{
    const matrixQuestion = question;
    const labels = type === "row" ? matrixQuestion.rows : matrixQuestion.columns;
    return labels[idx] || (0,utils/* createI18nString */.YV)("", surveyLanguageCodes);
};
const getWelcomeCardText = (survey, id, surveyLanguageCodes)=>{
    const card = survey.welcomeCard;
    return card[id] || (0,utils/* createI18nString */.YV)("", surveyLanguageCodes);
};
const getEndingCardText = (survey, id, surveyLanguageCodes, questionIdx)=>{
    const endingCardIndex = questionIdx - survey.questions.length;
    const card = survey.endings[endingCardIndex];
    if (card.type === "endScreen") {
        return card[id] || (0,utils/* createI18nString */.YV)("", surveyLanguageCodes);
    } else {
        return (0,utils/* createI18nString */.YV)("", surveyLanguageCodes);
    }
};
const determineImageUploaderVisibility = (questionIdx, localSurvey)=>{
    switch(questionIdx){
        case -1:
            return false;
        default:
            // Regular Survey Question
            const question = localSurvey.questions[questionIdx];
            return !!question && !!question.imageUrl || !!question && !!question.videoUrl;
    }
};
const getPlaceHolderById = (id, t)=>{
    switch(id){
        case "headline":
            return t("environments.surveys.edit.your_question_here_recall_information_with");
        case "subheader":
            return t("environments.surveys.edit.your_description_here_recall_information_with");
        default:
            return "";
    }
};
const isValueIncomplete = (id, isInvalid, surveyLanguageCodes, value)=>{
    // Define a list of IDs for which a default value needs to be checked.
    const labelIds = [
        "label",
        "headline",
        "subheader",
        "lowerLabel",
        "upperLabel",
        "buttonLabel",
        "placeholder",
        "backButtonLabel",
        "dismissButtonLabel"
    ];
    // If value is not provided, immediately return false as it cannot be incomplete.
    if (value === undefined) return false;
    // Check if the default value is incomplete. This applies only to specific label IDs.
    // For these IDs, the default value should not be an empty string.
    const isDefaultIncomplete = labelIds.includes(id) ? value["default"]?.trim() !== "" : false;
    // Return true if all the following conditions are met:
    // 1. The field is marked as invalid.
    // 2. The label is not valid for all provided language codes in the survey.
    // 4. For specific label IDs, the default value is incomplete as defined above.
    return isInvalid && !(0,utils/* isLabelValidForAllLanguages */.aV)(value, surveyLanguageCodes) && isDefaultIncomplete;
};

;// ./modules/surveys/components/QuestionFormInput/index.tsx
/* __next_internal_client_entry_do_not_use__ QuestionFormInput auto */ 
















const QuestionFormInput = ({ id, value, localSurvey, questionIdx, updateQuestion, updateSurvey, updateChoice, updateMatrixLabel, isInvalid, label, selectedLanguageCode, setSelectedLanguageCode, maxLength, placeholder, onBlur, className, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const defaultLanguageCode = localSurvey.languages.filter((lang)=>lang.default)[0]?.language.code ?? "default";
    const usedLanguageCode = selectedLanguageCode === defaultLanguageCode ? "default" : selectedLanguageCode;
    const question = localSurvey.questions[questionIdx];
    const isChoice = id.includes("choice");
    const isMatrixLabelRow = id.includes("row");
    const isMatrixLabelColumn = id.includes("column");
    const isEndingCard = questionIdx >= localSurvey.questions.length;
    const isWelcomeCard = questionIdx === -1;
    const index = getIndex(id, isChoice || isMatrixLabelColumn || isMatrixLabelRow);
    const questionId = (0,react.useMemo)(()=>{
        return isWelcomeCard ? "start" : isEndingCard ? localSurvey.endings[questionIdx - localSurvey.questions.length].id : question.id;
    }, [
        isWelcomeCard,
        isEndingCard,
        question?.id
    ]);
    const surveyLanguageCodes = (0,react.useMemo)(()=>(0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages), [
        localSurvey.languages
    ]);
    const isTranslationIncomplete = (0,react.useMemo)(()=>isValueIncomplete(id, isInvalid, surveyLanguageCodes, value), [
        value,
        id,
        isInvalid,
        surveyLanguageCodes
    ]);
    const elementText = (0,react.useMemo)(()=>{
        if (isChoice && typeof index === "number") {
            return getChoiceLabel(question, index, surveyLanguageCodes);
        }
        if (isWelcomeCard) {
            return getWelcomeCardText(localSurvey, id, surveyLanguageCodes);
        }
        if (isEndingCard) {
            return getEndingCardText(localSurvey, id, surveyLanguageCodes, questionIdx);
        }
        if ((isMatrixLabelColumn || isMatrixLabelRow) && typeof index === "number") {
            return getMatrixLabel(question, index, surveyLanguageCodes, isMatrixLabelRow ? "row" : "column");
        }
        return question && (id.includes(".") ? question[id.split(".")[0]]?.[id.split(".")[1]] : question[id]) || (0,utils/* createI18nString */.YV)("", surveyLanguageCodes);
    }, [
        id,
        index,
        isChoice,
        isEndingCard,
        isMatrixLabelColumn,
        isMatrixLabelRow,
        isWelcomeCard,
        localSurvey,
        question,
        questionIdx,
        surveyLanguageCodes
    ]);
    const [text, setText] = (0,react.useState)(elementText);
    const [showImageUploader, setShowImageUploader] = (0,react.useState)(determineImageUploaderVisibility(questionIdx, localSurvey));
    const highlightContainerRef = (0,react.useRef)(null);
    const inputRef = (0,react.useRef)(null);
    // Hook to synchronize the horizontal scroll position of highlightContainerRef and inputRef.
    useSyncScroll(highlightContainerRef, inputRef);
    const createUpdatedText = (0,react.useCallback)((updatedText)=>{
        return {
            ...elementText,
            [usedLanguageCode]: updatedText
        };
    }, [
        elementText,
        usedLanguageCode
    ]);
    const updateChoiceDetails = (0,react.useCallback)((translatedText)=>{
        if (updateChoice && typeof index === "number") {
            updateChoice(index, {
                label: translatedText
            });
        }
    }, [
        index,
        updateChoice
    ]);
    const updateSurveyDetails = (0,react.useCallback)((translatedText)=>{
        if (updateSurvey) {
            updateSurvey({
                [id]: translatedText
            });
        }
    }, [
        id,
        updateSurvey
    ]);
    const updateMatrixLabelDetails = (0,react.useCallback)((translatedText)=>{
        if (updateMatrixLabel && typeof index === "number") {
            updateMatrixLabel(index, isMatrixLabelRow ? "row" : "column", translatedText);
        }
    }, [
        index,
        isMatrixLabelRow,
        updateMatrixLabel
    ]);
    const updateQuestionDetails = (0,react.useCallback)((translatedText)=>{
        if (updateQuestion) {
            // Handle nested properties if id contains a dot
            if (id.includes(".")) {
                const [parent, child] = id.split(".");
                updateQuestion(questionIdx, {
                    [parent]: {
                        ...question[parent],
                        [child]: translatedText
                    }
                });
            } else {
                // Original behavior for non-nested properties
                updateQuestion(questionIdx, {
                    [id]: translatedText
                });
            }
        }
    }, [
        id,
        questionIdx,
        updateQuestion,
        question
    ]);
    const handleUpdate = (0,react.useCallback)((updatedText)=>{
        const translatedText = createUpdatedText(updatedText);
        if (isChoice) {
            updateChoiceDetails(translatedText);
        } else if (isEndingCard || isWelcomeCard) {
            updateSurveyDetails(translatedText);
        } else if (isMatrixLabelRow || isMatrixLabelColumn) {
            updateMatrixLabelDetails(translatedText);
        } else {
            updateQuestionDetails(translatedText);
        }
    }, [
        createUpdatedText,
        isChoice,
        isEndingCard,
        isMatrixLabelColumn,
        isMatrixLabelRow,
        isWelcomeCard,
        updateChoiceDetails,
        updateMatrixLabelDetails,
        updateQuestionDetails,
        updateSurveyDetails
    ]);
    const getFileUrl = ()=>{
        if (isWelcomeCard) return localSurvey.welcomeCard.fileUrl;
        if (isEndingCard) {
            const endingCard = localSurvey.endings.find((ending)=>ending.id === questionId);
            if (endingCard && endingCard.type === "endScreen") return endingCard.imageUrl;
        } else return question.imageUrl;
    };
    const getVideoUrl = ()=>{
        if (isWelcomeCard) return localSurvey.welcomeCard.videoUrl;
        if (isEndingCard) {
            const endingCard = localSurvey.endings.find((ending)=>ending.id === questionId);
            if (endingCard && endingCard.type === "endScreen") return endingCard.videoUrl;
        } else return question.videoUrl;
    };
    const debouncedHandleUpdate = (0,react.useMemo)(()=>debounce_default()((value)=>handleUpdate(value), 100), [
        handleUpdate
    ]);
    const [animationParent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "w-full",
        children: [
            label && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mb-2 mt-3",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                    htmlFor: id,
                    children: label
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(MultiLangWrapper, {
                isTranslationIncomplete: isTranslationIncomplete,
                value: text,
                localSurvey: localSurvey,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale,
                onChange: (updatedText)=>{
                    setText(updatedText);
                    debouncedHandleUpdate(updatedText[usedLanguageCode]);
                },
                render: ({ value, onChange, children: languageIndicator })=>{
                    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(RecallWrapper, {
                        localSurvey: localSurvey,
                        questionId: questionId,
                        value: value[usedLanguageCode],
                        onChange: (value, recallItems, fallbacks)=>{
                            // Pass all values to MultiLangWrapper's onChange
                            onChange(value, recallItems, fallbacks);
                        },
                        onAddFallback: ()=>{
                            inputRef.current?.focus();
                        },
                        isRecallAllowed: !isWelcomeCard && (id === "headline" || id === "subheader"),
                        usedLanguageCode: usedLanguageCode,
                        render: ({ value, onChange, highlightedJSX, children: recallComponents, isRecallSelectVisible })=>{
                            return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex flex-col gap-4 bg-white",
                                ref: animationParent,
                                children: [
                                    showImageUploader && id === "headline" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(file_input/* FileInput */.z, {
                                        id: "question-image",
                                        allowedFileExtensions: [
                                            "png",
                                            "jpeg",
                                            "jpg",
                                            "webp"
                                        ],
                                        environmentId: localSurvey.environmentId,
                                        onFileUpload: (url, fileType)=>{
                                            if (url) {
                                                const update = fileType === "video" ? {
                                                    videoUrl: url[0],
                                                    imageUrl: ""
                                                } : {
                                                    imageUrl: url[0],
                                                    videoUrl: ""
                                                };
                                                if (isEndingCard && updateSurvey) {
                                                    updateSurvey(update);
                                                } else if (updateQuestion) {
                                                    updateQuestion(questionIdx, update);
                                                }
                                            }
                                        },
                                        fileUrl: getFileUrl(),
                                        videoUrl: getVideoUrl(),
                                        isVideoAllowed: true
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "flex w-full items-center space-x-2",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "group relative w-full",
                                                children: [
                                                    languageIndicator,
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                        className: "h-10 w-full"
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                        ref: highlightContainerRef,
                                                        className: `no-scrollbar absolute top-0 z-0 mt-0.5 flex h-10 w-full overflow-scroll whitespace-nowrap px-3 py-2 text-center text-sm text-transparent ${localSurvey.languages?.length > 1 ? "pr-24" : ""}`,
                                                        dir: "auto",
                                                        children: highlightedJSX
                                                    }, highlightedJSX.toString()),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                        value: (0,recall/* recallToHeadline */.fV)({
                                                            [usedLanguageCode]: value
                                                        }, localSurvey, false, usedLanguageCode)[usedLanguageCode],
                                                        dir: "auto",
                                                        onChange: (e)=>onChange(e.target.value),
                                                        id: id,
                                                        name: id,
                                                        placeholder: placeholder ?? getPlaceHolderById(id, t),
                                                        "aria-label": label,
                                                        maxLength: maxLength,
                                                        ref: inputRef,
                                                        onBlur: onBlur,
                                                        className: `absolute top-0 text-black caret-black ${localSurvey.languages?.length > 1 ? "pr-24" : ""} ${className}`,
                                                        isInvalid: isInvalid && text[usedLanguageCode]?.trim() === "" && localSurvey.languages?.length > 1 && isTranslationIncomplete,
                                                        autoComplete: isRecallSelectVisible ? "off" : "on",
                                                        autoFocus: id === "headline"
                                                    }, `${questionId}-${id}-${usedLanguageCode}`),
                                                    recallComponents
                                                ]
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                                                children: [
                                                    id === "headline" && !isWelcomeCard && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                                                        tooltipContent: t("environments.surveys.edit.add_photo_or_video"),
                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                                            variant: "secondary",
                                                            size: "icon",
                                                            "aria-label": "Toggle image uploader",
                                                            className: "ml-2",
                                                            onClick: (e)=>{
                                                                e.preventDefault();
                                                                setShowImageUploader((prev)=>!prev);
                                                            },
                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ImagePlus, {})
                                                        })
                                                    }),
                                                    id === "subheader" && question && question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                                                        tooltipContent: t("environments.surveys.edit.remove_description"),
                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                                            variant: "secondary",
                                                            size: "icon",
                                                            "aria-label": "Remove description",
                                                            className: "ml-2",
                                                            onClick: (e)=>{
                                                                e.preventDefault();
                                                                if (updateQuestion) {
                                                                    updateQuestion(questionIdx, {
                                                                        subheader: undefined
                                                                    });
                                                                }
                                                            },
                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash/* default */.A, {})
                                                        })
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            });
                        }
                    });
                }
            }, selectedLanguageCode)
        ]
    });
};
QuestionFormInput.displayName = "QuestionFormInput";

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/EndScreenForm.tsx
/* __next_internal_client_entry_do_not_use__ EndScreenForm auto */ 










const EndScreenForm = ({ localSurvey, endingCardIndex, isInvalid, selectedLanguageCode, setSelectedLanguageCode, updateSurvey, endingCard, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const inputRef = (0,react.useRef)(null);
    const [showEndingCardCTA, setshowEndingCardCTA] = (0,react.useState)(endingCard.type === "endScreen" && (!!(0,utils/* getLocalizedValue */.bT)(endingCard.buttonLabel, selectedLanguageCode) || !!endingCard.buttonLink));
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                label: t("common.note") + "*",
                value: endingCard.headline,
                localSurvey: localSurvey,
                questionIdx: localSurvey.questions.length + endingCardIndex,
                isInvalid: isInvalid,
                updateSurvey: updateSurvey,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "subheader",
                value: endingCard.subheader,
                label: t("common.description"),
                localSurvey: localSurvey,
                questionIdx: localSurvey.questions.length + endingCardIndex,
                isInvalid: isInvalid,
                updateSurvey: updateSurvey,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-4",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex items-center space-x-1",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                id: "showButton",
                                checked: showEndingCardCTA,
                                onCheckedChange: ()=>{
                                    if (showEndingCardCTA) {
                                        updateSurvey({
                                            buttonLabel: undefined,
                                            buttonLink: undefined
                                        });
                                    } else {
                                        updateSurvey({
                                            buttonLabel: {
                                                default: t("environments.surveys.edit.create_your_own_survey")
                                            },
                                            buttonLink: "https://formbricks.com"
                                        });
                                    }
                                    setshowEndingCardCTA(!showEndingCardCTA);
                                }
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                htmlFor: "showButton",
                                className: "cursor-pointer",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    className: "ml-2",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h3", {
                                            className: "text-sm font-semibold text-slate-700",
                                            children: t("environments.surveys.edit.show_button")
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                            className: "text-xs font-normal text-slate-500",
                                            children: t("environments.surveys.edit.send_your_respondents_to_a_page_of_your_choice")
                                        })
                                    ]
                                })
                            })
                        ]
                    }),
                    showEndingCardCTA && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "border-1 mt-4 space-y-4 rounded-md border bg-slate-100 p-4 pt-2",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "space-y-2",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                    id: "buttonLabel",
                                    label: t("environments.surveys.edit.button_label"),
                                    placeholder: t("environments.surveys.edit.create_your_own_survey"),
                                    className: "rounded-md",
                                    value: endingCard.buttonLabel,
                                    localSurvey: localSurvey,
                                    questionIdx: localSurvey.questions.length + endingCardIndex,
                                    isInvalid: isInvalid,
                                    updateSurvey: updateSurvey,
                                    selectedLanguageCode: selectedLanguageCode,
                                    setSelectedLanguageCode: setSelectedLanguageCode,
                                    locale: locale
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "space-y-2",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                        children: t("environments.surveys.edit.button_url")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        className: "rounded-md bg-white",
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(RecallWrapper, {
                                            value: endingCard.buttonLink ?? "",
                                            questionId: endingCard.id,
                                            onChange: (val, recallItems, fallbacks)=>{
                                                const updatedValue = {
                                                    ...endingCard,
                                                    buttonLink: recallItems && fallbacks ? (0,recall/* headlineToRecall */.jj)(val, recallItems, fallbacks) : val
                                                };
                                                updateSurvey(updatedValue);
                                            },
                                            onAddFallback: ()=>{
                                                inputRef.current?.focus();
                                            },
                                            isRecallAllowed: true,
                                            localSurvey: localSurvey,
                                            usedLanguageCode: "default",
                                            render: ({ value, onChange, highlightedJSX, children })=>{
                                                return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                    className: "group relative",
                                                    children: [
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                            className: `no-scrollbar absolute top-0 z-0 mt-0.5 flex h-10 w-full overflow-scroll whitespace-nowrap px-3 py-2 text-center text-sm text-transparent`,
                                                            dir: "auto",
                                                            children: highlightedJSX
                                                        }, highlightedJSX.toString()),
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                            ref: inputRef,
                                                            id: "buttonLink",
                                                            name: "buttonLink",
                                                            className: "relative text-black caret-black",
                                                            placeholder: "https://formbricks.com",
                                                            value: (0,recall/* recallToHeadline */.fV)({
                                                                [selectedLanguageCode]: value
                                                            }, localSurvey, false, "default")[selectedLanguageCode],
                                                            onChange: (e)=>onChange(e.target.value)
                                                        }),
                                                        children
                                                    ]
                                                });
                                            }
                                        })
                                    })
                                ]
                            })
                        ]
                    })
                ]
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/RedirectUrlForm.tsx
/* __next_internal_client_entry_do_not_use__ RedirectUrlForm auto */ 






const RedirectUrlForm = ({ localSurvey, endingCard, updateSurvey })=>{
    const selectedLanguageCode = "default";
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const inputRef = (0,react.useRef)(null);
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        className: "mt-3 space-y-3",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "space-y-2",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                        children: t("common.url")
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(RecallWrapper, {
                        value: endingCard.url ?? "",
                        questionId: endingCard.id,
                        onChange: (val, recallItems, fallbacks)=>{
                            const updatedValue = {
                                ...endingCard,
                                url: recallItems && fallbacks ? (0,recall/* headlineToRecall */.jj)(val, recallItems, fallbacks) : val
                            };
                            updateSurvey(updatedValue);
                        },
                        onAddFallback: ()=>{
                            inputRef.current?.focus();
                        },
                        isRecallAllowed: true,
                        localSurvey: localSurvey,
                        usedLanguageCode: "default",
                        render: ({ value, onChange, highlightedJSX, children })=>{
                            return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "group relative",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        className: `no-scrollbar absolute top-0 z-0 mt-0.5 flex h-10 w-full overflow-scroll whitespace-nowrap px-3 py-2 text-center text-sm text-transparent`,
                                        dir: "auto",
                                        children: highlightedJSX
                                    }, highlightedJSX.toString()),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                        ref: inputRef,
                                        id: "redirectUrl",
                                        name: "redirectUrl",
                                        className: "relative text-black caret-black",
                                        placeholder: "https://formbricks.com",
                                        value: (0,recall/* recallToHeadline */.fV)({
                                            [selectedLanguageCode]: value
                                        }, localSurvey, false, "default")[selectedLanguageCode],
                                        onChange: (e)=>onChange(e.target.value)
                                    }),
                                    children
                                ]
                            });
                        }
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "space-y-2",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                        children: t("common.label")
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                        id: "redirectUrlLabel",
                        name: "redirectUrlLabel",
                        className: "bg-white",
                        placeholder: "Formbricks App",
                        value: endingCard.label,
                        onChange: (e)=>updateSurvey({
                                label: e.target.value
                            })
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ./modules/ui/components/options-switch/index.tsx
var options_switch = __webpack_require__(465775);
// EXTERNAL MODULE: ../../node_modules/@dnd-kit/utilities/dist/utilities.esm.js
var utilities_esm = __webpack_require__(63564);
;// ../../node_modules/lucide-react/dist/esm/icons/undo-2.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Undo2 = (0,createLucideIcon/* default */.A)("Undo2", [
    [
        "path",
        {
            d: "M9 14 4 9l5-5",
            key: "102s5s"
        }
    ],
    [
        "path",
        {
            d: "M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5a5.5 5.5 0 0 1-5.5 5.5H11",
            key: "f3b9sd"
        }
    ]
]);
 //# sourceMappingURL=undo-2.js.map

;// ../../node_modules/lucide-react/dist/esm/icons/grip.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Grip = (0,createLucideIcon/* default */.A)("Grip", [
    [
        "circle",
        {
            cx: "12",
            cy: "5",
            r: "1",
            key: "gxeob9"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "5",
            r: "1",
            key: "w8mnmm"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "5",
            r: "1",
            key: "lttvr7"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "1",
            key: "41hilf"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "12",
            r: "1",
            key: "1wjl8i"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "12",
            r: "1",
            key: "1pcz8c"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "19",
            r: "1",
            key: "lyex9k"
        }
    ],
    [
        "circle",
        {
            cx: "19",
            cy: "19",
            r: "1",
            key: "shf9b7"
        }
    ],
    [
        "circle",
        {
            cx: "5",
            cy: "19",
            r: "1",
            key: "bfqh0e"
        }
    ]
]);
 //# sourceMappingURL=grip.js.map

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/EditEndingCard.tsx
/* __next_internal_client_entry_do_not_use__ EditEndingCard auto */ 

















const EditEndingCard = ({ localSurvey, endingCardIndex, setLocalSurvey, setActiveQuestionId, activeQuestionId, isInvalid, selectedLanguageCode, setSelectedLanguageCode, plan, addEndingCard, isFormbricksCloud, locale })=>{
    const endingCard = localSurvey.endings[endingCardIndex];
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const isRedirectToUrlDisabled = isFormbricksCloud ? plan === "free" && endingCard.type !== "redirectToUrl" : false;
    const [openDeleteConfirmationModal, setOpenDeleteConfirmationModal] = (0,react.useState)(false);
    const endingCardTypes = [
        {
            value: "endScreen",
            label: t("environments.surveys.edit.ending_card")
        },
        {
            value: "redirectToUrl",
            label: t("environments.surveys.edit.redirect_to_url"),
            disabled: isRedirectToUrlDisabled
        }
    ];
    const { attributes, listeners, setNodeRef, transform, transition, isDragging } = (0,sortable_esm/* useSortable */.gl)({
        id: endingCard.id
    });
    let open = activeQuestionId === endingCard.id;
    const setOpen = (e)=>{
        if (e) {
            setActiveQuestionId(endingCard.id);
        } else {
            setActiveQuestionId(null);
        }
    };
    const updateSurvey = (data)=>{
        setLocalSurvey((prevSurvey)=>{
            const updatedEndings = prevSurvey.endings.map((ending, idx)=>idx === endingCardIndex ? {
                    ...ending,
                    ...data
                } : ending);
            return {
                ...prevSurvey,
                endings: updatedEndings
            };
        });
    };
    const deleteEndingCard = ()=>{
        const isEndingCardUsedInFollowUps = localSurvey.followUps.some((followUp)=>{
            if (followUp.trigger.type === "endings") {
                if (followUp.trigger.properties?.endingIds?.includes(endingCard.id)) {
                    return true;
                }
            }
            return false;
        });
        // checking if this ending card is used in logic
        const quesIdx = findEndingCardUsedInLogic(localSurvey, endingCard.id);
        if (quesIdx !== -1) {
            dist/* default */.Ay.error(t("environments.surveys.edit.ending_card_used_in_logic", {
                questionIndex: quesIdx + 1
            }));
            return;
        }
        if (isEndingCardUsedInFollowUps) {
            setOpenDeleteConfirmationModal(true);
            return;
        }
        setLocalSurvey((prevSurvey)=>{
            const updatedEndings = prevSurvey.endings.filter((_, index)=>index !== endingCardIndex);
            return {
                ...prevSurvey,
                endings: updatedEndings
            };
        });
    };
    const style = {
        transition: transition ?? "transform 100ms ease",
        transform: utilities_esm/* CSS */.Ks.Translate.toString(transform),
        zIndex: isDragging ? 10 : 1
    };
    const duplicateEndingCard = ()=>{
        setLocalSurvey((prevSurvey)=>{
            const endingToDuplicate = prevSurvey.endings[endingCardIndex];
            const duplicatedEndingCard = {
                ...endingToDuplicate,
                id: (0,cuid2/* createId */.sX)()
            };
            const updatedEndings = [
                ...prevSurvey.endings.slice(0, endingCardIndex + 1),
                duplicatedEndingCard,
                ...prevSurvey.endings.slice(endingCardIndex + 1)
            ];
            return {
                ...prevSurvey,
                endings: updatedEndings
            };
        });
    };
    const moveEndingCard = (index, up)=>{
        setLocalSurvey((prevSurvey)=>{
            const newEndings = [
                ...prevSurvey.endings
            ];
            const [movedEnding] = newEndings.splice(index, 1);
            newEndings.splice(up ? index - 1 : index + 1, 0, movedEnding);
            return {
                ...prevSurvey,
                endings: newEndings
            };
        });
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: (0,lib_cn.cn)(open ? "shadow-lg" : "shadow-md", "group z-20 flex flex-row rounded-lg bg-white"),
        ref: setNodeRef,
        style: style,
        id: endingCard.id,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ...listeners,
                ...attributes,
                className: (0,lib_cn.cn)(open ? "bg-slate-50" : "", "flex w-10 flex-col items-center justify-between rounded-l-lg border-b border-l border-t py-2 group-aria-expanded:rounded-bl-none", isInvalid ? "bg-red-400" : "bg-white group-hover:bg-slate-50"),
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "mt-3 flex w-full justify-center",
                        children: endingCard.type === "endScreen" ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Handshake, {
                            className: "h-4 w-4"
                        }) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Undo2, {
                            className: "h-4 w-4 rotate-180"
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("button", {
                        className: "opacity-0 transition-all duration-300 hover:cursor-move group-hover:opacity-100",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Grip, {
                            className: "h-4 w-4"
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
                open: open,
                onOpenChange: setOpen,
                className: "flex-1 rounded-r-lg border border-slate-200 transition-all duration-300 ease-in-out",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                        asChild: true,
                        className: "flex cursor-pointer justify-between rounded-r-lg p-5 hover:bg-slate-50",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "inline-flex",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                                className: "text-sm font-semibold",
                                                children: [
                                                    endingCard.type === "endScreen" && (endingCard.headline && (0,recall/* recallToHeadline */.fV)(endingCard.headline, localSurvey, true, selectedLanguageCode)[selectedLanguageCode] ? formatTextWithSlashes((0,recall/* recallToHeadline */.fV)(endingCard.headline, localSurvey, true, selectedLanguageCode)[selectedLanguageCode]) : t("environments.surveys.edit.ending_card")),
                                                    endingCard.type === "redirectToUrl" && (endingCard.label || t("environments.surveys.edit.redirect_to_url"))
                                                ]
                                            }),
                                            !open && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                className: "mt-1 truncate text-xs text-slate-500",
                                                children: endingCard.type === "endScreen" ? t("environments.surveys.edit.ending_card") : t("environments.surveys.edit.redirect_to_url")
                                            })
                                        ]
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "flex items-center space-x-4",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(EditorCardMenu, {
                                        survey: localSurvey,
                                        cardIdx: endingCardIndex,
                                        lastCard: endingCardIndex === localSurvey.endings.length - 1,
                                        duplicateCard: duplicateEndingCard,
                                        deleteCard: deleteEndingCard,
                                        moveCard: moveEndingCard,
                                        card: endingCard,
                                        updateCard: ()=>{},
                                        addCard: addEndingCard,
                                        cardType: "ending"
                                    })
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                        className: `flex flex-col px-4 ${open && "mt-3 pb-6"}`,
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                                shouldRender: endingCard.type === "endScreen" && isRedirectToUrlDisabled,
                                tooltipContent: t("environments.surveys.edit.redirect_to_url_not_available_on_free_plan"),
                                triggerClass: "w-full",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(options_switch/* OptionsSwitch */.V, {
                                    options: endingCardTypes,
                                    currentOption: endingCard.type,
                                    handleOptionChange: (newType)=>{
                                        const selectedOption = endingCardTypes.find((option)=>option.value === newType);
                                        if (!selectedOption?.disabled) {
                                            if (newType === "redirectToUrl") {
                                                updateSurvey({
                                                    type: "redirectToUrl"
                                                });
                                            } else {
                                                updateSurvey({
                                                    type: "endScreen"
                                                });
                                            }
                                        }
                                    }
                                })
                            }),
                            endingCard.type === "endScreen" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(EndScreenForm, {
                                localSurvey: localSurvey,
                                endingCardIndex: endingCardIndex,
                                isInvalid: isInvalid,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                updateSurvey: updateSurvey,
                                endingCard: endingCard,
                                locale: locale
                            }),
                            endingCard.type === "redirectToUrl" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(RedirectUrlForm, {
                                localSurvey: localSurvey,
                                endingCard: endingCard,
                                updateSurvey: updateSurvey
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(confirmation_modal/* ConfirmationModal */.R, {
                buttonText: t("common.delete"),
                onConfirm: ()=>{
                    setLocalSurvey((prevSurvey)=>{
                        const updatedEndings = prevSurvey.endings.filter((_, index)=>index !== endingCardIndex);
                        const surveyFollowUps = prevSurvey.followUps.map((f)=>{
                            if (f.trigger.properties?.endingIds?.includes(endingCard.id)) {
                                return {
                                    ...f,
                                    trigger: {
                                        ...f.trigger,
                                        properties: {
                                            ...f.trigger.properties,
                                            endingIds: f.trigger.properties.endingIds.filter((id)=>id !== endingCard.id)
                                        }
                                    }
                                };
                            }
                            return f;
                        });
                        return {
                            ...prevSurvey,
                            endings: updatedEndings,
                            followUps: surveyFollowUps
                        };
                    });
                },
                open: openDeleteConfirmationModal,
                setOpen: setOpenDeleteConfirmationModal,
                text: t("environments.surveys.edit.follow_ups_ending_card_delete_modal_text"),
                title: t("environments.surveys.edit.follow_ups_ending_card_delete_modal_title")
            })
        ]
    });
};

;// ../../node_modules/dompurify/dist/purify.es.mjs
/*! @license DOMPurify 3.2.3 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.3/LICENSE */

const {
  entries,
  setPrototypeOf,
  isFrozen,
  getPrototypeOf,
  getOwnPropertyDescriptor
} = Object;
let {
  freeze,
  seal,
  create
} = Object; // eslint-disable-line import/no-mutable-exports
let {
  apply,
  construct
} = typeof Reflect !== 'undefined' && Reflect;
if (!freeze) {
  freeze = function freeze(x) {
    return x;
  };
}
if (!seal) {
  seal = function seal(x) {
    return x;
  };
}
if (!apply) {
  apply = function apply(fun, thisValue, args) {
    return fun.apply(thisValue, args);
  };
}
if (!construct) {
  construct = function construct(Func, args) {
    return new Func(...args);
  };
}
const arrayForEach = unapply(Array.prototype.forEach);
const arrayPop = unapply(Array.prototype.pop);
const arrayPush = unapply(Array.prototype.push);
const stringToLowerCase = unapply(String.prototype.toLowerCase);
const stringToString = unapply(String.prototype.toString);
const stringMatch = unapply(String.prototype.match);
const stringReplace = unapply(String.prototype.replace);
const stringIndexOf = unapply(String.prototype.indexOf);
const stringTrim = unapply(String.prototype.trim);
const objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);
const regExpTest = unapply(RegExp.prototype.test);
const typeErrorCreate = unconstruct(TypeError);
/**
 * Creates a new function that calls the given function with a specified thisArg and arguments.
 *
 * @param func - The function to be wrapped and called.
 * @returns A new function that calls the given function with a specified thisArg and arguments.
 */
function unapply(func) {
  return function (thisArg) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return apply(func, thisArg, args);
  };
}
/**
 * Creates a new function that constructs an instance of the given constructor function with the provided arguments.
 *
 * @param func - The constructor function to be wrapped and called.
 * @returns A new function that constructs an instance of the given constructor function with the provided arguments.
 */
function unconstruct(func) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return construct(func, args);
  };
}
/**
 * Add properties to a lookup table
 *
 * @param set - The set to which elements will be added.
 * @param array - The array containing elements to be added to the set.
 * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.
 * @returns The modified set with added elements.
 */
function addToSet(set, array) {
  let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;
  if (setPrototypeOf) {
    // Make 'in' and truthy checks like Boolean(set.constructor)
    // independent of any properties defined on Object.prototype.
    // Prevent prototype setters from intercepting set as a this value.
    setPrototypeOf(set, null);
  }
  let l = array.length;
  while (l--) {
    let element = array[l];
    if (typeof element === 'string') {
      const lcElement = transformCaseFunc(element);
      if (lcElement !== element) {
        // Config presets (e.g. tags.js, attrs.js) are immutable.
        if (!isFrozen(array)) {
          array[l] = lcElement;
        }
        element = lcElement;
      }
    }
    set[element] = true;
  }
  return set;
}
/**
 * Clean up an array to harden against CSPP
 *
 * @param array - The array to be cleaned.
 * @returns The cleaned version of the array
 */
function cleanArray(array) {
  for (let index = 0; index < array.length; index++) {
    const isPropertyExist = objectHasOwnProperty(array, index);
    if (!isPropertyExist) {
      array[index] = null;
    }
  }
  return array;
}
/**
 * Shallow clone an object
 *
 * @param object - The object to be cloned.
 * @returns A new object that copies the original.
 */
function clone(object) {
  const newObject = create(null);
  for (const [property, value] of entries(object)) {
    const isPropertyExist = objectHasOwnProperty(object, property);
    if (isPropertyExist) {
      if (Array.isArray(value)) {
        newObject[property] = cleanArray(value);
      } else if (value && typeof value === 'object' && value.constructor === Object) {
        newObject[property] = clone(value);
      } else {
        newObject[property] = value;
      }
    }
  }
  return newObject;
}
/**
 * This method automatically checks if the prop is function or getter and behaves accordingly.
 *
 * @param object - The object to look up the getter function in its prototype chain.
 * @param prop - The property name for which to find the getter function.
 * @returns The getter function found in the prototype chain or a fallback function.
 */
function lookupGetter(object, prop) {
  while (object !== null) {
    const desc = getOwnPropertyDescriptor(object, prop);
    if (desc) {
      if (desc.get) {
        return unapply(desc.get);
      }
      if (typeof desc.value === 'function') {
        return unapply(desc.value);
      }
    }
    object = getPrototypeOf(object);
  }
  function fallbackValue() {
    return null;
  }
  return fallbackValue;
}

const html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);
const svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);
const svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);
// List of SVG elements that are disallowed by default.
// We still need to know them so that we can do namespace
// checks properly in case one wants to add them to
// allow-list.
const svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);
const mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']);
// Similarly to SVG, we want to know all MathML elements,
// even those that we disallow by default.
const mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);
const purify_es_text = freeze(['#text']);

const html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'popover', 'popovertarget', 'popovertargetaction', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'wrap', 'xmlns', 'slot']);
const svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'amplitude', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'exponent', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'slope', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'tablevalues', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
const mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
const xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

// eslint-disable-next-line unicorn/better-regex
const MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
const ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
const TMPLIT_EXPR = seal(/\$\{[\w\W]*}/gm); // eslint-disable-line unicorn/better-regex
const DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]+$/); // eslint-disable-line no-useless-escape
const ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
);
const IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
const ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
);
const DOCTYPE_NAME = seal(/^html$/i);
const CUSTOM_ELEMENT = seal(/^[a-z][.\w]*(-[.\w]+)+$/i);

var EXPRESSIONS = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ARIA_ATTR: ARIA_ATTR,
  ATTR_WHITESPACE: ATTR_WHITESPACE,
  CUSTOM_ELEMENT: CUSTOM_ELEMENT,
  DATA_ATTR: DATA_ATTR,
  DOCTYPE_NAME: DOCTYPE_NAME,
  ERB_EXPR: ERB_EXPR,
  IS_ALLOWED_URI: IS_ALLOWED_URI,
  IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,
  MUSTACHE_EXPR: MUSTACHE_EXPR,
  TMPLIT_EXPR: TMPLIT_EXPR
});

/* eslint-disable @typescript-eslint/indent */
// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
const NODE_TYPE = {
  element: 1,
  attribute: 2,
  text: 3,
  cdataSection: 4,
  entityReference: 5,
  // Deprecated
  entityNode: 6,
  // Deprecated
  progressingInstruction: 7,
  comment: 8,
  document: 9,
  documentType: 10,
  documentFragment: 11,
  notation: 12 // Deprecated
};
const getGlobal = function getGlobal() {
  return typeof window === 'undefined' ? null : window;
};
/**
 * Creates a no-op policy for internal use only.
 * Don't export this function outside this module!
 * @param trustedTypes The policy factory.
 * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).
 * @return The policy created (or null, if Trusted Types
 * are not supported or creating the policy failed).
 */
const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {
  if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
    return null;
  }
  // Allow the callers to control the unique policy name
  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
  // Policy creation with duplicate names throws in Trusted Types.
  let suffix = null;
  const ATTR_NAME = 'data-tt-policy-suffix';
  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {
    suffix = purifyHostElement.getAttribute(ATTR_NAME);
  }
  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');
  try {
    return trustedTypes.createPolicy(policyName, {
      createHTML(html) {
        return html;
      },
      createScriptURL(scriptUrl) {
        return scriptUrl;
      }
    });
  } catch (_) {
    // Policy creation failed (most likely another DOMPurify script has
    // already run). Skip creating the policy, as this will only cause errors
    // if TT are enforced.
    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
    return null;
  }
};
const _createHooksMap = function _createHooksMap() {
  return {
    afterSanitizeAttributes: [],
    afterSanitizeElements: [],
    afterSanitizeShadowDOM: [],
    beforeSanitizeAttributes: [],
    beforeSanitizeElements: [],
    beforeSanitizeShadowDOM: [],
    uponSanitizeAttribute: [],
    uponSanitizeElement: [],
    uponSanitizeShadowNode: []
  };
};
function createDOMPurify() {
  let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();
  const DOMPurify = root => createDOMPurify(root);
  DOMPurify.version = '3.2.3';
  DOMPurify.removed = [];
  if (!window || !window.document || window.document.nodeType !== NODE_TYPE.document) {
    // Not running in a browser, provide a factory function
    // so that you can pass your own Window
    DOMPurify.isSupported = false;
    return DOMPurify;
  }
  let {
    document
  } = window;
  const originalDocument = document;
  const currentScript = originalDocument.currentScript;
  const {
    DocumentFragment,
    HTMLTemplateElement,
    Node,
    Element,
    NodeFilter,
    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,
    HTMLFormElement,
    DOMParser,
    trustedTypes
  } = window;
  const ElementPrototype = Element.prototype;
  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
  const remove = lookupGetter(ElementPrototype, 'remove');
  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');
  // As per issue #47, the web-components registry is inherited by a
  // new document created via createHTMLDocument. As per the spec
  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
  // a new empty registry is used when creating a template contents owner
  // document, so we use that as our parent document to ensure nothing
  // is inherited.
  if (typeof HTMLTemplateElement === 'function') {
    const template = document.createElement('template');
    if (template.content && template.content.ownerDocument) {
      document = template.content.ownerDocument;
    }
  }
  let trustedTypesPolicy;
  let emptyHTML = '';
  const {
    implementation,
    createNodeIterator,
    createDocumentFragment,
    getElementsByTagName
  } = document;
  const {
    importNode
  } = originalDocument;
  let hooks = _createHooksMap();
  /**
   * Expose whether this browser supports running the full DOMPurify.
   */
  DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;
  const {
    MUSTACHE_EXPR,
    ERB_EXPR,
    TMPLIT_EXPR,
    DATA_ATTR,
    ARIA_ATTR,
    IS_SCRIPT_OR_DATA,
    ATTR_WHITESPACE,
    CUSTOM_ELEMENT
  } = EXPRESSIONS;
  let {
    IS_ALLOWED_URI: IS_ALLOWED_URI$1
  } = EXPRESSIONS;
  /**
   * We consider the elements and attributes below to be safe. Ideally
   * don't add any new ones but feel free to remove unwanted ones.
   */
  /* allowed element names */
  let ALLOWED_TAGS = null;
  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...purify_es_text]);
  /* Allowed attribute names */
  let ALLOWED_ATTR = null;
  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);
  /*
   * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.
   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
   */
  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {
    tagNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    attributeNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: false
    }
  }));
  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */
  let FORBID_TAGS = null;
  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */
  let FORBID_ATTR = null;
  /* Decide if ARIA attributes are okay */
  let ALLOW_ARIA_ATTR = true;
  /* Decide if custom data attributes are okay */
  let ALLOW_DATA_ATTR = true;
  /* Decide if unknown protocols are okay */
  let ALLOW_UNKNOWN_PROTOCOLS = false;
  /* Decide if self-closing tags in attributes are allowed.
   * Usually removed due to a mXSS issue in jQuery 3.0 */
  let ALLOW_SELF_CLOSE_IN_ATTR = true;
  /* Output should be safe for common template engines.
   * This means, DOMPurify removes data attributes, mustaches and ERB
   */
  let SAFE_FOR_TEMPLATES = false;
  /* Output should be safe even for XML used within HTML and alike.
   * This means, DOMPurify removes comments when containing risky content.
   */
  let SAFE_FOR_XML = true;
  /* Decide if document with <html>... should be returned */
  let WHOLE_DOCUMENT = false;
  /* Track whether config is already set on this instance of DOMPurify. */
  let SET_CONFIG = false;
  /* Decide if all elements (e.g. style, script) must be children of
   * document.body. By default, browsers might move them to document.head */
  let FORCE_BODY = false;
  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
   * string (or a TrustedHTML object if Trusted Types are supported).
   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
   */
  let RETURN_DOM = false;
  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
   * string  (or a TrustedHTML object if Trusted Types are supported) */
  let RETURN_DOM_FRAGMENT = false;
  /* Try to return a Trusted Type object instead of a string, return a string in
   * case Trusted Types are not supported  */
  let RETURN_TRUSTED_TYPE = false;
  /* Output should be free from DOM clobbering attacks?
   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.
   */
  let SANITIZE_DOM = true;
  /* Achieve full DOM Clobbering protection by isolating the namespace of named
   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.
   *
   * HTML/DOM spec rules that enable DOM Clobbering:
   *   - Named Access on Window (§7.3.3)
   *   - DOM Tree Accessors (§3.1.5)
   *   - Form Element Parent-Child Relations (§4.10.3)
   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)
   *   - HTMLCollection (§4.2.10.2)
   *
   * Namespace isolation is implemented by prefixing `id` and `name` attributes
   * with a constant string, i.e., `user-content-`
   */
  let SANITIZE_NAMED_PROPS = false;
  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';
  /* Keep element content when removing element? */
  let KEEP_CONTENT = true;
  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
   * of importing it into a new Document and returning a sanitized copy */
  let IN_PLACE = false;
  /* Allow usage of profiles like html, svg and mathMl */
  let USE_PROFILES = {};
  /* Tags to ignore content of when KEEP_CONTENT is true */
  let FORBID_CONTENTS = null;
  const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);
  /* Tags that are safe for data: URIs */
  let DATA_URI_TAGS = null;
  const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);
  /* Attributes safe for values like "javascript:" */
  let URI_SAFE_ATTRIBUTES = null;
  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);
  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
  /* Document namespace */
  let NAMESPACE = HTML_NAMESPACE;
  let IS_EMPTY_INPUT = false;
  /* Allowed XHTML+XML namespaces */
  let ALLOWED_NAMESPACES = null;
  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
  let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);
  let HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);
  // Certain elements are allowed in both SVG and HTML
  // namespace. We need to specify them explicitly
  // so that they don't get erroneously deleted from
  // HTML namespace.
  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);
  /* Parsing of strict XHTML documents */
  let PARSER_MEDIA_TYPE = null;
  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
  let transformCaseFunc = null;
  /* Keep a reference to config to pass to hooks */
  let CONFIG = null;
  /* Ideally, do not touch anything below this line */
  /* ______________________________________________ */
  const formElement = document.createElement('form');
  const isRegexOrFunction = function isRegexOrFunction(testValue) {
    return testValue instanceof RegExp || testValue instanceof Function;
  };
  /**
   * _parseConfig
   *
   * @param cfg optional config literal
   */
  // eslint-disable-next-line complexity
  const _parseConfig = function _parseConfig() {
    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (CONFIG && CONFIG === cfg) {
      return;
    }
    /* Shield configuration object from tampering */
    if (!cfg || typeof cfg !== 'object') {
      cfg = {};
    }
    /* Shield configuration object from prototype pollution */
    cfg = clone(cfg);
    PARSER_MEDIA_TYPE =
    // eslint-disable-next-line unicorn/prefer-includes
    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;
    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.
    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;
    /* Set configuration parameters */
    ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
    ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;
    DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;
    FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
    FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
    FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
    USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;
    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true
    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true
    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false
    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true
    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false
    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true
    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false
    RETURN_DOM = cfg.RETURN_DOM || false; // Default false
    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false
    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false
    FORCE_BODY = cfg.FORCE_BODY || false; // Default false
    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true
    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false
    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true
    IN_PLACE = cfg.IN_PLACE || false; // Default false
    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;
    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
    MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;
    HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;
    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
    }
    if (SAFE_FOR_TEMPLATES) {
      ALLOW_DATA_ATTR = false;
    }
    if (RETURN_DOM_FRAGMENT) {
      RETURN_DOM = true;
    }
    /* Parse profile info */
    if (USE_PROFILES) {
      ALLOWED_TAGS = addToSet({}, purify_es_text);
      ALLOWED_ATTR = [];
      if (USE_PROFILES.html === true) {
        addToSet(ALLOWED_TAGS, html$1);
        addToSet(ALLOWED_ATTR, html);
      }
      if (USE_PROFILES.svg === true) {
        addToSet(ALLOWED_TAGS, svg$1);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.svgFilters === true) {
        addToSet(ALLOWED_TAGS, svgFilters);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.mathMl === true) {
        addToSet(ALLOWED_TAGS, mathMl$1);
        addToSet(ALLOWED_ATTR, mathMl);
        addToSet(ALLOWED_ATTR, xml);
      }
    }
    /* Merge configuration parameters */
    if (cfg.ADD_TAGS) {
      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
        ALLOWED_TAGS = clone(ALLOWED_TAGS);
      }
      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
    }
    if (cfg.ADD_ATTR) {
      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
        ALLOWED_ATTR = clone(ALLOWED_ATTR);
      }
      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
    }
    if (cfg.ADD_URI_SAFE_ATTR) {
      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
    }
    if (cfg.FORBID_CONTENTS) {
      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
        FORBID_CONTENTS = clone(FORBID_CONTENTS);
      }
      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
    }
    /* Add #text in case KEEP_CONTENT is set to true */
    if (KEEP_CONTENT) {
      ALLOWED_TAGS['#text'] = true;
    }
    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */
    if (WHOLE_DOCUMENT) {
      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
    }
    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */
    if (ALLOWED_TAGS.table) {
      addToSet(ALLOWED_TAGS, ['tbody']);
      delete FORBID_TAGS.tbody;
    }
    if (cfg.TRUSTED_TYPES_POLICY) {
      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
      }
      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
      }
      // Overwrite existing TrustedTypes policy.
      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;
      // Sign local variables required by `sanitize`.
      emptyHTML = trustedTypesPolicy.createHTML('');
    } else {
      // Uninitialized policy, attempt to initialize the internal dompurify policy.
      if (trustedTypesPolicy === undefined) {
        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);
      }
      // If creating the internal policy succeeded sign internal variables.
      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {
        emptyHTML = trustedTypesPolicy.createHTML('');
      }
    }
    // Prevent further manipulation of configuration.
    // Not available in IE8, Safari 5, etc.
    if (freeze) {
      freeze(cfg);
    }
    CONFIG = cfg;
  };
  /* Keep track of all possible SVG and MathML tags
   * so that we can perform the namespace checks
   * correctly. */
  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);
  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);
  /**
   * @param element a DOM element whose namespace is being checked
   * @returns Return false if the element has a
   *  namespace that a spec-compliant parser would never
   *  return. Return true otherwise.
   */
  const _checkValidNamespace = function _checkValidNamespace(element) {
    let parent = getParentNode(element);
    // In JSDOM, if we're inside shadow DOM, then parentNode
    // can be null. We just simulate parent in this case.
    if (!parent || !parent.tagName) {
      parent = {
        namespaceURI: NAMESPACE,
        tagName: 'template'
      };
    }
    const tagName = stringToLowerCase(element.tagName);
    const parentTagName = stringToLowerCase(parent.tagName);
    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
      return false;
    }
    if (element.namespaceURI === SVG_NAMESPACE) {
      // The only way to switch from HTML namespace to SVG
      // is via <svg>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'svg';
      }
      // The only way to switch from MathML to SVG is via`
      // svg if parent is either <annotation-xml> or MathML
      // text integration points.
      if (parent.namespaceURI === MATHML_NAMESPACE) {
        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
      }
      // We only allow elements that are defined in SVG
      // spec. All others are disallowed in SVG namespace.
      return Boolean(ALL_SVG_TAGS[tagName]);
    }
    if (element.namespaceURI === MATHML_NAMESPACE) {
      // The only way to switch from HTML namespace to MathML
      // is via <math>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'math';
      }
      // The only way to switch from SVG to MathML is via
      // <math> and HTML integration points
      if (parent.namespaceURI === SVG_NAMESPACE) {
        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
      }
      // We only allow elements that are defined in MathML
      // spec. All others are disallowed in MathML namespace.
      return Boolean(ALL_MATHML_TAGS[tagName]);
    }
    if (element.namespaceURI === HTML_NAMESPACE) {
      // The only way to switch from SVG to HTML is via
      // HTML integration points, and from MathML to HTML
      // is via MathML text integration points
      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      // We disallow tags that are specific for MathML
      // or SVG and should never appear in HTML namespace
      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
    }
    // For XHTML and XML documents that support custom namespaces
    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {
      return true;
    }
    // The code should never reach this place (this means
    // that the element somehow got namespace that is not
    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).
    // Return false just in case.
    return false;
  };
  /**
   * _forceRemove
   *
   * @param node a DOM node
   */
  const _forceRemove = function _forceRemove(node) {
    arrayPush(DOMPurify.removed, {
      element: node
    });
    try {
      // eslint-disable-next-line unicorn/prefer-dom-node-remove
      getParentNode(node).removeChild(node);
    } catch (_) {
      remove(node);
    }
  };
  /**
   * _removeAttribute
   *
   * @param name an Attribute name
   * @param element a DOM node
   */
  const _removeAttribute = function _removeAttribute(name, element) {
    try {
      arrayPush(DOMPurify.removed, {
        attribute: element.getAttributeNode(name),
        from: element
      });
    } catch (_) {
      arrayPush(DOMPurify.removed, {
        attribute: null,
        from: element
      });
    }
    element.removeAttribute(name);
    // We void attribute values for unremovable "is" attributes
    if (name === 'is') {
      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
        try {
          _forceRemove(element);
        } catch (_) {}
      } else {
        try {
          element.setAttribute(name, '');
        } catch (_) {}
      }
    }
  };
  /**
   * _initDocument
   *
   * @param dirty - a string of dirty markup
   * @return a DOM, filled with the dirty markup
   */
  const _initDocument = function _initDocument(dirty) {
    /* Create a HTML document */
    let doc = null;
    let leadingWhitespace = null;
    if (FORCE_BODY) {
      dirty = '<remove></remove>' + dirty;
    } else {
      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
      const matches = stringMatch(dirty, /^[\r\n\t ]+/);
      leadingWhitespace = matches && matches[0];
    }
    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {
      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
      dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
    }
    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
    /*
     * Use the DOMParser API by default, fallback later if needs be
     * DOMParser not work for svg when has multiple root element.
     */
    if (NAMESPACE === HTML_NAMESPACE) {
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
      } catch (_) {}
    }
    /* Use createHTMLDocument in case DOMParser is not available */
    if (!doc || !doc.documentElement) {
      doc = implementation.createDocument(NAMESPACE, 'template', null);
      try {
        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
      } catch (_) {
        // Syntax error if dirtyPayload is invalid xml
      }
    }
    const body = doc.body || doc.documentElement;
    if (dirty && leadingWhitespace) {
      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
    }
    /* Work on whole document or just its body */
    if (NAMESPACE === HTML_NAMESPACE) {
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
    }
    return WHOLE_DOCUMENT ? doc.documentElement : body;
  };
  /**
   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
   *
   * @param root The root element or node to start traversing on.
   * @return The created NodeIterator
   */
  const _createNodeIterator = function _createNodeIterator(root) {
    return createNodeIterator.call(root.ownerDocument || root, root,
    // eslint-disable-next-line no-bitwise
    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);
  };
  /**
   * _isClobbered
   *
   * @param element element to check for clobbering attacks
   * @return true if clobbered, false if safe
   */
  const _isClobbered = function _isClobbered(element) {
    return element instanceof HTMLFormElement && (typeof element.nodeName !== 'string' || typeof element.textContent !== 'string' || typeof element.removeChild !== 'function' || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== 'function' || typeof element.setAttribute !== 'function' || typeof element.namespaceURI !== 'string' || typeof element.insertBefore !== 'function' || typeof element.hasChildNodes !== 'function');
  };
  /**
   * Checks whether the given object is a DOM node.
   *
   * @param value object to check whether it's a DOM node
   * @return true is object is a DOM node
   */
  const _isNode = function _isNode(value) {
    return typeof Node === 'function' && value instanceof Node;
  };
  function _executeHooks(hooks, currentNode, data) {
    arrayForEach(hooks, hook => {
      hook.call(DOMPurify, currentNode, data, CONFIG);
    });
  }
  /**
   * _sanitizeElements
   *
   * @protect nodeName
   * @protect textContent
   * @protect removeChild
   * @param currentNode to check for permission to exist
   * @return true if node was killed, false if left alive
   */
  const _sanitizeElements = function _sanitizeElements(currentNode) {
    let content = null;
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeElements, currentNode, null);
    /* Check if element is clobbered or can clobber */
    if (_isClobbered(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Now let's check the element's type and name */
    const tagName = transformCaseFunc(currentNode.nodeName);
    /* Execute a hook if present */
    _executeHooks(hooks.uponSanitizeElement, currentNode, {
      tagName,
      allowedTags: ALLOWED_TAGS
    });
    /* Detect mXSS attempts abusing namespace confusion */
    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove any occurrence of processing instructions */
    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove any kind of possibly harmful comments */
    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\w]/g, currentNode.data)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove element if anything forbids its presence */
    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
      /* Check if we have a custom element to handle */
      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {
          return false;
        }
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {
          return false;
        }
      }
      /* Keep content except for bad-listed elements */
      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
        const parentNode = getParentNode(currentNode) || currentNode.parentNode;
        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;
        if (childNodes && parentNode) {
          const childCount = childNodes.length;
          for (let i = childCount - 1; i >= 0; --i) {
            const childClone = cloneNode(childNodes[i], true);
            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;
            parentNode.insertBefore(childClone, getNextSibling(currentNode));
          }
        }
      }
      _forceRemove(currentNode);
      return true;
    }
    /* Check whether element has a valid namespace */
    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Make sure that older browsers don't get fallback-tag mXSS */
    if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Sanitize element content to be template-safe */
    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {
      /* Get the element's text content */
      content = currentNode.textContent;
      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
        content = stringReplace(content, expr, ' ');
      });
      if (currentNode.textContent !== content) {
        arrayPush(DOMPurify.removed, {
          element: currentNode.cloneNode()
        });
        currentNode.textContent = content;
      }
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeElements, currentNode, null);
    return false;
  };
  /**
   * _isValidAttribute
   *
   * @param lcTag Lowercase tag name of containing element.
   * @param lcName Lowercase attribute name.
   * @param value Attribute value.
   * @return Returns true if `value` is valid, otherwise false.
   */
  // eslint-disable-next-line complexity
  const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
    /* Make sure attribute cannot clobber */
    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
      return false;
    }
    /* Allow valid data-* attributes: At least one character after "-"
        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
        We don't need to check the value; it's always URI safe. */
    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
      if (
      // First condition does a very basic check if a) it's basically a valid custom element tagname AND
      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
      _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||
      // Alternative, second condition checks if it's an `is`-attribute, AND
      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {
        return false;
      }
      /* Check value is safe. First, is attr inert? If so, is safe */
    } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {
      return false;
    } else ;
    return true;
  };
  /**
   * _isBasicCustomElement
   * checks if at least one dash is included in tagName, and it's not the first char
   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
   *
   * @param tagName name of the tag of the node to sanitize
   * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.
   */
  const _isBasicCustomElement = function _isBasicCustomElement(tagName) {
    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);
  };
  /**
   * _sanitizeAttributes
   *
   * @protect attributes
   * @protect nodeName
   * @protect removeAttribute
   * @protect setAttribute
   *
   * @param currentNode to sanitize
   */
  const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);
    const {
      attributes
    } = currentNode;
    /* Check if we have attributes; if not we might have a text node */
    if (!attributes || _isClobbered(currentNode)) {
      return;
    }
    const hookEvent = {
      attrName: '',
      attrValue: '',
      keepAttr: true,
      allowedAttributes: ALLOWED_ATTR,
      forceKeepAttr: undefined
    };
    let l = attributes.length;
    /* Go backwards over all attributes; safely remove bad ones */
    while (l--) {
      const attr = attributes[l];
      const {
        name,
        namespaceURI,
        value: attrValue
      } = attr;
      const lcName = transformCaseFunc(name);
      let value = name === 'value' ? attrValue : stringTrim(attrValue);
      /* Execute a hook if present */
      hookEvent.attrName = lcName;
      hookEvent.attrValue = value;
      hookEvent.keepAttr = true;
      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set
      _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);
      value = hookEvent.attrValue;
      /* Full DOM Clobbering protection via namespace isolation,
       * Prefix id and name attributes with `user-content-`
       */
      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {
        // Remove the attribute with this value
        _removeAttribute(name, currentNode);
        // Prefix the value and later re-create the attribute with the sanitized value
        value = SANITIZE_NAMED_PROPS_PREFIX + value;
      }
      /* Work around a security issue with comments inside attributes */
      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\/(style|title)/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      /* Did the hooks approve of the attribute? */
      if (hookEvent.forceKeepAttr) {
        continue;
      }
      /* Remove attribute */
      _removeAttribute(name, currentNode);
      /* Did the hooks approve of the attribute? */
      if (!hookEvent.keepAttr) {
        continue;
      }
      /* Work around a security issue in jQuery 3.0 */
      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      /* Sanitize attribute content to be template-safe */
      if (SAFE_FOR_TEMPLATES) {
        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
          value = stringReplace(value, expr, ' ');
        });
      }
      /* Is `value` valid for this attribute? */
      const lcTag = transformCaseFunc(currentNode.nodeName);
      if (!_isValidAttribute(lcTag, lcName, value)) {
        continue;
      }
      /* Handle attributes that require Trusted Types */
      if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {
        if (namespaceURI) ; else {
          switch (trustedTypes.getAttributeType(lcTag, lcName)) {
            case 'TrustedHTML':
              {
                value = trustedTypesPolicy.createHTML(value);
                break;
              }
            case 'TrustedScriptURL':
              {
                value = trustedTypesPolicy.createScriptURL(value);
                break;
              }
          }
        }
      }
      /* Handle invalid data-* attribute set by try-catching it */
      try {
        if (namespaceURI) {
          currentNode.setAttributeNS(namespaceURI, name, value);
        } else {
          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
          currentNode.setAttribute(name, value);
        }
        if (_isClobbered(currentNode)) {
          _forceRemove(currentNode);
        } else {
          arrayPop(DOMPurify.removed);
        }
      } catch (_) {}
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);
  };
  /**
   * _sanitizeShadowDOM
   *
   * @param fragment to iterate over recursively
   */
  const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
    let shadowNode = null;
    const shadowIterator = _createNodeIterator(fragment);
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);
    while (shadowNode = shadowIterator.nextNode()) {
      /* Execute a hook if present */
      _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);
      /* Sanitize tags and elements */
      _sanitizeElements(shadowNode);
      /* Check attributes next */
      _sanitizeAttributes(shadowNode);
      /* Deep shadow DOM detected */
      if (shadowNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(shadowNode.content);
      }
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);
  };
  // eslint-disable-next-line complexity
  DOMPurify.sanitize = function (dirty) {
    let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let body = null;
    let importedNode = null;
    let currentNode = null;
    let returnNode = null;
    /* Make sure we have a string to sanitize.
      DO NOT return early, as this will return the wrong type if
      the user has requested a DOM object rather than a string */
    IS_EMPTY_INPUT = !dirty;
    if (IS_EMPTY_INPUT) {
      dirty = '<!-->';
    }
    /* Stringify, in case dirty is an object */
    if (typeof dirty !== 'string' && !_isNode(dirty)) {
      if (typeof dirty.toString === 'function') {
        dirty = dirty.toString();
        if (typeof dirty !== 'string') {
          throw typeErrorCreate('dirty is not a string, aborting');
        }
      } else {
        throw typeErrorCreate('toString is not a function');
      }
    }
    /* Return dirty HTML if DOMPurify cannot run */
    if (!DOMPurify.isSupported) {
      return dirty;
    }
    /* Assign config vars */
    if (!SET_CONFIG) {
      _parseConfig(cfg);
    }
    /* Clean up removed elements */
    DOMPurify.removed = [];
    /* Check if dirty is correctly typed for IN_PLACE */
    if (typeof dirty === 'string') {
      IN_PLACE = false;
    }
    if (IN_PLACE) {
      /* Do some early pre-sanitization to avoid unsafe root nodes */
      if (dirty.nodeName) {
        const tagName = transformCaseFunc(dirty.nodeName);
        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');
        }
      }
    } else if (dirty instanceof Node) {
      /* If dirty is a DOM element, append to an empty document to avoid
         elements being stripped by the parser */
      body = _initDocument('<!---->');
      importedNode = body.ownerDocument.importNode(dirty, true);
      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') {
        /* Node is already a body, use as is */
        body = importedNode;
      } else if (importedNode.nodeName === 'HTML') {
        body = importedNode;
      } else {
        // eslint-disable-next-line unicorn/prefer-dom-node-append
        body.appendChild(importedNode);
      }
    } else {
      /* Exit directly if we have nothing to do */
      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&
      // eslint-disable-next-line unicorn/prefer-includes
      dirty.indexOf('<') === -1) {
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
      }
      /* Initialize the document to work on */
      body = _initDocument(dirty);
      /* Check we have a DOM node from the data */
      if (!body) {
        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';
      }
    }
    /* Remove first element node (ours) if FORCE_BODY is set */
    if (body && FORCE_BODY) {
      _forceRemove(body.firstChild);
    }
    /* Get node iterator */
    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);
    /* Now start iterating over the created document */
    while (currentNode = nodeIterator.nextNode()) {
      /* Sanitize tags and elements */
      _sanitizeElements(currentNode);
      /* Check attributes next */
      _sanitizeAttributes(currentNode);
      /* Shadow DOM detected, sanitize it */
      if (currentNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(currentNode.content);
      }
    }
    /* If we sanitized `dirty` in-place, return it. */
    if (IN_PLACE) {
      return dirty;
    }
    /* Return sanitized string or DOM */
    if (RETURN_DOM) {
      if (RETURN_DOM_FRAGMENT) {
        returnNode = createDocumentFragment.call(body.ownerDocument);
        while (body.firstChild) {
          // eslint-disable-next-line unicorn/prefer-dom-node-append
          returnNode.appendChild(body.firstChild);
        }
      } else {
        returnNode = body;
      }
      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {
        /*
          AdoptNode() is not used because internal state is not reset
          (e.g. the past names map of a HTMLFormElement), this is safe
          in theory but we would rather not risk another attack vector.
          The state that is cloned by importNode() is explicitly defined
          by the specs.
        */
        returnNode = importNode.call(originalDocument, returnNode, true);
      }
      return returnNode;
    }
    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
    /* Serialize doctype if allowed */
    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + serializedHTML;
    }
    /* Sanitize final string template-safe */
    if (SAFE_FOR_TEMPLATES) {
      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
        serializedHTML = stringReplace(serializedHTML, expr, ' ');
      });
    }
    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
  };
  DOMPurify.setConfig = function () {
    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _parseConfig(cfg);
    SET_CONFIG = true;
  };
  DOMPurify.clearConfig = function () {
    CONFIG = null;
    SET_CONFIG = false;
  };
  DOMPurify.isValidAttribute = function (tag, attr, value) {
    /* Initialize shared config vars if necessary. */
    if (!CONFIG) {
      _parseConfig({});
    }
    const lcTag = transformCaseFunc(tag);
    const lcName = transformCaseFunc(attr);
    return _isValidAttribute(lcTag, lcName, value);
  };
  DOMPurify.addHook = function (entryPoint, hookFunction) {
    if (typeof hookFunction !== 'function') {
      return;
    }
    arrayPush(hooks[entryPoint], hookFunction);
  };
  DOMPurify.removeHook = function (entryPoint) {
    return arrayPop(hooks[entryPoint]);
  };
  DOMPurify.removeHooks = function (entryPoint) {
    hooks[entryPoint] = [];
  };
  DOMPurify.removeAllHooks = function () {
    hooks = _createHooksMap();
  };
  return DOMPurify;
}
var purify = createDOMPurify();


//# sourceMappingURL=purify.es.mjs.map

;// ../../node_modules/mdurl/lib/decode.mjs
/* eslint-disable no-bitwise */

const decodeCache = {}

function getDecodeCache (exclude) {
  let cache = decodeCache[exclude]
  if (cache) { return cache }

  cache = decodeCache[exclude] = []

  for (let i = 0; i < 128; i++) {
    const ch = String.fromCharCode(i)
    cache.push(ch)
  }

  for (let i = 0; i < exclude.length; i++) {
    const ch = exclude.charCodeAt(i)
    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2)
  }

  return cache
}

// Decode percent-encoded string.
//
function decode (string, exclude) {
  if (typeof exclude !== 'string') {
    exclude = decode.defaultChars
  }

  const cache = getDecodeCache(exclude)

  return string.replace(/(%[a-f0-9]{2})+/gi, function (seq) {
    let result = ''

    for (let i = 0, l = seq.length; i < l; i += 3) {
      const b1 = parseInt(seq.slice(i + 1, i + 3), 16)

      if (b1 < 0x80) {
        result += cache[b1]
        continue
      }

      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {
        // 110xxxxx 10xxxxxx
        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)

        if ((b2 & 0xC0) === 0x80) {
          const chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F)

          if (chr < 0x80) {
            result += '\ufffd\ufffd'
          } else {
            result += String.fromCharCode(chr)
          }

          i += 3
          continue
        }
      }

      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {
        // 1110xxxx 10xxxxxx 10xxxxxx
        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)
        const b3 = parseInt(seq.slice(i + 7, i + 9), 16)

        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
          const chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F)

          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {
            result += '\ufffd\ufffd\ufffd'
          } else {
            result += String.fromCharCode(chr)
          }

          i += 6
          continue
        }
      }

      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {
        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx
        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)
        const b3 = parseInt(seq.slice(i + 7, i + 9), 16)
        const b4 = parseInt(seq.slice(i + 10, i + 12), 16)

        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {
          let chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F)

          if (chr < 0x10000 || chr > 0x10FFFF) {
            result += '\ufffd\ufffd\ufffd\ufffd'
          } else {
            chr -= 0x10000
            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF))
          }

          i += 9
          continue
        }
      }

      result += '\ufffd'
    }

    return result
  })
}

decode.defaultChars = ';/?:@&=+$,#'
decode.componentChars = ''

/* harmony default export */ const lib_decode = (decode);

;// ../../node_modules/mdurl/lib/encode.mjs
const encodeCache = {}

// Create a lookup array where anything but characters in `chars` string
// and alphanumeric chars is percent-encoded.
//
function getEncodeCache (exclude) {
  let cache = encodeCache[exclude]
  if (cache) { return cache }

  cache = encodeCache[exclude] = []

  for (let i = 0; i < 128; i++) {
    const ch = String.fromCharCode(i)

    if (/^[0-9a-z]$/i.test(ch)) {
      // always allow unencoded alphanumeric characters
      cache.push(ch)
    } else {
      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2))
    }
  }

  for (let i = 0; i < exclude.length; i++) {
    cache[exclude.charCodeAt(i)] = exclude[i]
  }

  return cache
}

// Encode unsafe characters with percent-encoding, skipping already
// encoded sequences.
//
//  - string       - string to encode
//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
//
function encode (string, exclude, keepEscaped) {
  if (typeof exclude !== 'string') {
    // encode(string, keepEscaped)
    keepEscaped = exclude
    exclude = encode.defaultChars
  }

  if (typeof keepEscaped === 'undefined') {
    keepEscaped = true
  }

  const cache = getEncodeCache(exclude)
  let result = ''

  for (let i = 0, l = string.length; i < l; i++) {
    const code = string.charCodeAt(i)

    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {
      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
        result += string.slice(i, i + 3)
        i += 2
        continue
      }
    }

    if (code < 128) {
      result += cache[code]
      continue
    }

    if (code >= 0xD800 && code <= 0xDFFF) {
      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
        const nextCode = string.charCodeAt(i + 1)
        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
          result += encodeURIComponent(string[i] + string[i + 1])
          i++
          continue
        }
      }
      result += '%EF%BF%BD'
      continue
    }

    result += encodeURIComponent(string[i])
  }

  return result
}

encode.defaultChars = ";/?:@&=+$,-_.!~*'()#"
encode.componentChars = "-_.!~*'()"

/* harmony default export */ const lib_encode = (encode);

;// ../../node_modules/mdurl/lib/format.mjs
function format (url) {
  let result = ''

  result += url.protocol || ''
  result += url.slashes ? '//' : ''
  result += url.auth ? url.auth + '@' : ''

  if (url.hostname && url.hostname.indexOf(':') !== -1) {
    // ipv6 address
    result += '[' + url.hostname + ']'
  } else {
    result += url.hostname || ''
  }

  result += url.port ? ':' + url.port : ''
  result += url.pathname || ''
  result += url.search || ''
  result += url.hash || ''

  return result
};

;// ../../node_modules/mdurl/lib/parse.mjs
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

//
// Changes from joyent/node:
//
// 1. No leading slash in paths,
//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`
//
// 2. Backslashes are not replaced with slashes,
//    so `http:\\example.org\` is treated like a relative path
//
// 3. Trailing colon is treated like a part of the path,
//    i.e. in `http://example.org:foo` pathname is `:foo`
//
// 4. Nothing is URL-encoded in the resulting object,
//    (in joyent/node some chars in auth and paths are encoded)
//
// 5. `url.parse()` does not have `parseQueryString` argument
//
// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,
//    which can be constructed using other parts of the url.
//

function Url () {
  this.protocol = null
  this.slashes = null
  this.auth = null
  this.port = null
  this.hostname = null
  this.hash = null
  this.search = null
  this.pathname = null
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
const protocolPattern = /^([a-z0-9.+-]+:)/i
const portPattern = /:[0-9]*$/

// Special case for a simple path URL
/* eslint-disable-next-line no-useless-escape */
const simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/

// RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
const delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t']

// RFC 2396: characters not allowed for various reasons.
const unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims)

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
const autoEscape = ['\''].concat(unwise)
// Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
const nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape)
const hostEndingChars = ['/', '?', '#']
const hostnameMaxLen = 255
const hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/
const hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/
// protocols that can allow "unsafe" and "unwise" chars.
// protocols that never have a hostname.
const hostlessProtocol = {
  javascript: true,
  'javascript:': true
}
// protocols that always contain a // bit.
const slashedProtocol = {
  http: true,
  https: true,
  ftp: true,
  gopher: true,
  file: true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
}

function urlParse (url, slashesDenoteHost) {
  if (url && url instanceof Url) return url

  const u = new Url()
  u.parse(url, slashesDenoteHost)
  return u
}

Url.prototype.parse = function (url, slashesDenoteHost) {
  let lowerProto, hec, slashes
  let rest = url

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim()

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    const simplePath = simplePathPattern.exec(rest)
    if (simplePath) {
      this.pathname = simplePath[1]
      if (simplePath[2]) {
        this.search = simplePath[2]
      }
      return this
    }
  }

  let proto = protocolPattern.exec(rest)
  if (proto) {
    proto = proto[0]
    lowerProto = proto.toLowerCase()
    this.protocol = proto
    rest = rest.substr(proto.length)
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  /* eslint-disable-next-line no-useless-escape */
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    slashes = rest.substr(0, 2) === '//'
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2)
      this.slashes = true
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    let hostEnd = -1
    for (let i = 0; i < hostEndingChars.length; i++) {
      hec = rest.indexOf(hostEndingChars[i])
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec
      }
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    let auth, atSign
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@')
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd)
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign)
      rest = rest.slice(atSign + 1)
      this.auth = auth
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1
    for (let i = 0; i < nonHostChars.length; i++) {
      hec = rest.indexOf(nonHostChars[i])
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec
      }
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1) {
      hostEnd = rest.length
    }

    if (rest[hostEnd - 1] === ':') { hostEnd-- }
    const host = rest.slice(0, hostEnd)
    rest = rest.slice(hostEnd)

    // pull out port.
    this.parseHost(host)

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || ''

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    const ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']'

    // validate a little.
    if (!ipv6Hostname) {
      const hostparts = this.hostname.split(/\./)
      for (let i = 0, l = hostparts.length; i < l; i++) {
        const part = hostparts[i]
        if (!part) { continue }
        if (!part.match(hostnamePartPattern)) {
          let newpart = ''
          for (let j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x'
            } else {
              newpart += part[j]
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            const validParts = hostparts.slice(0, i)
            const notHost = hostparts.slice(i + 1)
            const bit = part.match(hostnamePartStart)
            if (bit) {
              validParts.push(bit[1])
              notHost.unshift(bit[2])
            }
            if (notHost.length) {
              rest = notHost.join('.') + rest
            }
            this.hostname = validParts.join('.')
            break
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = ''
    }

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2)
    }
  }

  // chop off from the tail first.
  const hash = rest.indexOf('#')
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash)
    rest = rest.slice(0, hash)
  }
  const qm = rest.indexOf('?')
  if (qm !== -1) {
    this.search = rest.substr(qm)
    rest = rest.slice(0, qm)
  }
  if (rest) { this.pathname = rest }
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = ''
  }

  return this
}

Url.prototype.parseHost = function (host) {
  let port = portPattern.exec(host)
  if (port) {
    port = port[0]
    if (port !== ':') {
      this.port = port.substr(1)
    }
    host = host.substr(0, host.length - port.length)
  }
  if (host) { this.hostname = host }
}

/* harmony default export */ const parse = (urlParse);

;// ../../node_modules/mdurl/index.mjs







;// ../../node_modules/uc.micro/categories/P/regex.mjs
/* harmony default export */ const regex = (/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/);
;// ../../node_modules/uc.micro/categories/S/regex.mjs
/* harmony default export */ const S_regex = (/[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u31EF\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDC-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF76\uDF7B-\uDFD9\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC5\uDECE-\uDEDB\uDEE0-\uDEE8\uDEF0-\uDEF8\uDF00-\uDF92\uDF94-\uDFCA]/);
;// ../../node_modules/uc.micro/properties/Any/regex.mjs
/* harmony default export */ const Any_regex = (/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/);
;// ../../node_modules/uc.micro/categories/Cc/regex.mjs
/* harmony default export */ const Cc_regex = (/[\0-\x1F\x7F-\x9F]/);
;// ../../node_modules/uc.micro/categories/Cf/regex.mjs
/* harmony default export */ const Cf_regex = (/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC3F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/);
;// ../../node_modules/uc.micro/categories/Z/regex.mjs
/* harmony default export */ const Z_regex = (/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/);
;// ../../node_modules/uc.micro/index.mjs









;// ../../node_modules/entities/lib/esm/generated/decode-data-html.js
// Generated using scripts/write-decode-map.ts
/* harmony default export */ const decode_data_html = (new Uint16Array(
// prettier-ignore
"\u1d41<\xd5\u0131\u028a\u049d\u057b\u05d0\u0675\u06de\u07a2\u07d6\u080f\u0a4a\u0a91\u0da1\u0e6d\u0f09\u0f26\u10ca\u1228\u12e1\u1415\u149d\u14c3\u14df\u1525\0\0\0\0\0\0\u156b\u16cd\u198d\u1c12\u1ddd\u1f7e\u2060\u21b0\u228d\u23c0\u23fb\u2442\u2824\u2912\u2d08\u2e48\u2fce\u3016\u32ba\u3639\u37ac\u38fe\u3a28\u3a71\u3ae0\u3b2e\u0800EMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig\u803b\xc6\u40c6P\u803b&\u4026cute\u803b\xc1\u40c1reve;\u4102\u0100iyx}rc\u803b\xc2\u40c2;\u4410r;\uc000\ud835\udd04rave\u803b\xc0\u40c0pha;\u4391acr;\u4100d;\u6a53\u0100gp\x9d\xa1on;\u4104f;\uc000\ud835\udd38plyFunction;\u6061ing\u803b\xc5\u40c5\u0100cs\xbe\xc3r;\uc000\ud835\udc9cign;\u6254ilde\u803b\xc3\u40c3ml\u803b\xc4\u40c4\u0400aceforsu\xe5\xfb\xfe\u0117\u011c\u0122\u0127\u012a\u0100cr\xea\xf2kslash;\u6216\u0176\xf6\xf8;\u6ae7ed;\u6306y;\u4411\u0180crt\u0105\u010b\u0114ause;\u6235noullis;\u612ca;\u4392r;\uc000\ud835\udd05pf;\uc000\ud835\udd39eve;\u42d8c\xf2\u0113mpeq;\u624e\u0700HOacdefhilorsu\u014d\u0151\u0156\u0180\u019e\u01a2\u01b5\u01b7\u01ba\u01dc\u0215\u0273\u0278\u027ecy;\u4427PY\u803b\xa9\u40a9\u0180cpy\u015d\u0162\u017aute;\u4106\u0100;i\u0167\u0168\u62d2talDifferentialD;\u6145leys;\u612d\u0200aeio\u0189\u018e\u0194\u0198ron;\u410cdil\u803b\xc7\u40c7rc;\u4108nint;\u6230ot;\u410a\u0100dn\u01a7\u01adilla;\u40b8terDot;\u40b7\xf2\u017fi;\u43a7rcle\u0200DMPT\u01c7\u01cb\u01d1\u01d6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01e2\u01f8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020foubleQuote;\u601duote;\u6019\u0200lnpu\u021e\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6a74\u0180git\u022f\u0236\u023aruent;\u6261nt;\u622fourIntegral;\u622e\u0100fr\u024c\u024e;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6a2fcr;\uc000\ud835\udc9ep\u0100;C\u0284\u0285\u62d3ap;\u624d\u0580DJSZacefios\u02a0\u02ac\u02b0\u02b4\u02b8\u02cb\u02d7\u02e1\u02e6\u0333\u048d\u0100;o\u0179\u02a5trahd;\u6911cy;\u4402cy;\u4405cy;\u440f\u0180grs\u02bf\u02c4\u02c7ger;\u6021r;\u61a1hv;\u6ae4\u0100ay\u02d0\u02d5ron;\u410e;\u4414l\u0100;t\u02dd\u02de\u6207a;\u4394r;\uc000\ud835\udd07\u0100af\u02eb\u0327\u0100cm\u02f0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031ccute;\u40b4o\u0174\u030b\u030d;\u42d9bleAcute;\u42ddrave;\u4060ilde;\u42dcond;\u62c4ferentialD;\u6146\u0470\u033d\0\0\0\u0342\u0354\0\u0405f;\uc000\ud835\udd3b\u0180;DE\u0348\u0349\u034d\u40a8ot;\u60dcqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03cf\u03e2\u03f8ontourIntegra\xec\u0239o\u0274\u0379\0\0\u037b\xbb\u0349nArrow;\u61d3\u0100eo\u0387\u03a4ft\u0180ART\u0390\u0396\u03a1rrow;\u61d0ightArrow;\u61d4e\xe5\u02cang\u0100LR\u03ab\u03c4eft\u0100AR\u03b3\u03b9rrow;\u67f8ightArrow;\u67faightArrow;\u67f9ight\u0100AT\u03d8\u03derrow;\u61d2ee;\u62a8p\u0241\u03e9\0\0\u03efrrow;\u61d1ownArrow;\u61d5erticalBar;\u6225n\u0300ABLRTa\u0412\u042a\u0430\u045e\u047f\u037crrow\u0180;BU\u041d\u041e\u0422\u6193ar;\u6913pArrow;\u61f5reve;\u4311eft\u02d2\u043a\0\u0446\0\u0450ightVector;\u6950eeVector;\u695eector\u0100;B\u0459\u045a\u61bdar;\u6956ight\u01d4\u0467\0\u0471eeVector;\u695fector\u0100;B\u047a\u047b\u61c1ar;\u6957ee\u0100;A\u0486\u0487\u62a4rrow;\u61a7\u0100ct\u0492\u0497r;\uc000\ud835\udc9frok;\u4110\u0800NTacdfglmopqstux\u04bd\u04c0\u04c4\u04cb\u04de\u04e2\u04e7\u04ee\u04f5\u0521\u052f\u0536\u0552\u055d\u0560\u0565G;\u414aH\u803b\xd0\u40d0cute\u803b\xc9\u40c9\u0180aiy\u04d2\u04d7\u04dcron;\u411arc\u803b\xca\u40ca;\u442dot;\u4116r;\uc000\ud835\udd08rave\u803b\xc8\u40c8ement;\u6208\u0100ap\u04fa\u04fecr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65fberySmallSquare;\u65ab\u0100gp\u0526\u052aon;\u4118f;\uc000\ud835\udd3csilon;\u4395u\u0100ai\u053c\u0549l\u0100;T\u0542\u0543\u6a75ilde;\u6242librium;\u61cc\u0100ci\u0557\u055ar;\u6130m;\u6a73a;\u4397ml\u803b\xcb\u40cb\u0100ip\u056a\u056fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058d\u05b2\u05ccy;\u4424r;\uc000\ud835\udd09lled\u0253\u0597\0\0\u05a3mallSquare;\u65fcerySmallSquare;\u65aa\u0370\u05ba\0\u05bf\0\0\u05c4f;\uc000\ud835\udd3dAll;\u6200riertrf;\u6131c\xf2\u05cb\u0600JTabcdfgorst\u05e8\u05ec\u05ef\u05fa\u0600\u0612\u0616\u061b\u061d\u0623\u066c\u0672cy;\u4403\u803b>\u403emma\u0100;d\u05f7\u05f8\u4393;\u43dcreve;\u411e\u0180eiy\u0607\u060c\u0610dil;\u4122rc;\u411c;\u4413ot;\u4120r;\uc000\ud835\udd0a;\u62d9pf;\uc000\ud835\udd3eeater\u0300EFGLST\u0635\u0644\u064e\u0656\u065b\u0666qual\u0100;L\u063e\u063f\u6265ess;\u62dbullEqual;\u6267reater;\u6aa2ess;\u6277lantEqual;\u6a7eilde;\u6273cr;\uc000\ud835\udca2;\u626b\u0400Aacfiosu\u0685\u068b\u0696\u069b\u069e\u06aa\u06be\u06caRDcy;\u442a\u0100ct\u0690\u0694ek;\u42c7;\u405eirc;\u4124r;\u610clbertSpace;\u610b\u01f0\u06af\0\u06b2f;\u610dizontalLine;\u6500\u0100ct\u06c3\u06c5\xf2\u06a9rok;\u4126mp\u0144\u06d0\u06d8ownHum\xf0\u012fqual;\u624f\u0700EJOacdfgmnostu\u06fa\u06fe\u0703\u0707\u070e\u071a\u071e\u0721\u0728\u0744\u0778\u078b\u078f\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803b\xcd\u40cd\u0100iy\u0713\u0718rc\u803b\xce\u40ce;\u4418ot;\u4130r;\u6111rave\u803b\xcc\u40cc\u0180;ap\u0720\u072f\u073f\u0100cg\u0734\u0737r;\u412ainaryI;\u6148lie\xf3\u03dd\u01f4\u0749\0\u0762\u0100;e\u074d\u074e\u622c\u0100gr\u0753\u0758ral;\u622bsection;\u62c2isible\u0100CT\u076c\u0772omma;\u6063imes;\u6062\u0180gpt\u077f\u0783\u0788on;\u412ef;\uc000\ud835\udd40a;\u4399cr;\u6110ilde;\u4128\u01eb\u079a\0\u079ecy;\u4406l\u803b\xcf\u40cf\u0280cfosu\u07ac\u07b7\u07bc\u07c2\u07d0\u0100iy\u07b1\u07b5rc;\u4134;\u4419r;\uc000\ud835\udd0dpf;\uc000\ud835\udd41\u01e3\u07c7\0\u07ccr;\uc000\ud835\udca5rcy;\u4408kcy;\u4404\u0380HJacfos\u07e4\u07e8\u07ec\u07f1\u07fd\u0802\u0808cy;\u4425cy;\u440cppa;\u439a\u0100ey\u07f6\u07fbdil;\u4136;\u441ar;\uc000\ud835\udd0epf;\uc000\ud835\udd42cr;\uc000\ud835\udca6\u0580JTaceflmost\u0825\u0829\u082c\u0850\u0863\u09b3\u09b8\u09c7\u09cd\u0a37\u0a47cy;\u4409\u803b<\u403c\u0280cmnpr\u0837\u083c\u0841\u0844\u084dute;\u4139bda;\u439bg;\u67ealacetrf;\u6112r;\u619e\u0180aey\u0857\u085c\u0861ron;\u413ddil;\u413b;\u441b\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087e\u08a9\u08b1\u08e0\u08e6\u08fc\u092f\u095b\u0390\u096a\u0100nr\u0883\u088fgleBracket;\u67e8row\u0180;BR\u0899\u089a\u089e\u6190ar;\u61e4ightArrow;\u61c6eiling;\u6308o\u01f5\u08b7\0\u08c3bleBracket;\u67e6n\u01d4\u08c8\0\u08d2eeVector;\u6961ector\u0100;B\u08db\u08dc\u61c3ar;\u6959loor;\u630aight\u0100AV\u08ef\u08f5rrow;\u6194ector;\u694e\u0100er\u0901\u0917e\u0180;AV\u0909\u090a\u0910\u62a3rrow;\u61a4ector;\u695aiangle\u0180;BE\u0924\u0925\u0929\u62b2ar;\u69cfqual;\u62b4p\u0180DTV\u0937\u0942\u094cownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61bfar;\u6958ector\u0100;B\u0965\u0966\u61bcar;\u6952ight\xe1\u039cs\u0300EFGLST\u097e\u098b\u0995\u099d\u09a2\u09adqualGreater;\u62daullEqual;\u6266reater;\u6276ess;\u6aa1lantEqual;\u6a7dilde;\u6272r;\uc000\ud835\udd0f\u0100;e\u09bd\u09be\u62d8ftarrow;\u61daidot;\u413f\u0180npw\u09d4\u0a16\u0a1bg\u0200LRlr\u09de\u09f7\u0a02\u0a10eft\u0100AR\u09e6\u09ecrrow;\u67f5ightArrow;\u67f7ightArrow;\u67f6eft\u0100ar\u03b3\u0a0aight\xe1\u03bfight\xe1\u03caf;\uc000\ud835\udd43er\u0100LR\u0a22\u0a2ceftArrow;\u6199ightArrow;\u6198\u0180cht\u0a3e\u0a40\u0a42\xf2\u084c;\u61b0rok;\u4141;\u626a\u0400acefiosu\u0a5a\u0a5d\u0a60\u0a77\u0a7c\u0a85\u0a8b\u0a8ep;\u6905y;\u441c\u0100dl\u0a65\u0a6fiumSpace;\u605flintrf;\u6133r;\uc000\ud835\udd10nusPlus;\u6213pf;\uc000\ud835\udd44c\xf2\u0a76;\u439c\u0480Jacefostu\u0aa3\u0aa7\u0aad\u0ac0\u0b14\u0b19\u0d91\u0d97\u0d9ecy;\u440acute;\u4143\u0180aey\u0ab4\u0ab9\u0aberon;\u4147dil;\u4145;\u441d\u0180gsw\u0ac7\u0af0\u0b0eative\u0180MTV\u0ad3\u0adf\u0ae8ediumSpace;\u600bhi\u0100cn\u0ae6\u0ad8\xeb\u0ad9eryThi\xee\u0ad9ted\u0100GL\u0af8\u0b06reaterGreate\xf2\u0673essLes\xf3\u0a48Line;\u400ar;\uc000\ud835\udd11\u0200Bnpt\u0b22\u0b28\u0b37\u0b3areak;\u6060BreakingSpace;\u40a0f;\u6115\u0680;CDEGHLNPRSTV\u0b55\u0b56\u0b6a\u0b7c\u0ba1\u0beb\u0c04\u0c5e\u0c84\u0ca6\u0cd8\u0d61\u0d85\u6aec\u0100ou\u0b5b\u0b64ngruent;\u6262pCap;\u626doubleVerticalBar;\u6226\u0180lqx\u0b83\u0b8a\u0b9bement;\u6209ual\u0100;T\u0b92\u0b93\u6260ilde;\uc000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0bb6\u0bb7\u0bbd\u0bc9\u0bd3\u0bd8\u0be5\u626fqual;\u6271ullEqual;\uc000\u2267\u0338reater;\uc000\u226b\u0338ess;\u6279lantEqual;\uc000\u2a7e\u0338ilde;\u6275ump\u0144\u0bf2\u0bfdownHump;\uc000\u224e\u0338qual;\uc000\u224f\u0338e\u0100fs\u0c0a\u0c27tTriangle\u0180;BE\u0c1a\u0c1b\u0c21\u62eaar;\uc000\u29cf\u0338qual;\u62ecs\u0300;EGLST\u0c35\u0c36\u0c3c\u0c44\u0c4b\u0c58\u626equal;\u6270reater;\u6278ess;\uc000\u226a\u0338lantEqual;\uc000\u2a7d\u0338ilde;\u6274ested\u0100GL\u0c68\u0c79reaterGreater;\uc000\u2aa2\u0338essLess;\uc000\u2aa1\u0338recedes\u0180;ES\u0c92\u0c93\u0c9b\u6280qual;\uc000\u2aaf\u0338lantEqual;\u62e0\u0100ei\u0cab\u0cb9verseElement;\u620cghtTriangle\u0180;BE\u0ccb\u0ccc\u0cd2\u62ebar;\uc000\u29d0\u0338qual;\u62ed\u0100qu\u0cdd\u0d0cuareSu\u0100bp\u0ce8\u0cf9set\u0100;E\u0cf0\u0cf3\uc000\u228f\u0338qual;\u62e2erset\u0100;E\u0d03\u0d06\uc000\u2290\u0338qual;\u62e3\u0180bcp\u0d13\u0d24\u0d4eset\u0100;E\u0d1b\u0d1e\uc000\u2282\u20d2qual;\u6288ceeds\u0200;EST\u0d32\u0d33\u0d3b\u0d46\u6281qual;\uc000\u2ab0\u0338lantEqual;\u62e1ilde;\uc000\u227f\u0338erset\u0100;E\u0d58\u0d5b\uc000\u2283\u20d2qual;\u6289ilde\u0200;EFT\u0d6e\u0d6f\u0d75\u0d7f\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uc000\ud835\udca9ilde\u803b\xd1\u40d1;\u439d\u0700Eacdfgmoprstuv\u0dbd\u0dc2\u0dc9\u0dd5\u0ddb\u0de0\u0de7\u0dfc\u0e02\u0e20\u0e22\u0e32\u0e3f\u0e44lig;\u4152cute\u803b\xd3\u40d3\u0100iy\u0dce\u0dd3rc\u803b\xd4\u40d4;\u441eblac;\u4150r;\uc000\ud835\udd12rave\u803b\xd2\u40d2\u0180aei\u0dee\u0df2\u0df6cr;\u414cga;\u43a9cron;\u439fpf;\uc000\ud835\udd46enCurly\u0100DQ\u0e0e\u0e1aoubleQuote;\u601cuote;\u6018;\u6a54\u0100cl\u0e27\u0e2cr;\uc000\ud835\udcaaash\u803b\xd8\u40d8i\u016c\u0e37\u0e3cde\u803b\xd5\u40d5es;\u6a37ml\u803b\xd6\u40d6er\u0100BP\u0e4b\u0e60\u0100ar\u0e50\u0e53r;\u603eac\u0100ek\u0e5a\u0e5c;\u63deet;\u63b4arenthesis;\u63dc\u0480acfhilors\u0e7f\u0e87\u0e8a\u0e8f\u0e92\u0e94\u0e9d\u0eb0\u0efcrtialD;\u6202y;\u441fr;\uc000\ud835\udd13i;\u43a6;\u43a0usMinus;\u40b1\u0100ip\u0ea2\u0eadncareplan\xe5\u069df;\u6119\u0200;eio\u0eb9\u0eba\u0ee0\u0ee4\u6abbcedes\u0200;EST\u0ec8\u0ec9\u0ecf\u0eda\u627aqual;\u6aaflantEqual;\u627cilde;\u627eme;\u6033\u0100dp\u0ee9\u0eeeuct;\u620fortion\u0100;a\u0225\u0ef9l;\u621d\u0100ci\u0f01\u0f06r;\uc000\ud835\udcab;\u43a8\u0200Ufos\u0f11\u0f16\u0f1b\u0f1fOT\u803b\"\u4022r;\uc000\ud835\udd14pf;\u611acr;\uc000\ud835\udcac\u0600BEacefhiorsu\u0f3e\u0f43\u0f47\u0f60\u0f73\u0fa7\u0faa\u0fad\u1096\u10a9\u10b4\u10bearr;\u6910G\u803b\xae\u40ae\u0180cnr\u0f4e\u0f53\u0f56ute;\u4154g;\u67ebr\u0100;t\u0f5c\u0f5d\u61a0l;\u6916\u0180aey\u0f67\u0f6c\u0f71ron;\u4158dil;\u4156;\u4420\u0100;v\u0f78\u0f79\u611cerse\u0100EU\u0f82\u0f99\u0100lq\u0f87\u0f8eement;\u620builibrium;\u61cbpEquilibrium;\u696fr\xbb\u0f79o;\u43a1ght\u0400ACDFTUVa\u0fc1\u0feb\u0ff3\u1022\u1028\u105b\u1087\u03d8\u0100nr\u0fc6\u0fd2gleBracket;\u67e9row\u0180;BL\u0fdc\u0fdd\u0fe1\u6192ar;\u61e5eftArrow;\u61c4eiling;\u6309o\u01f5\u0ff9\0\u1005bleBracket;\u67e7n\u01d4\u100a\0\u1014eeVector;\u695dector\u0100;B\u101d\u101e\u61c2ar;\u6955loor;\u630b\u0100er\u102d\u1043e\u0180;AV\u1035\u1036\u103c\u62a2rrow;\u61a6ector;\u695biangle\u0180;BE\u1050\u1051\u1055\u62b3ar;\u69d0qual;\u62b5p\u0180DTV\u1063\u106e\u1078ownVector;\u694feeVector;\u695cector\u0100;B\u1082\u1083\u61bear;\u6954ector\u0100;B\u1091\u1092\u61c0ar;\u6953\u0100pu\u109b\u109ef;\u611dndImplies;\u6970ightarrow;\u61db\u0100ch\u10b9\u10bcr;\u611b;\u61b1leDelayed;\u69f4\u0680HOacfhimoqstu\u10e4\u10f1\u10f7\u10fd\u1119\u111e\u1151\u1156\u1161\u1167\u11b5\u11bb\u11bf\u0100Cc\u10e9\u10eeHcy;\u4429y;\u4428FTcy;\u442ccute;\u415a\u0280;aeiy\u1108\u1109\u110e\u1113\u1117\u6abcron;\u4160dil;\u415erc;\u415c;\u4421r;\uc000\ud835\udd16ort\u0200DLRU\u112a\u1134\u113e\u1149ownArrow\xbb\u041eeftArrow\xbb\u089aightArrow\xbb\u0fddpArrow;\u6191gma;\u43a3allCircle;\u6218pf;\uc000\ud835\udd4a\u0272\u116d\0\0\u1170t;\u621aare\u0200;ISU\u117b\u117c\u1189\u11af\u65a1ntersection;\u6293u\u0100bp\u118f\u119eset\u0100;E\u1197\u1198\u628fqual;\u6291erset\u0100;E\u11a8\u11a9\u6290qual;\u6292nion;\u6294cr;\uc000\ud835\udcaear;\u62c6\u0200bcmp\u11c8\u11db\u1209\u120b\u0100;s\u11cd\u11ce\u62d0et\u0100;E\u11cd\u11d5qual;\u6286\u0100ch\u11e0\u1205eeds\u0200;EST\u11ed\u11ee\u11f4\u11ff\u627bqual;\u6ab0lantEqual;\u627dilde;\u627fTh\xe1\u0f8c;\u6211\u0180;es\u1212\u1213\u1223\u62d1rset\u0100;E\u121c\u121d\u6283qual;\u6287et\xbb\u1213\u0580HRSacfhiors\u123e\u1244\u1249\u1255\u125e\u1271\u1276\u129f\u12c2\u12c8\u12d1ORN\u803b\xde\u40deADE;\u6122\u0100Hc\u124e\u1252cy;\u440by;\u4426\u0100bu\u125a\u125c;\u4009;\u43a4\u0180aey\u1265\u126a\u126fron;\u4164dil;\u4162;\u4422r;\uc000\ud835\udd17\u0100ei\u127b\u1289\u01f2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128e\u1298kSpace;\uc000\u205f\u200aSpace;\u6009lde\u0200;EFT\u12ab\u12ac\u12b2\u12bc\u623cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uc000\ud835\udd4bipleDot;\u60db\u0100ct\u12d6\u12dbr;\uc000\ud835\udcafrok;\u4166\u0ae1\u12f7\u130e\u131a\u1326\0\u132c\u1331\0\0\0\0\0\u1338\u133d\u1377\u1385\0\u13ff\u1404\u140a\u1410\u0100cr\u12fb\u1301ute\u803b\xda\u40dar\u0100;o\u1307\u1308\u619fcir;\u6949r\u01e3\u1313\0\u1316y;\u440eve;\u416c\u0100iy\u131e\u1323rc\u803b\xdb\u40db;\u4423blac;\u4170r;\uc000\ud835\udd18rave\u803b\xd9\u40d9acr;\u416a\u0100di\u1341\u1369er\u0100BP\u1348\u135d\u0100ar\u134d\u1350r;\u405fac\u0100ek\u1357\u1359;\u63dfet;\u63b5arenthesis;\u63ddon\u0100;P\u1370\u1371\u62c3lus;\u628e\u0100gp\u137b\u137fon;\u4172f;\uc000\ud835\udd4c\u0400ADETadps\u1395\u13ae\u13b8\u13c4\u03e8\u13d2\u13d7\u13f3rrow\u0180;BD\u1150\u13a0\u13a4ar;\u6912ownArrow;\u61c5ownArrow;\u6195quilibrium;\u696eee\u0100;A\u13cb\u13cc\u62a5rrow;\u61a5own\xe1\u03f3er\u0100LR\u13de\u13e8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13f9\u13fa\u43d2on;\u43a5ing;\u416ecr;\uc000\ud835\udcb0ilde;\u4168ml\u803b\xdc\u40dc\u0480Dbcdefosv\u1427\u142c\u1430\u1433\u143e\u1485\u148a\u1490\u1496ash;\u62abar;\u6aeby;\u4412ash\u0100;l\u143b\u143c\u62a9;\u6ae6\u0100er\u1443\u1445;\u62c1\u0180bty\u144c\u1450\u147aar;\u6016\u0100;i\u144f\u1455cal\u0200BLST\u1461\u1465\u146a\u1474ar;\u6223ine;\u407ceparator;\u6758ilde;\u6240ThinSpace;\u600ar;\uc000\ud835\udd19pf;\uc000\ud835\udd4dcr;\uc000\ud835\udcb1dash;\u62aa\u0280cefos\u14a7\u14ac\u14b1\u14b6\u14bcirc;\u4174dge;\u62c0r;\uc000\ud835\udd1apf;\uc000\ud835\udd4ecr;\uc000\ud835\udcb2\u0200fios\u14cb\u14d0\u14d2\u14d8r;\uc000\ud835\udd1b;\u439epf;\uc000\ud835\udd4fcr;\uc000\ud835\udcb3\u0480AIUacfosu\u14f1\u14f5\u14f9\u14fd\u1504\u150f\u1514\u151a\u1520cy;\u442fcy;\u4407cy;\u442ecute\u803b\xdd\u40dd\u0100iy\u1509\u150drc;\u4176;\u442br;\uc000\ud835\udd1cpf;\uc000\ud835\udd50cr;\uc000\ud835\udcb4ml;\u4178\u0400Hacdefos\u1535\u1539\u153f\u154b\u154f\u155d\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417d;\u4417ot;\u417b\u01f2\u1554\0\u155boWidt\xe8\u0ad9a;\u4396r;\u6128pf;\u6124cr;\uc000\ud835\udcb5\u0be1\u1583\u158a\u1590\0\u15b0\u15b6\u15bf\0\0\0\0\u15c6\u15db\u15eb\u165f\u166d\0\u1695\u169b\u16b2\u16b9\0\u16becute\u803b\xe1\u40e1reve;\u4103\u0300;Ediuy\u159c\u159d\u15a1\u15a3\u15a8\u15ad\u623e;\uc000\u223e\u0333;\u623frc\u803b\xe2\u40e2te\u80bb\xb4\u0306;\u4430lig\u803b\xe6\u40e6\u0100;r\xb2\u15ba;\uc000\ud835\udd1erave\u803b\xe0\u40e0\u0100ep\u15ca\u15d6\u0100fp\u15cf\u15d4sym;\u6135\xe8\u15d3ha;\u43b1\u0100ap\u15dfc\u0100cl\u15e4\u15e7r;\u4101g;\u6a3f\u0264\u15f0\0\0\u160a\u0280;adsv\u15fa\u15fb\u15ff\u1601\u1607\u6227nd;\u6a55;\u6a5clope;\u6a58;\u6a5a\u0380;elmrsz\u1618\u1619\u161b\u161e\u163f\u164f\u1659\u6220;\u69a4e\xbb\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163a\u163c\u163e;\u69a8;\u69a9;\u69aa;\u69ab;\u69ac;\u69ad;\u69ae;\u69aft\u0100;v\u1645\u1646\u621fb\u0100;d\u164c\u164d\u62be;\u699d\u0100pt\u1654\u1657h;\u6222\xbb\xb9arr;\u637c\u0100gp\u1663\u1667on;\u4105f;\uc000\ud835\udd52\u0380;Eaeiop\u12c1\u167b\u167d\u1682\u1684\u1687\u168a;\u6a70cir;\u6a6f;\u624ad;\u624bs;\u4027rox\u0100;e\u12c1\u1692\xf1\u1683ing\u803b\xe5\u40e5\u0180cty\u16a1\u16a6\u16a8r;\uc000\ud835\udcb6;\u402amp\u0100;e\u12c1\u16af\xf1\u0288ilde\u803b\xe3\u40e3ml\u803b\xe4\u40e4\u0100ci\u16c2\u16c8onin\xf4\u0272nt;\u6a11\u0800Nabcdefiklnoprsu\u16ed\u16f1\u1730\u173c\u1743\u1748\u1778\u177d\u17e0\u17e6\u1839\u1850\u170d\u193d\u1948\u1970ot;\u6aed\u0100cr\u16f6\u171ek\u0200ceps\u1700\u1705\u170d\u1713ong;\u624cpsilon;\u43f6rime;\u6035im\u0100;e\u171a\u171b\u623dq;\u62cd\u0176\u1722\u1726ee;\u62bded\u0100;g\u172c\u172d\u6305e\xbb\u172drk\u0100;t\u135c\u1737brk;\u63b6\u0100oy\u1701\u1741;\u4431quo;\u601e\u0280cmprt\u1753\u175b\u1761\u1764\u1768aus\u0100;e\u010a\u0109ptyv;\u69b0s\xe9\u170cno\xf5\u0113\u0180ahw\u176f\u1771\u1773;\u43b2;\u6136een;\u626cr;\uc000\ud835\udd1fg\u0380costuvw\u178d\u179d\u17b3\u17c1\u17d5\u17db\u17de\u0180aiu\u1794\u1796\u179a\xf0\u0760rc;\u65efp\xbb\u1371\u0180dpt\u17a4\u17a8\u17adot;\u6a00lus;\u6a01imes;\u6a02\u0271\u17b9\0\0\u17becup;\u6a06ar;\u6605riangle\u0100du\u17cd\u17d2own;\u65bdp;\u65b3plus;\u6a04e\xe5\u1444\xe5\u14adarow;\u690d\u0180ako\u17ed\u1826\u1835\u0100cn\u17f2\u1823k\u0180lst\u17fa\u05ab\u1802ozenge;\u69ebriangle\u0200;dlr\u1812\u1813\u1818\u181d\u65b4own;\u65beeft;\u65c2ight;\u65b8k;\u6423\u01b1\u182b\0\u1833\u01b2\u182f\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183e\u184d\u0100;q\u1843\u1846\uc000=\u20e5uiv;\uc000\u2261\u20e5t;\u6310\u0200ptwx\u1859\u185e\u1867\u186cf;\uc000\ud835\udd53\u0100;t\u13cb\u1863om\xbb\u13cctie;\u62c8\u0600DHUVbdhmptuv\u1885\u1896\u18aa\u18bb\u18d7\u18db\u18ec\u18ff\u1905\u190a\u1910\u1921\u0200LRlr\u188e\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18a1\u18a2\u18a4\u18a6\u18a8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18b3\u18b5\u18b7\u18b9;\u655d;\u655a;\u655c;\u6559\u0380;HLRhlr\u18ca\u18cb\u18cd\u18cf\u18d1\u18d3\u18d5\u6551;\u656c;\u6563;\u6560;\u656b;\u6562;\u655fox;\u69c9\u0200LRlr\u18e4\u18e6\u18e8\u18ea;\u6555;\u6552;\u6510;\u650c\u0280;DUdu\u06bd\u18f7\u18f9\u18fb\u18fd;\u6565;\u6568;\u652c;\u6534inus;\u629flus;\u629eimes;\u62a0\u0200LRlr\u1919\u191b\u191d\u191f;\u655b;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193b\u6502;\u656a;\u6561;\u655e;\u653c;\u6524;\u651c\u0100ev\u0123\u1942bar\u803b\xa6\u40a6\u0200ceio\u1951\u1956\u195a\u1960r;\uc000\ud835\udcb7mi;\u604fm\u0100;e\u171a\u171cl\u0180;bh\u1968\u1969\u196b\u405c;\u69c5sub;\u67c8\u016c\u1974\u197el\u0100;e\u1979\u197a\u6022t\xbb\u197ap\u0180;Ee\u012f\u1985\u1987;\u6aae\u0100;q\u06dc\u06db\u0ce1\u19a7\0\u19e8\u1a11\u1a15\u1a32\0\u1a37\u1a50\0\0\u1ab4\0\0\u1ac1\0\0\u1b21\u1b2e\u1b4d\u1b52\0\u1bfd\0\u1c0c\u0180cpr\u19ad\u19b2\u19ddute;\u4107\u0300;abcds\u19bf\u19c0\u19c4\u19ca\u19d5\u19d9\u6229nd;\u6a44rcup;\u6a49\u0100au\u19cf\u19d2p;\u6a4bp;\u6a47ot;\u6a40;\uc000\u2229\ufe00\u0100eo\u19e2\u19e5t;\u6041\xee\u0693\u0200aeiu\u19f0\u19fb\u1a01\u1a05\u01f0\u19f5\0\u19f8s;\u6a4don;\u410ddil\u803b\xe7\u40e7rc;\u4109ps\u0100;s\u1a0c\u1a0d\u6a4cm;\u6a50ot;\u410b\u0180dmn\u1a1b\u1a20\u1a26il\u80bb\xb8\u01adptyv;\u69b2t\u8100\xa2;e\u1a2d\u1a2e\u40a2r\xe4\u01b2r;\uc000\ud835\udd20\u0180cei\u1a3d\u1a40\u1a4dy;\u4447ck\u0100;m\u1a47\u1a48\u6713ark\xbb\u1a48;\u43c7r\u0380;Ecefms\u1a5f\u1a60\u1a62\u1a6b\u1aa4\u1aaa\u1aae\u65cb;\u69c3\u0180;el\u1a69\u1a6a\u1a6d\u42c6q;\u6257e\u0261\u1a74\0\0\u1a88rrow\u0100lr\u1a7c\u1a81eft;\u61baight;\u61bb\u0280RSacd\u1a92\u1a94\u1a96\u1a9a\u1a9f\xbb\u0f47;\u64c8st;\u629birc;\u629aash;\u629dnint;\u6a10id;\u6aefcir;\u69c2ubs\u0100;u\u1abb\u1abc\u6663it\xbb\u1abc\u02ec\u1ac7\u1ad4\u1afa\0\u1b0aon\u0100;e\u1acd\u1ace\u403a\u0100;q\xc7\xc6\u026d\u1ad9\0\0\u1ae2a\u0100;t\u1ade\u1adf\u402c;\u4040\u0180;fl\u1ae8\u1ae9\u1aeb\u6201\xee\u1160e\u0100mx\u1af1\u1af6ent\xbb\u1ae9e\xf3\u024d\u01e7\u1afe\0\u1b07\u0100;d\u12bb\u1b02ot;\u6a6dn\xf4\u0246\u0180fry\u1b10\u1b14\u1b17;\uc000\ud835\udd54o\xe4\u0254\u8100\xa9;s\u0155\u1b1dr;\u6117\u0100ao\u1b25\u1b29rr;\u61b5ss;\u6717\u0100cu\u1b32\u1b37r;\uc000\ud835\udcb8\u0100bp\u1b3c\u1b44\u0100;e\u1b41\u1b42\u6acf;\u6ad1\u0100;e\u1b49\u1b4a\u6ad0;\u6ad2dot;\u62ef\u0380delprvw\u1b60\u1b6c\u1b77\u1b82\u1bac\u1bd4\u1bf9arr\u0100lr\u1b68\u1b6a;\u6938;\u6935\u0270\u1b72\0\0\u1b75r;\u62dec;\u62dfarr\u0100;p\u1b7f\u1b80\u61b6;\u693d\u0300;bcdos\u1b8f\u1b90\u1b96\u1ba1\u1ba5\u1ba8\u622arcap;\u6a48\u0100au\u1b9b\u1b9ep;\u6a46p;\u6a4aot;\u628dr;\u6a45;\uc000\u222a\ufe00\u0200alrv\u1bb5\u1bbf\u1bde\u1be3rr\u0100;m\u1bbc\u1bbd\u61b7;\u693cy\u0180evw\u1bc7\u1bd4\u1bd8q\u0270\u1bce\0\0\u1bd2re\xe3\u1b73u\xe3\u1b75ee;\u62ceedge;\u62cfen\u803b\xa4\u40a4earrow\u0100lr\u1bee\u1bf3eft\xbb\u1b80ight\xbb\u1bbde\xe4\u1bdd\u0100ci\u1c01\u1c07onin\xf4\u01f7nt;\u6231lcty;\u632d\u0980AHabcdefhijlorstuwz\u1c38\u1c3b\u1c3f\u1c5d\u1c69\u1c75\u1c8a\u1c9e\u1cac\u1cb7\u1cfb\u1cff\u1d0d\u1d7b\u1d91\u1dab\u1dbb\u1dc6\u1dcdr\xf2\u0381ar;\u6965\u0200glrs\u1c48\u1c4d\u1c52\u1c54ger;\u6020eth;\u6138\xf2\u1133h\u0100;v\u1c5a\u1c5b\u6010\xbb\u090a\u016b\u1c61\u1c67arow;\u690fa\xe3\u0315\u0100ay\u1c6e\u1c73ron;\u410f;\u4434\u0180;ao\u0332\u1c7c\u1c84\u0100gr\u02bf\u1c81r;\u61catseq;\u6a77\u0180glm\u1c91\u1c94\u1c98\u803b\xb0\u40b0ta;\u43b4ptyv;\u69b1\u0100ir\u1ca3\u1ca8sht;\u697f;\uc000\ud835\udd21ar\u0100lr\u1cb3\u1cb5\xbb\u08dc\xbb\u101e\u0280aegsv\u1cc2\u0378\u1cd6\u1cdc\u1ce0m\u0180;os\u0326\u1cca\u1cd4nd\u0100;s\u0326\u1cd1uit;\u6666amma;\u43ddin;\u62f2\u0180;io\u1ce7\u1ce8\u1cf8\u40f7de\u8100\xf7;o\u1ce7\u1cf0ntimes;\u62c7n\xf8\u1cf7cy;\u4452c\u026f\u1d06\0\0\u1d0arn;\u631eop;\u630d\u0280lptuw\u1d18\u1d1d\u1d22\u1d49\u1d55lar;\u4024f;\uc000\ud835\udd55\u0280;emps\u030b\u1d2d\u1d37\u1d3d\u1d42q\u0100;d\u0352\u1d33ot;\u6251inus;\u6238lus;\u6214quare;\u62a1blebarwedg\xe5\xfan\u0180adh\u112e\u1d5d\u1d67ownarrow\xf3\u1c83arpoon\u0100lr\u1d72\u1d76ef\xf4\u1cb4igh\xf4\u1cb6\u0162\u1d7f\u1d85karo\xf7\u0f42\u026f\u1d8a\0\0\u1d8ern;\u631fop;\u630c\u0180cot\u1d98\u1da3\u1da6\u0100ry\u1d9d\u1da1;\uc000\ud835\udcb9;\u4455l;\u69f6rok;\u4111\u0100dr\u1db0\u1db4ot;\u62f1i\u0100;f\u1dba\u1816\u65bf\u0100ah\u1dc0\u1dc3r\xf2\u0429a\xf2\u0fa6angle;\u69a6\u0100ci\u1dd2\u1dd5y;\u445fgrarr;\u67ff\u0900Dacdefglmnopqrstux\u1e01\u1e09\u1e19\u1e38\u0578\u1e3c\u1e49\u1e61\u1e7e\u1ea5\u1eaf\u1ebd\u1ee1\u1f2a\u1f37\u1f44\u1f4e\u1f5a\u0100Do\u1e06\u1d34o\xf4\u1c89\u0100cs\u1e0e\u1e14ute\u803b\xe9\u40e9ter;\u6a6e\u0200aioy\u1e22\u1e27\u1e31\u1e36ron;\u411br\u0100;c\u1e2d\u1e2e\u6256\u803b\xea\u40ealon;\u6255;\u444dot;\u4117\u0100Dr\u1e41\u1e45ot;\u6252;\uc000\ud835\udd22\u0180;rs\u1e50\u1e51\u1e57\u6a9aave\u803b\xe8\u40e8\u0100;d\u1e5c\u1e5d\u6a96ot;\u6a98\u0200;ils\u1e6a\u1e6b\u1e72\u1e74\u6a99nters;\u63e7;\u6113\u0100;d\u1e79\u1e7a\u6a95ot;\u6a97\u0180aps\u1e85\u1e89\u1e97cr;\u4113ty\u0180;sv\u1e92\u1e93\u1e95\u6205et\xbb\u1e93p\u01001;\u1e9d\u1ea4\u0133\u1ea1\u1ea3;\u6004;\u6005\u6003\u0100gs\u1eaa\u1eac;\u414bp;\u6002\u0100gp\u1eb4\u1eb8on;\u4119f;\uc000\ud835\udd56\u0180als\u1ec4\u1ece\u1ed2r\u0100;s\u1eca\u1ecb\u62d5l;\u69e3us;\u6a71i\u0180;lv\u1eda\u1edb\u1edf\u43b5on\xbb\u1edb;\u43f5\u0200csuv\u1eea\u1ef3\u1f0b\u1f23\u0100io\u1eef\u1e31rc\xbb\u1e2e\u0269\u1ef9\0\0\u1efb\xed\u0548ant\u0100gl\u1f02\u1f06tr\xbb\u1e5dess\xbb\u1e7a\u0180aei\u1f12\u1f16\u1f1als;\u403dst;\u625fv\u0100;D\u0235\u1f20D;\u6a78parsl;\u69e5\u0100Da\u1f2f\u1f33ot;\u6253rr;\u6971\u0180cdi\u1f3e\u1f41\u1ef8r;\u612fo\xf4\u0352\u0100ah\u1f49\u1f4b;\u43b7\u803b\xf0\u40f0\u0100mr\u1f53\u1f57l\u803b\xeb\u40ebo;\u60ac\u0180cip\u1f61\u1f64\u1f67l;\u4021s\xf4\u056e\u0100eo\u1f6c\u1f74ctatio\xee\u0559nential\xe5\u0579\u09e1\u1f92\0\u1f9e\0\u1fa1\u1fa7\0\0\u1fc6\u1fcc\0\u1fd3\0\u1fe6\u1fea\u2000\0\u2008\u205allingdotse\xf1\u1e44y;\u4444male;\u6640\u0180ilr\u1fad\u1fb3\u1fc1lig;\u8000\ufb03\u0269\u1fb9\0\0\u1fbdg;\u8000\ufb00ig;\u8000\ufb04;\uc000\ud835\udd23lig;\u8000\ufb01lig;\uc000fj\u0180alt\u1fd9\u1fdc\u1fe1t;\u666dig;\u8000\ufb02ns;\u65b1of;\u4192\u01f0\u1fee\0\u1ff3f;\uc000\ud835\udd57\u0100ak\u05bf\u1ff7\u0100;v\u1ffc\u1ffd\u62d4;\u6ad9artint;\u6a0d\u0100ao\u200c\u2055\u0100cs\u2011\u2052\u03b1\u201a\u2030\u2038\u2045\u2048\0\u2050\u03b2\u2022\u2025\u2027\u202a\u202c\0\u202e\u803b\xbd\u40bd;\u6153\u803b\xbc\u40bc;\u6155;\u6159;\u615b\u01b3\u2034\0\u2036;\u6154;\u6156\u02b4\u203e\u2041\0\0\u2043\u803b\xbe\u40be;\u6157;\u615c5;\u6158\u01b6\u204c\0\u204e;\u615a;\u615d8;\u615el;\u6044wn;\u6322cr;\uc000\ud835\udcbb\u0880Eabcdefgijlnorstv\u2082\u2089\u209f\u20a5\u20b0\u20b4\u20f0\u20f5\u20fa\u20ff\u2103\u2112\u2138\u0317\u213e\u2152\u219e\u0100;l\u064d\u2087;\u6a8c\u0180cmp\u2090\u2095\u209dute;\u41f5ma\u0100;d\u209c\u1cda\u43b3;\u6a86reve;\u411f\u0100iy\u20aa\u20aerc;\u411d;\u4433ot;\u4121\u0200;lqs\u063e\u0642\u20bd\u20c9\u0180;qs\u063e\u064c\u20c4lan\xf4\u0665\u0200;cdl\u0665\u20d2\u20d5\u20e5c;\u6aa9ot\u0100;o\u20dc\u20dd\u6a80\u0100;l\u20e2\u20e3\u6a82;\u6a84\u0100;e\u20ea\u20ed\uc000\u22db\ufe00s;\u6a94r;\uc000\ud835\udd24\u0100;g\u0673\u061bmel;\u6137cy;\u4453\u0200;Eaj\u065a\u210c\u210e\u2110;\u6a92;\u6aa5;\u6aa4\u0200Eaes\u211b\u211d\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6a8arox\xbb\u2124\u0100;q\u212e\u212f\u6a88\u0100;q\u212e\u211bim;\u62e7pf;\uc000\ud835\udd58\u0100ci\u2143\u2146r;\u610am\u0180;el\u066b\u214e\u2150;\u6a8e;\u6a90\u8300>;cdlqr\u05ee\u2160\u216a\u216e\u2173\u2179\u0100ci\u2165\u2167;\u6aa7r;\u6a7aot;\u62d7Par;\u6995uest;\u6a7c\u0280adels\u2184\u216a\u2190\u0656\u219b\u01f0\u2189\0\u218epro\xf8\u209er;\u6978q\u0100lq\u063f\u2196les\xf3\u2088i\xed\u066b\u0100en\u21a3\u21adrtneqq;\uc000\u2269\ufe00\xc5\u21aa\u0500Aabcefkosy\u21c4\u21c7\u21f1\u21f5\u21fa\u2218\u221d\u222f\u2268\u227dr\xf2\u03a0\u0200ilmr\u21d0\u21d4\u21d7\u21dbrs\xf0\u1484f\xbb\u2024il\xf4\u06a9\u0100dr\u21e0\u21e4cy;\u444a\u0180;cw\u08f4\u21eb\u21efir;\u6948;\u61adar;\u610firc;\u4125\u0180alr\u2201\u220e\u2213rts\u0100;u\u2209\u220a\u6665it\xbb\u220alip;\u6026con;\u62b9r;\uc000\ud835\udd25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223a\u223e\u2243\u225e\u2263rr;\u61fftht;\u623bk\u0100lr\u2249\u2253eftarrow;\u61a9ightarrow;\u61aaf;\uc000\ud835\udd59bar;\u6015\u0180clt\u226f\u2274\u2278r;\uc000\ud835\udcbdas\xe8\u21f4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xbb\u1c5b\u0ae1\u22a3\0\u22aa\0\u22b8\u22c5\u22ce\0\u22d5\u22f3\0\0\u22f8\u2322\u2367\u2362\u237f\0\u2386\u23aa\u23b4cute\u803b\xed\u40ed\u0180;iy\u0771\u22b0\u22b5rc\u803b\xee\u40ee;\u4438\u0100cx\u22bc\u22bfy;\u4435cl\u803b\xa1\u40a1\u0100fr\u039f\u22c9;\uc000\ud835\udd26rave\u803b\xec\u40ec\u0200;ino\u073e\u22dd\u22e9\u22ee\u0100in\u22e2\u22e6nt;\u6a0ct;\u622dfin;\u69dcta;\u6129lig;\u4133\u0180aop\u22fe\u231a\u231d\u0180cgt\u2305\u2308\u2317r;\u412b\u0180elp\u071f\u230f\u2313in\xe5\u078ear\xf4\u0720h;\u4131f;\u62b7ed;\u41b5\u0280;cfot\u04f4\u232c\u2331\u233d\u2341are;\u6105in\u0100;t\u2338\u2339\u621eie;\u69dddo\xf4\u2319\u0280;celp\u0757\u234c\u2350\u235b\u2361al;\u62ba\u0100gr\u2355\u2359er\xf3\u1563\xe3\u234darhk;\u6a17rod;\u6a3c\u0200cgpt\u236f\u2372\u2376\u237by;\u4451on;\u412ff;\uc000\ud835\udd5aa;\u43b9uest\u803b\xbf\u40bf\u0100ci\u238a\u238fr;\uc000\ud835\udcben\u0280;Edsv\u04f4\u239b\u239d\u23a1\u04f3;\u62f9ot;\u62f5\u0100;v\u23a6\u23a7\u62f4;\u62f3\u0100;i\u0777\u23aelde;\u4129\u01eb\u23b8\0\u23bccy;\u4456l\u803b\xef\u40ef\u0300cfmosu\u23cc\u23d7\u23dc\u23e1\u23e7\u23f5\u0100iy\u23d1\u23d5rc;\u4135;\u4439r;\uc000\ud835\udd27ath;\u4237pf;\uc000\ud835\udd5b\u01e3\u23ec\0\u23f1r;\uc000\ud835\udcbfrcy;\u4458kcy;\u4454\u0400acfghjos\u240b\u2416\u2422\u2427\u242d\u2431\u2435\u243bppa\u0100;v\u2413\u2414\u43ba;\u43f0\u0100ey\u241b\u2420dil;\u4137;\u443ar;\uc000\ud835\udd28reen;\u4138cy;\u4445cy;\u445cpf;\uc000\ud835\udd5ccr;\uc000\ud835\udcc0\u0b80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248d\u2491\u250e\u253d\u255a\u2580\u264e\u265e\u2665\u2679\u267d\u269a\u26b2\u26d8\u275d\u2768\u278b\u27c0\u2801\u2812\u0180art\u2477\u247a\u247cr\xf2\u09c6\xf2\u0395ail;\u691barr;\u690e\u0100;g\u0994\u248b;\u6a8bar;\u6962\u0963\u24a5\0\u24aa\0\u24b1\0\0\0\0\0\u24b5\u24ba\0\u24c6\u24c8\u24cd\0\u24f9ute;\u413amptyv;\u69b4ra\xee\u084cbda;\u43bbg\u0180;dl\u088e\u24c1\u24c3;\u6991\xe5\u088e;\u6a85uo\u803b\xab\u40abr\u0400;bfhlpst\u0899\u24de\u24e6\u24e9\u24eb\u24ee\u24f1\u24f5\u0100;f\u089d\u24e3s;\u691fs;\u691d\xeb\u2252p;\u61abl;\u6939im;\u6973l;\u61a2\u0180;ae\u24ff\u2500\u2504\u6aabil;\u6919\u0100;s\u2509\u250a\u6aad;\uc000\u2aad\ufe00\u0180abr\u2515\u2519\u251drr;\u690crk;\u6772\u0100ak\u2522\u252cc\u0100ek\u2528\u252a;\u407b;\u405b\u0100es\u2531\u2533;\u698bl\u0100du\u2539\u253b;\u698f;\u698d\u0200aeuy\u2546\u254b\u2556\u2558ron;\u413e\u0100di\u2550\u2554il;\u413c\xec\u08b0\xe2\u2529;\u443b\u0200cqrs\u2563\u2566\u256d\u257da;\u6936uo\u0100;r\u0e19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694bh;\u61b2\u0280;fgqs\u258b\u258c\u0989\u25f3\u25ff\u6264t\u0280ahlrt\u2598\u25a4\u25b7\u25c2\u25e8rrow\u0100;t\u0899\u25a1a\xe9\u24f6arpoon\u0100du\u25af\u25b4own\xbb\u045ap\xbb\u0966eftarrows;\u61c7ight\u0180ahs\u25cd\u25d6\u25derrow\u0100;s\u08f4\u08a7arpoon\xf3\u0f98quigarro\xf7\u21f0hreetimes;\u62cb\u0180;qs\u258b\u0993\u25falan\xf4\u09ac\u0280;cdgs\u09ac\u260a\u260d\u261d\u2628c;\u6aa8ot\u0100;o\u2614\u2615\u6a7f\u0100;r\u261a\u261b\u6a81;\u6a83\u0100;e\u2622\u2625\uc000\u22da\ufe00s;\u6a93\u0280adegs\u2633\u2639\u263d\u2649\u264bppro\xf8\u24c6ot;\u62d6q\u0100gq\u2643\u2645\xf4\u0989gt\xf2\u248c\xf4\u099bi\xed\u09b2\u0180ilr\u2655\u08e1\u265asht;\u697c;\uc000\ud835\udd29\u0100;E\u099c\u2663;\u6a91\u0161\u2669\u2676r\u0100du\u25b2\u266e\u0100;l\u0965\u2673;\u696alk;\u6584cy;\u4459\u0280;acht\u0a48\u2688\u268b\u2691\u2696r\xf2\u25c1orne\xf2\u1d08ard;\u696bri;\u65fa\u0100io\u269f\u26a4dot;\u4140ust\u0100;a\u26ac\u26ad\u63b0che\xbb\u26ad\u0200Eaes\u26bb\u26bd\u26c9\u26d4;\u6268p\u0100;p\u26c3\u26c4\u6a89rox\xbb\u26c4\u0100;q\u26ce\u26cf\u6a87\u0100;q\u26ce\u26bbim;\u62e6\u0400abnoptwz\u26e9\u26f4\u26f7\u271a\u272f\u2741\u2747\u2750\u0100nr\u26ee\u26f1g;\u67ecr;\u61fdr\xeb\u08c1g\u0180lmr\u26ff\u270d\u2714eft\u0100ar\u09e6\u2707ight\xe1\u09f2apsto;\u67fcight\xe1\u09fdparrow\u0100lr\u2725\u2729ef\xf4\u24edight;\u61ac\u0180afl\u2736\u2739\u273dr;\u6985;\uc000\ud835\udd5dus;\u6a2dimes;\u6a34\u0161\u274b\u274fst;\u6217\xe1\u134e\u0180;ef\u2757\u2758\u1800\u65cange\xbb\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277c\u2785\u2787r\xf2\u08a8orne\xf2\u1d8car\u0100;d\u0f98\u2783;\u696d;\u600eri;\u62bf\u0300achiqt\u2798\u279d\u0a40\u27a2\u27ae\u27bbquo;\u6039r;\uc000\ud835\udcc1m\u0180;eg\u09b2\u27aa\u27ac;\u6a8d;\u6a8f\u0100bu\u252a\u27b3o\u0100;r\u0e1f\u27b9;\u601arok;\u4142\u8400<;cdhilqr\u082b\u27d2\u2639\u27dc\u27e0\u27e5\u27ea\u27f0\u0100ci\u27d7\u27d9;\u6aa6r;\u6a79re\xe5\u25f2mes;\u62c9arr;\u6976uest;\u6a7b\u0100Pi\u27f5\u27f9ar;\u6996\u0180;ef\u2800\u092d\u181b\u65c3r\u0100du\u2807\u280dshar;\u694ahar;\u6966\u0100en\u2817\u2821rtneqq;\uc000\u2268\ufe00\xc5\u281e\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288e\u2893\u28a0\u28a5\u28a8\u28da\u28e2\u28e4\u0a83\u28f3\u2902Dot;\u623a\u0200clpr\u284e\u2852\u2863\u287dr\u803b\xaf\u40af\u0100et\u2857\u2859;\u6642\u0100;e\u285e\u285f\u6720se\xbb\u285f\u0100;s\u103b\u2868to\u0200;dlu\u103b\u2873\u2877\u287bow\xee\u048cef\xf4\u090f\xf0\u13d1ker;\u65ae\u0100oy\u2887\u288cmma;\u6a29;\u443cash;\u6014asuredangle\xbb\u1626r;\uc000\ud835\udd2ao;\u6127\u0180cdn\u28af\u28b4\u28c9ro\u803b\xb5\u40b5\u0200;acd\u1464\u28bd\u28c0\u28c4s\xf4\u16a7ir;\u6af0ot\u80bb\xb7\u01b5us\u0180;bd\u28d2\u1903\u28d3\u6212\u0100;u\u1d3c\u28d8;\u6a2a\u0163\u28de\u28e1p;\u6adb\xf2\u2212\xf0\u0a81\u0100dp\u28e9\u28eeels;\u62a7f;\uc000\ud835\udd5e\u0100ct\u28f8\u28fdr;\uc000\ud835\udcc2pos\xbb\u159d\u0180;lm\u2909\u290a\u290d\u43bctimap;\u62b8\u0c00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297e\u2989\u2998\u29da\u29e9\u2a15\u2a1a\u2a58\u2a5d\u2a83\u2a95\u2aa4\u2aa8\u2b04\u2b07\u2b44\u2b7f\u2bae\u2c34\u2c67\u2c7c\u2ce9\u0100gt\u2947\u294b;\uc000\u22d9\u0338\u0100;v\u2950\u0bcf\uc000\u226b\u20d2\u0180elt\u295a\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61cdightarrow;\u61ce;\uc000\u22d8\u0338\u0100;v\u297b\u0c47\uc000\u226a\u20d2ightarrow;\u61cf\u0100Dd\u298e\u2993ash;\u62afash;\u62ae\u0280bcnpt\u29a3\u29a7\u29ac\u29b1\u29ccla\xbb\u02deute;\u4144g;\uc000\u2220\u20d2\u0280;Eiop\u0d84\u29bc\u29c0\u29c5\u29c8;\uc000\u2a70\u0338d;\uc000\u224b\u0338s;\u4149ro\xf8\u0d84ur\u0100;a\u29d3\u29d4\u666el\u0100;s\u29d3\u0b38\u01f3\u29df\0\u29e3p\u80bb\xa0\u0b37mp\u0100;e\u0bf9\u0c00\u0280aeouy\u29f4\u29fe\u2a03\u2a10\u2a13\u01f0\u29f9\0\u29fb;\u6a43on;\u4148dil;\u4146ng\u0100;d\u0d7e\u2a0aot;\uc000\u2a6d\u0338p;\u6a42;\u443dash;\u6013\u0380;Aadqsx\u0b92\u2a29\u2a2d\u2a3b\u2a41\u2a45\u2a50rr;\u61d7r\u0100hr\u2a33\u2a36k;\u6924\u0100;o\u13f2\u13f0ot;\uc000\u2250\u0338ui\xf6\u0b63\u0100ei\u2a4a\u2a4ear;\u6928\xed\u0b98ist\u0100;s\u0ba0\u0b9fr;\uc000\ud835\udd2b\u0200Eest\u0bc5\u2a66\u2a79\u2a7c\u0180;qs\u0bbc\u2a6d\u0be1\u0180;qs\u0bbc\u0bc5\u2a74lan\xf4\u0be2i\xed\u0bea\u0100;r\u0bb6\u2a81\xbb\u0bb7\u0180Aap\u2a8a\u2a8d\u2a91r\xf2\u2971rr;\u61aear;\u6af2\u0180;sv\u0f8d\u2a9c\u0f8c\u0100;d\u2aa1\u2aa2\u62fc;\u62facy;\u445a\u0380AEadest\u2ab7\u2aba\u2abe\u2ac2\u2ac5\u2af6\u2af9r\xf2\u2966;\uc000\u2266\u0338rr;\u619ar;\u6025\u0200;fqs\u0c3b\u2ace\u2ae3\u2aeft\u0100ar\u2ad4\u2ad9rro\xf7\u2ac1ightarro\xf7\u2a90\u0180;qs\u0c3b\u2aba\u2aealan\xf4\u0c55\u0100;s\u0c55\u2af4\xbb\u0c36i\xed\u0c5d\u0100;r\u0c35\u2afei\u0100;e\u0c1a\u0c25i\xe4\u0d90\u0100pt\u2b0c\u2b11f;\uc000\ud835\udd5f\u8180\xac;in\u2b19\u2b1a\u2b36\u40acn\u0200;Edv\u0b89\u2b24\u2b28\u2b2e;\uc000\u22f9\u0338ot;\uc000\u22f5\u0338\u01e1\u0b89\u2b33\u2b35;\u62f7;\u62f6i\u0100;v\u0cb8\u2b3c\u01e1\u0cb8\u2b41\u2b43;\u62fe;\u62fd\u0180aor\u2b4b\u2b63\u2b69r\u0200;ast\u0b7b\u2b55\u2b5a\u2b5flle\xec\u0b7bl;\uc000\u2afd\u20e5;\uc000\u2202\u0338lint;\u6a14\u0180;ce\u0c92\u2b70\u2b73u\xe5\u0ca5\u0100;c\u0c98\u2b78\u0100;e\u0c92\u2b7d\xf1\u0c98\u0200Aait\u2b88\u2b8b\u2b9d\u2ba7r\xf2\u2988rr\u0180;cw\u2b94\u2b95\u2b99\u619b;\uc000\u2933\u0338;\uc000\u219d\u0338ghtarrow\xbb\u2b95ri\u0100;e\u0ccb\u0cd6\u0380chimpqu\u2bbd\u2bcd\u2bd9\u2b04\u0b78\u2be4\u2bef\u0200;cer\u0d32\u2bc6\u0d37\u2bc9u\xe5\u0d45;\uc000\ud835\udcc3ort\u026d\u2b05\0\0\u2bd6ar\xe1\u2b56m\u0100;e\u0d6e\u2bdf\u0100;q\u0d74\u0d73su\u0100bp\u2beb\u2bed\xe5\u0cf8\xe5\u0d0b\u0180bcp\u2bf6\u2c11\u2c19\u0200;Ees\u2bff\u2c00\u0d22\u2c04\u6284;\uc000\u2ac5\u0338et\u0100;e\u0d1b\u2c0bq\u0100;q\u0d23\u2c00c\u0100;e\u0d32\u2c17\xf1\u0d38\u0200;Ees\u2c22\u2c23\u0d5f\u2c27\u6285;\uc000\u2ac6\u0338et\u0100;e\u0d58\u2c2eq\u0100;q\u0d60\u2c23\u0200gilr\u2c3d\u2c3f\u2c45\u2c47\xec\u0bd7lde\u803b\xf1\u40f1\xe7\u0c43iangle\u0100lr\u2c52\u2c5ceft\u0100;e\u0c1a\u2c5a\xf1\u0c26ight\u0100;e\u0ccb\u2c65\xf1\u0cd7\u0100;m\u2c6c\u2c6d\u43bd\u0180;es\u2c74\u2c75\u2c79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2c8f\u2c94\u2c99\u2c9e\u2ca3\u2cb0\u2cb6\u2cd3\u2ce3ash;\u62adarr;\u6904p;\uc000\u224d\u20d2ash;\u62ac\u0100et\u2ca8\u2cac;\uc000\u2265\u20d2;\uc000>\u20d2nfin;\u69de\u0180Aet\u2cbd\u2cc1\u2cc5rr;\u6902;\uc000\u2264\u20d2\u0100;r\u2cca\u2ccd\uc000<\u20d2ie;\uc000\u22b4\u20d2\u0100At\u2cd8\u2cdcrr;\u6903rie;\uc000\u22b5\u20d2im;\uc000\u223c\u20d2\u0180Aan\u2cf0\u2cf4\u2d02rr;\u61d6r\u0100hr\u2cfa\u2cfdk;\u6923\u0100;o\u13e7\u13e5ear;\u6927\u1253\u1a95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2d2d\0\u2d38\u2d48\u2d60\u2d65\u2d72\u2d84\u1b07\0\0\u2d8d\u2dab\0\u2dc8\u2dce\0\u2ddc\u2e19\u2e2b\u2e3e\u2e43\u0100cs\u2d31\u1a97ute\u803b\xf3\u40f3\u0100iy\u2d3c\u2d45r\u0100;c\u1a9e\u2d42\u803b\xf4\u40f4;\u443e\u0280abios\u1aa0\u2d52\u2d57\u01c8\u2d5alac;\u4151v;\u6a38old;\u69bclig;\u4153\u0100cr\u2d69\u2d6dir;\u69bf;\uc000\ud835\udd2c\u036f\u2d79\0\0\u2d7c\0\u2d82n;\u42dbave\u803b\xf2\u40f2;\u69c1\u0100bm\u2d88\u0df4ar;\u69b5\u0200acit\u2d95\u2d98\u2da5\u2da8r\xf2\u1a80\u0100ir\u2d9d\u2da0r;\u69beoss;\u69bbn\xe5\u0e52;\u69c0\u0180aei\u2db1\u2db5\u2db9cr;\u414dga;\u43c9\u0180cdn\u2dc0\u2dc5\u01cdron;\u43bf;\u69b6pf;\uc000\ud835\udd60\u0180ael\u2dd4\u2dd7\u01d2r;\u69b7rp;\u69b9\u0380;adiosv\u2dea\u2deb\u2dee\u2e08\u2e0d\u2e10\u2e16\u6228r\xf2\u1a86\u0200;efm\u2df7\u2df8\u2e02\u2e05\u6a5dr\u0100;o\u2dfe\u2dff\u6134f\xbb\u2dff\u803b\xaa\u40aa\u803b\xba\u40bagof;\u62b6r;\u6a56lope;\u6a57;\u6a5b\u0180clo\u2e1f\u2e21\u2e27\xf2\u2e01ash\u803b\xf8\u40f8l;\u6298i\u016c\u2e2f\u2e34de\u803b\xf5\u40f5es\u0100;a\u01db\u2e3as;\u6a36ml\u803b\xf6\u40f6bar;\u633d\u0ae1\u2e5e\0\u2e7d\0\u2e80\u2e9d\0\u2ea2\u2eb9\0\0\u2ecb\u0e9c\0\u2f13\0\0\u2f2b\u2fbc\0\u2fc8r\u0200;ast\u0403\u2e67\u2e72\u0e85\u8100\xb6;l\u2e6d\u2e6e\u40b6le\xec\u0403\u0269\u2e78\0\0\u2e7bm;\u6af3;\u6afdy;\u443fr\u0280cimpt\u2e8b\u2e8f\u2e93\u1865\u2e97nt;\u4025od;\u402eil;\u6030enk;\u6031r;\uc000\ud835\udd2d\u0180imo\u2ea8\u2eb0\u2eb4\u0100;v\u2ead\u2eae\u43c6;\u43d5ma\xf4\u0a76ne;\u660e\u0180;tv\u2ebf\u2ec0\u2ec8\u43c0chfork\xbb\u1ffd;\u43d6\u0100au\u2ecf\u2edfn\u0100ck\u2ed5\u2eddk\u0100;h\u21f4\u2edb;\u610e\xf6\u21f4s\u0480;abcdemst\u2ef3\u2ef4\u1908\u2ef9\u2efd\u2f04\u2f06\u2f0a\u2f0e\u402bcir;\u6a23ir;\u6a22\u0100ou\u1d40\u2f02;\u6a25;\u6a72n\u80bb\xb1\u0e9dim;\u6a26wo;\u6a27\u0180ipu\u2f19\u2f20\u2f25ntint;\u6a15f;\uc000\ud835\udd61nd\u803b\xa3\u40a3\u0500;Eaceinosu\u0ec8\u2f3f\u2f41\u2f44\u2f47\u2f81\u2f89\u2f92\u2f7e\u2fb6;\u6ab3p;\u6ab7u\xe5\u0ed9\u0100;c\u0ece\u2f4c\u0300;acens\u0ec8\u2f59\u2f5f\u2f66\u2f68\u2f7eppro\xf8\u2f43urlye\xf1\u0ed9\xf1\u0ece\u0180aes\u2f6f\u2f76\u2f7approx;\u6ab9qq;\u6ab5im;\u62e8i\xed\u0edfme\u0100;s\u2f88\u0eae\u6032\u0180Eas\u2f78\u2f90\u2f7a\xf0\u2f75\u0180dfp\u0eec\u2f99\u2faf\u0180als\u2fa0\u2fa5\u2faalar;\u632eine;\u6312urf;\u6313\u0100;t\u0efb\u2fb4\xef\u0efbrel;\u62b0\u0100ci\u2fc0\u2fc5r;\uc000\ud835\udcc5;\u43c8ncsp;\u6008\u0300fiopsu\u2fda\u22e2\u2fdf\u2fe5\u2feb\u2ff1r;\uc000\ud835\udd2epf;\uc000\ud835\udd62rime;\u6057cr;\uc000\ud835\udcc6\u0180aeo\u2ff8\u3009\u3013t\u0100ei\u2ffe\u3005rnion\xf3\u06b0nt;\u6a16st\u0100;e\u3010\u3011\u403f\xf1\u1f19\xf4\u0f14\u0a80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30e0\u310e\u312b\u3147\u3162\u3172\u318e\u3206\u3215\u3224\u3229\u3258\u326e\u3272\u3290\u32b0\u32b7\u0180art\u3047\u304a\u304cr\xf2\u10b3\xf2\u03ddail;\u691car\xf2\u1c65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307f\u308f\u3094\u30cc\u0100eu\u306d\u3071;\uc000\u223d\u0331te;\u4155i\xe3\u116emptyv;\u69b3g\u0200;del\u0fd1\u3089\u308b\u308d;\u6992;\u69a5\xe5\u0fd1uo\u803b\xbb\u40bbr\u0580;abcfhlpstw\u0fdc\u30ac\u30af\u30b7\u30b9\u30bc\u30be\u30c0\u30c3\u30c7\u30cap;\u6975\u0100;f\u0fe0\u30b4s;\u6920;\u6933s;\u691e\xeb\u225d\xf0\u272el;\u6945im;\u6974l;\u61a3;\u619d\u0100ai\u30d1\u30d5il;\u691ao\u0100;n\u30db\u30dc\u6236al\xf3\u0f1e\u0180abr\u30e7\u30ea\u30eer\xf2\u17e5rk;\u6773\u0100ak\u30f3\u30fdc\u0100ek\u30f9\u30fb;\u407d;\u405d\u0100es\u3102\u3104;\u698cl\u0100du\u310a\u310c;\u698e;\u6990\u0200aeuy\u3117\u311c\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xec\u0ff2\xe2\u30fa;\u4440\u0200clqs\u3134\u3137\u313d\u3144a;\u6937dhar;\u6969uo\u0100;r\u020e\u020dh;\u61b3\u0180acg\u314e\u315f\u0f44l\u0200;ips\u0f78\u3158\u315b\u109cn\xe5\u10bbar\xf4\u0fa9t;\u65ad\u0180ilr\u3169\u1023\u316esht;\u697d;\uc000\ud835\udd2f\u0100ao\u3177\u3186r\u0100du\u317d\u317f\xbb\u047b\u0100;l\u1091\u3184;\u696c\u0100;v\u318b\u318c\u43c1;\u43f1\u0180gns\u3195\u31f9\u31fcht\u0300ahlrst\u31a4\u31b0\u31c2\u31d8\u31e4\u31eerrow\u0100;t\u0fdc\u31ada\xe9\u30c8arpoon\u0100du\u31bb\u31bfow\xee\u317ep\xbb\u1092eft\u0100ah\u31ca\u31d0rrow\xf3\u0feaarpoon\xf3\u0551ightarrows;\u61c9quigarro\xf7\u30cbhreetimes;\u62ccg;\u42daingdotse\xf1\u1f32\u0180ahm\u320d\u3210\u3213r\xf2\u0feaa\xf2\u0551;\u600foust\u0100;a\u321e\u321f\u63b1che\xbb\u321fmid;\u6aee\u0200abpt\u3232\u323d\u3240\u3252\u0100nr\u3237\u323ag;\u67edr;\u61fer\xeb\u1003\u0180afl\u3247\u324a\u324er;\u6986;\uc000\ud835\udd63us;\u6a2eimes;\u6a35\u0100ap\u325d\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6a12ar\xf2\u31e3\u0200achq\u327b\u3280\u10bc\u3285quo;\u603ar;\uc000\ud835\udcc7\u0100bu\u30fb\u328ao\u0100;r\u0214\u0213\u0180hir\u3297\u329b\u32a0re\xe5\u31f8mes;\u62cai\u0200;efl\u32aa\u1059\u1821\u32ab\u65b9tri;\u69celuhar;\u6968;\u611e\u0d61\u32d5\u32db\u32df\u332c\u3338\u3371\0\u337a\u33a4\0\0\u33ec\u33f0\0\u3428\u3448\u345a\u34ad\u34b1\u34ca\u34f1\0\u3616\0\0\u3633cute;\u415bqu\xef\u27ba\u0500;Eaceinpsy\u11ed\u32f3\u32f5\u32ff\u3302\u330b\u330f\u331f\u3326\u3329;\u6ab4\u01f0\u32fa\0\u32fc;\u6ab8on;\u4161u\xe5\u11fe\u0100;d\u11f3\u3307il;\u415frc;\u415d\u0180Eas\u3316\u3318\u331b;\u6ab6p;\u6abaim;\u62e9olint;\u6a13i\xed\u1204;\u4441ot\u0180;be\u3334\u1d47\u3335\u62c5;\u6a66\u0380Aacmstx\u3346\u334a\u3357\u335b\u335e\u3363\u336drr;\u61d8r\u0100hr\u3350\u3352\xeb\u2228\u0100;o\u0a36\u0a34t\u803b\xa7\u40a7i;\u403bwar;\u6929m\u0100in\u3369\xf0nu\xf3\xf1t;\u6736r\u0100;o\u3376\u2055\uc000\ud835\udd30\u0200acoy\u3382\u3386\u3391\u33a0rp;\u666f\u0100hy\u338b\u338fcy;\u4449;\u4448rt\u026d\u3399\0\0\u339ci\xe4\u1464ara\xec\u2e6f\u803b\xad\u40ad\u0100gm\u33a8\u33b4ma\u0180;fv\u33b1\u33b2\u33b2\u43c3;\u43c2\u0400;deglnpr\u12ab\u33c5\u33c9\u33ce\u33d6\u33de\u33e1\u33e6ot;\u6a6a\u0100;q\u12b1\u12b0\u0100;E\u33d3\u33d4\u6a9e;\u6aa0\u0100;E\u33db\u33dc\u6a9d;\u6a9fe;\u6246lus;\u6a24arr;\u6972ar\xf2\u113d\u0200aeit\u33f8\u3408\u340f\u3417\u0100ls\u33fd\u3404lsetm\xe9\u336ahp;\u6a33parsl;\u69e4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341c\u341d\u6aaa\u0100;s\u3422\u3423\u6aac;\uc000\u2aac\ufe00\u0180flp\u342e\u3433\u3442tcy;\u444c\u0100;b\u3438\u3439\u402f\u0100;a\u343e\u343f\u69c4r;\u633ff;\uc000\ud835\udd64a\u0100dr\u344d\u0402es\u0100;u\u3454\u3455\u6660it\xbb\u3455\u0180csu\u3460\u3479\u349f\u0100au\u3465\u346fp\u0100;s\u1188\u346b;\uc000\u2293\ufe00p\u0100;s\u11b4\u3475;\uc000\u2294\ufe00u\u0100bp\u347f\u348f\u0180;es\u1197\u119c\u3486et\u0100;e\u1197\u348d\xf1\u119d\u0180;es\u11a8\u11ad\u3496et\u0100;e\u11a8\u349d\xf1\u11ae\u0180;af\u117b\u34a6\u05b0r\u0165\u34ab\u05b1\xbb\u117car\xf2\u1148\u0200cemt\u34b9\u34be\u34c2\u34c5r;\uc000\ud835\udcc8tm\xee\xf1i\xec\u3415ar\xe6\u11be\u0100ar\u34ce\u34d5r\u0100;f\u34d4\u17bf\u6606\u0100an\u34da\u34edight\u0100ep\u34e3\u34eapsilo\xee\u1ee0h\xe9\u2eafs\xbb\u2852\u0280bcmnp\u34fb\u355e\u1209\u358b\u358e\u0480;Edemnprs\u350e\u350f\u3511\u3515\u351e\u3523\u352c\u3531\u3536\u6282;\u6ac5ot;\u6abd\u0100;d\u11da\u351aot;\u6ac3ult;\u6ac1\u0100Ee\u3528\u352a;\u6acb;\u628alus;\u6abfarr;\u6979\u0180eiu\u353d\u3552\u3555t\u0180;en\u350e\u3545\u354bq\u0100;q\u11da\u350feq\u0100;q\u352b\u3528m;\u6ac7\u0100bp\u355a\u355c;\u6ad5;\u6ad3c\u0300;acens\u11ed\u356c\u3572\u3579\u357b\u3326ppro\xf8\u32faurlye\xf1\u11fe\xf1\u11f3\u0180aes\u3582\u3588\u331bppro\xf8\u331aq\xf1\u3317g;\u666a\u0680123;Edehlmnps\u35a9\u35ac\u35af\u121c\u35b2\u35b4\u35c0\u35c9\u35d5\u35da\u35df\u35e8\u35ed\u803b\xb9\u40b9\u803b\xb2\u40b2\u803b\xb3\u40b3;\u6ac6\u0100os\u35b9\u35bct;\u6abeub;\u6ad8\u0100;d\u1222\u35c5ot;\u6ac4s\u0100ou\u35cf\u35d2l;\u67c9b;\u6ad7arr;\u697bult;\u6ac2\u0100Ee\u35e4\u35e6;\u6acc;\u628blus;\u6ac0\u0180eiu\u35f4\u3609\u360ct\u0180;en\u121c\u35fc\u3602q\u0100;q\u1222\u35b2eq\u0100;q\u35e7\u35e4m;\u6ac8\u0100bp\u3611\u3613;\u6ad4;\u6ad6\u0180Aan\u361c\u3620\u362drr;\u61d9r\u0100hr\u3626\u3628\xeb\u222e\u0100;o\u0a2b\u0a29war;\u692alig\u803b\xdf\u40df\u0be1\u3651\u365d\u3660\u12ce\u3673\u3679\0\u367e\u36c2\0\0\0\0\0\u36db\u3703\0\u3709\u376c\0\0\0\u3787\u0272\u3656\0\0\u365bget;\u6316;\u43c4r\xeb\u0e5f\u0180aey\u3666\u366b\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uc000\ud835\udd31\u0200eiko\u3686\u369d\u36b5\u36bc\u01f2\u368b\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369b\u43b8ym;\u43d1\u0100cn\u36a2\u36b2k\u0100as\u36a8\u36aeppro\xf8\u12c1im\xbb\u12acs\xf0\u129e\u0100as\u36ba\u36ae\xf0\u12c1rn\u803b\xfe\u40fe\u01ec\u031f\u36c6\u22e7es\u8180\xd7;bd\u36cf\u36d0\u36d8\u40d7\u0100;a\u190f\u36d5r;\u6a31;\u6a30\u0180eps\u36e1\u36e3\u3700\xe1\u2a4d\u0200;bcf\u0486\u36ec\u36f0\u36f4ot;\u6336ir;\u6af1\u0100;o\u36f9\u36fc\uc000\ud835\udd65rk;\u6ada\xe1\u3362rime;\u6034\u0180aip\u370f\u3712\u3764d\xe5\u1248\u0380adempst\u3721\u374d\u3740\u3751\u3757\u375c\u375fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65b5own\xbb\u1dbbeft\u0100;e\u2800\u373e\xf1\u092e;\u625cight\u0100;e\u32aa\u374b\xf1\u105aot;\u65ecinus;\u6a3alus;\u6a39b;\u69cdime;\u6a3bezium;\u63e2\u0180cht\u3772\u377d\u3781\u0100ry\u3777\u377b;\uc000\ud835\udcc9;\u4446cy;\u445brok;\u4167\u0100io\u378b\u378ex\xf4\u1777head\u0100lr\u3797\u37a0eftarro\xf7\u084fightarrow\xbb\u0f5d\u0900AHabcdfghlmoprstuw\u37d0\u37d3\u37d7\u37e4\u37f0\u37fc\u380e\u381c\u3823\u3834\u3851\u385d\u386b\u38a9\u38cc\u38d2\u38ea\u38f6r\xf2\u03edar;\u6963\u0100cr\u37dc\u37e2ute\u803b\xfa\u40fa\xf2\u1150r\u01e3\u37ea\0\u37edy;\u445eve;\u416d\u0100iy\u37f5\u37farc\u803b\xfb\u40fb;\u4443\u0180abh\u3803\u3806\u380br\xf2\u13adlac;\u4171a\xf2\u13c3\u0100ir\u3813\u3818sht;\u697e;\uc000\ud835\udd32rave\u803b\xf9\u40f9\u0161\u3827\u3831r\u0100lr\u382c\u382e\xbb\u0957\xbb\u1083lk;\u6580\u0100ct\u3839\u384d\u026f\u383f\0\0\u384arn\u0100;e\u3845\u3846\u631cr\xbb\u3846op;\u630fri;\u65f8\u0100al\u3856\u385acr;\u416b\u80bb\xa8\u0349\u0100gp\u3862\u3866on;\u4173f;\uc000\ud835\udd66\u0300adhlsu\u114b\u3878\u387d\u1372\u3891\u38a0own\xe1\u13b3arpoon\u0100lr\u3888\u388cef\xf4\u382digh\xf4\u382fi\u0180;hl\u3899\u389a\u389c\u43c5\xbb\u13faon\xbb\u389aparrows;\u61c8\u0180cit\u38b0\u38c4\u38c8\u026f\u38b6\0\0\u38c1rn\u0100;e\u38bc\u38bd\u631dr\xbb\u38bdop;\u630eng;\u416fri;\u65f9cr;\uc000\ud835\udcca\u0180dir\u38d9\u38dd\u38e2ot;\u62f0lde;\u4169i\u0100;f\u3730\u38e8\xbb\u1813\u0100am\u38ef\u38f2r\xf2\u38a8l\u803b\xfc\u40fcangle;\u69a7\u0780ABDacdeflnoprsz\u391c\u391f\u3929\u392d\u39b5\u39b8\u39bd\u39df\u39e4\u39e8\u39f3\u39f9\u39fd\u3a01\u3a20r\xf2\u03f7ar\u0100;v\u3926\u3927\u6ae8;\u6ae9as\xe8\u03e1\u0100nr\u3932\u3937grt;\u699c\u0380eknprst\u34e3\u3946\u394b\u3952\u395d\u3964\u3996app\xe1\u2415othin\xe7\u1e96\u0180hir\u34eb\u2ec8\u3959op\xf4\u2fb5\u0100;h\u13b7\u3962\xef\u318d\u0100iu\u3969\u396dgm\xe1\u33b3\u0100bp\u3972\u3984setneq\u0100;q\u397d\u3980\uc000\u228a\ufe00;\uc000\u2acb\ufe00setneq\u0100;q\u398f\u3992\uc000\u228b\ufe00;\uc000\u2acc\ufe00\u0100hr\u399b\u399fet\xe1\u369ciangle\u0100lr\u39aa\u39afeft\xbb\u0925ight\xbb\u1051y;\u4432ash\xbb\u1036\u0180elr\u39c4\u39d2\u39d7\u0180;be\u2dea\u39cb\u39cfar;\u62bbq;\u625alip;\u62ee\u0100bt\u39dc\u1468a\xf2\u1469r;\uc000\ud835\udd33tr\xe9\u39aesu\u0100bp\u39ef\u39f1\xbb\u0d1c\xbb\u0d59pf;\uc000\ud835\udd67ro\xf0\u0efbtr\xe9\u39b4\u0100cu\u3a06\u3a0br;\uc000\ud835\udccb\u0100bp\u3a10\u3a18n\u0100Ee\u3980\u3a16\xbb\u397en\u0100Ee\u3992\u3a1e\xbb\u3990igzag;\u699a\u0380cefoprs\u3a36\u3a3b\u3a56\u3a5b\u3a54\u3a61\u3a6airc;\u4175\u0100di\u3a40\u3a51\u0100bg\u3a45\u3a49ar;\u6a5fe\u0100;q\u15fa\u3a4f;\u6259erp;\u6118r;\uc000\ud835\udd34pf;\uc000\ud835\udd68\u0100;e\u1479\u3a66at\xe8\u1479cr;\uc000\ud835\udccc\u0ae3\u178e\u3a87\0\u3a8b\0\u3a90\u3a9b\0\0\u3a9d\u3aa8\u3aab\u3aaf\0\0\u3ac3\u3ace\0\u3ad8\u17dc\u17dftr\xe9\u17d1r;\uc000\ud835\udd35\u0100Aa\u3a94\u3a97r\xf2\u03c3r\xf2\u09f6;\u43be\u0100Aa\u3aa1\u3aa4r\xf2\u03b8r\xf2\u09eba\xf0\u2713is;\u62fb\u0180dpt\u17a4\u3ab5\u3abe\u0100fl\u3aba\u17a9;\uc000\ud835\udd69im\xe5\u17b2\u0100Aa\u3ac7\u3acar\xf2\u03cer\xf2\u0a01\u0100cq\u3ad2\u17b8r;\uc000\ud835\udccd\u0100pt\u17d6\u3adcr\xe9\u17d4\u0400acefiosu\u3af0\u3afd\u3b08\u3b0c\u3b11\u3b15\u3b1b\u3b21c\u0100uy\u3af6\u3afbte\u803b\xfd\u40fd;\u444f\u0100iy\u3b02\u3b06rc;\u4177;\u444bn\u803b\xa5\u40a5r;\uc000\ud835\udd36cy;\u4457pf;\uc000\ud835\udd6acr;\uc000\ud835\udcce\u0100cm\u3b26\u3b29y;\u444el\u803b\xff\u40ff\u0500acdefhiosw\u3b42\u3b48\u3b54\u3b58\u3b64\u3b69\u3b6d\u3b74\u3b7a\u3b80cute;\u417a\u0100ay\u3b4d\u3b52ron;\u417e;\u4437ot;\u417c\u0100et\u3b5d\u3b61tr\xe6\u155fa;\u43b6r;\uc000\ud835\udd37cy;\u4436grarr;\u61ddpf;\uc000\ud835\udd6bcr;\uc000\ud835\udccf\u0100jn\u3b85\u3b87;\u600dj;\u600c"
    .split("")
    .map((c) => c.charCodeAt(0))));
//# sourceMappingURL=decode-data-html.js.map
;// ../../node_modules/entities/lib/esm/generated/decode-data-xml.js
// Generated using scripts/write-decode-map.ts
/* harmony default export */ const decode_data_xml = (new Uint16Array(
// prettier-ignore
"\u0200aglq\t\x15\x18\x1b\u026d\x0f\0\0\x12p;\u4026os;\u4027t;\u403et;\u403cuot;\u4022"
    .split("")
    .map((c) => c.charCodeAt(0))));
//# sourceMappingURL=decode-data-xml.js.map
;// ../../node_modules/entities/lib/esm/decode_codepoint.js
// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134
var _a;
const decodeMap = new Map([
    [0, 65533],
    // C1 Unicode control character reference replacements
    [128, 8364],
    [130, 8218],
    [131, 402],
    [132, 8222],
    [133, 8230],
    [134, 8224],
    [135, 8225],
    [136, 710],
    [137, 8240],
    [138, 352],
    [139, 8249],
    [140, 338],
    [142, 381],
    [145, 8216],
    [146, 8217],
    [147, 8220],
    [148, 8221],
    [149, 8226],
    [150, 8211],
    [151, 8212],
    [152, 732],
    [153, 8482],
    [154, 353],
    [155, 8250],
    [156, 339],
    [158, 382],
    [159, 376],
]);
/**
 * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.
 */
const fromCodePoint = 
// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {
    let output = "";
    if (codePoint > 0xffff) {
        codePoint -= 0x10000;
        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
        codePoint = 0xdc00 | (codePoint & 0x3ff);
    }
    output += String.fromCharCode(codePoint);
    return output;
};
/**
 * Replace the given code point with a replacement character if it is a
 * surrogate or is outside the valid range. Otherwise return the code
 * point unchanged.
 */
function replaceCodePoint(codePoint) {
    var _a;
    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
        return 0xfffd;
    }
    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
}
/**
 * Replace the code point if relevant, then convert it to a string.
 *
 * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.
 * @param codePoint The code point to decode.
 * @returns The decoded code point.
 */
function decodeCodePoint(codePoint) {
    return fromCodePoint(replaceCodePoint(codePoint));
}
//# sourceMappingURL=decode_codepoint.js.map
;// ../../node_modules/entities/lib/esm/decode.js



// Re-export for use by eg. htmlparser2


var CharCodes;
(function (CharCodes) {
    CharCodes[CharCodes["NUM"] = 35] = "NUM";
    CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
    CharCodes[CharCodes["EQUALS"] = 61] = "EQUALS";
    CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
    CharCodes[CharCodes["NINE"] = 57] = "NINE";
    CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
    CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
    CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
    CharCodes[CharCodes["LOWER_Z"] = 122] = "LOWER_Z";
    CharCodes[CharCodes["UPPER_A"] = 65] = "UPPER_A";
    CharCodes[CharCodes["UPPER_F"] = 70] = "UPPER_F";
    CharCodes[CharCodes["UPPER_Z"] = 90] = "UPPER_Z";
})(CharCodes || (CharCodes = {}));
/** Bit that needs to be set to convert an upper case ASCII character to lower case */
const TO_LOWER_BIT = 0b100000;
var BinTrieFlags;
(function (BinTrieFlags) {
    BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
    BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
    BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags || (BinTrieFlags = {}));
function isNumber(code) {
    return code >= CharCodes.ZERO && code <= CharCodes.NINE;
}
function isHexadecimalCharacter(code) {
    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||
        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));
}
function isAsciiAlphaNumeric(code) {
    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||
        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||
        isNumber(code));
}
/**
 * Checks if the given character is a valid end character for an entity in an attribute.
 *
 * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
 * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
 */
function isEntityInAttributeInvalidEnd(code) {
    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
}
var EntityDecoderState;
(function (EntityDecoderState) {
    EntityDecoderState[EntityDecoderState["EntityStart"] = 0] = "EntityStart";
    EntityDecoderState[EntityDecoderState["NumericStart"] = 1] = "NumericStart";
    EntityDecoderState[EntityDecoderState["NumericDecimal"] = 2] = "NumericDecimal";
    EntityDecoderState[EntityDecoderState["NumericHex"] = 3] = "NumericHex";
    EntityDecoderState[EntityDecoderState["NamedEntity"] = 4] = "NamedEntity";
})(EntityDecoderState || (EntityDecoderState = {}));
var decode_DecodingMode;
(function (DecodingMode) {
    /** Entities in text nodes that can end with any character. */
    DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
    /** Only allow entities terminated with a semicolon. */
    DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
    /** Entities in attributes have limitations on ending characters. */
    DecodingMode[DecodingMode["Attribute"] = 2] = "Attribute";
})(decode_DecodingMode || (decode_DecodingMode = {}));
/**
 * Token decoder with support of writing partial entities.
 */
class EntityDecoder {
    constructor(
    /** The tree used to decode entities. */
    decodeTree, 
    /**
     * The function that is called when a codepoint is decoded.
     *
     * For multi-byte named entities, this will be called multiple times,
     * with the second codepoint, and the same `consumed` value.
     *
     * @param codepoint The decoded codepoint.
     * @param consumed The number of bytes consumed by the decoder.
     */
    emitCodePoint, 
    /** An object that is used to produce errors. */
    errors) {
        this.decodeTree = decodeTree;
        this.emitCodePoint = emitCodePoint;
        this.errors = errors;
        /** The current state of the decoder. */
        this.state = EntityDecoderState.EntityStart;
        /** Characters that were consumed while parsing an entity. */
        this.consumed = 1;
        /**
         * The result of the entity.
         *
         * Either the result index of a numeric entity, or the codepoint of a
         * numeric entity.
         */
        this.result = 0;
        /** The current index in the decode tree. */
        this.treeIndex = 0;
        /** The number of characters that were consumed in excess. */
        this.excess = 1;
        /** The mode in which the decoder is operating. */
        this.decodeMode = decode_DecodingMode.Strict;
    }
    /** Resets the instance to make it reusable. */
    startEntity(decodeMode) {
        this.decodeMode = decodeMode;
        this.state = EntityDecoderState.EntityStart;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.consumed = 1;
    }
    /**
     * Write an entity to the decoder. This can be called multiple times with partial entities.
     * If the entity is incomplete, the decoder will return -1.
     *
     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
     * entity is incomplete, and resume when the next string is written.
     *
     * @param string The string containing the entity (or a continuation of the entity).
     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    write(str, offset) {
        switch (this.state) {
            case EntityDecoderState.EntityStart: {
                if (str.charCodeAt(offset) === CharCodes.NUM) {
                    this.state = EntityDecoderState.NumericStart;
                    this.consumed += 1;
                    return this.stateNumericStart(str, offset + 1);
                }
                this.state = EntityDecoderState.NamedEntity;
                return this.stateNamedEntity(str, offset);
            }
            case EntityDecoderState.NumericStart: {
                return this.stateNumericStart(str, offset);
            }
            case EntityDecoderState.NumericDecimal: {
                return this.stateNumericDecimal(str, offset);
            }
            case EntityDecoderState.NumericHex: {
                return this.stateNumericHex(str, offset);
            }
            case EntityDecoderState.NamedEntity: {
                return this.stateNamedEntity(str, offset);
            }
        }
    }
    /**
     * Switches between the numeric decimal and hexadecimal states.
     *
     * Equivalent to the `Numeric character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNumericStart(str, offset) {
        if (offset >= str.length) {
            return -1;
        }
        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
            this.state = EntityDecoderState.NumericHex;
            this.consumed += 1;
            return this.stateNumericHex(str, offset + 1);
        }
        this.state = EntityDecoderState.NumericDecimal;
        return this.stateNumericDecimal(str, offset);
    }
    addToNumericResult(str, start, end, base) {
        if (start !== end) {
            const digitCount = end - start;
            this.result =
                this.result * Math.pow(base, digitCount) +
                    parseInt(str.substr(start, digitCount), base);
            this.consumed += digitCount;
        }
    }
    /**
     * Parses a hexadecimal numeric entity.
     *
     * Equivalent to the `Hexademical character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNumericHex(str, offset) {
        const startIdx = offset;
        while (offset < str.length) {
            const char = str.charCodeAt(offset);
            if (isNumber(char) || isHexadecimalCharacter(char)) {
                offset += 1;
            }
            else {
                this.addToNumericResult(str, startIdx, offset, 16);
                return this.emitNumericEntity(char, 3);
            }
        }
        this.addToNumericResult(str, startIdx, offset, 16);
        return -1;
    }
    /**
     * Parses a decimal numeric entity.
     *
     * Equivalent to the `Decimal character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNumericDecimal(str, offset) {
        const startIdx = offset;
        while (offset < str.length) {
            const char = str.charCodeAt(offset);
            if (isNumber(char)) {
                offset += 1;
            }
            else {
                this.addToNumericResult(str, startIdx, offset, 10);
                return this.emitNumericEntity(char, 2);
            }
        }
        this.addToNumericResult(str, startIdx, offset, 10);
        return -1;
    }
    /**
     * Validate and emit a numeric entity.
     *
     * Implements the logic from the `Hexademical character reference start
     * state` and `Numeric character reference end state` in the HTML spec.
     *
     * @param lastCp The last code point of the entity. Used to see if the
     *               entity was terminated with a semicolon.
     * @param expectedLength The minimum number of characters that should be
     *                       consumed. Used to validate that at least one digit
     *                       was consumed.
     * @returns The number of characters that were consumed.
     */
    emitNumericEntity(lastCp, expectedLength) {
        var _a;
        // Ensure we consumed at least one digit.
        if (this.consumed <= expectedLength) {
            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
            return 0;
        }
        // Figure out if this is a legit end of the entity
        if (lastCp === CharCodes.SEMI) {
            this.consumed += 1;
        }
        else if (this.decodeMode === decode_DecodingMode.Strict) {
            return 0;
        }
        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
        if (this.errors) {
            if (lastCp !== CharCodes.SEMI) {
                this.errors.missingSemicolonAfterCharacterReference();
            }
            this.errors.validateNumericCharacterReference(this.result);
        }
        return this.consumed;
    }
    /**
     * Parses a named entity.
     *
     * Equivalent to the `Named character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNamedEntity(str, offset) {
        const { decodeTree } = this;
        let current = decodeTree[this.treeIndex];
        // The mask is the number of bytes of the value, including the current byte.
        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
        for (; offset < str.length; offset++, this.excess++) {
            const char = str.charCodeAt(offset);
            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
            if (this.treeIndex < 0) {
                return this.result === 0 ||
                    // If we are parsing an attribute
                    (this.decodeMode === decode_DecodingMode.Attribute &&
                        // We shouldn't have consumed any characters after the entity,
                        (valueLength === 0 ||
                            // And there should be no invalid characters.
                            isEntityInAttributeInvalidEnd(char)))
                    ? 0
                    : this.emitNotTerminatedNamedEntity();
            }
            current = decodeTree[this.treeIndex];
            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
            // If the branch is a value, store it and continue
            if (valueLength !== 0) {
                // If the entity is terminated by a semicolon, we are done.
                if (char === CharCodes.SEMI) {
                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
                }
                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.
                if (this.decodeMode !== decode_DecodingMode.Strict) {
                    this.result = this.treeIndex;
                    this.consumed += this.excess;
                    this.excess = 0;
                }
            }
        }
        return -1;
    }
    /**
     * Emit a named entity that was not terminated with a semicolon.
     *
     * @returns The number of characters consumed.
     */
    emitNotTerminatedNamedEntity() {
        var _a;
        const { result, decodeTree } = this;
        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
        this.emitNamedEntityData(result, valueLength, this.consumed);
        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
        return this.consumed;
    }
    /**
     * Emit a named entity.
     *
     * @param result The index of the entity in the decode tree.
     * @param valueLength The number of bytes in the entity.
     * @param consumed The number of characters consumed.
     *
     * @returns The number of characters consumed.
     */
    emitNamedEntityData(result, valueLength, consumed) {
        const { decodeTree } = this;
        this.emitCodePoint(valueLength === 1
            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH
            : decodeTree[result + 1], consumed);
        if (valueLength === 3) {
            // For multi-byte values, we need to emit the second byte.
            this.emitCodePoint(decodeTree[result + 2], consumed);
        }
        return consumed;
    }
    /**
     * Signal to the parser that the end of the input was reached.
     *
     * Remaining data will be emitted and relevant errors will be produced.
     *
     * @returns The number of characters consumed.
     */
    end() {
        var _a;
        switch (this.state) {
            case EntityDecoderState.NamedEntity: {
                // Emit a named entity if we have one.
                return this.result !== 0 &&
                    (this.decodeMode !== decode_DecodingMode.Attribute ||
                        this.result === this.treeIndex)
                    ? this.emitNotTerminatedNamedEntity()
                    : 0;
            }
            // Otherwise, emit a numeric entity if we have one.
            case EntityDecoderState.NumericDecimal: {
                return this.emitNumericEntity(0, 2);
            }
            case EntityDecoderState.NumericHex: {
                return this.emitNumericEntity(0, 3);
            }
            case EntityDecoderState.NumericStart: {
                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
                return 0;
            }
            case EntityDecoderState.EntityStart: {
                // Return 0 if we have no entity.
                return 0;
            }
        }
    }
}
/**
 * Creates a function that decodes entities in a string.
 *
 * @param decodeTree The decode tree.
 * @returns A function that decodes entities in a string.
 */
function getDecoder(decodeTree) {
    let ret = "";
    const decoder = new EntityDecoder(decodeTree, (str) => (ret += fromCodePoint(str)));
    return function decodeWithTrie(str, decodeMode) {
        let lastIndex = 0;
        let offset = 0;
        while ((offset = str.indexOf("&", offset)) >= 0) {
            ret += str.slice(lastIndex, offset);
            decoder.startEntity(decodeMode);
            const len = decoder.write(str, 
            // Skip the "&"
            offset + 1);
            if (len < 0) {
                lastIndex = offset + decoder.end();
                break;
            }
            lastIndex = offset + len;
            // If `len` is 0, skip the current `&` and continue.
            offset = len === 0 ? lastIndex + 1 : lastIndex;
        }
        const result = ret + str.slice(lastIndex);
        // Make sure we don't keep a reference to the final string.
        ret = "";
        return result;
    };
}
/**
 * Determines the branch of the current node that is taken given the current
 * character. This function is used to traverse the trie.
 *
 * @param decodeTree The trie.
 * @param current The current node.
 * @param nodeIdx The index right after the current node and its value.
 * @param char The current character.
 * @returns The index of the next node, or -1 if no branch is taken.
 */
function determineBranch(decodeTree, current, nodeIdx, char) {
    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
    // Case 1: Single branch encoded in jump offset
    if (branchCount === 0) {
        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
    }
    // Case 2: Multiple branches encoded in jump table
    if (jumpOffset) {
        const value = char - jumpOffset;
        return value < 0 || value >= branchCount
            ? -1
            : decodeTree[nodeIdx + value] - 1;
    }
    // Case 3: Multiple branches encoded in dictionary
    // Binary search for the character.
    let lo = nodeIdx;
    let hi = lo + branchCount - 1;
    while (lo <= hi) {
        const mid = (lo + hi) >>> 1;
        const midVal = decodeTree[mid];
        if (midVal < char) {
            lo = mid + 1;
        }
        else if (midVal > char) {
            hi = mid - 1;
        }
        else {
            return decodeTree[mid + branchCount];
        }
    }
    return -1;
}
const htmlDecoder = getDecoder(decode_data_html);
const xmlDecoder = getDecoder(decode_data_xml);
/**
 * Decodes an HTML string.
 *
 * @param str The string to decode.
 * @param mode The decoding mode.
 * @returns The decoded string.
 */
function decode_decodeHTML(str, mode = decode_DecodingMode.Legacy) {
    return htmlDecoder(str, mode);
}
/**
 * Decodes an HTML string in an attribute.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decodeHTMLAttribute(str) {
    return htmlDecoder(str, decode_DecodingMode.Attribute);
}
/**
 * Decodes an HTML string, requiring all entities to be terminated by a semicolon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decodeHTMLStrict(str) {
    return htmlDecoder(str, decode_DecodingMode.Strict);
}
/**
 * Decodes an XML string, requiring all entities to be terminated by a semicolon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decode_decodeXML(str) {
    return xmlDecoder(str, decode_DecodingMode.Strict);
}
//# sourceMappingURL=decode.js.map
;// ../../node_modules/entities/lib/esm/generated/encode-html.js
// Generated using scripts/write-encode-map.ts
function restoreDiff(arr) {
    for (let i = 1; i < arr.length; i++) {
        arr[i][0] += arr[i - 1][0] + 1;
    }
    return arr;
}
// prettier-ignore
/* harmony default export */ const encode_html = (new Map(/* #__PURE__ */ restoreDiff([[9, "&Tab;"], [0, "&NewLine;"], [22, "&excl;"], [0, "&quot;"], [0, "&num;"], [0, "&dollar;"], [0, "&percnt;"], [0, "&amp;"], [0, "&apos;"], [0, "&lpar;"], [0, "&rpar;"], [0, "&ast;"], [0, "&plus;"], [0, "&comma;"], [1, "&period;"], [0, "&sol;"], [10, "&colon;"], [0, "&semi;"], [0, { v: "&lt;", n: 8402, o: "&nvlt;" }], [0, { v: "&equals;", n: 8421, o: "&bne;" }], [0, { v: "&gt;", n: 8402, o: "&nvgt;" }], [0, "&quest;"], [0, "&commat;"], [26, "&lbrack;"], [0, "&bsol;"], [0, "&rbrack;"], [0, "&Hat;"], [0, "&lowbar;"], [0, "&DiacriticalGrave;"], [5, { n: 106, o: "&fjlig;" }], [20, "&lbrace;"], [0, "&verbar;"], [0, "&rbrace;"], [34, "&nbsp;"], [0, "&iexcl;"], [0, "&cent;"], [0, "&pound;"], [0, "&curren;"], [0, "&yen;"], [0, "&brvbar;"], [0, "&sect;"], [0, "&die;"], [0, "&copy;"], [0, "&ordf;"], [0, "&laquo;"], [0, "&not;"], [0, "&shy;"], [0, "&circledR;"], [0, "&macr;"], [0, "&deg;"], [0, "&PlusMinus;"], [0, "&sup2;"], [0, "&sup3;"], [0, "&acute;"], [0, "&micro;"], [0, "&para;"], [0, "&centerdot;"], [0, "&cedil;"], [0, "&sup1;"], [0, "&ordm;"], [0, "&raquo;"], [0, "&frac14;"], [0, "&frac12;"], [0, "&frac34;"], [0, "&iquest;"], [0, "&Agrave;"], [0, "&Aacute;"], [0, "&Acirc;"], [0, "&Atilde;"], [0, "&Auml;"], [0, "&angst;"], [0, "&AElig;"], [0, "&Ccedil;"], [0, "&Egrave;"], [0, "&Eacute;"], [0, "&Ecirc;"], [0, "&Euml;"], [0, "&Igrave;"], [0, "&Iacute;"], [0, "&Icirc;"], [0, "&Iuml;"], [0, "&ETH;"], [0, "&Ntilde;"], [0, "&Ograve;"], [0, "&Oacute;"], [0, "&Ocirc;"], [0, "&Otilde;"], [0, "&Ouml;"], [0, "&times;"], [0, "&Oslash;"], [0, "&Ugrave;"], [0, "&Uacute;"], [0, "&Ucirc;"], [0, "&Uuml;"], [0, "&Yacute;"], [0, "&THORN;"], [0, "&szlig;"], [0, "&agrave;"], [0, "&aacute;"], [0, "&acirc;"], [0, "&atilde;"], [0, "&auml;"], [0, "&aring;"], [0, "&aelig;"], [0, "&ccedil;"], [0, "&egrave;"], [0, "&eacute;"], [0, "&ecirc;"], [0, "&euml;"], [0, "&igrave;"], [0, "&iacute;"], [0, "&icirc;"], [0, "&iuml;"], [0, "&eth;"], [0, "&ntilde;"], [0, "&ograve;"], [0, "&oacute;"], [0, "&ocirc;"], [0, "&otilde;"], [0, "&ouml;"], [0, "&div;"], [0, "&oslash;"], [0, "&ugrave;"], [0, "&uacute;"], [0, "&ucirc;"], [0, "&uuml;"], [0, "&yacute;"], [0, "&thorn;"], [0, "&yuml;"], [0, "&Amacr;"], [0, "&amacr;"], [0, "&Abreve;"], [0, "&abreve;"], [0, "&Aogon;"], [0, "&aogon;"], [0, "&Cacute;"], [0, "&cacute;"], [0, "&Ccirc;"], [0, "&ccirc;"], [0, "&Cdot;"], [0, "&cdot;"], [0, "&Ccaron;"], [0, "&ccaron;"], [0, "&Dcaron;"], [0, "&dcaron;"], [0, "&Dstrok;"], [0, "&dstrok;"], [0, "&Emacr;"], [0, "&emacr;"], [2, "&Edot;"], [0, "&edot;"], [0, "&Eogon;"], [0, "&eogon;"], [0, "&Ecaron;"], [0, "&ecaron;"], [0, "&Gcirc;"], [0, "&gcirc;"], [0, "&Gbreve;"], [0, "&gbreve;"], [0, "&Gdot;"], [0, "&gdot;"], [0, "&Gcedil;"], [1, "&Hcirc;"], [0, "&hcirc;"], [0, "&Hstrok;"], [0, "&hstrok;"], [0, "&Itilde;"], [0, "&itilde;"], [0, "&Imacr;"], [0, "&imacr;"], [2, "&Iogon;"], [0, "&iogon;"], [0, "&Idot;"], [0, "&imath;"], [0, "&IJlig;"], [0, "&ijlig;"], [0, "&Jcirc;"], [0, "&jcirc;"], [0, "&Kcedil;"], [0, "&kcedil;"], [0, "&kgreen;"], [0, "&Lacute;"], [0, "&lacute;"], [0, "&Lcedil;"], [0, "&lcedil;"], [0, "&Lcaron;"], [0, "&lcaron;"], [0, "&Lmidot;"], [0, "&lmidot;"], [0, "&Lstrok;"], [0, "&lstrok;"], [0, "&Nacute;"], [0, "&nacute;"], [0, "&Ncedil;"], [0, "&ncedil;"], [0, "&Ncaron;"], [0, "&ncaron;"], [0, "&napos;"], [0, "&ENG;"], [0, "&eng;"], [0, "&Omacr;"], [0, "&omacr;"], [2, "&Odblac;"], [0, "&odblac;"], [0, "&OElig;"], [0, "&oelig;"], [0, "&Racute;"], [0, "&racute;"], [0, "&Rcedil;"], [0, "&rcedil;"], [0, "&Rcaron;"], [0, "&rcaron;"], [0, "&Sacute;"], [0, "&sacute;"], [0, "&Scirc;"], [0, "&scirc;"], [0, "&Scedil;"], [0, "&scedil;"], [0, "&Scaron;"], [0, "&scaron;"], [0, "&Tcedil;"], [0, "&tcedil;"], [0, "&Tcaron;"], [0, "&tcaron;"], [0, "&Tstrok;"], [0, "&tstrok;"], [0, "&Utilde;"], [0, "&utilde;"], [0, "&Umacr;"], [0, "&umacr;"], [0, "&Ubreve;"], [0, "&ubreve;"], [0, "&Uring;"], [0, "&uring;"], [0, "&Udblac;"], [0, "&udblac;"], [0, "&Uogon;"], [0, "&uogon;"], [0, "&Wcirc;"], [0, "&wcirc;"], [0, "&Ycirc;"], [0, "&ycirc;"], [0, "&Yuml;"], [0, "&Zacute;"], [0, "&zacute;"], [0, "&Zdot;"], [0, "&zdot;"], [0, "&Zcaron;"], [0, "&zcaron;"], [19, "&fnof;"], [34, "&imped;"], [63, "&gacute;"], [65, "&jmath;"], [142, "&circ;"], [0, "&caron;"], [16, "&breve;"], [0, "&DiacriticalDot;"], [0, "&ring;"], [0, "&ogon;"], [0, "&DiacriticalTilde;"], [0, "&dblac;"], [51, "&DownBreve;"], [127, "&Alpha;"], [0, "&Beta;"], [0, "&Gamma;"], [0, "&Delta;"], [0, "&Epsilon;"], [0, "&Zeta;"], [0, "&Eta;"], [0, "&Theta;"], [0, "&Iota;"], [0, "&Kappa;"], [0, "&Lambda;"], [0, "&Mu;"], [0, "&Nu;"], [0, "&Xi;"], [0, "&Omicron;"], [0, "&Pi;"], [0, "&Rho;"], [1, "&Sigma;"], [0, "&Tau;"], [0, "&Upsilon;"], [0, "&Phi;"], [0, "&Chi;"], [0, "&Psi;"], [0, "&ohm;"], [7, "&alpha;"], [0, "&beta;"], [0, "&gamma;"], [0, "&delta;"], [0, "&epsi;"], [0, "&zeta;"], [0, "&eta;"], [0, "&theta;"], [0, "&iota;"], [0, "&kappa;"], [0, "&lambda;"], [0, "&mu;"], [0, "&nu;"], [0, "&xi;"], [0, "&omicron;"], [0, "&pi;"], [0, "&rho;"], [0, "&sigmaf;"], [0, "&sigma;"], [0, "&tau;"], [0, "&upsi;"], [0, "&phi;"], [0, "&chi;"], [0, "&psi;"], [0, "&omega;"], [7, "&thetasym;"], [0, "&Upsi;"], [2, "&phiv;"], [0, "&piv;"], [5, "&Gammad;"], [0, "&digamma;"], [18, "&kappav;"], [0, "&rhov;"], [3, "&epsiv;"], [0, "&backepsilon;"], [10, "&IOcy;"], [0, "&DJcy;"], [0, "&GJcy;"], [0, "&Jukcy;"], [0, "&DScy;"], [0, "&Iukcy;"], [0, "&YIcy;"], [0, "&Jsercy;"], [0, "&LJcy;"], [0, "&NJcy;"], [0, "&TSHcy;"], [0, "&KJcy;"], [1, "&Ubrcy;"], [0, "&DZcy;"], [0, "&Acy;"], [0, "&Bcy;"], [0, "&Vcy;"], [0, "&Gcy;"], [0, "&Dcy;"], [0, "&IEcy;"], [0, "&ZHcy;"], [0, "&Zcy;"], [0, "&Icy;"], [0, "&Jcy;"], [0, "&Kcy;"], [0, "&Lcy;"], [0, "&Mcy;"], [0, "&Ncy;"], [0, "&Ocy;"], [0, "&Pcy;"], [0, "&Rcy;"], [0, "&Scy;"], [0, "&Tcy;"], [0, "&Ucy;"], [0, "&Fcy;"], [0, "&KHcy;"], [0, "&TScy;"], [0, "&CHcy;"], [0, "&SHcy;"], [0, "&SHCHcy;"], [0, "&HARDcy;"], [0, "&Ycy;"], [0, "&SOFTcy;"], [0, "&Ecy;"], [0, "&YUcy;"], [0, "&YAcy;"], [0, "&acy;"], [0, "&bcy;"], [0, "&vcy;"], [0, "&gcy;"], [0, "&dcy;"], [0, "&iecy;"], [0, "&zhcy;"], [0, "&zcy;"], [0, "&icy;"], [0, "&jcy;"], [0, "&kcy;"], [0, "&lcy;"], [0, "&mcy;"], [0, "&ncy;"], [0, "&ocy;"], [0, "&pcy;"], [0, "&rcy;"], [0, "&scy;"], [0, "&tcy;"], [0, "&ucy;"], [0, "&fcy;"], [0, "&khcy;"], [0, "&tscy;"], [0, "&chcy;"], [0, "&shcy;"], [0, "&shchcy;"], [0, "&hardcy;"], [0, "&ycy;"], [0, "&softcy;"], [0, "&ecy;"], [0, "&yucy;"], [0, "&yacy;"], [1, "&iocy;"], [0, "&djcy;"], [0, "&gjcy;"], [0, "&jukcy;"], [0, "&dscy;"], [0, "&iukcy;"], [0, "&yicy;"], [0, "&jsercy;"], [0, "&ljcy;"], [0, "&njcy;"], [0, "&tshcy;"], [0, "&kjcy;"], [1, "&ubrcy;"], [0, "&dzcy;"], [7074, "&ensp;"], [0, "&emsp;"], [0, "&emsp13;"], [0, "&emsp14;"], [1, "&numsp;"], [0, "&puncsp;"], [0, "&ThinSpace;"], [0, "&hairsp;"], [0, "&NegativeMediumSpace;"], [0, "&zwnj;"], [0, "&zwj;"], [0, "&lrm;"], [0, "&rlm;"], [0, "&dash;"], [2, "&ndash;"], [0, "&mdash;"], [0, "&horbar;"], [0, "&Verbar;"], [1, "&lsquo;"], [0, "&CloseCurlyQuote;"], [0, "&lsquor;"], [1, "&ldquo;"], [0, "&CloseCurlyDoubleQuote;"], [0, "&bdquo;"], [1, "&dagger;"], [0, "&Dagger;"], [0, "&bull;"], [2, "&nldr;"], [0, "&hellip;"], [9, "&permil;"], [0, "&pertenk;"], [0, "&prime;"], [0, "&Prime;"], [0, "&tprime;"], [0, "&backprime;"], [3, "&lsaquo;"], [0, "&rsaquo;"], [3, "&oline;"], [2, "&caret;"], [1, "&hybull;"], [0, "&frasl;"], [10, "&bsemi;"], [7, "&qprime;"], [7, { v: "&MediumSpace;", n: 8202, o: "&ThickSpace;" }], [0, "&NoBreak;"], [0, "&af;"], [0, "&InvisibleTimes;"], [0, "&ic;"], [72, "&euro;"], [46, "&tdot;"], [0, "&DotDot;"], [37, "&complexes;"], [2, "&incare;"], [4, "&gscr;"], [0, "&hamilt;"], [0, "&Hfr;"], [0, "&Hopf;"], [0, "&planckh;"], [0, "&hbar;"], [0, "&imagline;"], [0, "&Ifr;"], [0, "&lagran;"], [0, "&ell;"], [1, "&naturals;"], [0, "&numero;"], [0, "&copysr;"], [0, "&weierp;"], [0, "&Popf;"], [0, "&Qopf;"], [0, "&realine;"], [0, "&real;"], [0, "&reals;"], [0, "&rx;"], [3, "&trade;"], [1, "&integers;"], [2, "&mho;"], [0, "&zeetrf;"], [0, "&iiota;"], [2, "&bernou;"], [0, "&Cayleys;"], [1, "&escr;"], [0, "&Escr;"], [0, "&Fouriertrf;"], [1, "&Mellintrf;"], [0, "&order;"], [0, "&alefsym;"], [0, "&beth;"], [0, "&gimel;"], [0, "&daleth;"], [12, "&CapitalDifferentialD;"], [0, "&dd;"], [0, "&ee;"], [0, "&ii;"], [10, "&frac13;"], [0, "&frac23;"], [0, "&frac15;"], [0, "&frac25;"], [0, "&frac35;"], [0, "&frac45;"], [0, "&frac16;"], [0, "&frac56;"], [0, "&frac18;"], [0, "&frac38;"], [0, "&frac58;"], [0, "&frac78;"], [49, "&larr;"], [0, "&ShortUpArrow;"], [0, "&rarr;"], [0, "&darr;"], [0, "&harr;"], [0, "&updownarrow;"], [0, "&nwarr;"], [0, "&nearr;"], [0, "&LowerRightArrow;"], [0, "&LowerLeftArrow;"], [0, "&nlarr;"], [0, "&nrarr;"], [1, { v: "&rarrw;", n: 824, o: "&nrarrw;" }], [0, "&Larr;"], [0, "&Uarr;"], [0, "&Rarr;"], [0, "&Darr;"], [0, "&larrtl;"], [0, "&rarrtl;"], [0, "&LeftTeeArrow;"], [0, "&mapstoup;"], [0, "&map;"], [0, "&DownTeeArrow;"], [1, "&hookleftarrow;"], [0, "&hookrightarrow;"], [0, "&larrlp;"], [0, "&looparrowright;"], [0, "&harrw;"], [0, "&nharr;"], [1, "&lsh;"], [0, "&rsh;"], [0, "&ldsh;"], [0, "&rdsh;"], [1, "&crarr;"], [0, "&cularr;"], [0, "&curarr;"], [2, "&circlearrowleft;"], [0, "&circlearrowright;"], [0, "&leftharpoonup;"], [0, "&DownLeftVector;"], [0, "&RightUpVector;"], [0, "&LeftUpVector;"], [0, "&rharu;"], [0, "&DownRightVector;"], [0, "&dharr;"], [0, "&dharl;"], [0, "&RightArrowLeftArrow;"], [0, "&udarr;"], [0, "&LeftArrowRightArrow;"], [0, "&leftleftarrows;"], [0, "&upuparrows;"], [0, "&rightrightarrows;"], [0, "&ddarr;"], [0, "&leftrightharpoons;"], [0, "&Equilibrium;"], [0, "&nlArr;"], [0, "&nhArr;"], [0, "&nrArr;"], [0, "&DoubleLeftArrow;"], [0, "&DoubleUpArrow;"], [0, "&DoubleRightArrow;"], [0, "&dArr;"], [0, "&DoubleLeftRightArrow;"], [0, "&DoubleUpDownArrow;"], [0, "&nwArr;"], [0, "&neArr;"], [0, "&seArr;"], [0, "&swArr;"], [0, "&lAarr;"], [0, "&rAarr;"], [1, "&zigrarr;"], [6, "&larrb;"], [0, "&rarrb;"], [15, "&DownArrowUpArrow;"], [7, "&loarr;"], [0, "&roarr;"], [0, "&hoarr;"], [0, "&forall;"], [0, "&comp;"], [0, { v: "&part;", n: 824, o: "&npart;" }], [0, "&exist;"], [0, "&nexist;"], [0, "&empty;"], [1, "&Del;"], [0, "&Element;"], [0, "&NotElement;"], [1, "&ni;"], [0, "&notni;"], [2, "&prod;"], [0, "&coprod;"], [0, "&sum;"], [0, "&minus;"], [0, "&MinusPlus;"], [0, "&dotplus;"], [1, "&Backslash;"], [0, "&lowast;"], [0, "&compfn;"], [1, "&radic;"], [2, "&prop;"], [0, "&infin;"], [0, "&angrt;"], [0, { v: "&ang;", n: 8402, o: "&nang;" }], [0, "&angmsd;"], [0, "&angsph;"], [0, "&mid;"], [0, "&nmid;"], [0, "&DoubleVerticalBar;"], [0, "&NotDoubleVerticalBar;"], [0, "&and;"], [0, "&or;"], [0, { v: "&cap;", n: 65024, o: "&caps;" }], [0, { v: "&cup;", n: 65024, o: "&cups;" }], [0, "&int;"], [0, "&Int;"], [0, "&iiint;"], [0, "&conint;"], [0, "&Conint;"], [0, "&Cconint;"], [0, "&cwint;"], [0, "&ClockwiseContourIntegral;"], [0, "&awconint;"], [0, "&there4;"], [0, "&becaus;"], [0, "&ratio;"], [0, "&Colon;"], [0, "&dotminus;"], [1, "&mDDot;"], [0, "&homtht;"], [0, { v: "&sim;", n: 8402, o: "&nvsim;" }], [0, { v: "&backsim;", n: 817, o: "&race;" }], [0, { v: "&ac;", n: 819, o: "&acE;" }], [0, "&acd;"], [0, "&VerticalTilde;"], [0, "&NotTilde;"], [0, { v: "&eqsim;", n: 824, o: "&nesim;" }], [0, "&sime;"], [0, "&NotTildeEqual;"], [0, "&cong;"], [0, "&simne;"], [0, "&ncong;"], [0, "&ap;"], [0, "&nap;"], [0, "&ape;"], [0, { v: "&apid;", n: 824, o: "&napid;" }], [0, "&backcong;"], [0, { v: "&asympeq;", n: 8402, o: "&nvap;" }], [0, { v: "&bump;", n: 824, o: "&nbump;" }], [0, { v: "&bumpe;", n: 824, o: "&nbumpe;" }], [0, { v: "&doteq;", n: 824, o: "&nedot;" }], [0, "&doteqdot;"], [0, "&efDot;"], [0, "&erDot;"], [0, "&Assign;"], [0, "&ecolon;"], [0, "&ecir;"], [0, "&circeq;"], [1, "&wedgeq;"], [0, "&veeeq;"], [1, "&triangleq;"], [2, "&equest;"], [0, "&ne;"], [0, { v: "&Congruent;", n: 8421, o: "&bnequiv;" }], [0, "&nequiv;"], [1, { v: "&le;", n: 8402, o: "&nvle;" }], [0, { v: "&ge;", n: 8402, o: "&nvge;" }], [0, { v: "&lE;", n: 824, o: "&nlE;" }], [0, { v: "&gE;", n: 824, o: "&ngE;" }], [0, { v: "&lnE;", n: 65024, o: "&lvertneqq;" }], [0, { v: "&gnE;", n: 65024, o: "&gvertneqq;" }], [0, { v: "&ll;", n: new Map(/* #__PURE__ */ restoreDiff([[824, "&nLtv;"], [7577, "&nLt;"]])) }], [0, { v: "&gg;", n: new Map(/* #__PURE__ */ restoreDiff([[824, "&nGtv;"], [7577, "&nGt;"]])) }], [0, "&between;"], [0, "&NotCupCap;"], [0, "&nless;"], [0, "&ngt;"], [0, "&nle;"], [0, "&nge;"], [0, "&lesssim;"], [0, "&GreaterTilde;"], [0, "&nlsim;"], [0, "&ngsim;"], [0, "&LessGreater;"], [0, "&gl;"], [0, "&NotLessGreater;"], [0, "&NotGreaterLess;"], [0, "&pr;"], [0, "&sc;"], [0, "&prcue;"], [0, "&sccue;"], [0, "&PrecedesTilde;"], [0, { v: "&scsim;", n: 824, o: "&NotSucceedsTilde;" }], [0, "&NotPrecedes;"], [0, "&NotSucceeds;"], [0, { v: "&sub;", n: 8402, o: "&NotSubset;" }], [0, { v: "&sup;", n: 8402, o: "&NotSuperset;" }], [0, "&nsub;"], [0, "&nsup;"], [0, "&sube;"], [0, "&supe;"], [0, "&NotSubsetEqual;"], [0, "&NotSupersetEqual;"], [0, { v: "&subne;", n: 65024, o: "&varsubsetneq;" }], [0, { v: "&supne;", n: 65024, o: "&varsupsetneq;" }], [1, "&cupdot;"], [0, "&UnionPlus;"], [0, { v: "&sqsub;", n: 824, o: "&NotSquareSubset;" }], [0, { v: "&sqsup;", n: 824, o: "&NotSquareSuperset;" }], [0, "&sqsube;"], [0, "&sqsupe;"], [0, { v: "&sqcap;", n: 65024, o: "&sqcaps;" }], [0, { v: "&sqcup;", n: 65024, o: "&sqcups;" }], [0, "&CirclePlus;"], [0, "&CircleMinus;"], [0, "&CircleTimes;"], [0, "&osol;"], [0, "&CircleDot;"], [0, "&circledcirc;"], [0, "&circledast;"], [1, "&circleddash;"], [0, "&boxplus;"], [0, "&boxminus;"], [0, "&boxtimes;"], [0, "&dotsquare;"], [0, "&RightTee;"], [0, "&dashv;"], [0, "&DownTee;"], [0, "&bot;"], [1, "&models;"], [0, "&DoubleRightTee;"], [0, "&Vdash;"], [0, "&Vvdash;"], [0, "&VDash;"], [0, "&nvdash;"], [0, "&nvDash;"], [0, "&nVdash;"], [0, "&nVDash;"], [0, "&prurel;"], [1, "&LeftTriangle;"], [0, "&RightTriangle;"], [0, { v: "&LeftTriangleEqual;", n: 8402, o: "&nvltrie;" }], [0, { v: "&RightTriangleEqual;", n: 8402, o: "&nvrtrie;" }], [0, "&origof;"], [0, "&imof;"], [0, "&multimap;"], [0, "&hercon;"], [0, "&intcal;"], [0, "&veebar;"], [1, "&barvee;"], [0, "&angrtvb;"], [0, "&lrtri;"], [0, "&bigwedge;"], [0, "&bigvee;"], [0, "&bigcap;"], [0, "&bigcup;"], [0, "&diam;"], [0, "&sdot;"], [0, "&sstarf;"], [0, "&divideontimes;"], [0, "&bowtie;"], [0, "&ltimes;"], [0, "&rtimes;"], [0, "&leftthreetimes;"], [0, "&rightthreetimes;"], [0, "&backsimeq;"], [0, "&curlyvee;"], [0, "&curlywedge;"], [0, "&Sub;"], [0, "&Sup;"], [0, "&Cap;"], [0, "&Cup;"], [0, "&fork;"], [0, "&epar;"], [0, "&lessdot;"], [0, "&gtdot;"], [0, { v: "&Ll;", n: 824, o: "&nLl;" }], [0, { v: "&Gg;", n: 824, o: "&nGg;" }], [0, { v: "&leg;", n: 65024, o: "&lesg;" }], [0, { v: "&gel;", n: 65024, o: "&gesl;" }], [2, "&cuepr;"], [0, "&cuesc;"], [0, "&NotPrecedesSlantEqual;"], [0, "&NotSucceedsSlantEqual;"], [0, "&NotSquareSubsetEqual;"], [0, "&NotSquareSupersetEqual;"], [2, "&lnsim;"], [0, "&gnsim;"], [0, "&precnsim;"], [0, "&scnsim;"], [0, "&nltri;"], [0, "&NotRightTriangle;"], [0, "&nltrie;"], [0, "&NotRightTriangleEqual;"], [0, "&vellip;"], [0, "&ctdot;"], [0, "&utdot;"], [0, "&dtdot;"], [0, "&disin;"], [0, "&isinsv;"], [0, "&isins;"], [0, { v: "&isindot;", n: 824, o: "&notindot;" }], [0, "&notinvc;"], [0, "&notinvb;"], [1, { v: "&isinE;", n: 824, o: "&notinE;" }], [0, "&nisd;"], [0, "&xnis;"], [0, "&nis;"], [0, "&notnivc;"], [0, "&notnivb;"], [6, "&barwed;"], [0, "&Barwed;"], [1, "&lceil;"], [0, "&rceil;"], [0, "&LeftFloor;"], [0, "&rfloor;"], [0, "&drcrop;"], [0, "&dlcrop;"], [0, "&urcrop;"], [0, "&ulcrop;"], [0, "&bnot;"], [1, "&profline;"], [0, "&profsurf;"], [1, "&telrec;"], [0, "&target;"], [5, "&ulcorn;"], [0, "&urcorn;"], [0, "&dlcorn;"], [0, "&drcorn;"], [2, "&frown;"], [0, "&smile;"], [9, "&cylcty;"], [0, "&profalar;"], [7, "&topbot;"], [6, "&ovbar;"], [1, "&solbar;"], [60, "&angzarr;"], [51, "&lmoustache;"], [0, "&rmoustache;"], [2, "&OverBracket;"], [0, "&bbrk;"], [0, "&bbrktbrk;"], [37, "&OverParenthesis;"], [0, "&UnderParenthesis;"], [0, "&OverBrace;"], [0, "&UnderBrace;"], [2, "&trpezium;"], [4, "&elinters;"], [59, "&blank;"], [164, "&circledS;"], [55, "&boxh;"], [1, "&boxv;"], [9, "&boxdr;"], [3, "&boxdl;"], [3, "&boxur;"], [3, "&boxul;"], [3, "&boxvr;"], [7, "&boxvl;"], [7, "&boxhd;"], [7, "&boxhu;"], [7, "&boxvh;"], [19, "&boxH;"], [0, "&boxV;"], [0, "&boxdR;"], [0, "&boxDr;"], [0, "&boxDR;"], [0, "&boxdL;"], [0, "&boxDl;"], [0, "&boxDL;"], [0, "&boxuR;"], [0, "&boxUr;"], [0, "&boxUR;"], [0, "&boxuL;"], [0, "&boxUl;"], [0, "&boxUL;"], [0, "&boxvR;"], [0, "&boxVr;"], [0, "&boxVR;"], [0, "&boxvL;"], [0, "&boxVl;"], [0, "&boxVL;"], [0, "&boxHd;"], [0, "&boxhD;"], [0, "&boxHD;"], [0, "&boxHu;"], [0, "&boxhU;"], [0, "&boxHU;"], [0, "&boxvH;"], [0, "&boxVh;"], [0, "&boxVH;"], [19, "&uhblk;"], [3, "&lhblk;"], [3, "&block;"], [8, "&blk14;"], [0, "&blk12;"], [0, "&blk34;"], [13, "&square;"], [8, "&blacksquare;"], [0, "&EmptyVerySmallSquare;"], [1, "&rect;"], [0, "&marker;"], [2, "&fltns;"], [1, "&bigtriangleup;"], [0, "&blacktriangle;"], [0, "&triangle;"], [2, "&blacktriangleright;"], [0, "&rtri;"], [3, "&bigtriangledown;"], [0, "&blacktriangledown;"], [0, "&dtri;"], [2, "&blacktriangleleft;"], [0, "&ltri;"], [6, "&loz;"], [0, "&cir;"], [32, "&tridot;"], [2, "&bigcirc;"], [8, "&ultri;"], [0, "&urtri;"], [0, "&lltri;"], [0, "&EmptySmallSquare;"], [0, "&FilledSmallSquare;"], [8, "&bigstar;"], [0, "&star;"], [7, "&phone;"], [49, "&female;"], [1, "&male;"], [29, "&spades;"], [2, "&clubs;"], [1, "&hearts;"], [0, "&diamondsuit;"], [3, "&sung;"], [2, "&flat;"], [0, "&natural;"], [0, "&sharp;"], [163, "&check;"], [3, "&cross;"], [8, "&malt;"], [21, "&sext;"], [33, "&VerticalSeparator;"], [25, "&lbbrk;"], [0, "&rbbrk;"], [84, "&bsolhsub;"], [0, "&suphsol;"], [28, "&LeftDoubleBracket;"], [0, "&RightDoubleBracket;"], [0, "&lang;"], [0, "&rang;"], [0, "&Lang;"], [0, "&Rang;"], [0, "&loang;"], [0, "&roang;"], [7, "&longleftarrow;"], [0, "&longrightarrow;"], [0, "&longleftrightarrow;"], [0, "&DoubleLongLeftArrow;"], [0, "&DoubleLongRightArrow;"], [0, "&DoubleLongLeftRightArrow;"], [1, "&longmapsto;"], [2, "&dzigrarr;"], [258, "&nvlArr;"], [0, "&nvrArr;"], [0, "&nvHarr;"], [0, "&Map;"], [6, "&lbarr;"], [0, "&bkarow;"], [0, "&lBarr;"], [0, "&dbkarow;"], [0, "&drbkarow;"], [0, "&DDotrahd;"], [0, "&UpArrowBar;"], [0, "&DownArrowBar;"], [2, "&Rarrtl;"], [2, "&latail;"], [0, "&ratail;"], [0, "&lAtail;"], [0, "&rAtail;"], [0, "&larrfs;"], [0, "&rarrfs;"], [0, "&larrbfs;"], [0, "&rarrbfs;"], [2, "&nwarhk;"], [0, "&nearhk;"], [0, "&hksearow;"], [0, "&hkswarow;"], [0, "&nwnear;"], [0, "&nesear;"], [0, "&seswar;"], [0, "&swnwar;"], [8, { v: "&rarrc;", n: 824, o: "&nrarrc;" }], [1, "&cudarrr;"], [0, "&ldca;"], [0, "&rdca;"], [0, "&cudarrl;"], [0, "&larrpl;"], [2, "&curarrm;"], [0, "&cularrp;"], [7, "&rarrpl;"], [2, "&harrcir;"], [0, "&Uarrocir;"], [0, "&lurdshar;"], [0, "&ldrushar;"], [2, "&LeftRightVector;"], [0, "&RightUpDownVector;"], [0, "&DownLeftRightVector;"], [0, "&LeftUpDownVector;"], [0, "&LeftVectorBar;"], [0, "&RightVectorBar;"], [0, "&RightUpVectorBar;"], [0, "&RightDownVectorBar;"], [0, "&DownLeftVectorBar;"], [0, "&DownRightVectorBar;"], [0, "&LeftUpVectorBar;"], [0, "&LeftDownVectorBar;"], [0, "&LeftTeeVector;"], [0, "&RightTeeVector;"], [0, "&RightUpTeeVector;"], [0, "&RightDownTeeVector;"], [0, "&DownLeftTeeVector;"], [0, "&DownRightTeeVector;"], [0, "&LeftUpTeeVector;"], [0, "&LeftDownTeeVector;"], [0, "&lHar;"], [0, "&uHar;"], [0, "&rHar;"], [0, "&dHar;"], [0, "&luruhar;"], [0, "&ldrdhar;"], [0, "&ruluhar;"], [0, "&rdldhar;"], [0, "&lharul;"], [0, "&llhard;"], [0, "&rharul;"], [0, "&lrhard;"], [0, "&udhar;"], [0, "&duhar;"], [0, "&RoundImplies;"], [0, "&erarr;"], [0, "&simrarr;"], [0, "&larrsim;"], [0, "&rarrsim;"], [0, "&rarrap;"], [0, "&ltlarr;"], [1, "&gtrarr;"], [0, "&subrarr;"], [1, "&suplarr;"], [0, "&lfisht;"], [0, "&rfisht;"], [0, "&ufisht;"], [0, "&dfisht;"], [5, "&lopar;"], [0, "&ropar;"], [4, "&lbrke;"], [0, "&rbrke;"], [0, "&lbrkslu;"], [0, "&rbrksld;"], [0, "&lbrksld;"], [0, "&rbrkslu;"], [0, "&langd;"], [0, "&rangd;"], [0, "&lparlt;"], [0, "&rpargt;"], [0, "&gtlPar;"], [0, "&ltrPar;"], [3, "&vzigzag;"], [1, "&vangrt;"], [0, "&angrtvbd;"], [6, "&ange;"], [0, "&range;"], [0, "&dwangle;"], [0, "&uwangle;"], [0, "&angmsdaa;"], [0, "&angmsdab;"], [0, "&angmsdac;"], [0, "&angmsdad;"], [0, "&angmsdae;"], [0, "&angmsdaf;"], [0, "&angmsdag;"], [0, "&angmsdah;"], [0, "&bemptyv;"], [0, "&demptyv;"], [0, "&cemptyv;"], [0, "&raemptyv;"], [0, "&laemptyv;"], [0, "&ohbar;"], [0, "&omid;"], [0, "&opar;"], [1, "&operp;"], [1, "&olcross;"], [0, "&odsold;"], [1, "&olcir;"], [0, "&ofcir;"], [0, "&olt;"], [0, "&ogt;"], [0, "&cirscir;"], [0, "&cirE;"], [0, "&solb;"], [0, "&bsolb;"], [3, "&boxbox;"], [3, "&trisb;"], [0, "&rtriltri;"], [0, { v: "&LeftTriangleBar;", n: 824, o: "&NotLeftTriangleBar;" }], [0, { v: "&RightTriangleBar;", n: 824, o: "&NotRightTriangleBar;" }], [11, "&iinfin;"], [0, "&infintie;"], [0, "&nvinfin;"], [4, "&eparsl;"], [0, "&smeparsl;"], [0, "&eqvparsl;"], [5, "&blacklozenge;"], [8, "&RuleDelayed;"], [1, "&dsol;"], [9, "&bigodot;"], [0, "&bigoplus;"], [0, "&bigotimes;"], [1, "&biguplus;"], [1, "&bigsqcup;"], [5, "&iiiint;"], [0, "&fpartint;"], [2, "&cirfnint;"], [0, "&awint;"], [0, "&rppolint;"], [0, "&scpolint;"], [0, "&npolint;"], [0, "&pointint;"], [0, "&quatint;"], [0, "&intlarhk;"], [10, "&pluscir;"], [0, "&plusacir;"], [0, "&simplus;"], [0, "&plusdu;"], [0, "&plussim;"], [0, "&plustwo;"], [1, "&mcomma;"], [0, "&minusdu;"], [2, "&loplus;"], [0, "&roplus;"], [0, "&Cross;"], [0, "&timesd;"], [0, "&timesbar;"], [1, "&smashp;"], [0, "&lotimes;"], [0, "&rotimes;"], [0, "&otimesas;"], [0, "&Otimes;"], [0, "&odiv;"], [0, "&triplus;"], [0, "&triminus;"], [0, "&tritime;"], [0, "&intprod;"], [2, "&amalg;"], [0, "&capdot;"], [1, "&ncup;"], [0, "&ncap;"], [0, "&capand;"], [0, "&cupor;"], [0, "&cupcap;"], [0, "&capcup;"], [0, "&cupbrcap;"], [0, "&capbrcup;"], [0, "&cupcup;"], [0, "&capcap;"], [0, "&ccups;"], [0, "&ccaps;"], [2, "&ccupssm;"], [2, "&And;"], [0, "&Or;"], [0, "&andand;"], [0, "&oror;"], [0, "&orslope;"], [0, "&andslope;"], [1, "&andv;"], [0, "&orv;"], [0, "&andd;"], [0, "&ord;"], [1, "&wedbar;"], [6, "&sdote;"], [3, "&simdot;"], [2, { v: "&congdot;", n: 824, o: "&ncongdot;" }], [0, "&easter;"], [0, "&apacir;"], [0, { v: "&apE;", n: 824, o: "&napE;" }], [0, "&eplus;"], [0, "&pluse;"], [0, "&Esim;"], [0, "&Colone;"], [0, "&Equal;"], [1, "&ddotseq;"], [0, "&equivDD;"], [0, "&ltcir;"], [0, "&gtcir;"], [0, "&ltquest;"], [0, "&gtquest;"], [0, { v: "&leqslant;", n: 824, o: "&nleqslant;" }], [0, { v: "&geqslant;", n: 824, o: "&ngeqslant;" }], [0, "&lesdot;"], [0, "&gesdot;"], [0, "&lesdoto;"], [0, "&gesdoto;"], [0, "&lesdotor;"], [0, "&gesdotol;"], [0, "&lap;"], [0, "&gap;"], [0, "&lne;"], [0, "&gne;"], [0, "&lnap;"], [0, "&gnap;"], [0, "&lEg;"], [0, "&gEl;"], [0, "&lsime;"], [0, "&gsime;"], [0, "&lsimg;"], [0, "&gsiml;"], [0, "&lgE;"], [0, "&glE;"], [0, "&lesges;"], [0, "&gesles;"], [0, "&els;"], [0, "&egs;"], [0, "&elsdot;"], [0, "&egsdot;"], [0, "&el;"], [0, "&eg;"], [2, "&siml;"], [0, "&simg;"], [0, "&simlE;"], [0, "&simgE;"], [0, { v: "&LessLess;", n: 824, o: "&NotNestedLessLess;" }], [0, { v: "&GreaterGreater;", n: 824, o: "&NotNestedGreaterGreater;" }], [1, "&glj;"], [0, "&gla;"], [0, "&ltcc;"], [0, "&gtcc;"], [0, "&lescc;"], [0, "&gescc;"], [0, "&smt;"], [0, "&lat;"], [0, { v: "&smte;", n: 65024, o: "&smtes;" }], [0, { v: "&late;", n: 65024, o: "&lates;" }], [0, "&bumpE;"], [0, { v: "&PrecedesEqual;", n: 824, o: "&NotPrecedesEqual;" }], [0, { v: "&sce;", n: 824, o: "&NotSucceedsEqual;" }], [2, "&prE;"], [0, "&scE;"], [0, "&precneqq;"], [0, "&scnE;"], [0, "&prap;"], [0, "&scap;"], [0, "&precnapprox;"], [0, "&scnap;"], [0, "&Pr;"], [0, "&Sc;"], [0, "&subdot;"], [0, "&supdot;"], [0, "&subplus;"], [0, "&supplus;"], [0, "&submult;"], [0, "&supmult;"], [0, "&subedot;"], [0, "&supedot;"], [0, { v: "&subE;", n: 824, o: "&nsubE;" }], [0, { v: "&supE;", n: 824, o: "&nsupE;" }], [0, "&subsim;"], [0, "&supsim;"], [2, { v: "&subnE;", n: 65024, o: "&varsubsetneqq;" }], [0, { v: "&supnE;", n: 65024, o: "&varsupsetneqq;" }], [2, "&csub;"], [0, "&csup;"], [0, "&csube;"], [0, "&csupe;"], [0, "&subsup;"], [0, "&supsub;"], [0, "&subsub;"], [0, "&supsup;"], [0, "&suphsub;"], [0, "&supdsub;"], [0, "&forkv;"], [0, "&topfork;"], [0, "&mlcp;"], [8, "&Dashv;"], [1, "&Vdashl;"], [0, "&Barv;"], [0, "&vBar;"], [0, "&vBarv;"], [1, "&Vbar;"], [0, "&Not;"], [0, "&bNot;"], [0, "&rnmid;"], [0, "&cirmid;"], [0, "&midcir;"], [0, "&topcir;"], [0, "&nhpar;"], [0, "&parsim;"], [9, { v: "&parsl;", n: 8421, o: "&nparsl;" }], [44343, { n: new Map(/* #__PURE__ */ restoreDiff([[56476, "&Ascr;"], [1, "&Cscr;"], [0, "&Dscr;"], [2, "&Gscr;"], [2, "&Jscr;"], [0, "&Kscr;"], [2, "&Nscr;"], [0, "&Oscr;"], [0, "&Pscr;"], [0, "&Qscr;"], [1, "&Sscr;"], [0, "&Tscr;"], [0, "&Uscr;"], [0, "&Vscr;"], [0, "&Wscr;"], [0, "&Xscr;"], [0, "&Yscr;"], [0, "&Zscr;"], [0, "&ascr;"], [0, "&bscr;"], [0, "&cscr;"], [0, "&dscr;"], [1, "&fscr;"], [1, "&hscr;"], [0, "&iscr;"], [0, "&jscr;"], [0, "&kscr;"], [0, "&lscr;"], [0, "&mscr;"], [0, "&nscr;"], [1, "&pscr;"], [0, "&qscr;"], [0, "&rscr;"], [0, "&sscr;"], [0, "&tscr;"], [0, "&uscr;"], [0, "&vscr;"], [0, "&wscr;"], [0, "&xscr;"], [0, "&yscr;"], [0, "&zscr;"], [52, "&Afr;"], [0, "&Bfr;"], [1, "&Dfr;"], [0, "&Efr;"], [0, "&Ffr;"], [0, "&Gfr;"], [2, "&Jfr;"], [0, "&Kfr;"], [0, "&Lfr;"], [0, "&Mfr;"], [0, "&Nfr;"], [0, "&Ofr;"], [0, "&Pfr;"], [0, "&Qfr;"], [1, "&Sfr;"], [0, "&Tfr;"], [0, "&Ufr;"], [0, "&Vfr;"], [0, "&Wfr;"], [0, "&Xfr;"], [0, "&Yfr;"], [1, "&afr;"], [0, "&bfr;"], [0, "&cfr;"], [0, "&dfr;"], [0, "&efr;"], [0, "&ffr;"], [0, "&gfr;"], [0, "&hfr;"], [0, "&ifr;"], [0, "&jfr;"], [0, "&kfr;"], [0, "&lfr;"], [0, "&mfr;"], [0, "&nfr;"], [0, "&ofr;"], [0, "&pfr;"], [0, "&qfr;"], [0, "&rfr;"], [0, "&sfr;"], [0, "&tfr;"], [0, "&ufr;"], [0, "&vfr;"], [0, "&wfr;"], [0, "&xfr;"], [0, "&yfr;"], [0, "&zfr;"], [0, "&Aopf;"], [0, "&Bopf;"], [1, "&Dopf;"], [0, "&Eopf;"], [0, "&Fopf;"], [0, "&Gopf;"], [1, "&Iopf;"], [0, "&Jopf;"], [0, "&Kopf;"], [0, "&Lopf;"], [0, "&Mopf;"], [1, "&Oopf;"], [3, "&Sopf;"], [0, "&Topf;"], [0, "&Uopf;"], [0, "&Vopf;"], [0, "&Wopf;"], [0, "&Xopf;"], [0, "&Yopf;"], [1, "&aopf;"], [0, "&bopf;"], [0, "&copf;"], [0, "&dopf;"], [0, "&eopf;"], [0, "&fopf;"], [0, "&gopf;"], [0, "&hopf;"], [0, "&iopf;"], [0, "&jopf;"], [0, "&kopf;"], [0, "&lopf;"], [0, "&mopf;"], [0, "&nopf;"], [0, "&oopf;"], [0, "&popf;"], [0, "&qopf;"], [0, "&ropf;"], [0, "&sopf;"], [0, "&topf;"], [0, "&uopf;"], [0, "&vopf;"], [0, "&wopf;"], [0, "&xopf;"], [0, "&yopf;"], [0, "&zopf;"]])) }], [8906, "&fflig;"], [0, "&filig;"], [0, "&fllig;"], [0, "&ffilig;"], [0, "&ffllig;"]])));
//# sourceMappingURL=encode-html.js.map
;// ../../node_modules/entities/lib/esm/escape.js
const escape_xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
const xmlCodeMap = new Map([
    [34, "&quot;"],
    [38, "&amp;"],
    [39, "&apos;"],
    [60, "&lt;"],
    [62, "&gt;"],
]);
// For compatibility with node < 4, we wrap `codePointAt`
const escape_getCodePoint = 
// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
String.prototype.codePointAt != null
    ? (str, index) => str.codePointAt(index)
    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        (c, index) => (c.charCodeAt(index) & 0xfc00) === 0xd800
            ? (c.charCodeAt(index) - 0xd800) * 0x400 +
                c.charCodeAt(index + 1) -
                0xdc00 +
                0x10000
            : c.charCodeAt(index);
/**
 * Encodes all non-ASCII characters, as well as characters not valid in XML
 * documents using XML entities.
 *
 * If a character has no equivalent entity, a
 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
 */
function escape_encodeXML(str) {
    let ret = "";
    let lastIdx = 0;
    let match;
    while ((match = escape_xmlReplacer.exec(str)) !== null) {
        const i = match.index;
        const char = str.charCodeAt(i);
        const next = xmlCodeMap.get(char);
        if (next !== undefined) {
            ret += str.substring(lastIdx, i) + next;
            lastIdx = i + 1;
        }
        else {
            ret += `${str.substring(lastIdx, i)}&#x${escape_getCodePoint(str, i).toString(16)};`;
            // Increase by 1 if we have a surrogate pair
            lastIdx = escape_xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);
        }
    }
    return ret + str.substr(lastIdx);
}
/**
 * Encodes all non-ASCII characters, as well as characters not valid in XML
 * documents using numeric hexadecimal reference (eg. `&#xfc;`).
 *
 * Have a look at `escapeUTF8` if you want a more concise output at the expense
 * of reduced transportability.
 *
 * @param data String to escape.
 */
const escape_escape = (/* unused pure expression or super */ null && (escape_encodeXML));
/**
 * Creates a function that escapes all characters matched by the given regular
 * expression using the given map of characters to escape to their entities.
 *
 * @param regex Regular expression to match characters to escape.
 * @param map Map of characters to escape to their entities.
 *
 * @returns Function that escapes all characters matched by the given regular
 * expression using the given map of characters to escape to their entities.
 */
function getEscaper(regex, map) {
    return function escape(data) {
        let match;
        let lastIdx = 0;
        let result = "";
        while ((match = regex.exec(data))) {
            if (lastIdx !== match.index) {
                result += data.substring(lastIdx, match.index);
            }
            // We know that this character will be in the map.
            result += map.get(match[0].charCodeAt(0));
            // Every match will be of length 1
            lastIdx = match.index + 1;
        }
        return result + data.substring(lastIdx);
    };
}
/**
 * Encodes all characters not valid in XML documents using XML entities.
 *
 * Note that the output will be character-set dependent.
 *
 * @param data String to escape.
 */
const escape_escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
/**
 * Encodes all characters that have to be escaped in HTML attributes,
 * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
 *
 * @param data String to escape.
 */
const escape_escapeAttribute = getEscaper(/["&\u00A0]/g, new Map([
    [34, "&quot;"],
    [38, "&amp;"],
    [160, "&nbsp;"],
]));
/**
 * Encodes all characters that have to be escaped in HTML text,
 * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
 *
 * @param data String to escape.
 */
const escape_escapeText = getEscaper(/[&<>\u00A0]/g, new Map([
    [38, "&amp;"],
    [60, "&lt;"],
    [62, "&gt;"],
    [160, "&nbsp;"],
]));
//# sourceMappingURL=escape.js.map
;// ../../node_modules/entities/lib/esm/encode.js


const htmlReplacer = /[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;
/**
 * Encodes all characters in the input using HTML entities. This includes
 * characters that are valid ASCII characters in HTML documents, such as `#`.
 *
 * To get a more compact output, consider using the `encodeNonAsciiHTML`
 * function, which will only encode characters that are not valid in HTML
 * documents, as well as non-ASCII characters.
 *
 * If a character has no equivalent entity, a numeric hexadecimal reference
 * (eg. `&#xfc;`) will be used.
 */
function encode_encodeHTML(data) {
    return encodeHTMLTrieRe(htmlReplacer, data);
}
/**
 * Encodes all non-ASCII characters, as well as characters not valid in HTML
 * documents using HTML entities. This function will not encode characters that
 * are valid in HTML documents, such as `#`.
 *
 * If a character has no equivalent entity, a numeric hexadecimal reference
 * (eg. `&#xfc;`) will be used.
 */
function encode_encodeNonAsciiHTML(data) {
    return encodeHTMLTrieRe(xmlReplacer, data);
}
function encodeHTMLTrieRe(regExp, str) {
    let ret = "";
    let lastIdx = 0;
    let match;
    while ((match = regExp.exec(str)) !== null) {
        const i = match.index;
        ret += str.substring(lastIdx, i);
        const char = str.charCodeAt(i);
        let next = htmlTrie.get(char);
        if (typeof next === "object") {
            // We are in a branch. Try to match the next char.
            if (i + 1 < str.length) {
                const nextChar = str.charCodeAt(i + 1);
                const value = typeof next.n === "number"
                    ? next.n === nextChar
                        ? next.o
                        : undefined
                    : next.n.get(nextChar);
                if (value !== undefined) {
                    ret += value;
                    lastIdx = regExp.lastIndex += 1;
                    continue;
                }
            }
            next = next.v;
        }
        // We might have a tree node without a value; skip and use a numeric entity.
        if (next !== undefined) {
            ret += next;
            lastIdx = i + 1;
        }
        else {
            const cp = getCodePoint(str, i);
            ret += `&#x${cp.toString(16)};`;
            // Increase by 1 if we have a surrogate pair
            lastIdx = regExp.lastIndex += Number(cp !== char);
        }
    }
    return ret + str.substr(lastIdx);
}
//# sourceMappingURL=encode.js.map
;// ../../node_modules/entities/lib/esm/index.js



/** The level of entities to support. */
var EntityLevel;
(function (EntityLevel) {
    /** Support only XML entities. */
    EntityLevel[EntityLevel["XML"] = 0] = "XML";
    /** Support HTML entities, which are a superset of XML entities. */
    EntityLevel[EntityLevel["HTML"] = 1] = "HTML";
})(EntityLevel || (EntityLevel = {}));
var EncodingMode;
(function (EncodingMode) {
    /**
     * The output is UTF-8 encoded. Only characters that need escaping within
     * XML will be escaped.
     */
    EncodingMode[EncodingMode["UTF8"] = 0] = "UTF8";
    /**
     * The output consists only of ASCII characters. Characters that need
     * escaping within HTML, and characters that aren't ASCII characters will
     * be escaped.
     */
    EncodingMode[EncodingMode["ASCII"] = 1] = "ASCII";
    /**
     * Encode all characters that have an equivalent entity, as well as all
     * characters that are not ASCII characters.
     */
    EncodingMode[EncodingMode["Extensive"] = 2] = "Extensive";
    /**
     * Encode all characters that have to be escaped in HTML attributes,
     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
     */
    EncodingMode[EncodingMode["Attribute"] = 3] = "Attribute";
    /**
     * Encode all characters that have to be escaped in HTML text,
     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
     */
    EncodingMode[EncodingMode["Text"] = 4] = "Text";
})(EncodingMode || (EncodingMode = {}));
/**
 * Decodes a string with entities.
 *
 * @param data String to decode.
 * @param options Decoding options.
 */
function esm_decode(data, options = EntityLevel.XML) {
    const level = typeof options === "number" ? options : options.level;
    if (level === EntityLevel.HTML) {
        const mode = typeof options === "object" ? options.mode : undefined;
        return decodeHTML(data, mode);
    }
    return decodeXML(data);
}
/**
 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
 *
 * @param data String to decode.
 * @param options Decoding options.
 * @deprecated Use `decode` with the `mode` set to `Strict`.
 */
function decodeStrict(data, options = EntityLevel.XML) {
    var _a;
    const opts = typeof options === "number" ? { level: options } : options;
    (_a = opts.mode) !== null && _a !== void 0 ? _a : (opts.mode = DecodingMode.Strict);
    return esm_decode(data, opts);
}
/**
 * Encodes a string with entities.
 *
 * @param data String to encode.
 * @param options Encoding options.
 */
function esm_encode(data, options = EntityLevel.XML) {
    const opts = typeof options === "number" ? { level: options } : options;
    // Mode `UTF8` just escapes XML entities
    if (opts.mode === EncodingMode.UTF8)
        return escapeUTF8(data);
    if (opts.mode === EncodingMode.Attribute)
        return escapeAttribute(data);
    if (opts.mode === EncodingMode.Text)
        return escapeText(data);
    if (opts.level === EntityLevel.HTML) {
        if (opts.mode === EncodingMode.ASCII) {
            return encodeNonAsciiHTML(data);
        }
        return encodeHTML(data);
    }
    // ASCII and Extensive are equivalent
    return encodeXML(data);
}



//# sourceMappingURL=index.js.map
;// ../../node_modules/markdown-it/lib/common/utils.mjs
// Utilities
//





function _class (obj) { return Object.prototype.toString.call(obj) }

function isString (obj) { return _class(obj) === '[object String]' }

const _hasOwnProperty = Object.prototype.hasOwnProperty

function has (object, key) {
  return _hasOwnProperty.call(object, key)
}

// Merge objects
//
function utils_assign (obj /* from1, from2, from3, ... */) {
  const sources = Array.prototype.slice.call(arguments, 1)

  sources.forEach(function (source) {
    if (!source) { return }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be object')
    }

    Object.keys(source).forEach(function (key) {
      obj[key] = source[key]
    })
  })

  return obj
}

// Remove element from array and put another array at those position.
// Useful for some operations with tokens
function arrayReplaceAt (src, pos, newElements) {
  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1))
}

function isValidEntityCode (c) {
  /* eslint no-bitwise:0 */
  // broken sequence
  if (c >= 0xD800 && c <= 0xDFFF) { return false }
  // never used
  if (c >= 0xFDD0 && c <= 0xFDEF) { return false }
  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false }
  // control codes
  if (c >= 0x00 && c <= 0x08) { return false }
  if (c === 0x0B) { return false }
  if (c >= 0x0E && c <= 0x1F) { return false }
  if (c >= 0x7F && c <= 0x9F) { return false }
  // out of range
  if (c > 0x10FFFF) { return false }
  return true
}

function utils_fromCodePoint (c) {
  /* eslint no-bitwise:0 */
  if (c > 0xffff) {
    c -= 0x10000
    const surrogate1 = 0xd800 + (c >> 10)
    const surrogate2 = 0xdc00 + (c & 0x3ff)

    return String.fromCharCode(surrogate1, surrogate2)
  }
  return String.fromCharCode(c)
}

const UNESCAPE_MD_RE  = /\\([!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])/g
const ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi
const UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi')

const DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i

function replaceEntityPattern (match, name) {
  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {
    const code = name[1].toLowerCase() === 'x'
      ? parseInt(name.slice(2), 16)
      : parseInt(name.slice(1), 10)

    if (isValidEntityCode(code)) {
      return utils_fromCodePoint(code)
    }

    return match
  }

  const decoded = decode_decodeHTML(match)
  if (decoded !== match) {
    return decoded
  }

  return match
}

/* function replaceEntities(str) {
  if (str.indexOf('&') < 0) { return str; }

  return str.replace(ENTITY_RE, replaceEntityPattern);
} */

function unescapeMd (str) {
  if (str.indexOf('\\') < 0) { return str }
  return str.replace(UNESCAPE_MD_RE, '$1')
}

function unescapeAll (str) {
  if (str.indexOf('\\') < 0 && str.indexOf('&') < 0) { return str }

  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {
    if (escaped) { return escaped }
    return replaceEntityPattern(match, entity)
  })
}

const HTML_ESCAPE_TEST_RE = /[&<>"]/
const HTML_ESCAPE_REPLACE_RE = /[&<>"]/g
const HTML_REPLACEMENTS = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;'
}

function replaceUnsafeChar (ch) {
  return HTML_REPLACEMENTS[ch]
}

function escapeHtml (str) {
  if (HTML_ESCAPE_TEST_RE.test(str)) {
    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar)
  }
  return str
}

const REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g

function escapeRE (str) {
  return str.replace(REGEXP_ESCAPE_RE, '\\$&')
}

function isSpace (code) {
  switch (code) {
    case 0x09:
    case 0x20:
      return true
  }
  return false
}

// Zs (unicode class) || [\t\f\v\r\n]
function isWhiteSpace (code) {
  if (code >= 0x2000 && code <= 0x200A) { return true }
  switch (code) {
    case 0x09: // \t
    case 0x0A: // \n
    case 0x0B: // \v
    case 0x0C: // \f
    case 0x0D: // \r
    case 0x20:
    case 0xA0:
    case 0x1680:
    case 0x202F:
    case 0x205F:
    case 0x3000:
      return true
  }
  return false
}

/* eslint-disable max-len */

// Currently without astral characters support.
function isPunctChar (ch) {
  return regex.test(ch) || S_regex.test(ch)
}

// Markdown ASCII punctuation characters.
//
// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
// http://spec.commonmark.org/0.15/#ascii-punctuation-character
//
// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.
//
function isMdAsciiPunct (ch) {
  switch (ch) {
    case 0x21/* ! */:
    case 0x22/* " */:
    case 0x23/* # */:
    case 0x24/* $ */:
    case 0x25/* % */:
    case 0x26/* & */:
    case 0x27/* ' */:
    case 0x28/* ( */:
    case 0x29/* ) */:
    case 0x2A/* * */:
    case 0x2B/* + */:
    case 0x2C/* , */:
    case 0x2D/* - */:
    case 0x2E/* . */:
    case 0x2F/* / */:
    case 0x3A/* : */:
    case 0x3B/* ; */:
    case 0x3C/* < */:
    case 0x3D/* = */:
    case 0x3E/* > */:
    case 0x3F/* ? */:
    case 0x40/* @ */:
    case 0x5B/* [ */:
    case 0x5C/* \ */:
    case 0x5D/* ] */:
    case 0x5E/* ^ */:
    case 0x5F/* _ */:
    case 0x60/* ` */:
    case 0x7B/* { */:
    case 0x7C/* | */:
    case 0x7D/* } */:
    case 0x7E/* ~ */:
      return true
    default:
      return false
  }
}

// Hepler to unify [reference labels].
//
function normalizeReference (str) {
  // Trim and collapse whitespace
  //
  str = str.trim().replace(/\s+/g, ' ')

  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug
  // fixed in v12 (couldn't find any details).
  //
  // So treat this one as a special case
  // (remove this when node v10 is no longer supported).
  //
  if ('ẞ'.toLowerCase() === 'Ṿ') {
    str = str.replace(/ẞ/g, 'ß')
  }

  // .toLowerCase().toUpperCase() should get rid of all differences
  // between letter variants.
  //
  // Simple .toLowerCase() doesn't normalize 125 code points correctly,
  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:
  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently
  // uppercased versions).
  //
  // Here's an example showing how it happens. Lets take greek letter omega:
  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)
  //
  // Unicode entries:
  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;
  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398
  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398
  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;
  //
  // Case-insensitive comparison should treat all of them as equivalent.
  //
  // But .toLowerCase() doesn't change ϑ (it's already lowercase),
  // and .toUpperCase() doesn't change ϴ (already uppercase).
  //
  // Applying first lower then upper case normalizes any character:
  // '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'
  //
  // Note: this is equivalent to unicode case folding; unicode normalization
  // is a different step that is not required here.
  //
  // Final result should be uppercased, because it's later stored in an object
  // (this avoid a conflict with Object.prototype members,
  // most notably, `__proto__`)
  //
  return str.toLowerCase().toUpperCase()
}

// Re-export libraries commonly used in both markdown-it and its plugins,
// so plugins won't have to depend on them explicitly, which reduces their
// bundled size (e.g. a browser build).
//
const utils_lib = { mdurl: mdurl_namespaceObject, ucmicro: uc_micro_namespaceObject }



;// ../../node_modules/markdown-it/lib/helpers/parse_link_label.mjs
// Parse link label
//
// this function assumes that first character ("[") already matches;
// returns the end of the label
//

function parseLinkLabel (state, start, disableNested) {
  let level, found, marker, prevPos

  const max = state.posMax
  const oldPos = state.pos

  state.pos = start + 1
  level = 1

  while (state.pos < max) {
    marker = state.src.charCodeAt(state.pos)
    if (marker === 0x5D /* ] */) {
      level--
      if (level === 0) {
        found = true
        break
      }
    }

    prevPos = state.pos
    state.md.inline.skipToken(state)
    if (marker === 0x5B /* [ */) {
      if (prevPos === state.pos - 1) {
        // increase level if we find text `[`, which is not a part of any token
        level++
      } else if (disableNested) {
        state.pos = oldPos
        return -1
      }
    }
  }

  let labelEnd = -1

  if (found) {
    labelEnd = state.pos
  }

  // restore old state
  state.pos = oldPos

  return labelEnd
}

;// ../../node_modules/markdown-it/lib/helpers/parse_link_destination.mjs
// Parse link destination
//



function parseLinkDestination (str, start, max) {
  let code
  let pos = start

  const result = {
    ok: false,
    pos: 0,
    str: ''
  }

  if (str.charCodeAt(pos) === 0x3C /* < */) {
    pos++
    while (pos < max) {
      code = str.charCodeAt(pos)
      if (code === 0x0A /* \n */) { return result }
      if (code === 0x3C /* < */) { return result }
      if (code === 0x3E /* > */) {
        result.pos = pos + 1
        result.str = unescapeAll(str.slice(start + 1, pos))
        result.ok = true
        return result
      }
      if (code === 0x5C /* \ */ && pos + 1 < max) {
        pos += 2
        continue
      }

      pos++
    }

    // no closing '>'
    return result
  }

  // this should be ... } else { ... branch

  let level = 0
  while (pos < max) {
    code = str.charCodeAt(pos)

    if (code === 0x20) { break }

    // ascii control characters
    if (code < 0x20 || code === 0x7F) { break }

    if (code === 0x5C /* \ */ && pos + 1 < max) {
      if (str.charCodeAt(pos + 1) === 0x20) { break }
      pos += 2
      continue
    }

    if (code === 0x28 /* ( */) {
      level++
      if (level > 32) { return result }
    }

    if (code === 0x29 /* ) */) {
      if (level === 0) { break }
      level--
    }

    pos++
  }

  if (start === pos) { return result }
  if (level !== 0) { return result }

  result.str = unescapeAll(str.slice(start, pos))
  result.pos = pos
  result.ok = true
  return result
}

;// ../../node_modules/markdown-it/lib/helpers/parse_link_title.mjs
// Parse link title
//



// Parse link title within `str` in [start, max] range,
// or continue previous parsing if `prev_state` is defined (equal to result of last execution).
//
function parseLinkTitle (str, start, max, prev_state) {
  let code
  let pos = start

  const state = {
    // if `true`, this is a valid link title
    ok: false,
    // if `true`, this link can be continued on the next line
    can_continue: false,
    // if `ok`, it's the position of the first character after the closing marker
    pos: 0,
    // if `ok`, it's the unescaped title
    str: '',
    // expected closing marker character code
    marker: 0
  }

  if (prev_state) {
    // this is a continuation of a previous parseLinkTitle call on the next line,
    // used in reference links only
    state.str = prev_state.str
    state.marker = prev_state.marker
  } else {
    if (pos >= max) { return state }

    let marker = str.charCodeAt(pos)
    if (marker !== 0x22 /* " */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return state }

    start++
    pos++

    // if opening marker is "(", switch it to closing marker ")"
    if (marker === 0x28) { marker = 0x29 }

    state.marker = marker
  }

  while (pos < max) {
    code = str.charCodeAt(pos)
    if (code === state.marker) {
      state.pos = pos + 1
      state.str += unescapeAll(str.slice(start, pos))
      state.ok = true
      return state
    } else if (code === 0x28 /* ( */ && state.marker === 0x29 /* ) */) {
      return state
    } else if (code === 0x5C /* \ */ && pos + 1 < max) {
      pos++
    }

    pos++
  }

  // no closing marker found, but this link title may continue on the next line (for references)
  state.can_continue = true
  state.str += unescapeAll(str.slice(start, pos))
  return state
}

;// ../../node_modules/markdown-it/lib/helpers/index.mjs
// Just a shortcut for bulk export







;// ../../node_modules/markdown-it/lib/renderer.mjs
/**
 * class Renderer
 *
 * Generates HTML from parsed token stream. Each instance has independent
 * copy of rules. Those can be rewritten with ease. Also, you can add new
 * rules if you create plugin and adds new token types.
 **/



const default_rules = {}

default_rules.code_inline = function (tokens, idx, options, env, slf) {
  const token = tokens[idx]

  return  '<code' + slf.renderAttrs(token) + '>' +
          escapeHtml(token.content) +
          '</code>'
}

default_rules.code_block = function (tokens, idx, options, env, slf) {
  const token = tokens[idx]

  return  '<pre' + slf.renderAttrs(token) + '><code>' +
          escapeHtml(tokens[idx].content) +
          '</code></pre>\n'
}

default_rules.fence = function (tokens, idx, options, env, slf) {
  const token = tokens[idx]
  const info = token.info ? unescapeAll(token.info).trim() : ''
  let langName = ''
  let langAttrs = ''

  if (info) {
    const arr = info.split(/(\s+)/g)
    langName = arr[0]
    langAttrs = arr.slice(2).join('')
  }

  let highlighted
  if (options.highlight) {
    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content)
  } else {
    highlighted = escapeHtml(token.content)
  }

  if (highlighted.indexOf('<pre') === 0) {
    return highlighted + '\n'
  }

  // If language exists, inject class gently, without modifying original token.
  // May be, one day we will add .deepClone() for token and simplify this part, but
  // now we prefer to keep things local.
  if (info) {
    const i = token.attrIndex('class')
    const tmpAttrs = token.attrs ? token.attrs.slice() : []

    if (i < 0) {
      tmpAttrs.push(['class', options.langPrefix + langName])
    } else {
      tmpAttrs[i] = tmpAttrs[i].slice()
      tmpAttrs[i][1] += ' ' + options.langPrefix + langName
    }

    // Fake token just to render attributes
    const tmpToken = {
      attrs: tmpAttrs
    }

    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\n`
  }

  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\n`
}

default_rules.image = function (tokens, idx, options, env, slf) {
  const token = tokens[idx]

  // "alt" attr MUST be set, even if empty. Because it's mandatory and
  // should be placed on proper position for tests.
  //
  // Replace content with actual value

  token.attrs[token.attrIndex('alt')][1] =
    slf.renderInlineAsText(token.children, options, env)

  return slf.renderToken(tokens, idx, options)
}

default_rules.hardbreak = function (tokens, idx, options /*, env */) {
  return options.xhtmlOut ? '<br />\n' : '<br>\n'
}
default_rules.softbreak = function (tokens, idx, options /*, env */) {
  return options.breaks ? (options.xhtmlOut ? '<br />\n' : '<br>\n') : '\n'
}

default_rules.text = function (tokens, idx /*, options, env */) {
  return escapeHtml(tokens[idx].content)
}

default_rules.html_block = function (tokens, idx /*, options, env */) {
  return tokens[idx].content
}
default_rules.html_inline = function (tokens, idx /*, options, env */) {
  return tokens[idx].content
}

/**
 * new Renderer()
 *
 * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
 **/
function Renderer () {
  /**
   * Renderer#rules -> Object
   *
   * Contains render rules for tokens. Can be updated and extended.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.renderer.rules.strong_open  = function () { return '<b>'; };
   * md.renderer.rules.strong_close = function () { return '</b>'; };
   *
   * var result = md.renderInline(...);
   * ```
   *
   * Each rule is called as independent static function with fixed signature:
   *
   * ```javascript
   * function my_token_render(tokens, idx, options, env, renderer) {
   *   // ...
   *   return renderedHTML;
   * }
   * ```
   *
   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)
   * for more details and examples.
   **/
  this.rules = utils_assign({}, default_rules)
}

/**
 * Renderer.renderAttrs(token) -> String
 *
 * Render token attributes to string.
 **/
Renderer.prototype.renderAttrs = function renderAttrs (token) {
  let i, l, result

  if (!token.attrs) { return '' }

  result = ''

  for (i = 0, l = token.attrs.length; i < l; i++) {
    result += ' ' + escapeHtml(token.attrs[i][0]) + '="' + escapeHtml(token.attrs[i][1]) + '"'
  }

  return result
}

/**
 * Renderer.renderToken(tokens, idx, options) -> String
 * - tokens (Array): list of tokens
 * - idx (Numbed): token index to render
 * - options (Object): params of parser instance
 *
 * Default token renderer. Can be overriden by custom function
 * in [[Renderer#rules]].
 **/
Renderer.prototype.renderToken = function renderToken (tokens, idx, options) {
  const token = tokens[idx]
  let result = ''

  // Tight list paragraphs
  if (token.hidden) {
    return ''
  }

  // Insert a newline between hidden paragraph and subsequent opening
  // block-level tag.
  //
  // For example, here we should insert a newline before blockquote:
  //  - a
  //    >
  //
  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
    result += '\n'
  }

  // Add token name, e.g. `<img`
  result += (token.nesting === -1 ? '</' : '<') + token.tag

  // Encode attributes, e.g. `<img src="foo"`
  result += this.renderAttrs(token)

  // Add a slash for self-closing tags, e.g. `<img src="foo" /`
  if (token.nesting === 0 && options.xhtmlOut) {
    result += ' /'
  }

  // Check if we need to add a newline after this tag
  let needLf = false
  if (token.block) {
    needLf = true

    if (token.nesting === 1) {
      if (idx + 1 < tokens.length) {
        const nextToken = tokens[idx + 1]

        if (nextToken.type === 'inline' || nextToken.hidden) {
          // Block-level tag containing an inline tag.
          //
          needLf = false
        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
          // Opening tag + closing tag of the same type. E.g. `<li></li>`.
          //
          needLf = false
        }
      }
    }
  }

  result += needLf ? '>\n' : '>'

  return result
}

/**
 * Renderer.renderInline(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * The same as [[Renderer.render]], but for single token of `inline` type.
 **/
Renderer.prototype.renderInline = function (tokens, options, env) {
  let result = ''
  const rules = this.rules

  for (let i = 0, len = tokens.length; i < len; i++) {
    const type = tokens[i].type

    if (typeof rules[type] !== 'undefined') {
      result += rules[type](tokens, i, options, env, this)
    } else {
      result += this.renderToken(tokens, i, options)
    }
  }

  return result
}

/** internal
 * Renderer.renderInlineAsText(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Special kludge for image `alt` attributes to conform CommonMark spec.
 * Don't try to use it! Spec requires to show `alt` content with stripped markup,
 * instead of simple escaping.
 **/
Renderer.prototype.renderInlineAsText = function (tokens, options, env) {
  let result = ''

  for (let i = 0, len = tokens.length; i < len; i++) {
    switch (tokens[i].type) {
      case 'text':
        result += tokens[i].content
        break
      case 'image':
        result += this.renderInlineAsText(tokens[i].children, options, env)
        break
      case 'html_inline':
      case 'html_block':
        result += tokens[i].content
        break
      case 'softbreak':
      case 'hardbreak':
        result += '\n'
        break
      default:
        // all other tokens are skipped
    }
  }

  return result
}

/**
 * Renderer.render(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Takes token stream and generates HTML. Probably, you will never need to call
 * this method directly.
 **/
Renderer.prototype.render = function (tokens, options, env) {
  let result = ''
  const rules = this.rules

  for (let i = 0, len = tokens.length; i < len; i++) {
    const type = tokens[i].type

    if (type === 'inline') {
      result += this.renderInline(tokens[i].children, options, env)
    } else if (typeof rules[type] !== 'undefined') {
      result += rules[type](tokens, i, options, env, this)
    } else {
      result += this.renderToken(tokens, i, options, env)
    }
  }

  return result
}

/* harmony default export */ const renderer = (Renderer);

;// ../../node_modules/markdown-it/lib/ruler.mjs
/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 **/

/**
 * new Ruler()
 **/
function Ruler () {
  // List of added rules. Each element is:
  //
  // {
  //   name: XXX,
  //   enabled: Boolean,
  //   fn: Function(),
  //   alt: [ name2, name3 ]
  // }
  //
  this.__rules__ = []

  // Cached rule chains.
  //
  // First level - chain name, '' for default.
  // Second level - diginal anchor for fast filtering by charcodes.
  //
  this.__cache__ = null
}

// Helper methods, should not be used directly

// Find rule index by name
//
Ruler.prototype.__find__ = function (name) {
  for (let i = 0; i < this.__rules__.length; i++) {
    if (this.__rules__[i].name === name) {
      return i
    }
  }
  return -1
}

// Build rules lookup cache
//
Ruler.prototype.__compile__ = function () {
  const self = this
  const chains = ['']

  // collect unique names
  self.__rules__.forEach(function (rule) {
    if (!rule.enabled) { return }

    rule.alt.forEach(function (altName) {
      if (chains.indexOf(altName) < 0) {
        chains.push(altName)
      }
    })
  })

  self.__cache__ = {}

  chains.forEach(function (chain) {
    self.__cache__[chain] = []
    self.__rules__.forEach(function (rule) {
      if (!rule.enabled) { return }

      if (chain && rule.alt.indexOf(chain) < 0) { return }

      self.__cache__[chain].push(rule.fn)
    })
  })
}

/**
 * Ruler.at(name, fn [, options])
 * - name (String): rule name to replace.
 * - fn (Function): new rule function.
 * - options (Object): new rule options (not mandatory).
 *
 * Replace rule by name with new function & options. Throws error if name not
 * found.
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * Replace existing typographer replacement rule with new one:
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.at('replacements', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.at = function (name, fn, options) {
  const index = this.__find__(name)
  const opt = options || {}

  if (index === -1) { throw new Error('Parser rule not found: ' + name) }

  this.__rules__[index].fn = fn
  this.__rules__[index].alt = opt.alt || []
  this.__cache__ = null
}

/**
 * Ruler.before(beforeName, ruleName, fn [, options])
 * - beforeName (String): new rule will be added before this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain before one with given name. See also
 * [[Ruler.after]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
  const index = this.__find__(beforeName)
  const opt = options || {}

  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName) }

  this.__rules__.splice(index, 0, {
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  })

  this.__cache__ = null
}

/**
 * Ruler.after(afterName, ruleName, fn [, options])
 * - afterName (String): new rule will be added after this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain after one with given name. See also
 * [[Ruler.before]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.inline.ruler.after('text', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.after = function (afterName, ruleName, fn, options) {
  const index = this.__find__(afterName)
  const opt = options || {}

  if (index === -1) { throw new Error('Parser rule not found: ' + afterName) }

  this.__rules__.splice(index + 1, 0, {
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  })

  this.__cache__ = null
}

/**
 * Ruler.push(ruleName, fn [, options])
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Push new rule to the end of chain. See also
 * [[Ruler.before]], [[Ruler.after]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.push('my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.push = function (ruleName, fn, options) {
  const opt = options || {}

  this.__rules__.push({
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  })

  this.__cache__ = null
}

/**
 * Ruler.enable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to enable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.disable]], [[Ruler.enableOnly]].
 **/
Ruler.prototype.enable = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [list] }

  const result = []

  // Search by name and enable
  list.forEach(function (name) {
    const idx = this.__find__(name)

    if (idx < 0) {
      if (ignoreInvalid) { return }
      throw new Error('Rules manager: invalid rule name ' + name)
    }
    this.__rules__[idx].enabled = true
    result.push(name)
  }, this)

  this.__cache__ = null
  return result
}

/**
 * Ruler.enableOnly(list [, ignoreInvalid])
 * - list (String|Array): list of rule names to enable (whitelist).
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names, and disable everything else. If any rule name
 * not found - throw Error. Errors can be disabled by second param.
 *
 * See also [[Ruler.disable]], [[Ruler.enable]].
 **/
Ruler.prototype.enableOnly = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [list] }

  this.__rules__.forEach(function (rule) { rule.enabled = false })

  this.enable(list, ignoreInvalid)
}

/**
 * Ruler.disable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Disable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.enable]], [[Ruler.enableOnly]].
 **/
Ruler.prototype.disable = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [list] }

  const result = []

  // Search by name and disable
  list.forEach(function (name) {
    const idx = this.__find__(name)

    if (idx < 0) {
      if (ignoreInvalid) { return }
      throw new Error('Rules manager: invalid rule name ' + name)
    }
    this.__rules__[idx].enabled = false
    result.push(name)
  }, this)

  this.__cache__ = null
  return result
}

/**
 * Ruler.getRules(chainName) -> Array
 *
 * Return array of active functions (rules) for given chain name. It analyzes
 * rules configuration, compiles caches if not exists and returns result.
 *
 * Default chain name is `''` (empty string). It can't be skipped. That's
 * done intentionally, to keep signature monomorphic for high speed.
 **/
Ruler.prototype.getRules = function (chainName) {
  if (this.__cache__ === null) {
    this.__compile__()
  }

  // Chain can be empty, if rules disabled. But we still have to return Array.
  return this.__cache__[chainName] || []
}

/* harmony default export */ const ruler = (Ruler);

;// ../../node_modules/markdown-it/lib/token.mjs
// Token class

/**
 * class Token
 **/

/**
 * new Token(type, tag, nesting)
 *
 * Create new token and fill passed properties.
 **/
function Token (type, tag, nesting) {
  /**
   * Token#type -> String
   *
   * Type of the token (string, e.g. "paragraph_open")
   **/
  this.type     = type

  /**
   * Token#tag -> String
   *
   * html tag name, e.g. "p"
   **/
  this.tag      = tag

  /**
   * Token#attrs -> Array
   *
   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
   **/
  this.attrs    = null

  /**
   * Token#map -> Array
   *
   * Source map info. Format: `[ line_begin, line_end ]`
   **/
  this.map      = null

  /**
   * Token#nesting -> Number
   *
   * Level change (number in {-1, 0, 1} set), where:
   *
   * -  `1` means the tag is opening
   * -  `0` means the tag is self-closing
   * - `-1` means the tag is closing
   **/
  this.nesting  = nesting

  /**
   * Token#level -> Number
   *
   * nesting level, the same as `state.level`
   **/
  this.level    = 0

  /**
   * Token#children -> Array
   *
   * An array of child nodes (inline and img tokens)
   **/
  this.children = null

  /**
   * Token#content -> String
   *
   * In a case of self-closing tag (code, html, fence, etc.),
   * it has contents of this tag.
   **/
  this.content  = ''

  /**
   * Token#markup -> String
   *
   * '*' or '_' for emphasis, fence string for fence, etc.
   **/
  this.markup   = ''

  /**
   * Token#info -> String
   *
   * Additional information:
   *
   * - Info string for "fence" tokens
   * - The value "auto" for autolink "link_open" and "link_close" tokens
   * - The string value of the item marker for ordered-list "list_item_open" tokens
   **/
  this.info     = ''

  /**
   * Token#meta -> Object
   *
   * A place for plugins to store an arbitrary data
   **/
  this.meta     = null

  /**
   * Token#block -> Boolean
   *
   * True for block-level tokens, false for inline tokens.
   * Used in renderer to calculate line breaks
   **/
  this.block    = false

  /**
   * Token#hidden -> Boolean
   *
   * If it's true, ignore this element when rendering. Used for tight lists
   * to hide paragraphs.
   **/
  this.hidden   = false
}

/**
 * Token.attrIndex(name) -> Number
 *
 * Search attribute index by name.
 **/
Token.prototype.attrIndex = function attrIndex (name) {
  if (!this.attrs) { return -1 }

  const attrs = this.attrs

  for (let i = 0, len = attrs.length; i < len; i++) {
    if (attrs[i][0] === name) { return i }
  }
  return -1
}

/**
 * Token.attrPush(attrData)
 *
 * Add `[ name, value ]` attribute to list. Init attrs if necessary
 **/
Token.prototype.attrPush = function attrPush (attrData) {
  if (this.attrs) {
    this.attrs.push(attrData)
  } else {
    this.attrs = [attrData]
  }
}

/**
 * Token.attrSet(name, value)
 *
 * Set `name` attribute to `value`. Override old value if exists.
 **/
Token.prototype.attrSet = function attrSet (name, value) {
  const idx = this.attrIndex(name)
  const attrData = [name, value]

  if (idx < 0) {
    this.attrPush(attrData)
  } else {
    this.attrs[idx] = attrData
  }
}

/**
 * Token.attrGet(name)
 *
 * Get the value of attribute `name`, or null if it does not exist.
 **/
Token.prototype.attrGet = function attrGet (name) {
  const idx = this.attrIndex(name)
  let value = null
  if (idx >= 0) {
    value = this.attrs[idx][1]
  }
  return value
}

/**
 * Token.attrJoin(name, value)
 *
 * Join value to existing attribute via space. Or create new attribute if not
 * exists. Useful to operate with token classes.
 **/
Token.prototype.attrJoin = function attrJoin (name, value) {
  const idx = this.attrIndex(name)

  if (idx < 0) {
    this.attrPush([name, value])
  } else {
    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value
  }
}

/* harmony default export */ const lib_token = (Token);

;// ../../node_modules/markdown-it/lib/rules_core/state_core.mjs
// Core state object
//



function StateCore (src, md, env) {
  this.src = src
  this.env = env
  this.tokens = []
  this.inlineMode = false
  this.md = md // link to parser instance
}

// re-export Token class to use in core rules
StateCore.prototype.Token = lib_token

/* harmony default export */ const state_core = (StateCore);

;// ../../node_modules/markdown-it/lib/rules_core/normalize.mjs
// Normalize input string

// https://spec.commonmark.org/0.29/#line-ending
const NEWLINES_RE  = /\r\n?|\n/g
const NULL_RE      = /\0/g

function normalize (state) {
  let str

  // Normalize newlines
  str = state.src.replace(NEWLINES_RE, '\n')

  // Replace NULL characters
  str = str.replace(NULL_RE, '\uFFFD')

  state.src = str
}

;// ../../node_modules/markdown-it/lib/rules_core/block.mjs
function block (state) {
  let token

  if (state.inlineMode) {
    token          = new state.Token('inline', '', 0)
    token.content  = state.src
    token.map      = [0, 1]
    token.children = []
    state.tokens.push(token)
  } else {
    state.md.block.parse(state.src, state.md, state.env, state.tokens)
  }
}

;// ../../node_modules/markdown-it/lib/rules_core/inline.mjs
function inline (state) {
  const tokens = state.tokens

  // Parse inlines
  for (let i = 0, l = tokens.length; i < l; i++) {
    const tok = tokens[i]
    if (tok.type === 'inline') {
      state.md.inline.parse(tok.content, state.md, state.env, tok.children)
    }
  }
}

;// ../../node_modules/markdown-it/lib/rules_core/linkify.mjs
// Replace link-like texts with link nodes.
//
// Currently restricted by `md.validateLink()` to http/https/ftp
//



function isLinkOpen (str) {
  return /^<a[>\s]/i.test(str)
}
function isLinkClose (str) {
  return /^<\/a\s*>/i.test(str)
}

function linkify (state) {
  const blockTokens = state.tokens

  if (!state.md.options.linkify) { return }

  for (let j = 0, l = blockTokens.length; j < l; j++) {
    if (blockTokens[j].type !== 'inline' ||
        !state.md.linkify.pretest(blockTokens[j].content)) {
      continue
    }

    let tokens = blockTokens[j].children

    let htmlLinkLevel = 0

    // We scan from the end, to keep position when new tags added.
    // Use reversed logic in links start/end match
    for (let i = tokens.length - 1; i >= 0; i--) {
      const currentToken = tokens[i]

      // Skip content of markdown links
      if (currentToken.type === 'link_close') {
        i--
        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {
          i--
        }
        continue
      }

      // Skip content of html tag links
      if (currentToken.type === 'html_inline') {
        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
          htmlLinkLevel--
        }
        if (isLinkClose(currentToken.content)) {
          htmlLinkLevel++
        }
      }
      if (htmlLinkLevel > 0) { continue }

      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {
        const text = currentToken.content
        let links = state.md.linkify.match(text)

        // Now split string to nodes
        const nodes = []
        let level = currentToken.level
        let lastPos = 0

        // forbid escape sequence at the start of the string,
        // this avoids http\://example.com/ from being linkified as
        // http:<a href="//example.com/">//example.com/</a>
        if (links.length > 0 &&
            links[0].index === 0 &&
            i > 0 &&
            tokens[i - 1].type === 'text_special') {
          links = links.slice(1)
        }

        for (let ln = 0; ln < links.length; ln++) {
          const url = links[ln].url
          const fullUrl = state.md.normalizeLink(url)
          if (!state.md.validateLink(fullUrl)) { continue }

          let urlText = links[ln].text

          // Linkifier might send raw hostnames like "example.com", where url
          // starts with domain name. So we prepend http:// in those cases,
          // and remove it afterwards.
          //
          if (!links[ln].schema) {
            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\/\//, '')
          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {
            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '')
          } else {
            urlText = state.md.normalizeLinkText(urlText)
          }

          const pos = links[ln].index

          if (pos > lastPos) {
            const token   = new state.Token('text', '', 0)
            token.content = text.slice(lastPos, pos)
            token.level   = level
            nodes.push(token)
          }

          const token_o   = new state.Token('link_open', 'a', 1)
          token_o.attrs   = [['href', fullUrl]]
          token_o.level   = level++
          token_o.markup  = 'linkify'
          token_o.info    = 'auto'
          nodes.push(token_o)

          const token_t   = new state.Token('text', '', 0)
          token_t.content = urlText
          token_t.level   = level
          nodes.push(token_t)

          const token_c   = new state.Token('link_close', 'a', -1)
          token_c.level   = --level
          token_c.markup  = 'linkify'
          token_c.info    = 'auto'
          nodes.push(token_c)

          lastPos = links[ln].lastIndex
        }
        if (lastPos < text.length) {
          const token   = new state.Token('text', '', 0)
          token.content = text.slice(lastPos)
          token.level   = level
          nodes.push(token)
        }

        // replace current node
        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes)
      }
    }
  }
}

;// ../../node_modules/markdown-it/lib/rules_core/replacements.mjs
// Simple typographic replacements
//
// (c) (C) → ©
// (tm) (TM) → ™
// (r) (R) → ®
// +- → ±
// ... → … (also ?.... → ?.., !.... → !..)
// ???????? → ???, !!!!! → !!!, `,,` → `,`
// -- → &ndash;, --- → &mdash;
//

// TODO:
// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
// - multiplications 2 x 4 -> 2 × 4

const RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/

// Workaround for phantomjs - need regex without /g flag,
// or root check will fail every second time
const SCOPED_ABBR_TEST_RE = /\((c|tm|r)\)/i

const SCOPED_ABBR_RE = /\((c|tm|r)\)/ig
const SCOPED_ABBR = {
  c: '©',
  r: '®',
  tm: '™'
}

function replaceFn (match, name) {
  return SCOPED_ABBR[name.toLowerCase()]
}

function replace_scoped (inlineTokens) {
  let inside_autolink = 0

  for (let i = inlineTokens.length - 1; i >= 0; i--) {
    const token = inlineTokens[i]

    if (token.type === 'text' && !inside_autolink) {
      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn)
    }

    if (token.type === 'link_open' && token.info === 'auto') {
      inside_autolink--
    }

    if (token.type === 'link_close' && token.info === 'auto') {
      inside_autolink++
    }
  }
}

function replace_rare (inlineTokens) {
  let inside_autolink = 0

  for (let i = inlineTokens.length - 1; i >= 0; i--) {
    const token = inlineTokens[i]

    if (token.type === 'text' && !inside_autolink) {
      if (RARE_RE.test(token.content)) {
        token.content = token.content
          .replace(/\+-/g, '±')
          // .., ..., ....... -> …
          // but ?..... & !..... -> ?.. & !..
          .replace(/\.{2,}/g, '…').replace(/([?!])…/g, '$1..')
          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')
          // em-dash
          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\u2014')
          // en-dash
          .replace(/(^|\s)--(?=\s|$)/mg, '$1\u2013')
          .replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, '$1\u2013')
      }
    }

    if (token.type === 'link_open' && token.info === 'auto') {
      inside_autolink--
    }

    if (token.type === 'link_close' && token.info === 'auto') {
      inside_autolink++
    }
  }
}

function replace (state) {
  let blkIdx

  if (!state.md.options.typographer) { return }

  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
    if (state.tokens[blkIdx].type !== 'inline') { continue }

    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
      replace_scoped(state.tokens[blkIdx].children)
    }

    if (RARE_RE.test(state.tokens[blkIdx].content)) {
      replace_rare(state.tokens[blkIdx].children)
    }
  }
}

;// ../../node_modules/markdown-it/lib/rules_core/smartquotes.mjs
// Convert straight quotation marks to typographic ones
//



const QUOTE_TEST_RE = /['"]/
const QUOTE_RE = /['"]/g
const APOSTROPHE = '\u2019' /* ’ */

function replaceAt (str, index, ch) {
  return str.slice(0, index) + ch + str.slice(index + 1)
}

function process_inlines (tokens, state) {
  let j

  const stack = []

  for (let i = 0; i < tokens.length; i++) {
    const token = tokens[i]

    const thisLevel = tokens[i].level

    for (j = stack.length - 1; j >= 0; j--) {
      if (stack[j].level <= thisLevel) { break }
    }
    stack.length = j + 1

    if (token.type !== 'text') { continue }

    let text = token.content
    let pos = 0
    let max = text.length

    /* eslint no-labels:0,block-scoped-var:0 */
    OUTER:
    while (pos < max) {
      QUOTE_RE.lastIndex = pos
      const t = QUOTE_RE.exec(text)
      if (!t) { break }

      let canOpen = true
      let canClose = true
      pos = t.index + 1
      const isSingle = (t[0] === "'")

      // Find previous character,
      // default to space if it's the beginning of the line
      //
      let lastChar = 0x20

      if (t.index - 1 >= 0) {
        lastChar = text.charCodeAt(t.index - 1)
      } else {
        for (j = i - 1; j >= 0; j--) {
          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // lastChar defaults to 0x20
          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'

          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1)
          break
        }
      }

      // Find next character,
      // default to space if it's the end of the line
      //
      let nextChar = 0x20

      if (pos < max) {
        nextChar = text.charCodeAt(pos)
      } else {
        for (j = i + 1; j < tokens.length; j++) {
          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // nextChar defaults to 0x20
          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'

          nextChar = tokens[j].content.charCodeAt(0)
          break
        }
      }

      const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))
      const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))

      const isLastWhiteSpace = isWhiteSpace(lastChar)
      const isNextWhiteSpace = isWhiteSpace(nextChar)

      if (isNextWhiteSpace) {
        canOpen = false
      } else if (isNextPunctChar) {
        if (!(isLastWhiteSpace || isLastPunctChar)) {
          canOpen = false
        }
      }

      if (isLastWhiteSpace) {
        canClose = false
      } else if (isLastPunctChar) {
        if (!(isNextWhiteSpace || isNextPunctChar)) {
          canClose = false
        }
      }

      if (nextChar === 0x22 /* " */ && t[0] === '"') {
        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {
          // special case: 1"" - count first quote as an inch
          canClose = canOpen = false
        }
      }

      if (canOpen && canClose) {
        // Replace quotes in the middle of punctuation sequence, but not
        // in the middle of the words, i.e.:
        //
        // 1. foo " bar " baz - not replaced
        // 2. foo-"-bar-"-baz - replaced
        // 3. foo"bar"baz     - not replaced
        //
        canOpen = isLastPunctChar
        canClose = isNextPunctChar
      }

      if (!canOpen && !canClose) {
        // middle of word
        if (isSingle) {
          token.content = replaceAt(token.content, t.index, APOSTROPHE)
        }
        continue
      }

      if (canClose) {
        // this could be a closing quote, rewind the stack to get a match
        for (j = stack.length - 1; j >= 0; j--) {
          let item = stack[j]
          if (stack[j].level < thisLevel) { break }
          if (item.single === isSingle && stack[j].level === thisLevel) {
            item = stack[j]

            let openQuote
            let closeQuote
            if (isSingle) {
              openQuote = state.md.options.quotes[2]
              closeQuote = state.md.options.quotes[3]
            } else {
              openQuote = state.md.options.quotes[0]
              closeQuote = state.md.options.quotes[1]
            }

            // replace token.content *before* tokens[item.token].content,
            // because, if they are pointing at the same token, replaceAt
            // could mess up indices when quote length != 1
            token.content = replaceAt(token.content, t.index, closeQuote)
            tokens[item.token].content = replaceAt(
              tokens[item.token].content, item.pos, openQuote)

            pos += closeQuote.length - 1
            if (item.token === i) { pos += openQuote.length - 1 }

            text = token.content
            max = text.length

            stack.length = j
            continue OUTER
          }
        }
      }

      if (canOpen) {
        stack.push({
          token: i,
          pos: t.index,
          single: isSingle,
          level: thisLevel
        })
      } else if (canClose && isSingle) {
        token.content = replaceAt(token.content, t.index, APOSTROPHE)
      }
    }
  }
}

function smartquotes (state) {
  /* eslint max-depth:0 */
  if (!state.md.options.typographer) { return }

  for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
    if (state.tokens[blkIdx].type !== 'inline' ||
        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
      continue
    }

    process_inlines(state.tokens[blkIdx].children, state)
  }
}

;// ../../node_modules/markdown-it/lib/rules_core/text_join.mjs
// Join raw text tokens with the rest of the text
//
// This is set as a separate rule to provide an opportunity for plugins
// to run text replacements after text join, but before escape join.
//
// For example, `\:)` shouldn't be replaced with an emoji.
//

function text_join (state) {
  let curr, last
  const blockTokens = state.tokens
  const l = blockTokens.length

  for (let j = 0; j < l; j++) {
    if (blockTokens[j].type !== 'inline') continue

    const tokens = blockTokens[j].children
    const max = tokens.length

    for (curr = 0; curr < max; curr++) {
      if (tokens[curr].type === 'text_special') {
        tokens[curr].type = 'text'
      }
    }

    for (curr = last = 0; curr < max; curr++) {
      if (tokens[curr].type === 'text' &&
          curr + 1 < max &&
          tokens[curr + 1].type === 'text') {
        // collapse two adjacent text nodes
        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content
      } else {
        if (curr !== last) { tokens[last] = tokens[curr] }

        last++
      }
    }

    if (curr !== last) {
      tokens.length = last
    }
  }
}

;// ../../node_modules/markdown-it/lib/parser_core.mjs
/** internal
 * class Core
 *
 * Top-level rules executor. Glues block/inline parsers and does intermediate
 * transformations.
 **/












const _rules = [
  ['normalize',      normalize],
  ['block',          block],
  ['inline',         inline],
  ['linkify',        linkify],
  ['replacements',   replace],
  ['smartquotes',    smartquotes],
  // `text_join` finds `text_special` tokens (for escape sequences)
  // and joins them with the rest of the text
  ['text_join',      text_join]
]

/**
 * new Core()
 **/
function Core () {
  /**
   * Core#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of core rules.
   **/
  this.ruler = new ruler()

  for (let i = 0; i < _rules.length; i++) {
    this.ruler.push(_rules[i][0], _rules[i][1])
  }
}

/**
 * Core.process(state)
 *
 * Executes core chain rules.
 **/
Core.prototype.process = function (state) {
  const rules = this.ruler.getRules('')

  for (let i = 0, l = rules.length; i < l; i++) {
    rules[i](state)
  }
}

Core.prototype.State = state_core

/* harmony default export */ const parser_core = (Core);

;// ../../node_modules/markdown-it/lib/rules_block/state_block.mjs
// Parser state class




function StateBlock (src, md, env, tokens) {
  this.src = src

  // link to parser instance
  this.md     = md

  this.env = env

  //
  // Internal state vartiables
  //

  this.tokens = tokens

  this.bMarks = []  // line begin offsets for fast jumps
  this.eMarks = []  // line end offsets for fast jumps
  this.tShift = []  // offsets of the first non-space characters (tabs not expanded)
  this.sCount = []  // indents for each line (tabs expanded)

  // An amount of virtual spaces (tabs expanded) between beginning
  // of each line (bMarks) and real beginning of that line.
  //
  // It exists only as a hack because blockquotes override bMarks
  // losing information in the process.
  //
  // It's used only when expanding tabs, you can think about it as
  // an initial tab length, e.g. bsCount=21 applied to string `\t123`
  // means first tab should be expanded to 4-21%4 === 3 spaces.
  //
  this.bsCount = []

  // block parser variables

  // required block content indent (for example, if we are
  // inside a list, it would be positioned after list marker)
  this.blkIndent  = 0
  this.line       = 0 // line index in src
  this.lineMax    = 0 // lines count
  this.tight      = false  // loose/tight mode for lists
  this.ddIndent   = -1 // indent of the current dd block (-1 if there isn't any)
  this.listIndent = -1 // indent of the current list block (-1 if there isn't any)

  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'
  // used in lists to determine if they interrupt a paragraph
  this.parentType = 'root'

  this.level = 0

  // Create caches
  // Generate markers.
  const s = this.src

  for (let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++) {
    const ch = s.charCodeAt(pos)

    if (!indent_found) {
      if (isSpace(ch)) {
        indent++

        if (ch === 0x09) {
          offset += 4 - offset % 4
        } else {
          offset++
        }
        continue
      } else {
        indent_found = true
      }
    }

    if (ch === 0x0A || pos === len - 1) {
      if (ch !== 0x0A) { pos++ }
      this.bMarks.push(start)
      this.eMarks.push(pos)
      this.tShift.push(indent)
      this.sCount.push(offset)
      this.bsCount.push(0)

      indent_found = false
      indent = 0
      offset = 0
      start = pos + 1
    }
  }

  // Push fake entry to simplify cache bounds checks
  this.bMarks.push(s.length)
  this.eMarks.push(s.length)
  this.tShift.push(0)
  this.sCount.push(0)
  this.bsCount.push(0)

  this.lineMax = this.bMarks.length - 1 // don't count last fake line
}

// Push new token to "stream".
//
StateBlock.prototype.push = function (type, tag, nesting) {
  const token = new lib_token(type, tag, nesting)
  token.block = true

  if (nesting < 0) this.level-- // closing tag
  token.level = this.level
  if (nesting > 0) this.level++ // opening tag

  this.tokens.push(token)
  return token
}

StateBlock.prototype.isEmpty = function isEmpty (line) {
  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line]
}

StateBlock.prototype.skipEmptyLines = function skipEmptyLines (from) {
  for (let max = this.lineMax; from < max; from++) {
    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
      break
    }
  }
  return from
}

// Skip spaces from given position.
StateBlock.prototype.skipSpaces = function skipSpaces (pos) {
  for (let max = this.src.length; pos < max; pos++) {
    const ch = this.src.charCodeAt(pos)
    if (!isSpace(ch)) { break }
  }
  return pos
}

// Skip spaces from given position in reverse.
StateBlock.prototype.skipSpacesBack = function skipSpacesBack (pos, min) {
  if (pos <= min) { return pos }

  while (pos > min) {
    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1 }
  }
  return pos
}

// Skip char codes from given position
StateBlock.prototype.skipChars = function skipChars (pos, code) {
  for (let max = this.src.length; pos < max; pos++) {
    if (this.src.charCodeAt(pos) !== code) { break }
  }
  return pos
}

// Skip char codes reverse from given position - 1
StateBlock.prototype.skipCharsBack = function skipCharsBack (pos, code, min) {
  if (pos <= min) { return pos }

  while (pos > min) {
    if (code !== this.src.charCodeAt(--pos)) { return pos + 1 }
  }
  return pos
}

// cut lines range from source.
StateBlock.prototype.getLines = function getLines (begin, end, indent, keepLastLF) {
  if (begin >= end) {
    return ''
  }

  const queue = new Array(end - begin)

  for (let i = 0, line = begin; line < end; line++, i++) {
    let lineIndent = 0
    const lineStart = this.bMarks[line]
    let first = lineStart
    let last

    if (line + 1 < end || keepLastLF) {
      // No need for bounds check because we have fake entry on tail.
      last = this.eMarks[line] + 1
    } else {
      last = this.eMarks[line]
    }

    while (first < last && lineIndent < indent) {
      const ch = this.src.charCodeAt(first)

      if (isSpace(ch)) {
        if (ch === 0x09) {
          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4
        } else {
          lineIndent++
        }
      } else if (first - lineStart < this.tShift[line]) {
        // patched tShift masked characters to look like spaces (blockquotes, list markers)
        lineIndent++
      } else {
        break
      }

      first++
    }

    if (lineIndent > indent) {
      // partially expanding tabs in code blocks, e.g '\t\tfoobar'
      // with indent=2 becomes '  \tfoobar'
      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last)
    } else {
      queue[i] = this.src.slice(first, last)
    }
  }

  return queue.join('')
}

// re-export Token class to use in block rules
StateBlock.prototype.Token = lib_token

/* harmony default export */ const state_block = (StateBlock);

;// ../../node_modules/markdown-it/lib/rules_block/table.mjs
// GFM table, https://github.github.com/gfm/#tables-extension-



// Limit the amount of empty autocompleted cells in a table,
// see https://github.com/markdown-it/markdown-it/issues/1000,
//
// Both pulldown-cmark and commonmark-hs limit the number of cells this way to ~200k.
// We set it to 65k, which can expand user input by a factor of x370
// (256x256 square is 1.8kB expanded into 650kB).
const MAX_AUTOCOMPLETED_CELLS = 0x10000

function getLine (state, line) {
  const pos = state.bMarks[line] + state.tShift[line]
  const max = state.eMarks[line]

  return state.src.slice(pos, max)
}

function escapedSplit (str) {
  const result = []
  const max = str.length

  let pos = 0
  let ch = str.charCodeAt(pos)
  let isEscaped = false
  let lastPos = 0
  let current = ''

  while (pos < max) {
    if (ch === 0x7c/* | */) {
      if (!isEscaped) {
        // pipe separating cells, '|'
        result.push(current + str.substring(lastPos, pos))
        current = ''
        lastPos = pos + 1
      } else {
        // escaped pipe, '\|'
        current += str.substring(lastPos, pos - 1)
        lastPos = pos
      }
    }

    isEscaped = (ch === 0x5c/* \ */)
    pos++

    ch = str.charCodeAt(pos)
  }

  result.push(current + str.substring(lastPos))

  return result
}

function table (state, startLine, endLine, silent) {
  // should have at least two lines
  if (startLine + 2 > endLine) { return false }

  let nextLine = startLine + 1

  if (state.sCount[nextLine] < state.blkIndent) { return false }

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }

  // first character of the second line should be '|', '-', ':',
  // and no other characters are allowed but spaces;
  // basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp

  let pos = state.bMarks[nextLine] + state.tShift[nextLine]
  if (pos >= state.eMarks[nextLine]) { return false }

  const firstCh = state.src.charCodeAt(pos++)
  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false }

  if (pos >= state.eMarks[nextLine]) { return false }

  const secondCh = state.src.charCodeAt(pos++)
  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {
    return false
  }

  // if first character is '-', then second character must not be a space
  // (due to parsing ambiguity with list)
  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false }

  while (pos < state.eMarks[nextLine]) {
    const ch = state.src.charCodeAt(pos)

    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false }

    pos++
  }

  let lineText = getLine(state, startLine + 1)
  let columns = lineText.split('|')
  const aligns = []
  for (let i = 0; i < columns.length; i++) {
    const t = columns[i].trim()
    if (!t) {
      // allow empty columns before and after table, but not in between columns;
      // e.g. allow ` |---| `, disallow ` ---||--- `
      if (i === 0 || i === columns.length - 1) {
        continue
      } else {
        return false
      }
    }

    if (!/^:?-+:?$/.test(t)) { return false }
    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {
      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right')
    } else if (t.charCodeAt(0) === 0x3A/* : */) {
      aligns.push('left')
    } else {
      aligns.push('')
    }
  }

  lineText = getLine(state, startLine).trim()
  if (lineText.indexOf('|') === -1) { return false }
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }
  columns = escapedSplit(lineText)
  if (columns.length && columns[0] === '') columns.shift()
  if (columns.length && columns[columns.length - 1] === '') columns.pop()

  // header row will define an amount of columns in the entire table,
  // and align row should be exactly the same (the rest of the rows can differ)
  const columnCount = columns.length
  if (columnCount === 0 || columnCount !== aligns.length) { return false }

  if (silent) { return true }

  const oldParentType = state.parentType
  state.parentType = 'table'

  // use 'blockquote' lists for termination because it's
  // the most similar to tables
  const terminatorRules = state.md.block.ruler.getRules('blockquote')

  const token_to = state.push('table_open', 'table', 1)
  const tableLines = [startLine, 0]
  token_to.map = tableLines

  const token_tho = state.push('thead_open', 'thead', 1)
  token_tho.map = [startLine, startLine + 1]

  const token_htro = state.push('tr_open', 'tr', 1)
  token_htro.map = [startLine, startLine + 1]

  for (let i = 0; i < columns.length; i++) {
    const token_ho = state.push('th_open', 'th', 1)
    if (aligns[i]) {
      token_ho.attrs  = [['style', 'text-align:' + aligns[i]]]
    }

    const token_il = state.push('inline', '', 0)
    token_il.content  = columns[i].trim()
    token_il.children = []

    state.push('th_close', 'th', -1)
  }

  state.push('tr_close', 'tr', -1)
  state.push('thead_close', 'thead', -1)

  let tbodyLines
  let autocompletedCells = 0

  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
    if (state.sCount[nextLine] < state.blkIndent) { break }

    let terminate = false
    for (let i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true
        break
      }
    }

    if (terminate) { break }
    lineText = getLine(state, nextLine).trim()
    if (!lineText) { break }
    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }
    columns = escapedSplit(lineText)
    if (columns.length && columns[0] === '') columns.shift()
    if (columns.length && columns[columns.length - 1] === '') columns.pop()

    // note: autocomplete count can be negative if user specifies more columns than header,
    // but that does not affect intended use (which is limiting expansion)
    autocompletedCells += columnCount - columns.length
    if (autocompletedCells > MAX_AUTOCOMPLETED_CELLS) { break }

    if (nextLine === startLine + 2) {
      const token_tbo = state.push('tbody_open', 'tbody', 1)
      token_tbo.map = tbodyLines = [startLine + 2, 0]
    }

    const token_tro = state.push('tr_open', 'tr', 1)
    token_tro.map = [nextLine, nextLine + 1]

    for (let i = 0; i < columnCount; i++) {
      const token_tdo = state.push('td_open', 'td', 1)
      if (aligns[i]) {
        token_tdo.attrs  = [['style', 'text-align:' + aligns[i]]]
      }

      const token_il = state.push('inline', '', 0)
      token_il.content  = columns[i] ? columns[i].trim() : ''
      token_il.children = []

      state.push('td_close', 'td', -1)
    }
    state.push('tr_close', 'tr', -1)
  }

  if (tbodyLines) {
    state.push('tbody_close', 'tbody', -1)
    tbodyLines[1] = nextLine
  }

  state.push('table_close', 'table', -1)
  tableLines[1] = nextLine

  state.parentType = oldParentType
  state.line = nextLine
  return true
}

;// ../../node_modules/markdown-it/lib/rules_block/code.mjs
// Code block (4 spaces padded)

function code (state, startLine, endLine/*, silent */) {
  if (state.sCount[startLine] - state.blkIndent < 4) { return false }

  let nextLine = startLine + 1
  let last = nextLine

  while (nextLine < endLine) {
    if (state.isEmpty(nextLine)) {
      nextLine++
      continue
    }

    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      nextLine++
      last = nextLine
      continue
    }
    break
  }

  state.line = last

  const token   = state.push('code_block', 'code', 0)
  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\n'
  token.map     = [startLine, state.line]

  return true
}

;// ../../node_modules/markdown-it/lib/rules_block/fence.mjs
// fences (``` lang, ~~~ lang)

function fence (state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine]
  let max = state.eMarks[startLine]

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

  if (pos + 3 > max) { return false }

  const marker = state.src.charCodeAt(pos)

  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {
    return false
  }

  // scan marker length
  let mem = pos
  pos = state.skipChars(pos, marker)

  let len = pos - mem

  if (len < 3) { return false }

  const markup = state.src.slice(mem, pos)
  const params = state.src.slice(pos, max)

  if (marker === 0x60 /* ` */) {
    if (params.indexOf(String.fromCharCode(marker)) >= 0) {
      return false
    }
  }

  // Since start is found, we can report success here in validation mode
  if (silent) { return true }

  // search end of block
  let nextLine = startLine
  let haveEndMarker = false

  for (;;) {
    nextLine++
    if (nextLine >= endLine) {
      // unclosed block should be autoclosed by end of document.
      // also block seems to be autoclosed by end of parent
      break
    }

    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine]
    max = state.eMarks[nextLine]

    if (pos < max && state.sCount[nextLine] < state.blkIndent) {
      // non-empty line with negative indent should stop the list:
      // - ```
      //  test
      break
    }

    if (state.src.charCodeAt(pos) !== marker) { continue }

    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      // closing fence should be indented less than 4 spaces
      continue
    }

    pos = state.skipChars(pos, marker)

    // closing code fence must be at least as long as the opening one
    if (pos - mem < len) { continue }

    // make sure tail has spaces only
    pos = state.skipSpaces(pos)

    if (pos < max) { continue }

    haveEndMarker = true
    // found!
    break
  }

  // If a fence has heading spaces, they should be removed from its inner block
  len = state.sCount[startLine]

  state.line = nextLine + (haveEndMarker ? 1 : 0)

  const token   = state.push('fence', 'code', 0)
  token.info    = params
  token.content = state.getLines(startLine + 1, nextLine, len, true)
  token.markup  = markup
  token.map     = [startLine, state.line]

  return true
}

;// ../../node_modules/markdown-it/lib/rules_block/blockquote.mjs
// Block quotes



function blockquote (state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine]
  let max = state.eMarks[startLine]

  const oldLineMax = state.lineMax

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

  // check the block quote marker
  if (state.src.charCodeAt(pos) !== 0x3E/* > */) { return false }

  // we know that it's going to be a valid blockquote,
  // so no point trying to find the end of it in silent mode
  if (silent) { return true }

  const oldBMarks  = []
  const oldBSCount = []
  const oldSCount  = []
  const oldTShift  = []

  const terminatorRules = state.md.block.ruler.getRules('blockquote')

  const oldParentType = state.parentType
  state.parentType = 'blockquote'
  let lastLineEmpty = false
  let nextLine

  // Search the end of the block
  //
  // Block ends with either:
  //  1. an empty line outside:
  //     ```
  //     > test
  //
  //     ```
  //  2. an empty line inside:
  //     ```
  //     >
  //     test
  //     ```
  //  3. another tag:
  //     ```
  //     > test
  //      - - -
  //     ```
  for (nextLine = startLine; nextLine < endLine; nextLine++) {
    // check if it's outdented, i.e. it's inside list item and indented
    // less than said list item:
    //
    // ```
    // 1. anything
    //    > current blockquote
    // 2. checking this line
    // ```
    const isOutdented = state.sCount[nextLine] < state.blkIndent

    pos = state.bMarks[nextLine] + state.tShift[nextLine]
    max = state.eMarks[nextLine]

    if (pos >= max) {
      // Case 1: line is not inside the blockquote, and this line is empty.
      break
    }

    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {
      // This line is inside the blockquote.

      // set offset past spaces and ">"
      let initial = state.sCount[nextLine] + 1
      let spaceAfterMarker
      let adjustTab

      // skip one optional space after '>'
      if (state.src.charCodeAt(pos) === 0x20 /* space */) {
        // ' >   test '
        //     ^ -- position start of line here:
        pos++
        initial++
        adjustTab = false
        spaceAfterMarker = true
      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
        spaceAfterMarker = true

        if ((state.bsCount[nextLine] + initial) % 4 === 3) {
          // '  >\t  test '
          //       ^ -- position start of line here (tab has width===1)
          pos++
          initial++
          adjustTab = false
        } else {
          // ' >\t  test '
          //    ^ -- position start of line here + shift bsCount slightly
          //         to make extra space appear
          adjustTab = true
        }
      } else {
        spaceAfterMarker = false
      }

      let offset = initial
      oldBMarks.push(state.bMarks[nextLine])
      state.bMarks[nextLine] = pos

      while (pos < max) {
        const ch = state.src.charCodeAt(pos)

        if (isSpace(ch)) {
          if (ch === 0x09) {
            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4
          } else {
            offset++
          }
        } else {
          break
        }

        pos++
      }

      lastLineEmpty = pos >= max

      oldBSCount.push(state.bsCount[nextLine])
      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0)

      oldSCount.push(state.sCount[nextLine])
      state.sCount[nextLine] = offset - initial

      oldTShift.push(state.tShift[nextLine])
      state.tShift[nextLine] = pos - state.bMarks[nextLine]
      continue
    }

    // Case 2: line is not inside the blockquote, and the last line was empty.
    if (lastLineEmpty) { break }

    // Case 3: another tag found.
    let terminate = false
    for (let i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true
        break
      }
    }

    if (terminate) {
      // Quirk to enforce "hard termination mode" for paragraphs;
      // normally if you call `tokenize(state, startLine, nextLine)`,
      // paragraphs will look below nextLine for paragraph continuation,
      // but if blockquote is terminated by another tag, they shouldn't
      state.lineMax = nextLine

      if (state.blkIndent !== 0) {
        // state.blkIndent was non-zero, we now set it to zero,
        // so we need to re-calculate all offsets to appear as
        // if indent wasn't changed
        oldBMarks.push(state.bMarks[nextLine])
        oldBSCount.push(state.bsCount[nextLine])
        oldTShift.push(state.tShift[nextLine])
        oldSCount.push(state.sCount[nextLine])
        state.sCount[nextLine] -= state.blkIndent
      }

      break
    }

    oldBMarks.push(state.bMarks[nextLine])
    oldBSCount.push(state.bsCount[nextLine])
    oldTShift.push(state.tShift[nextLine])
    oldSCount.push(state.sCount[nextLine])

    // A negative indentation means that this is a paragraph continuation
    //
    state.sCount[nextLine] = -1
  }

  const oldIndent = state.blkIndent
  state.blkIndent = 0

  const token_o  = state.push('blockquote_open', 'blockquote', 1)
  token_o.markup = '>'
  const lines = [startLine, 0]
  token_o.map    = lines

  state.md.block.tokenize(state, startLine, nextLine)

  const token_c  = state.push('blockquote_close', 'blockquote', -1)
  token_c.markup = '>'

  state.lineMax = oldLineMax
  state.parentType = oldParentType
  lines[1] = state.line

  // Restore original tShift; this might not be necessary since the parser
  // has already been here, but just to make sure we can do that.
  for (let i = 0; i < oldTShift.length; i++) {
    state.bMarks[i + startLine] = oldBMarks[i]
    state.tShift[i + startLine] = oldTShift[i]
    state.sCount[i + startLine] = oldSCount[i]
    state.bsCount[i + startLine] = oldBSCount[i]
  }
  state.blkIndent = oldIndent

  return true
}

;// ../../node_modules/markdown-it/lib/rules_block/hr.mjs
// Horizontal rule



function hr_hr (state, startLine, endLine, silent) {
  const max = state.eMarks[startLine]
  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

  let pos = state.bMarks[startLine] + state.tShift[startLine]
  const marker = state.src.charCodeAt(pos++)

  // Check hr marker
  if (marker !== 0x2A/* * */ &&
      marker !== 0x2D/* - */ &&
      marker !== 0x5F/* _ */) {
    return false
  }

  // markers can be mixed with spaces, but there should be at least 3 of them

  let cnt = 1
  while (pos < max) {
    const ch = state.src.charCodeAt(pos++)
    if (ch !== marker && !isSpace(ch)) { return false }
    if (ch === marker) { cnt++ }
  }

  if (cnt < 3) { return false }

  if (silent) { return true }

  state.line = startLine + 1

  const token  = state.push('hr', 'hr', 0)
  token.map    = [startLine, state.line]
  token.markup = Array(cnt + 1).join(String.fromCharCode(marker))

  return true
}

;// ../../node_modules/markdown-it/lib/rules_block/list.mjs
// Lists



// Search `[-+*][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipBulletListMarker (state, startLine) {
  const max = state.eMarks[startLine]
  let pos = state.bMarks[startLine] + state.tShift[startLine]

  const marker = state.src.charCodeAt(pos++)
  // Check bullet
  if (marker !== 0x2A/* * */ &&
      marker !== 0x2D/* - */ &&
      marker !== 0x2B/* + */) {
    return -1
  }

  if (pos < max) {
    const ch = state.src.charCodeAt(pos)

    if (!isSpace(ch)) {
      // " -test " - is not a list item
      return -1
    }
  }

  return pos
}

// Search `\d+[.)][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipOrderedListMarker (state, startLine) {
  const start = state.bMarks[startLine] + state.tShift[startLine]
  const max = state.eMarks[startLine]
  let pos = start

  // List marker should have at least 2 chars (digit + dot)
  if (pos + 1 >= max) { return -1 }

  let ch = state.src.charCodeAt(pos++)

  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1 }

  for (;;) {
    // EOL -> fail
    if (pos >= max) { return -1 }

    ch = state.src.charCodeAt(pos++)

    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {
      // List marker should have no more than 9 digits
      // (prevents integer overflow in browsers)
      if (pos - start >= 10) { return -1 }

      continue
    }

    // found valid marker
    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {
      break
    }

    return -1
  }

  if (pos < max) {
    ch = state.src.charCodeAt(pos)

    if (!isSpace(ch)) {
      // " 1.test " - is not a list item
      return -1
    }
  }
  return pos
}

function markTightParagraphs (state, idx) {
  const level = state.level + 2

  for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
      state.tokens[i + 2].hidden = true
      state.tokens[i].hidden = true
      i += 2
    }
  }
}

function list_list (state, startLine, endLine, silent) {
  let max, pos, start, token
  let nextLine = startLine
  let tight = true

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }

  // Special case:
  //  - item 1
  //   - item 2
  //    - item 3
  //     - item 4
  //      - this one is a paragraph continuation
  if (state.listIndent >= 0 &&
      state.sCount[nextLine] - state.listIndent >= 4 &&
      state.sCount[nextLine] < state.blkIndent) {
    return false
  }

  let isTerminatingParagraph = false

  // limit conditions when list can interrupt
  // a paragraph (validation mode only)
  if (silent && state.parentType === 'paragraph') {
    // Next list item should still terminate previous list item;
    //
    // This code can fail if plugins use blkIndent as well as lists,
    // but I hope the spec gets fixed long before that happens.
    //
    if (state.sCount[nextLine] >= state.blkIndent) {
      isTerminatingParagraph = true
    }
  }

  // Detect list type and position after marker
  let isOrdered
  let markerValue
  let posAfterMarker
  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {
    isOrdered = true
    start = state.bMarks[nextLine] + state.tShift[nextLine]
    markerValue = Number(state.src.slice(start, posAfterMarker - 1))

    // If we're starting a new ordered list right after
    // a paragraph, it should start with 1.
    if (isTerminatingParagraph && markerValue !== 1) return false
  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {
    isOrdered = false
  } else {
    return false
  }

  // If we're starting a new unordered list right after
  // a paragraph, first line should not be empty.
  if (isTerminatingParagraph) {
    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false
  }

  // For validation mode we can terminate immediately
  if (silent) { return true }

  // We should terminate list on style change. Remember first one to compare.
  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1)

  // Start list
  const listTokIdx = state.tokens.length

  if (isOrdered) {
    token       = state.push('ordered_list_open', 'ol', 1)
    if (markerValue !== 1) {
      token.attrs = [['start', markerValue]]
    }
  } else {
    token       = state.push('bullet_list_open', 'ul', 1)
  }

  const listLines = [nextLine, 0]
  token.map    = listLines
  token.markup = String.fromCharCode(markerCharCode)

  //
  // Iterate list items
  //

  let prevEmptyEnd = false
  const terminatorRules = state.md.block.ruler.getRules('list')

  const oldParentType = state.parentType
  state.parentType = 'list'

  while (nextLine < endLine) {
    pos = posAfterMarker
    max = state.eMarks[nextLine]

    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine])
    let offset = initial

    while (pos < max) {
      const ch = state.src.charCodeAt(pos)

      if (ch === 0x09) {
        offset += 4 - (offset + state.bsCount[nextLine]) % 4
      } else if (ch === 0x20) {
        offset++
      } else {
        break
      }

      pos++
    }

    const contentStart = pos
    let indentAfterMarker

    if (contentStart >= max) {
      // trimming space in "-    \n  3" case, indent is 1 here
      indentAfterMarker = 1
    } else {
      indentAfterMarker = offset - initial
    }

    // If we have more than 4 spaces, the indent is 1
    // (the rest is just indented code block)
    if (indentAfterMarker > 4) { indentAfterMarker = 1 }

    // "  -  test"
    //  ^^^^^ - calculating total length of this thing
    const indent = initial + indentAfterMarker

    // Run subparser & write tokens
    token        = state.push('list_item_open', 'li', 1)
    token.markup = String.fromCharCode(markerCharCode)
    const itemLines = [nextLine, 0]
    token.map    = itemLines
    if (isOrdered) {
      token.info = state.src.slice(start, posAfterMarker - 1)
    }

    // change current state, then restore it after parser subcall
    const oldTight = state.tight
    const oldTShift = state.tShift[nextLine]
    const oldSCount = state.sCount[nextLine]

    //  - example list
    // ^ listIndent position will be here
    //   ^ blkIndent position will be here
    //
    const oldListIndent = state.listIndent
    state.listIndent = state.blkIndent
    state.blkIndent = indent

    state.tight = true
    state.tShift[nextLine] = contentStart - state.bMarks[nextLine]
    state.sCount[nextLine] = offset

    if (contentStart >= max && state.isEmpty(nextLine + 1)) {
      // workaround for this case
      // (list item is empty, list terminates before "foo"):
      // ~~~~~~~~
      //   -
      //
      //     foo
      // ~~~~~~~~
      state.line = Math.min(state.line + 2, endLine)
    } else {
      state.md.block.tokenize(state, nextLine, endLine, true)
    }

    // If any of list item is tight, mark list as tight
    if (!state.tight || prevEmptyEnd) {
      tight = false
    }
    // Item become loose if finish with empty line,
    // but we should filter last element, because it means list finish
    prevEmptyEnd = (state.line - nextLine) > 1 && state.isEmpty(state.line - 1)

    state.blkIndent = state.listIndent
    state.listIndent = oldListIndent
    state.tShift[nextLine] = oldTShift
    state.sCount[nextLine] = oldSCount
    state.tight = oldTight

    token        = state.push('list_item_close', 'li', -1)
    token.markup = String.fromCharCode(markerCharCode)

    nextLine = state.line
    itemLines[1] = nextLine

    if (nextLine >= endLine) { break }

    //
    // Try to check if list is terminated or continued.
    //
    if (state.sCount[nextLine] < state.blkIndent) { break }

    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }

    // fail if terminating block found
    let terminate = false
    for (let i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true
        break
      }
    }
    if (terminate) { break }

    // fail if list has another type
    if (isOrdered) {
      posAfterMarker = skipOrderedListMarker(state, nextLine)
      if (posAfterMarker < 0) { break }
      start = state.bMarks[nextLine] + state.tShift[nextLine]
    } else {
      posAfterMarker = skipBulletListMarker(state, nextLine)
      if (posAfterMarker < 0) { break }
    }

    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break }
  }

  // Finalize list
  if (isOrdered) {
    token = state.push('ordered_list_close', 'ol', -1)
  } else {
    token = state.push('bullet_list_close', 'ul', -1)
  }
  token.markup = String.fromCharCode(markerCharCode)

  listLines[1] = nextLine
  state.line = nextLine

  state.parentType = oldParentType

  // mark paragraphs tight if needed
  if (tight) {
    markTightParagraphs(state, listTokIdx)
  }

  return true
}

;// ../../node_modules/markdown-it/lib/rules_block/reference.mjs


function reference (state, startLine, _endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine]
  let max = state.eMarks[startLine]
  let nextLine = startLine + 1

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false }

  function getNextLine (nextLine) {
    const endLine = state.lineMax

    if (nextLine >= endLine || state.isEmpty(nextLine)) {
      // empty line or end of input
      return null
    }

    let isContinuation = false

    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) { isContinuation = true }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) { isContinuation = true }

    if (!isContinuation) {
      const terminatorRules = state.md.block.ruler.getRules('reference')
      const oldParentType = state.parentType
      state.parentType = 'reference'

      // Some tags can terminate paragraph without empty line.
      let terminate = false
      for (let i = 0, l = terminatorRules.length; i < l; i++) {
        if (terminatorRules[i](state, nextLine, endLine, true)) {
          terminate = true
          break
        }
      }

      state.parentType = oldParentType
      if (terminate) {
        // terminated by another block
        return null
      }
    }

    const pos = state.bMarks[nextLine] + state.tShift[nextLine]
    const max = state.eMarks[nextLine]

    // max + 1 explicitly includes the newline
    return state.src.slice(pos, max + 1)
  }

  let str = state.src.slice(pos, max + 1)

  max = str.length
  let labelEnd = -1

  for (pos = 1; pos < max; pos++) {
    const ch = str.charCodeAt(pos)
    if (ch === 0x5B /* [ */) {
      return false
    } else if (ch === 0x5D /* ] */) {
      labelEnd = pos
      break
    } else if (ch === 0x0A /* \n */) {
      const lineContent = getNextLine(nextLine)
      if (lineContent !== null) {
        str += lineContent
        max = str.length
        nextLine++
      }
    } else if (ch === 0x5C /* \ */) {
      pos++
      if (pos < max && str.charCodeAt(pos) === 0x0A) {
        const lineContent = getNextLine(nextLine)
        if (lineContent !== null) {
          str += lineContent
          max = str.length
          nextLine++
        }
      }
    }
  }

  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false }

  // [label]:   destination   'title'
  //         ^^^ skip optional whitespace here
  for (pos = labelEnd + 2; pos < max; pos++) {
    const ch = str.charCodeAt(pos)
    if (ch === 0x0A) {
      const lineContent = getNextLine(nextLine)
      if (lineContent !== null) {
        str += lineContent
        max = str.length
        nextLine++
      }
    } else if (isSpace(ch)) {
      /* eslint no-empty:0 */
    } else {
      break
    }
  }

  // [label]:   destination   'title'
  //            ^^^^^^^^^^^ parse this
  const destRes = state.md.helpers.parseLinkDestination(str, pos, max)
  if (!destRes.ok) { return false }

  const href = state.md.normalizeLink(destRes.str)
  if (!state.md.validateLink(href)) { return false }

  pos = destRes.pos

  // save cursor state, we could require to rollback later
  const destEndPos = pos
  const destEndLineNo = nextLine

  // [label]:   destination   'title'
  //                       ^^^ skipping those spaces
  const start = pos
  for (; pos < max; pos++) {
    const ch = str.charCodeAt(pos)
    if (ch === 0x0A) {
      const lineContent = getNextLine(nextLine)
      if (lineContent !== null) {
        str += lineContent
        max = str.length
        nextLine++
      }
    } else if (isSpace(ch)) {
      /* eslint no-empty:0 */
    } else {
      break
    }
  }

  // [label]:   destination   'title'
  //                          ^^^^^^^ parse this
  let titleRes = state.md.helpers.parseLinkTitle(str, pos, max)
  while (titleRes.can_continue) {
    const lineContent = getNextLine(nextLine)
    if (lineContent === null) break
    str += lineContent
    pos = max
    max = str.length
    nextLine++
    titleRes = state.md.helpers.parseLinkTitle(str, pos, max, titleRes)
  }
  let title

  if (pos < max && start !== pos && titleRes.ok) {
    title = titleRes.str
    pos = titleRes.pos
  } else {
    title = ''
    pos = destEndPos
    nextLine = destEndLineNo
  }

  // skip trailing spaces until the rest of the line
  while (pos < max) {
    const ch = str.charCodeAt(pos)
    if (!isSpace(ch)) { break }
    pos++
  }

  if (pos < max && str.charCodeAt(pos) !== 0x0A) {
    if (title) {
      // garbage at the end of the line after title,
      // but it could still be a valid reference if we roll back
      title = ''
      pos = destEndPos
      nextLine = destEndLineNo
      while (pos < max) {
        const ch = str.charCodeAt(pos)
        if (!isSpace(ch)) { break }
        pos++
      }
    }
  }

  if (pos < max && str.charCodeAt(pos) !== 0x0A) {
    // garbage at the end of the line
    return false
  }

  const label = normalizeReference(str.slice(1, labelEnd))
  if (!label) {
    // CommonMark 0.20 disallows empty labels
    return false
  }

  // Reference can not terminate anything. This check is for safety only.
  /* istanbul ignore if */
  if (silent) { return true }

  if (typeof state.env.references === 'undefined') {
    state.env.references = {}
  }
  if (typeof state.env.references[label] === 'undefined') {
    state.env.references[label] = { title, href }
  }

  state.line = nextLine
  return true
}

;// ../../node_modules/markdown-it/lib/common/html_blocks.mjs
// List of valid html blocks names, according to commonmark spec
// https://spec.commonmark.org/0.30/#html-blocks

/* harmony default export */ const html_blocks = ([
  'address',
  'article',
  'aside',
  'base',
  'basefont',
  'blockquote',
  'body',
  'caption',
  'center',
  'col',
  'colgroup',
  'dd',
  'details',
  'dialog',
  'dir',
  'div',
  'dl',
  'dt',
  'fieldset',
  'figcaption',
  'figure',
  'footer',
  'form',
  'frame',
  'frameset',
  'h1',
  'h2',
  'h3',
  'h4',
  'h5',
  'h6',
  'head',
  'header',
  'hr',
  'html',
  'iframe',
  'legend',
  'li',
  'link',
  'main',
  'menu',
  'menuitem',
  'nav',
  'noframes',
  'ol',
  'optgroup',
  'option',
  'p',
  'param',
  'search',
  'section',
  'summary',
  'table',
  'tbody',
  'td',
  'tfoot',
  'th',
  'thead',
  'title',
  'tr',
  'track',
  'ul'
]);

;// ../../node_modules/markdown-it/lib/common/html_re.mjs
// Regexps to match html elements

const attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*'

const unquoted      = '[^"\'=<>`\\x00-\\x20]+'
const single_quoted = "'[^']*'"
const double_quoted = '"[^"]*"'

const attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')'

const attribute   = '(?:\\s+' + attr_name + '(?:\\s*=\\s*' + attr_value + ')?)'

const open_tag    = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>'

const close_tag   = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>'
const comment     = '<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->'
const processing  = '<[?][\\s\\S]*?[?]>'
const declaration = '<![A-Za-z][^>]*>'
const cdata       = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>'

const HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +
                        '|' + processing + '|' + declaration + '|' + cdata + ')')
const HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')')



;// ../../node_modules/markdown-it/lib/rules_block/html_block.mjs
// HTML block




// An array of opening and corresponding closing sequences for html tags,
// last argument defines whether it can terminate a paragraph or not
//
const HTML_SEQUENCES = [
  [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true],
  [/^<!--/,        /-->/,   true],
  [/^<\?/,         /\?>/,   true],
  [/^<![A-Z]/,     />/,     true],
  [/^<!\[CDATA\[/, /\]\]>/, true],
  [new RegExp('^</?(' + html_blocks.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true],
  [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\s*$'),  /^$/, false]
]

function html_block (state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine]
  let max = state.eMarks[startLine]

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

  if (!state.md.options.html) { return false }

  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }

  let lineText = state.src.slice(pos, max)

  let i = 0
  for (; i < HTML_SEQUENCES.length; i++) {
    if (HTML_SEQUENCES[i][0].test(lineText)) { break }
  }
  if (i === HTML_SEQUENCES.length) { return false }

  if (silent) {
    // true if this sequence can be a terminator, false otherwise
    return HTML_SEQUENCES[i][2]
  }

  let nextLine = startLine + 1

  // If we are here - we detected HTML block.
  // Let's roll down till block end.
  if (!HTML_SEQUENCES[i][1].test(lineText)) {
    for (; nextLine < endLine; nextLine++) {
      if (state.sCount[nextLine] < state.blkIndent) { break }

      pos = state.bMarks[nextLine] + state.tShift[nextLine]
      max = state.eMarks[nextLine]
      lineText = state.src.slice(pos, max)

      if (HTML_SEQUENCES[i][1].test(lineText)) {
        if (lineText.length !== 0) { nextLine++ }
        break
      }
    }
  }

  state.line = nextLine

  const token   = state.push('html_block', '', 0)
  token.map     = [startLine, nextLine]
  token.content = state.getLines(startLine, nextLine, state.blkIndent, true)

  return true
}

;// ../../node_modules/markdown-it/lib/rules_block/heading.mjs
// heading (#, ##, ...)



function heading (state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine]
  let max = state.eMarks[startLine]

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

  let ch  = state.src.charCodeAt(pos)

  if (ch !== 0x23/* # */ || pos >= max) { return false }

  // count heading level
  let level = 1
  ch = state.src.charCodeAt(++pos)
  while (ch === 0x23/* # */ && pos < max && level <= 6) {
    level++
    ch = state.src.charCodeAt(++pos)
  }

  if (level > 6 || (pos < max && !isSpace(ch))) { return false }

  if (silent) { return true }

  // Let's cut tails like '    ###  ' from the end of string

  max = state.skipSpacesBack(max, pos)
  const tmp = state.skipCharsBack(max, 0x23, pos) // #
  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {
    max = tmp
  }

  state.line = startLine + 1

  const token_o  = state.push('heading_open', 'h' + String(level), 1)
  token_o.markup = '########'.slice(0, level)
  token_o.map    = [startLine, state.line]

  const token_i    = state.push('inline', '', 0)
  token_i.content  = state.src.slice(pos, max).trim()
  token_i.map      = [startLine, state.line]
  token_i.children = []

  const token_c  = state.push('heading_close', 'h' + String(level), -1)
  token_c.markup = '########'.slice(0, level)

  return true
}

;// ../../node_modules/markdown-it/lib/rules_block/lheading.mjs
// lheading (---, ===)

function lheading (state, startLine, endLine/*, silent */) {
  const terminatorRules = state.md.block.ruler.getRules('paragraph')

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

  const oldParentType = state.parentType
  state.parentType = 'paragraph' // use paragraph to match terminatorRules

  // jump line-by-line until empty one or EOF
  let level = 0
  let marker
  let nextLine = startLine + 1

  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }

    //
    // Check for underline in setext header
    //
    if (state.sCount[nextLine] >= state.blkIndent) {
      let pos = state.bMarks[nextLine] + state.tShift[nextLine]
      const max = state.eMarks[nextLine]

      if (pos < max) {
        marker = state.src.charCodeAt(pos)

        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {
          pos = state.skipChars(pos, marker)
          pos = state.skipSpaces(pos)

          if (pos >= max) {
            level = (marker === 0x3D/* = */ ? 1 : 2)
            break
          }
        }
      }
    }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) { continue }

    // Some tags can terminate paragraph without empty line.
    let terminate = false
    for (let i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true
        break
      }
    }
    if (terminate) { break }
  }

  if (!level) {
    // Didn't find valid underline
    return false
  }

  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()

  state.line = nextLine + 1

  const token_o    = state.push('heading_open', 'h' + String(level), 1)
  token_o.markup   = String.fromCharCode(marker)
  token_o.map      = [startLine, state.line]

  const token_i    = state.push('inline', '', 0)
  token_i.content  = content
  token_i.map      = [startLine, state.line - 1]
  token_i.children = []

  const token_c    = state.push('heading_close', 'h' + String(level), -1)
  token_c.markup   = String.fromCharCode(marker)

  state.parentType = oldParentType

  return true
}

;// ../../node_modules/markdown-it/lib/rules_block/paragraph.mjs
// Paragraph

function paragraph (state, startLine, endLine) {
  const terminatorRules = state.md.block.ruler.getRules('paragraph')
  const oldParentType = state.parentType
  let nextLine = startLine + 1
  state.parentType = 'paragraph'

  // jump line-by-line until empty one or EOF
  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) { continue }

    // Some tags can terminate paragraph without empty line.
    let terminate = false
    for (let i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true
        break
      }
    }
    if (terminate) { break }
  }

  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()

  state.line = nextLine

  const token_o    = state.push('paragraph_open', 'p', 1)
  token_o.map      = [startLine, state.line]

  const token_i    = state.push('inline', '', 0)
  token_i.content  = content
  token_i.map      = [startLine, state.line]
  token_i.children = []

  state.push('paragraph_close', 'p', -1)

  state.parentType = oldParentType

  return true
}

;// ../../node_modules/markdown-it/lib/parser_block.mjs
/** internal
 * class ParserBlock
 *
 * Block-level tokenizer.
 **/
















const parser_block_rules = [
  // First 2 params - rule name & source. Secondary array - list of rules,
  // which can be terminated by this one.
  ['table',      table,      ['paragraph', 'reference']],
  ['code',       code],
  ['fence',      fence,      ['paragraph', 'reference', 'blockquote', 'list']],
  ['blockquote', blockquote, ['paragraph', 'reference', 'blockquote', 'list']],
  ['hr',         hr_hr,         ['paragraph', 'reference', 'blockquote', 'list']],
  ['list',       list_list,       ['paragraph', 'reference', 'blockquote']],
  ['reference',  reference],
  ['html_block', html_block, ['paragraph', 'reference', 'blockquote']],
  ['heading',    heading,    ['paragraph', 'reference', 'blockquote']],
  ['lheading',   lheading],
  ['paragraph',  paragraph]
]

/**
 * new ParserBlock()
 **/
function ParserBlock () {
  /**
   * ParserBlock#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of block rules.
   **/
  this.ruler = new ruler()

  for (let i = 0; i < parser_block_rules.length; i++) {
    this.ruler.push(parser_block_rules[i][0], parser_block_rules[i][1], { alt: (parser_block_rules[i][2] || []).slice() })
  }
}

// Generate tokens for input range
//
ParserBlock.prototype.tokenize = function (state, startLine, endLine) {
  const rules = this.ruler.getRules('')
  const len = rules.length
  const maxNesting = state.md.options.maxNesting
  let line = startLine
  let hasEmptyLines = false

  while (line < endLine) {
    state.line = line = state.skipEmptyLines(line)
    if (line >= endLine) { break }

    // Termination condition for nested calls.
    // Nested calls currently used for blockquotes & lists
    if (state.sCount[line] < state.blkIndent) { break }

    // If nesting level exceeded - skip tail to the end. That's not ordinary
    // situation and we should not care about content.
    if (state.level >= maxNesting) {
      state.line = endLine
      break
    }

    // Try all possible rules.
    // On success, rule should:
    //
    // - update `state.line`
    // - update `state.tokens`
    // - return true
    const prevLine = state.line
    let ok = false

    for (let i = 0; i < len; i++) {
      ok = rules[i](state, line, endLine, false)
      if (ok) {
        if (prevLine >= state.line) {
          throw new Error("block rule didn't increment state.line")
        }
        break
      }
    }

    // this can only happen if user disables paragraph rule
    if (!ok) throw new Error('none of the block rules matched')

    // set state.tight if we had an empty line before current tag
    // i.e. latest empty line should not count
    state.tight = !hasEmptyLines

    // paragraph might "eat" one newline after it in nested lists
    if (state.isEmpty(state.line - 1)) {
      hasEmptyLines = true
    }

    line = state.line

    if (line < endLine && state.isEmpty(line)) {
      hasEmptyLines = true
      line++
      state.line = line
    }
  }
}

/**
 * ParserBlock.parse(str, md, env, outTokens)
 *
 * Process input string and push block tokens into `outTokens`
 **/
ParserBlock.prototype.parse = function (src, md, env, outTokens) {
  if (!src) { return }

  const state = new this.State(src, md, env, outTokens)

  this.tokenize(state, state.line, state.lineMax)
}

ParserBlock.prototype.State = state_block

/* harmony default export */ const parser_block = (ParserBlock);

;// ../../node_modules/markdown-it/lib/rules_inline/state_inline.mjs
// Inline parser state




function StateInline (src, md, env, outTokens) {
  this.src = src
  this.env = env
  this.md = md
  this.tokens = outTokens
  this.tokens_meta = Array(outTokens.length)

  this.pos = 0
  this.posMax = this.src.length
  this.level = 0
  this.pending = ''
  this.pendingLevel = 0

  // Stores { start: end } pairs. Useful for backtrack
  // optimization of pairs parse (emphasis, strikes).
  this.cache = {}

  // List of emphasis-like delimiters for current tag
  this.delimiters = []

  // Stack of delimiter lists for upper level tags
  this._prev_delimiters = []

  // backtick length => last seen position
  this.backticks = {}
  this.backticksScanned = false

  // Counter used to disable inline linkify-it execution
  // inside <a> and markdown links
  this.linkLevel = 0
}

// Flush pending text
//
StateInline.prototype.pushPending = function () {
  const token = new lib_token('text', '', 0)
  token.content = this.pending
  token.level = this.pendingLevel
  this.tokens.push(token)
  this.pending = ''
  return token
}

// Push new token to "stream".
// If pending text exists - flush it as text token
//
StateInline.prototype.push = function (type, tag, nesting) {
  if (this.pending) {
    this.pushPending()
  }

  const token = new lib_token(type, tag, nesting)
  let token_meta = null

  if (nesting < 0) {
    // closing tag
    this.level--
    this.delimiters = this._prev_delimiters.pop()
  }

  token.level = this.level

  if (nesting > 0) {
    // opening tag
    this.level++
    this._prev_delimiters.push(this.delimiters)
    this.delimiters = []
    token_meta = { delimiters: this.delimiters }
  }

  this.pendingLevel = this.level
  this.tokens.push(token)
  this.tokens_meta.push(token_meta)
  return token
}

// Scan a sequence of emphasis-like markers, and determine whether
// it can start an emphasis sequence or end an emphasis sequence.
//
//  - start - position to scan from (it should point at a valid marker);
//  - canSplitWord - determine if these markers can be found inside a word
//
StateInline.prototype.scanDelims = function (start, canSplitWord) {
  const max = this.posMax
  const marker = this.src.charCodeAt(start)

  // treat beginning of the line as a whitespace
  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20

  let pos = start
  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++ }

  const count = pos - start

  // treat end of the line as a whitespace
  const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20

  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))
  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))

  const isLastWhiteSpace = isWhiteSpace(lastChar)
  const isNextWhiteSpace = isWhiteSpace(nextChar)

  const left_flanking =
    !isNextWhiteSpace && (!isNextPunctChar || isLastWhiteSpace || isLastPunctChar)
  const right_flanking =
    !isLastWhiteSpace && (!isLastPunctChar || isNextWhiteSpace || isNextPunctChar)

  const can_open  = left_flanking  && (canSplitWord || !right_flanking || isLastPunctChar)
  const can_close = right_flanking && (canSplitWord || !left_flanking  || isNextPunctChar)

  return { can_open, can_close, length: count }
}

// re-export Token class to use in block rules
StateInline.prototype.Token = lib_token

/* harmony default export */ const state_inline = (StateInline);

;// ../../node_modules/markdown-it/lib/rules_inline/text.mjs
// Skip text characters for text token, place those to pending buffer
// and increment current pos

// Rule to skip pure text
// '{}$%@~+=:' reserved for extentions

// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~

// !!!! Don't confuse with "Markdown ASCII Punctuation" chars
// http://spec.commonmark.org/0.15/#ascii-punctuation-character
function isTerminatorChar (ch) {
  switch (ch) {
    case 0x0A/* \n */:
    case 0x21/* ! */:
    case 0x23/* # */:
    case 0x24/* $ */:
    case 0x25/* % */:
    case 0x26/* & */:
    case 0x2A/* * */:
    case 0x2B/* + */:
    case 0x2D/* - */:
    case 0x3A/* : */:
    case 0x3C/* < */:
    case 0x3D/* = */:
    case 0x3E/* > */:
    case 0x40/* @ */:
    case 0x5B/* [ */:
    case 0x5C/* \ */:
    case 0x5D/* ] */:
    case 0x5E/* ^ */:
    case 0x5F/* _ */:
    case 0x60/* ` */:
    case 0x7B/* { */:
    case 0x7D/* } */:
    case 0x7E/* ~ */:
      return true
    default:
      return false
  }
}

function text_text (state, silent) {
  let pos = state.pos

  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
    pos++
  }

  if (pos === state.pos) { return false }

  if (!silent) { state.pending += state.src.slice(state.pos, pos) }

  state.pos = pos

  return true
}

// Alternative implementation, for memory.
//
// It costs 10% of performance, but allows extend terminators list, if place it
// to `ParserInline` property. Probably, will switch to it sometime, such
// flexibility required.

/*
var TERMINATOR_RE = /[\n!#$%&*+\-:<=>@[\\\]^_`{}~]/;

module.exports = function text(state, silent) {
  var pos = state.pos,
      idx = state.src.slice(pos).search(TERMINATOR_RE);

  // first char is terminator -> empty text
  if (idx === 0) { return false; }

  // no terminator -> text till end of string
  if (idx < 0) {
    if (!silent) { state.pending += state.src.slice(pos); }
    state.pos = state.src.length;
    return true;
  }

  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }

  state.pos += idx;

  return true;
}; */

;// ../../node_modules/markdown-it/lib/rules_inline/linkify.mjs
// Process links like https://example.org/

// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
const SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i

function linkify_linkify (state, silent) {
  if (!state.md.options.linkify) return false
  if (state.linkLevel > 0) return false

  const pos = state.pos
  const max = state.posMax

  if (pos + 3 > max) return false
  if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false
  if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false
  if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false

  const match = state.pending.match(SCHEME_RE)
  if (!match) return false

  const proto = match[1]

  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length))
  if (!link) return false

  let url = link.url

  // invalid link, but still detected by linkify somehow;
  // need to check to prevent infinite loop below
  if (url.length <= proto.length) return false

  // disallow '*' at the end of the link (conflicts with emphasis)
  url = url.replace(/\*+$/, '')

  const fullUrl = state.md.normalizeLink(url)
  if (!state.md.validateLink(fullUrl)) return false

  if (!silent) {
    state.pending = state.pending.slice(0, -proto.length)

    const token_o = state.push('link_open', 'a', 1)
    token_o.attrs = [['href', fullUrl]]
    token_o.markup = 'linkify'
    token_o.info = 'auto'

    const token_t = state.push('text', '', 0)
    token_t.content = state.md.normalizeLinkText(url)

    const token_c = state.push('link_close', 'a', -1)
    token_c.markup = 'linkify'
    token_c.info = 'auto'
  }

  state.pos += url.length - proto.length
  return true
}

;// ../../node_modules/markdown-it/lib/rules_inline/newline.mjs
// Proceess '\n'



function newline (state, silent) {
  let pos = state.pos

  if (state.src.charCodeAt(pos) !== 0x0A/* \n */) { return false }

  const pmax = state.pending.length - 1
  const max = state.posMax

  // '  \n' -> hardbreak
  // Lookup in pending chars is bad practice! Don't copy to other rules!
  // Pending string is stored in concat mode, indexed lookups will cause
  // convertion to flat mode.
  if (!silent) {
    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
        // Find whitespaces tail of pending chars.
        let ws = pmax - 1
        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--

        state.pending = state.pending.slice(0, ws)
        state.push('hardbreak', 'br', 0)
      } else {
        state.pending = state.pending.slice(0, -1)
        state.push('softbreak', 'br', 0)
      }
    } else {
      state.push('softbreak', 'br', 0)
    }
  }

  pos++

  // skip heading spaces for next line
  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++ }

  state.pos = pos
  return true
}

;// ../../node_modules/markdown-it/lib/rules_inline/escape.mjs
// Process escaped chars and hardbreaks



const ESCAPED = []

for (let i = 0; i < 256; i++) { ESCAPED.push(0) }

'\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'
  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1 })

function rules_inline_escape_escape (state, silent) {
  let pos = state.pos
  const max = state.posMax

  if (state.src.charCodeAt(pos) !== 0x5C/* \ */) return false
  pos++

  // '\' at the end of the inline block
  if (pos >= max) return false

  let ch1 = state.src.charCodeAt(pos)

  if (ch1 === 0x0A) {
    if (!silent) {
      state.push('hardbreak', 'br', 0)
    }

    pos++
    // skip leading whitespaces from next line
    while (pos < max) {
      ch1 = state.src.charCodeAt(pos)
      if (!isSpace(ch1)) break
      pos++
    }

    state.pos = pos
    return true
  }

  let escapedStr = state.src[pos]

  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {
    const ch2 = state.src.charCodeAt(pos + 1)

    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {
      escapedStr += state.src[pos + 1]
      pos++
    }
  }

  const origStr = '\\' + escapedStr

  if (!silent) {
    const token = state.push('text_special', '', 0)

    if (ch1 < 256 && ESCAPED[ch1] !== 0) {
      token.content = escapedStr
    } else {
      token.content = origStr
    }

    token.markup = origStr
    token.info   = 'escape'
  }

  state.pos = pos + 1
  return true
}

;// ../../node_modules/markdown-it/lib/rules_inline/backticks.mjs
// Parse backticks

function backtick (state, silent) {
  let pos = state.pos
  const ch = state.src.charCodeAt(pos)

  if (ch !== 0x60/* ` */) { return false }

  const start = pos
  pos++
  const max = state.posMax

  // scan marker length
  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++ }

  const marker = state.src.slice(start, pos)
  const openerLength = marker.length

  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
    if (!silent) state.pending += marker
    state.pos += openerLength
    return true
  }

  let matchEnd = pos
  let matchStart

  // Nothing found in the cache, scan until the end of the line (or until marker is found)
  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
    matchEnd = matchStart + 1

    // scan marker length
    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++ }

    const closerLength = matchEnd - matchStart

    if (closerLength === openerLength) {
      // Found matching closer length.
      if (!silent) {
        const token = state.push('code_inline', 'code', 0)
        token.markup = marker
        token.content = state.src.slice(pos, matchStart)
          .replace(/\n/g, ' ')
          .replace(/^ (.+) $/, '$1')
      }
      state.pos = matchEnd
      return true
    }

    // Some different length found, put it in cache as upper limit of where closer can be found
    state.backticks[closerLength] = matchStart
  }

  // Scanned through the end, didn't find anything
  state.backticksScanned = true

  if (!silent) state.pending += marker
  state.pos += openerLength
  return true
}

;// ../../node_modules/markdown-it/lib/rules_inline/strikethrough.mjs
// ~~strike through~~
//

// Insert each marker as a separate text token, and add it to delimiter list
//
function strikethrough_tokenize (state, silent) {
  const start = state.pos
  const marker = state.src.charCodeAt(start)

  if (silent) { return false }

  if (marker !== 0x7E/* ~ */) { return false }

  const scanned = state.scanDelims(state.pos, true)
  let len = scanned.length
  const ch = String.fromCharCode(marker)

  if (len < 2) { return false }

  let token

  if (len % 2) {
    token         = state.push('text', '', 0)
    token.content = ch
    len--
  }

  for (let i = 0; i < len; i += 2) {
    token         = state.push('text', '', 0)
    token.content = ch + ch

    state.delimiters.push({
      marker,
      length: 0,     // disable "rule of 3" length checks meant for emphasis
      token: state.tokens.length - 1,
      end: -1,
      open: scanned.can_open,
      close: scanned.can_close
    })
  }

  state.pos += scanned.length

  return true
}

function postProcess (state, delimiters) {
  let token
  const loneMarkers = []
  const max = delimiters.length

  for (let i = 0; i < max; i++) {
    const startDelim = delimiters[i]

    if (startDelim.marker !== 0x7E/* ~ */) {
      continue
    }

    if (startDelim.end === -1) {
      continue
    }

    const endDelim = delimiters[startDelim.end]

    token         = state.tokens[startDelim.token]
    token.type    = 's_open'
    token.tag     = 's'
    token.nesting = 1
    token.markup  = '~~'
    token.content = ''

    token         = state.tokens[endDelim.token]
    token.type    = 's_close'
    token.tag     = 's'
    token.nesting = -1
    token.markup  = '~~'
    token.content = ''

    if (state.tokens[endDelim.token - 1].type === 'text' &&
        state.tokens[endDelim.token - 1].content === '~') {
      loneMarkers.push(endDelim.token - 1)
    }
  }

  // If a marker sequence has an odd number of characters, it's splitted
  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
  // start of the sequence.
  //
  // So, we have to move all those markers after subsequent s_close tags.
  //
  while (loneMarkers.length) {
    const i = loneMarkers.pop()
    let j = i + 1

    while (j < state.tokens.length && state.tokens[j].type === 's_close') {
      j++
    }

    j--

    if (i !== j) {
      token = state.tokens[j]
      state.tokens[j] = state.tokens[i]
      state.tokens[i] = token
    }
  }
}

// Walk through delimiter list and replace text tokens with tags
//
function strikethrough_postProcess (state) {
  const tokens_meta = state.tokens_meta
  const max = state.tokens_meta.length

  postProcess(state, state.delimiters)

  for (let curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      postProcess(state, tokens_meta[curr].delimiters)
    }
  }
}

/* harmony default export */ const strikethrough = ({
  tokenize: strikethrough_tokenize,
  postProcess: strikethrough_postProcess
});

;// ../../node_modules/markdown-it/lib/rules_inline/emphasis.mjs
// Process *this* and _that_
//

// Insert each marker as a separate text token, and add it to delimiter list
//
function emphasis_tokenize (state, silent) {
  const start = state.pos
  const marker = state.src.charCodeAt(start)

  if (silent) { return false }

  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false }

  const scanned = state.scanDelims(state.pos, marker === 0x2A)

  for (let i = 0; i < scanned.length; i++) {
    const token = state.push('text', '', 0)
    token.content = String.fromCharCode(marker)

    state.delimiters.push({
      // Char code of the starting marker (number).
      //
      marker,

      // Total length of these series of delimiters.
      //
      length: scanned.length,

      // A position of the token this delimiter corresponds to.
      //
      token: state.tokens.length - 1,

      // If this delimiter is matched as a valid opener, `end` will be
      // equal to its position, otherwise it's `-1`.
      //
      end: -1,

      // Boolean flags that determine if this delimiter could open or close
      // an emphasis.
      //
      open: scanned.can_open,
      close: scanned.can_close
    })
  }

  state.pos += scanned.length

  return true
}

function emphasis_postProcess (state, delimiters) {
  const max = delimiters.length

  for (let i = max - 1; i >= 0; i--) {
    const startDelim = delimiters[i]

    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {
      continue
    }

    // Process only opening markers
    if (startDelim.end === -1) {
      continue
    }

    const endDelim = delimiters[startDelim.end]

    // If the previous delimiter has the same marker and is adjacent to this one,
    // merge those into one strong delimiter.
    //
    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`
    //
    const isStrong = i > 0 &&
               delimiters[i - 1].end === startDelim.end + 1 &&
               // check that first two markers match and adjacent
               delimiters[i - 1].marker === startDelim.marker &&
               delimiters[i - 1].token === startDelim.token - 1 &&
               // check that last two markers are adjacent (we can safely assume they match)
               delimiters[startDelim.end + 1].token === endDelim.token + 1

    const ch = String.fromCharCode(startDelim.marker)

    const token_o   = state.tokens[startDelim.token]
    token_o.type    = isStrong ? 'strong_open' : 'em_open'
    token_o.tag     = isStrong ? 'strong' : 'em'
    token_o.nesting = 1
    token_o.markup  = isStrong ? ch + ch : ch
    token_o.content = ''

    const token_c   = state.tokens[endDelim.token]
    token_c.type    = isStrong ? 'strong_close' : 'em_close'
    token_c.tag     = isStrong ? 'strong' : 'em'
    token_c.nesting = -1
    token_c.markup  = isStrong ? ch + ch : ch
    token_c.content = ''

    if (isStrong) {
      state.tokens[delimiters[i - 1].token].content = ''
      state.tokens[delimiters[startDelim.end + 1].token].content = ''
      i--
    }
  }
}

// Walk through delimiter list and replace text tokens with tags
//
function emphasis_post_process (state) {
  const tokens_meta = state.tokens_meta
  const max = state.tokens_meta.length

  emphasis_postProcess(state, state.delimiters)

  for (let curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      emphasis_postProcess(state, tokens_meta[curr].delimiters)
    }
  }
}

/* harmony default export */ const emphasis = ({
  tokenize: emphasis_tokenize,
  postProcess: emphasis_post_process
});

;// ../../node_modules/markdown-it/lib/rules_inline/link.mjs
// Process [link](<to> "stuff")



function link_link (state, silent) {
  let code, label, res, ref
  let href = ''
  let title = ''
  let start = state.pos
  let parseReference = true

  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false }

  const oldPos = state.pos
  const max = state.posMax
  const labelStart = state.pos + 1
  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true)

  // parser failed to find ']', so it's not a valid link
  if (labelEnd < 0) { return false }

  let pos = labelEnd + 1
  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
    //
    // Inline link
    //

    // might have found a valid shortcut link, disable reference parsing
    parseReference = false

    // [link](  <href>  "title"  )
    //        ^^ skipping these spaces
    pos++
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos)
      if (!isSpace(code) && code !== 0x0A) { break }
    }
    if (pos >= max) { return false }

    // [link](  <href>  "title"  )
    //          ^^^^^^ parsing link destination
    start = pos
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)
    if (res.ok) {
      href = state.md.normalizeLink(res.str)
      if (state.md.validateLink(href)) {
        pos = res.pos
      } else {
        href = ''
      }

      // [link](  <href>  "title"  )
      //                ^^ skipping these spaces
      start = pos
      for (; pos < max; pos++) {
        code = state.src.charCodeAt(pos)
        if (!isSpace(code) && code !== 0x0A) { break }
      }

      // [link](  <href>  "title"  )
      //                  ^^^^^^^ parsing link title
      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)
      if (pos < max && start !== pos && res.ok) {
        title = res.str
        pos = res.pos

        // [link](  <href>  "title"  )
        //                         ^^ skipping these spaces
        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos)
          if (!isSpace(code) && code !== 0x0A) { break }
        }
      }
    }

    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
      // parsing a valid shortcut link failed, fallback to reference
      parseReference = true
    }
    pos++
  }

  if (parseReference) {
    //
    // Link reference
    //
    if (typeof state.env.references === 'undefined') { return false }

    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
      start = pos + 1
      pos = state.md.helpers.parseLinkLabel(state, pos)
      if (pos >= 0) {
        label = state.src.slice(start, pos++)
      } else {
        pos = labelEnd + 1
      }
    } else {
      pos = labelEnd + 1
    }

    // covers label === '' and label === undefined
    // (collapsed reference link and shortcut reference link respectively)
    if (!label) { label = state.src.slice(labelStart, labelEnd) }

    ref = state.env.references[normalizeReference(label)]
    if (!ref) {
      state.pos = oldPos
      return false
    }
    href = ref.href
    title = ref.title
  }

  //
  // We found the end of the link, and know for a fact it's a valid link;
  // so all that's left to do is to call tokenizer.
  //
  if (!silent) {
    state.pos = labelStart
    state.posMax = labelEnd

    const token_o = state.push('link_open', 'a', 1)
    const attrs = [['href', href]]
    token_o.attrs  = attrs
    if (title) {
      attrs.push(['title', title])
    }

    state.linkLevel++
    state.md.inline.tokenize(state)
    state.linkLevel--

    state.push('link_close', 'a', -1)
  }

  state.pos = pos
  state.posMax = max
  return true
}

;// ../../node_modules/markdown-it/lib/rules_inline/image.mjs
// Process ![image](<src> "title")



function image_image (state, silent) {
  let code, content, label, pos, ref, res, title, start
  let href = ''
  const oldPos = state.pos
  const max = state.posMax

  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false }
  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false }

  const labelStart = state.pos + 2
  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false)

  // parser failed to find ']', so it's not a valid link
  if (labelEnd < 0) { return false }

  pos = labelEnd + 1
  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
    //
    // Inline link
    //

    // [link](  <href>  "title"  )
    //        ^^ skipping these spaces
    pos++
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos)
      if (!isSpace(code) && code !== 0x0A) { break }
    }
    if (pos >= max) { return false }

    // [link](  <href>  "title"  )
    //          ^^^^^^ parsing link destination
    start = pos
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)
    if (res.ok) {
      href = state.md.normalizeLink(res.str)
      if (state.md.validateLink(href)) {
        pos = res.pos
      } else {
        href = ''
      }
    }

    // [link](  <href>  "title"  )
    //                ^^ skipping these spaces
    start = pos
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos)
      if (!isSpace(code) && code !== 0x0A) { break }
    }

    // [link](  <href>  "title"  )
    //                  ^^^^^^^ parsing link title
    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)
    if (pos < max && start !== pos && res.ok) {
      title = res.str
      pos = res.pos

      // [link](  <href>  "title"  )
      //                         ^^ skipping these spaces
      for (; pos < max; pos++) {
        code = state.src.charCodeAt(pos)
        if (!isSpace(code) && code !== 0x0A) { break }
      }
    } else {
      title = ''
    }

    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
      state.pos = oldPos
      return false
    }
    pos++
  } else {
    //
    // Link reference
    //
    if (typeof state.env.references === 'undefined') { return false }

    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
      start = pos + 1
      pos = state.md.helpers.parseLinkLabel(state, pos)
      if (pos >= 0) {
        label = state.src.slice(start, pos++)
      } else {
        pos = labelEnd + 1
      }
    } else {
      pos = labelEnd + 1
    }

    // covers label === '' and label === undefined
    // (collapsed reference link and shortcut reference link respectively)
    if (!label) { label = state.src.slice(labelStart, labelEnd) }

    ref = state.env.references[normalizeReference(label)]
    if (!ref) {
      state.pos = oldPos
      return false
    }
    href = ref.href
    title = ref.title
  }

  //
  // We found the end of the link, and know for a fact it's a valid link;
  // so all that's left to do is to call tokenizer.
  //
  if (!silent) {
    content = state.src.slice(labelStart, labelEnd)

    const tokens = []
    state.md.inline.parse(
      content,
      state.md,
      state.env,
      tokens
    )

    const token = state.push('image', 'img', 0)
    const attrs = [['src', href], ['alt', '']]
    token.attrs = attrs
    token.children = tokens
    token.content = content

    if (title) {
      attrs.push(['title', title])
    }
  }

  state.pos = pos
  state.posMax = max
  return true
}

;// ../../node_modules/markdown-it/lib/rules_inline/autolink.mjs
// Process autolinks '<protocol:...>'

/* eslint max-len:0 */
const EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/
/* eslint-disable-next-line no-control-regex */
const AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\x00-\x20]*)$/

function autolink (state, silent) {
  let pos = state.pos

  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }

  const start = state.pos
  const max = state.posMax

  for (;;) {
    if (++pos >= max) return false

    const ch = state.src.charCodeAt(pos)

    if (ch === 0x3C /* < */) return false
    if (ch === 0x3E /* > */) break
  }

  const url = state.src.slice(start + 1, pos)

  if (AUTOLINK_RE.test(url)) {
    const fullUrl = state.md.normalizeLink(url)
    if (!state.md.validateLink(fullUrl)) { return false }

    if (!silent) {
      const token_o   = state.push('link_open', 'a', 1)
      token_o.attrs   = [['href', fullUrl]]
      token_o.markup  = 'autolink'
      token_o.info    = 'auto'

      const token_t   = state.push('text', '', 0)
      token_t.content = state.md.normalizeLinkText(url)

      const token_c   = state.push('link_close', 'a', -1)
      token_c.markup  = 'autolink'
      token_c.info    = 'auto'
    }

    state.pos += url.length + 2
    return true
  }

  if (EMAIL_RE.test(url)) {
    const fullUrl = state.md.normalizeLink('mailto:' + url)
    if (!state.md.validateLink(fullUrl)) { return false }

    if (!silent) {
      const token_o   = state.push('link_open', 'a', 1)
      token_o.attrs   = [['href', fullUrl]]
      token_o.markup  = 'autolink'
      token_o.info    = 'auto'

      const token_t   = state.push('text', '', 0)
      token_t.content = state.md.normalizeLinkText(url)

      const token_c   = state.push('link_close', 'a', -1)
      token_c.markup  = 'autolink'
      token_c.info    = 'auto'
    }

    state.pos += url.length + 2
    return true
  }

  return false
}

;// ../../node_modules/markdown-it/lib/rules_inline/html_inline.mjs
// Process html tags



function html_inline_isLinkOpen (str) {
  return /^<a[>\s]/i.test(str)
}
function html_inline_isLinkClose (str) {
  return /^<\/a\s*>/i.test(str)
}

function isLetter (ch) {
  /* eslint no-bitwise:0 */
  const lc = ch | 0x20 // to lower case
  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */)
}

function html_inline (state, silent) {
  if (!state.md.options.html) { return false }

  // Check start
  const max = state.posMax
  const pos = state.pos
  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||
      pos + 2 >= max) {
    return false
  }

  // Quick fail on second char
  const ch = state.src.charCodeAt(pos + 1)
  if (ch !== 0x21/* ! */ &&
      ch !== 0x3F/* ? */ &&
      ch !== 0x2F/* / */ &&
      !isLetter(ch)) {
    return false
  }

  const match = state.src.slice(pos).match(HTML_TAG_RE)
  if (!match) { return false }

  if (!silent) {
    const token = state.push('html_inline', '', 0)
    token.content = match[0]

    if (html_inline_isLinkOpen(token.content))  state.linkLevel++
    if (html_inline_isLinkClose(token.content)) state.linkLevel--
  }
  state.pos += match[0].length
  return true
}

;// ../../node_modules/markdown-it/lib/rules_inline/entity.mjs
// Process html entity - &#123;, &#xAF;, &quot;, ...




const DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i
const NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i

function entity (state, silent) {
  const pos = state.pos
  const max = state.posMax

  if (state.src.charCodeAt(pos) !== 0x26/* & */) return false

  if (pos + 1 >= max) return false

  const ch = state.src.charCodeAt(pos + 1)

  if (ch === 0x23 /* # */) {
    const match = state.src.slice(pos).match(DIGITAL_RE)
    if (match) {
      if (!silent) {
        const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10)

        const token   = state.push('text_special', '', 0)
        token.content = isValidEntityCode(code) ? utils_fromCodePoint(code) : utils_fromCodePoint(0xFFFD)
        token.markup  = match[0]
        token.info    = 'entity'
      }
      state.pos += match[0].length
      return true
    }
  } else {
    const match = state.src.slice(pos).match(NAMED_RE)
    if (match) {
      const decoded = decode_decodeHTML(match[0])
      if (decoded !== match[0]) {
        if (!silent) {
          const token   = state.push('text_special', '', 0)
          token.content = decoded
          token.markup  = match[0]
          token.info    = 'entity'
        }
        state.pos += match[0].length
        return true
      }
    }
  }

  return false
}

;// ../../node_modules/markdown-it/lib/rules_inline/balance_pairs.mjs
// For each opening emphasis-like marker find a matching closing one
//

function processDelimiters (delimiters) {
  const openersBottom = {}
  const max = delimiters.length

  if (!max) return

  // headerIdx is the first delimiter of the current (where closer is) delimiter run
  let headerIdx = 0
  let lastTokenIdx = -2 // needs any value lower than -1
  const jumps = []

  for (let closerIdx = 0; closerIdx < max; closerIdx++) {
    const closer = delimiters[closerIdx]

    jumps.push(0)

    // markers belong to same delimiter run if:
    //  - they have adjacent tokens
    //  - AND markers are the same
    //
    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
      headerIdx = closerIdx
    }

    lastTokenIdx = closer.token

    // Length is only used for emphasis-specific "rule of 3",
    // if it's not defined (in strikethrough or 3rd party plugins),
    // we can default it to 0 to disable those checks.
    //
    closer.length = closer.length || 0

    if (!closer.close) continue

    // Previously calculated lower bounds (previous fails)
    // for each marker, each delimiter length modulo 3,
    // and for whether this closer can be an opener;
    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460
    /* eslint-disable-next-line no-prototype-builtins */
    if (!openersBottom.hasOwnProperty(closer.marker)) {
      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1]
    }

    const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)]

    let openerIdx = headerIdx - jumps[headerIdx] - 1

    let newMinOpenerIdx = openerIdx

    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
      const opener = delimiters[openerIdx]

      if (opener.marker !== closer.marker) continue

      if (opener.open && opener.end < 0) {
        let isOddMatch = false

        // from spec:
        //
        // If one of the delimiters can both open and close emphasis, then the
        // sum of the lengths of the delimiter runs containing the opening and
        // closing delimiters must not be a multiple of 3 unless both lengths
        // are multiples of 3.
        //
        if (opener.close || closer.open) {
          if ((opener.length + closer.length) % 3 === 0) {
            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
              isOddMatch = true
            }
          }
        }

        if (!isOddMatch) {
          // If previous delimiter cannot be an opener, we can safely skip
          // the entire sequence in future checks. This is required to make
          // sure algorithm has linear complexity (see *_*_*_*_*_... case).
          //
          const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open
            ? jumps[openerIdx - 1] + 1
            : 0

          jumps[closerIdx] = closerIdx - openerIdx + lastJump
          jumps[openerIdx] = lastJump

          closer.open  = false
          opener.end   = closerIdx
          opener.close = false
          newMinOpenerIdx = -1
          // treat next token as start of run,
          // it optimizes skips in **<...>**a**<...>** pathological case
          lastTokenIdx = -2
          break
        }
      }
    }

    if (newMinOpenerIdx !== -1) {
      // If match for this delimiter run failed, we want to set lower bound for
      // future lookups. This is required to make sure algorithm has linear
      // complexity.
      //
      // See details here:
      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442
      //
      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx
    }
  }
}

function link_pairs (state) {
  const tokens_meta = state.tokens_meta
  const max = state.tokens_meta.length

  processDelimiters(state.delimiters)

  for (let curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      processDelimiters(tokens_meta[curr].delimiters)
    }
  }
}

;// ../../node_modules/markdown-it/lib/rules_inline/fragments_join.mjs
// Clean up tokens after emphasis and strikethrough postprocessing:
// merge adjacent text nodes into one and re-calculate all token levels
//
// This is necessary because initially emphasis delimiter markers (*, _, ~)
// are treated as their own separate text tokens. Then emphasis rule either
// leaves them as text (needed to merge with adjacent text) or turns them
// into opening/closing tags (which messes up levels inside).
//

function fragments_join (state) {
  let curr, last
  let level = 0
  const tokens = state.tokens
  const max = state.tokens.length

  for (curr = last = 0; curr < max; curr++) {
    // re-calculate levels after emphasis/strikethrough turns some text nodes
    // into opening/closing tags
    if (tokens[curr].nesting < 0) level-- // closing tag
    tokens[curr].level = level
    if (tokens[curr].nesting > 0) level++ // opening tag

    if (tokens[curr].type === 'text' &&
        curr + 1 < max &&
        tokens[curr + 1].type === 'text') {
      // collapse two adjacent text nodes
      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content
    } else {
      if (curr !== last) { tokens[last] = tokens[curr] }

      last++
    }
  }

  if (curr !== last) {
    tokens.length = last
  }
}

;// ../../node_modules/markdown-it/lib/parser_inline.mjs
/** internal
 * class ParserInline
 *
 * Tokenizes paragraph content.
 **/




















// Parser rules

const parser_inline_rules = [
  ['text',            text_text],
  ['linkify',         linkify_linkify],
  ['newline',         newline],
  ['escape',          rules_inline_escape_escape],
  ['backticks',       backtick],
  ['strikethrough',   strikethrough.tokenize],
  ['emphasis',        emphasis.tokenize],
  ['link',            link_link],
  ['image',           image_image],
  ['autolink',        autolink],
  ['html_inline',     html_inline],
  ['entity',          entity]
]

// `rule2` ruleset was created specifically for emphasis/strikethrough
// post-processing and may be changed in the future.
//
// Don't use this for anything except pairs (plugins working with `balance_pairs`).
//
const _rules2 = [
  ['balance_pairs',   link_pairs],
  ['strikethrough',   strikethrough.postProcess],
  ['emphasis',        emphasis.postProcess],
  // rules for pairs separate '**' into its own text tokens, which may be left unused,
  // rule below merges unused segments back with the rest of the text
  ['fragments_join',  fragments_join]
]

/**
 * new ParserInline()
 **/
function ParserInline () {
  /**
   * ParserInline#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of inline rules.
   **/
  this.ruler = new ruler()

  for (let i = 0; i < parser_inline_rules.length; i++) {
    this.ruler.push(parser_inline_rules[i][0], parser_inline_rules[i][1])
  }

  /**
   * ParserInline#ruler2 -> Ruler
   *
   * [[Ruler]] instance. Second ruler used for post-processing
   * (e.g. in emphasis-like rules).
   **/
  this.ruler2 = new ruler()

  for (let i = 0; i < _rules2.length; i++) {
    this.ruler2.push(_rules2[i][0], _rules2[i][1])
  }
}

// Skip single token by running all rules in validation mode;
// returns `true` if any rule reported success
//
ParserInline.prototype.skipToken = function (state) {
  const pos = state.pos
  const rules = this.ruler.getRules('')
  const len = rules.length
  const maxNesting = state.md.options.maxNesting
  const cache = state.cache

  if (typeof cache[pos] !== 'undefined') {
    state.pos = cache[pos]
    return
  }

  let ok = false

  if (state.level < maxNesting) {
    for (let i = 0; i < len; i++) {
      // Increment state.level and decrement it later to limit recursion.
      // It's harmless to do here, because no tokens are created. But ideally,
      // we'd need a separate private state variable for this purpose.
      //
      state.level++
      ok = rules[i](state, true)
      state.level--

      if (ok) {
        if (pos >= state.pos) { throw new Error("inline rule didn't increment state.pos") }
        break
      }
    }
  } else {
    // Too much nesting, just skip until the end of the paragraph.
    //
    // NOTE: this will cause links to behave incorrectly in the following case,
    //       when an amount of `[` is exactly equal to `maxNesting + 1`:
    //
    //       [[[[[[[[[[[[[[[[[[[[[foo]()
    //
    // TODO: remove this workaround when CM standard will allow nested links
    //       (we can replace it by preventing links from being parsed in
    //       validation mode)
    //
    state.pos = state.posMax
  }

  if (!ok) { state.pos++ }
  cache[pos] = state.pos
}

// Generate tokens for input range
//
ParserInline.prototype.tokenize = function (state) {
  const rules = this.ruler.getRules('')
  const len = rules.length
  const end = state.posMax
  const maxNesting = state.md.options.maxNesting

  while (state.pos < end) {
    // Try all possible rules.
    // On success, rule should:
    //
    // - update `state.pos`
    // - update `state.tokens`
    // - return true
    const prevPos = state.pos
    let ok = false

    if (state.level < maxNesting) {
      for (let i = 0; i < len; i++) {
        ok = rules[i](state, false)
        if (ok) {
          if (prevPos >= state.pos) { throw new Error("inline rule didn't increment state.pos") }
          break
        }
      }
    }

    if (ok) {
      if (state.pos >= end) { break }
      continue
    }

    state.pending += state.src[state.pos++]
  }

  if (state.pending) {
    state.pushPending()
  }
}

/**
 * ParserInline.parse(str, md, env, outTokens)
 *
 * Process input string and push inline tokens into `outTokens`
 **/
ParserInline.prototype.parse = function (str, md, env, outTokens) {
  const state = new this.State(str, md, env, outTokens)

  this.tokenize(state)

  const rules = this.ruler2.getRules('')
  const len = rules.length

  for (let i = 0; i < len; i++) {
    rules[i](state)
  }
}

ParserInline.prototype.State = state_inline

/* harmony default export */ const parser_inline = (ParserInline);

;// ../../node_modules/linkify-it/lib/re.mjs


/* harmony default export */ function lib_re(opts) {
  const re = {}
  opts = opts || {}

  re.src_Any = Any_regex.source
  re.src_Cc = Cc_regex.source
  re.src_Z = Z_regex.source
  re.src_P = regex.source

  // \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)
  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|')

  // \p{\Z\Cc} (white spaces + control)
  re.src_ZCc = [re.src_Z, re.src_Cc].join('|')

  // Experimental. List of chars, completely prohibited in links
  // because can separate it from other part of text
  const text_separators = '[><\uff5c]'

  // All possible word characters (everything without punctuation, spaces & controls)
  // Defined via punctuation & spaces to save space
  // Should be something like \p{\L\N\S\M} (\w but without `_`)
  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')'
  // The same as abothe but without [0-9]
  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';

  re.src_ip4 =

    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'

  // Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.
  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\[\\]()]).)+@)?'

  re.src_port =

    '(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?'

  re.src_host_terminator =

    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +
    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\d|\\.-|\\.(?!$|' + re.src_ZPCc + '))'

  re.src_path =

    '(?:' +
      '[/?#]' +
        '(?:' +
          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\]{}.,"\'?!\\-;]).|' +
          '\\[(?:(?!' + re.src_ZCc + '|\\]).)*\\]|' +
          '\\((?:(?!' + re.src_ZCc + '|[)]).)*\\)|' +
          '\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\}|' +
          '\\"(?:(?!' + re.src_ZCc + '|["]).)+\\"|' +
          "\\'(?:(?!" + re.src_ZCc + "|[']).)+\\'|" +

          // allow `I'm_king` if no pair found
          "\\'(?=" + re.src_pseudo_letter + '|[-])|' +

          // google has many dots in "google search" links (#66, #81).
          // github has ... in commit range links,
          // Restrict to
          // - english
          // - percent-encoded
          // - parts of file path
          // - params separator
          // until more examples found.
          '\\.{2,}[a-zA-Z0-9%/&]|' +

          '\\.(?!' + re.src_ZCc + '|[.]|$)|' +
          (opts['---']
            ? '\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate
            : '\\-+|'
          ) +
          // allow `,,,` in paths
          ',(?!' + re.src_ZCc + '|$)|' +

          // allow `;` if not followed by space-like char
          ';(?!' + re.src_ZCc + '|$)|' +

          // allow `!!!` in paths, but not at the end
          '\\!+(?!' + re.src_ZCc + '|[!]|$)|' +

          '\\?(?!' + re.src_ZCc + '|[?]|$)' +
        ')+' +
      '|\\/' +
    ')?'

  // Allow anything in markdown spec, forbid quote (") at the first position
  // because emails enclosed in quotes are far more common
  re.src_email_name =

    '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*'

  re.src_xn =

    'xn--[a-z0-9\\-]{1,59}'

  // More to read about domain names
  // http://serverfault.com/questions/638260/

  re.src_domain_root =

    // Allow letters & digits (http://test1)
    '(?:' +
      re.src_xn +
      '|' +
      re.src_pseudo_letter + '{1,63}' +
    ')'

  re.src_domain =

    '(?:' +
      re.src_xn +
      '|' +
      '(?:' + re.src_pseudo_letter + ')' +
      '|' +
      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +
    ')'

  re.src_host =

    '(?:' +
    // Don't need IP check, because digits are already allowed in normal domain names
    //   src_ip4 +
    // '|' +
      '(?:(?:(?:' + re.src_domain + ')\\.)*' + re.src_domain/* _root */ + ')' +
    ')'

  re.tpl_host_fuzzy =

    '(?:' +
      re.src_ip4 +
    '|' +
      '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))' +
    ')'

  re.tpl_host_no_ip_fuzzy =

    '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))'

  re.src_host_strict =

    re.src_host + re.src_host_terminator

  re.tpl_host_fuzzy_strict =

    re.tpl_host_fuzzy + re.src_host_terminator

  re.src_host_port_strict =

    re.src_host + re.src_port + re.src_host_terminator

  re.tpl_host_port_fuzzy_strict =

    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator

  re.tpl_host_port_no_ip_fuzzy_strict =

    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator

  //
  // Main rules
  //

  // Rude test fuzzy links by host, for quick deny
  re.tpl_host_fuzzy_test =

    'localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))'

  re.tpl_email_fuzzy =

      '(^|' + text_separators + '|"|\\(|' + re.src_ZCc + ')' +
      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')'

  re.tpl_link_fuzzy =
      // Fuzzy link can't be prepended with .:/\- and non punctuation.
      // but can start with > (markdown blockquote)
      '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
      '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')'

  re.tpl_link_no_ip_fuzzy =
      // Fuzzy link can't be prepended with .:/\- and non punctuation.
      // but can start with > (markdown blockquote)
      '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
      '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')'

  return re
}

;// ../../node_modules/linkify-it/index.mjs


//
// Helpers
//

// Merge objects
//
function linkify_it_assign (obj /* from1, from2, from3, ... */) {
  const sources = Array.prototype.slice.call(arguments, 1)

  sources.forEach(function (source) {
    if (!source) { return }

    Object.keys(source).forEach(function (key) {
      obj[key] = source[key]
    })
  })

  return obj
}

function linkify_it_class (obj) { return Object.prototype.toString.call(obj) }
function linkify_it_isString (obj) { return linkify_it_class(obj) === '[object String]' }
function isObject (obj) { return linkify_it_class(obj) === '[object Object]' }
function isRegExp (obj) { return linkify_it_class(obj) === '[object RegExp]' }
function isFunction (obj) { return linkify_it_class(obj) === '[object Function]' }

function linkify_it_escapeRE (str) { return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&') }

//

const defaultOptions = {
  fuzzyLink: true,
  fuzzyEmail: true,
  fuzzyIP: false
}

function isOptionsObj (obj) {
  return Object.keys(obj || {}).reduce(function (acc, k) {
    /* eslint-disable-next-line no-prototype-builtins */
    return acc || defaultOptions.hasOwnProperty(k)
  }, false)
}

const defaultSchemas = {
  'http:': {
    validate: function (text, pos, self) {
      const tail = text.slice(pos)

      if (!self.re.http) {
        // compile lazily, because "host"-containing variables can change on tlds update.
        self.re.http = new RegExp(
          '^\\/\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'
        )
      }
      if (self.re.http.test(tail)) {
        return tail.match(self.re.http)[0].length
      }
      return 0
    }
  },
  'https:': 'http:',
  'ftp:': 'http:',
  '//': {
    validate: function (text, pos, self) {
      const tail = text.slice(pos)

      if (!self.re.no_http) {
      // compile lazily, because "host"-containing variables can change on tlds update.
        self.re.no_http = new RegExp(
          '^' +
          self.re.src_auth +
          // Don't allow single-level domains, because of false positives like '//test'
          // with code comments
          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\.)+' + self.re.src_domain_root + ')' +
          self.re.src_port +
          self.re.src_host_terminator +
          self.re.src_path,

          'i'
        )
      }

      if (self.re.no_http.test(tail)) {
        // should not be `://` & `///`, that protects from errors in protocol name
        if (pos >= 3 && text[pos - 3] === ':') { return 0 }
        if (pos >= 3 && text[pos - 3] === '/') { return 0 }
        return tail.match(self.re.no_http)[0].length
      }
      return 0
    }
  },
  'mailto:': {
    validate: function (text, pos, self) {
      const tail = text.slice(pos)

      if (!self.re.mailto) {
        self.re.mailto = new RegExp(
          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'
        )
      }
      if (self.re.mailto.test(tail)) {
        return tail.match(self.re.mailto)[0].length
      }
      return 0
    }
  }
}

// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)
/* eslint-disable-next-line max-len */
const tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]'

// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead
const tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|')

function resetScanCache (self) {
  self.__index__ = -1
  self.__text_cache__ = ''
}

function createValidator (re) {
  return function (text, pos) {
    const tail = text.slice(pos)

    if (re.test(tail)) {
      return tail.match(re)[0].length
    }
    return 0
  }
}

function createNormalizer () {
  return function (match, self) {
    self.normalize(match)
  }
}

// Schemas compiler. Build regexps.
//
function compile (self) {
  // Load & clone RE patterns.
  const re = self.re = lib_re(self.__opts__)

  // Define dynamic patterns
  const tlds = self.__tlds__.slice()

  self.onCompile()

  if (!self.__tlds_replaced__) {
    tlds.push(tlds_2ch_src_re)
  }
  tlds.push(re.src_xn)

  re.src_tlds = tlds.join('|')

  function untpl (tpl) { return tpl.replace('%TLDS%', re.src_tlds) }

  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i')
  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i')
  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i')
  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i')

  //
  // Compile each schema
  //

  const aliases = []

  self.__compiled__ = {} // Reset compiled data

  function schemaError (name, val) {
    throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val)
  }

  Object.keys(self.__schemas__).forEach(function (name) {
    const val = self.__schemas__[name]

    // skip disabled methods
    if (val === null) { return }

    const compiled = { validate: null, link: null }

    self.__compiled__[name] = compiled

    if (isObject(val)) {
      if (isRegExp(val.validate)) {
        compiled.validate = createValidator(val.validate)
      } else if (isFunction(val.validate)) {
        compiled.validate = val.validate
      } else {
        schemaError(name, val)
      }

      if (isFunction(val.normalize)) {
        compiled.normalize = val.normalize
      } else if (!val.normalize) {
        compiled.normalize = createNormalizer()
      } else {
        schemaError(name, val)
      }

      return
    }

    if (linkify_it_isString(val)) {
      aliases.push(name)
      return
    }

    schemaError(name, val)
  })

  //
  // Compile postponed aliases
  //

  aliases.forEach(function (alias) {
    if (!self.__compiled__[self.__schemas__[alias]]) {
      // Silently fail on missed schemas to avoid errons on disable.
      // schemaError(alias, self.__schemas__[alias]);
      return
    }

    self.__compiled__[alias].validate =
      self.__compiled__[self.__schemas__[alias]].validate
    self.__compiled__[alias].normalize =
      self.__compiled__[self.__schemas__[alias]].normalize
  })

  //
  // Fake record for guessed links
  //
  self.__compiled__[''] = { validate: null, normalize: createNormalizer() }

  //
  // Build schema condition
  //
  const slist = Object.keys(self.__compiled__)
    .filter(function (name) {
      // Filter disabled & fake schemas
      return name.length > 0 && self.__compiled__[name]
    })
    .map(linkify_it_escapeRE)
    .join('|')
  // (?!_) cause 1.5x slowdown
  self.re.schema_test = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i')
  self.re.schema_search = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig')
  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i')

  self.re.pretest = RegExp(
    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',
    'i'
  )

  //
  // Cleanup
  //

  resetScanCache(self)
}

/**
 * class Match
 *
 * Match result. Single element of array, returned by [[LinkifyIt#match]]
 **/
function Match (self, shift) {
  const start = self.__index__
  const end = self.__last_index__
  const text = self.__text_cache__.slice(start, end)

  /**
   * Match#schema -> String
   *
   * Prefix (protocol) for matched string.
   **/
  this.schema = self.__schema__.toLowerCase()
  /**
   * Match#index -> Number
   *
   * First position of matched string.
   **/
  this.index = start + shift
  /**
   * Match#lastIndex -> Number
   *
   * Next position after matched string.
   **/
  this.lastIndex = end + shift
  /**
   * Match#raw -> String
   *
   * Matched string.
   **/
  this.raw = text
  /**
   * Match#text -> String
   *
   * Notmalized text of matched string.
   **/
  this.text = text
  /**
   * Match#url -> String
   *
   * Normalized url of matched string.
   **/
  this.url = text
}

function createMatch (self, shift) {
  const match = new Match(self, shift)

  self.__compiled__[match.schema].normalize(match, self)

  return match
}

/**
 * class LinkifyIt
 **/

/**
 * new LinkifyIt(schemas, options)
 * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Creates new linkifier instance with optional additional schemas.
 * Can be called without `new` keyword for convenience.
 *
 * By default understands:
 *
 * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
 * - "fuzzy" links and emails (example.com, foo@bar.com).
 *
 * `schemas` is an object, where each key/value describes protocol/rule:
 *
 * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
 *   for example). `linkify-it` makes shure that prefix is not preceeded with
 *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
 * - __value__ - rule to check tail after link prefix
 *   - _String_ - just alias to existing rule
 *   - _Object_
 *     - _validate_ - validator function (should return matched length on success),
 *       or `RegExp`.
 *     - _normalize_ - optional function to normalize text & url of matched result
 *       (for example, for @twitter mentions).
 *
 * `options`:
 *
 * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
 * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
 *   like version numbers. Default `false`.
 * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
 *
 **/
function LinkifyIt (schemas, options) {
  if (!(this instanceof LinkifyIt)) {
    return new LinkifyIt(schemas, options)
  }

  if (!options) {
    if (isOptionsObj(schemas)) {
      options = schemas
      schemas = {}
    }
  }

  this.__opts__ = linkify_it_assign({}, defaultOptions, options)

  // Cache last tested result. Used to skip repeating steps on next `match` call.
  this.__index__ = -1
  this.__last_index__ = -1 // Next scan position
  this.__schema__ = ''
  this.__text_cache__ = ''

  this.__schemas__ = linkify_it_assign({}, defaultSchemas, schemas)
  this.__compiled__ = {}

  this.__tlds__ = tlds_default
  this.__tlds_replaced__ = false

  this.re = {}

  compile(this)
}

/** chainable
 * LinkifyIt#add(schema, definition)
 * - schema (String): rule name (fixed pattern prefix)
 * - definition (String|RegExp|Object): schema definition
 *
 * Add new rule definition. See constructor description for details.
 **/
LinkifyIt.prototype.add = function add (schema, definition) {
  this.__schemas__[schema] = definition
  compile(this)
  return this
}

/** chainable
 * LinkifyIt#set(options)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Set recognition options for links without schema.
 **/
LinkifyIt.prototype.set = function set (options) {
  this.__opts__ = linkify_it_assign(this.__opts__, options)
  return this
}

/**
 * LinkifyIt#test(text) -> Boolean
 *
 * Searches linkifiable pattern and returns `true` on success or `false` on fail.
 **/
LinkifyIt.prototype.test = function test (text) {
  // Reset scan cache
  this.__text_cache__ = text
  this.__index__ = -1

  if (!text.length) { return false }

  let m, ml, me, len, shift, next, re, tld_pos, at_pos

  // try to scan for link with schema - that's the most simple rule
  if (this.re.schema_test.test(text)) {
    re = this.re.schema_search
    re.lastIndex = 0
    while ((m = re.exec(text)) !== null) {
      len = this.testSchemaAt(text, m[2], re.lastIndex)
      if (len) {
        this.__schema__ = m[2]
        this.__index__ = m.index + m[1].length
        this.__last_index__ = m.index + m[0].length + len
        break
      }
    }
  }

  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {
    // guess schemaless links
    tld_pos = text.search(this.re.host_fuzzy_test)
    if (tld_pos >= 0) {
      // if tld is located after found link - no need to check fuzzy pattern
      if (this.__index__ < 0 || tld_pos < this.__index__) {
        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
          shift = ml.index + ml[1].length

          if (this.__index__ < 0 || shift < this.__index__) {
            this.__schema__ = ''
            this.__index__ = shift
            this.__last_index__ = ml.index + ml[0].length
          }
        }
      }
    }
  }

  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {
    // guess schemaless emails
    at_pos = text.indexOf('@')
    if (at_pos >= 0) {
      // We can't skip this check, because this cases are possible:
      // 192.168.1.1@gmail.com, my.in@example.com
      if ((me = text.match(this.re.email_fuzzy)) !== null) {
        shift = me.index + me[1].length
        next = me.index + me[0].length

        if (this.__index__ < 0 || shift < this.__index__ ||
            (shift === this.__index__ && next > this.__last_index__)) {
          this.__schema__ = 'mailto:'
          this.__index__ = shift
          this.__last_index__ = next
        }
      }
    }
  }

  return this.__index__ >= 0
}

/**
 * LinkifyIt#pretest(text) -> Boolean
 *
 * Very quick check, that can give false positives. Returns true if link MAY BE
 * can exists. Can be used for speed optimization, when you need to check that
 * link NOT exists.
 **/
LinkifyIt.prototype.pretest = function pretest (text) {
  return this.re.pretest.test(text)
}

/**
 * LinkifyIt#testSchemaAt(text, name, position) -> Number
 * - text (String): text to scan
 * - name (String): rule (schema) name
 * - position (Number): text offset to check from
 *
 * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
 * at given position. Returns length of found pattern (0 on fail).
 **/
LinkifyIt.prototype.testSchemaAt = function testSchemaAt (text, schema, pos) {
  // If not supported schema check requested - terminate
  if (!this.__compiled__[schema.toLowerCase()]) {
    return 0
  }
  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this)
}

/**
 * LinkifyIt#match(text) -> Array|null
 *
 * Returns array of found link descriptions or `null` on fail. We strongly
 * recommend to use [[LinkifyIt#test]] first, for best speed.
 *
 * ##### Result match description
 *
 * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
 *   protocol-neutral  links.
 * - __index__ - offset of matched text
 * - __lastIndex__ - index of next char after mathch end
 * - __raw__ - matched text
 * - __text__ - normalized text
 * - __url__ - link, generated from matched text
 **/
LinkifyIt.prototype.match = function match (text) {
  const result = []
  let shift = 0

  // Try to take previous element from cache, if .test() called before
  if (this.__index__ >= 0 && this.__text_cache__ === text) {
    result.push(createMatch(this, shift))
    shift = this.__last_index__
  }

  // Cut head if cache was used
  let tail = shift ? text.slice(shift) : text

  // Scan string until end reached
  while (this.test(tail)) {
    result.push(createMatch(this, shift))

    tail = tail.slice(this.__last_index__)
    shift += this.__last_index__
  }

  if (result.length) {
    return result
  }

  return null
}

/**
 * LinkifyIt#matchAtStart(text) -> Match|null
 *
 * Returns fully-formed (not fuzzy) link if it starts at the beginning
 * of the string, and null otherwise.
 **/
LinkifyIt.prototype.matchAtStart = function matchAtStart (text) {
  // Reset scan cache
  this.__text_cache__ = text
  this.__index__ = -1

  if (!text.length) return null

  const m = this.re.schema_at_start.exec(text)
  if (!m) return null

  const len = this.testSchemaAt(text, m[2], m[0].length)
  if (!len) return null

  this.__schema__ = m[2]
  this.__index__ = m.index + m[1].length
  this.__last_index__ = m.index + m[0].length + len

  return createMatch(this, 0)
}

/** chainable
 * LinkifyIt#tlds(list [, keepOld]) -> this
 * - list (Array): list of tlds
 * - keepOld (Boolean): merge with current list if `true` (`false` by default)
 *
 * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
 * to avoid false positives. By default this algorythm used:
 *
 * - hostname with any 2-letter root zones are ok.
 * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
 *   are ok.
 * - encoded (`xn--...`) root zones are ok.
 *
 * If list is replaced, then exact match for 2-chars root zones will be checked.
 **/
LinkifyIt.prototype.tlds = function tlds (list, keepOld) {
  list = Array.isArray(list) ? list : [list]

  if (!keepOld) {
    this.__tlds__ = list.slice()
    this.__tlds_replaced__ = true
    compile(this)
    return this
  }

  this.__tlds__ = this.__tlds__.concat(list)
    .sort()
    .filter(function (el, idx, arr) {
      return el !== arr[idx - 1]
    })
    .reverse()

  compile(this)
  return this
}

/**
 * LinkifyIt#normalize(match)
 *
 * Default normalizer (if schema does not define it's own).
 **/
LinkifyIt.prototype.normalize = function normalize (match) {
  // Do minimal possible changes by default. Need to collect feedback prior
  // to move forward https://github.com/markdown-it/linkify-it/issues/1

  if (!match.schema) { match.url = 'http://' + match.url }

  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {
    match.url = 'mailto:' + match.url
  }
}

/**
 * LinkifyIt#onCompile()
 *
 * Override to modify basic RegExp-s.
 **/
LinkifyIt.prototype.onCompile = function onCompile () {
}

/* harmony default export */ const linkify_it = (LinkifyIt);

;// ../../node_modules/punycode.js/punycode.es6.js


/** Highest positive signed 32-bit float value */
const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */
const base = 36;
const tMin = 1;
const tMax = 26;
const skew = 38;
const damp = 700;
const initialBias = 72;
const initialN = 128; // 0x80
const delimiter = '-'; // '\x2D'

/** Regular expressions */
const regexPunycode = /^xn--/;
const regexNonASCII = /[^\0-\x7F]/; // Note: U+007F DEL is excluded too.
const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

/** Error messages */
const errors = {
	'overflow': 'Overflow: input needs wider integers to process',
	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
	'invalid-input': 'Invalid input'
};

/** Convenience shortcuts */
const baseMinusTMin = base - tMin;
const floor = Math.floor;
const stringFromCharCode = String.fromCharCode;

/*--------------------------------------------------------------------------*/

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */
function error(type) {
	throw new RangeError(errors[type]);
}

/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */
function map(array, callback) {
	const result = [];
	let length = array.length;
	while (length--) {
		result[length] = callback(array[length]);
	}
	return result;
}

/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {String} A new string of characters returned by the callback
 * function.
 */
function mapDomain(domain, callback) {
	const parts = domain.split('@');
	let result = '';
	if (parts.length > 1) {
		// In email addresses, only the domain name should be punycoded. Leave
		// the local part (i.e. everything up to `@`) intact.
		result = parts[0] + '@';
		domain = parts[1];
	}
	// Avoid `split(regex)` for IE8 compatibility. See #17.
	domain = domain.replace(regexSeparators, '\x2E');
	const labels = domain.split('.');
	const encoded = map(labels, callback).join('.');
	return result + encoded;
}

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */
function ucs2decode(string) {
	const output = [];
	let counter = 0;
	const length = string.length;
	while (counter < length) {
		const value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// It's a high surrogate, and there is a next character.
			const extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// It's an unmatched surrogate; only append this code unit, in case the
				// next code unit is the high surrogate of a surrogate pair.
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
}

/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */
const ucs2encode = codePoints => String.fromCodePoint(...codePoints);

/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */
const basicToDigit = function(codePoint) {
	if (codePoint >= 0x30 && codePoint < 0x3A) {
		return 26 + (codePoint - 0x30);
	}
	if (codePoint >= 0x41 && codePoint < 0x5B) {
		return codePoint - 0x41;
	}
	if (codePoint >= 0x61 && codePoint < 0x7B) {
		return codePoint - 0x61;
	}
	return base;
};

/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */
const digitToBasic = function(digit, flag) {
	//  0..25 map to ASCII a..z or A..Z
	// 26..35 map to ASCII 0..9
	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */
const adapt = function(delta, numPoints, firstTime) {
	let k = 0;
	delta = firstTime ? floor(delta / damp) : delta >> 1;
	delta += floor(delta / numPoints);
	for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
		delta = floor(delta / baseMinusTMin);
	}
	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
 * symbols.
 * @memberOf punycode
 * @param {String} input The Punycode string of ASCII-only symbols.
 * @returns {String} The resulting string of Unicode symbols.
 */
const punycode_es6_decode = function(input) {
	// Don't use UCS-2.
	const output = [];
	const inputLength = input.length;
	let i = 0;
	let n = initialN;
	let bias = initialBias;

	// Handle the basic code points: let `basic` be the number of input code
	// points before the last delimiter, or `0` if there is none, then copy
	// the first basic code points to the output.

	let basic = input.lastIndexOf(delimiter);
	if (basic < 0) {
		basic = 0;
	}

	for (let j = 0; j < basic; ++j) {
		// if it's not a basic code point
		if (input.charCodeAt(j) >= 0x80) {
			error('not-basic');
		}
		output.push(input.charCodeAt(j));
	}

	// Main decoding loop: start just after the last delimiter if any basic code
	// points were copied; start at the beginning otherwise.

	for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

		// `index` is the index of the next character to be consumed.
		// Decode a generalized variable-length integer into `delta`,
		// which gets added to `i`. The overflow checking is easier
		// if we increase `i` as we go, then subtract off its starting
		// value at the end to obtain `delta`.
		const oldi = i;
		for (let w = 1, k = base; /* no condition */; k += base) {

			if (index >= inputLength) {
				error('invalid-input');
			}

			const digit = basicToDigit(input.charCodeAt(index++));

			if (digit >= base) {
				error('invalid-input');
			}
			if (digit > floor((maxInt - i) / w)) {
				error('overflow');
			}

			i += digit * w;
			const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

			if (digit < t) {
				break;
			}

			const baseMinusT = base - t;
			if (w > floor(maxInt / baseMinusT)) {
				error('overflow');
			}

			w *= baseMinusT;

		}

		const out = output.length + 1;
		bias = adapt(i - oldi, out, oldi == 0);

		// `i` was supposed to wrap around from `out` to `0`,
		// incrementing `n` each time, so we'll fix that now:
		if (floor(i / out) > maxInt - n) {
			error('overflow');
		}

		n += floor(i / out);
		i %= out;

		// Insert `n` at position `i` of the output.
		output.splice(i++, 0, n);

	}

	return String.fromCodePoint(...output);
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */
const punycode_es6_encode = function(input) {
	const output = [];

	// Convert the input in UCS-2 to an array of Unicode code points.
	input = ucs2decode(input);

	// Cache the length.
	const inputLength = input.length;

	// Initialize the state.
	let n = initialN;
	let delta = 0;
	let bias = initialBias;

	// Handle the basic code points.
	for (const currentValue of input) {
		if (currentValue < 0x80) {
			output.push(stringFromCharCode(currentValue));
		}
	}

	const basicLength = output.length;
	let handledCPCount = basicLength;

	// `handledCPCount` is the number of code points that have been handled;
	// `basicLength` is the number of basic code points.

	// Finish the basic string with a delimiter unless it's empty.
	if (basicLength) {
		output.push(delimiter);
	}

	// Main encoding loop:
	while (handledCPCount < inputLength) {

		// All non-basic code points < n have been handled already. Find the next
		// larger one:
		let m = maxInt;
		for (const currentValue of input) {
			if (currentValue >= n && currentValue < m) {
				m = currentValue;
			}
		}

		// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
		// but guard against overflow.
		const handledCPCountPlusOne = handledCPCount + 1;
		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
			error('overflow');
		}

		delta += (m - n) * handledCPCountPlusOne;
		n = m;

		for (const currentValue of input) {
			if (currentValue < n && ++delta > maxInt) {
				error('overflow');
			}
			if (currentValue === n) {
				// Represent delta as a generalized variable-length integer.
				let q = delta;
				for (let k = base; /* no condition */; k += base) {
					const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
					if (q < t) {
						break;
					}
					const qMinusT = q - t;
					const baseMinusT = base - t;
					output.push(
						stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
					);
					q = floor(qMinusT / baseMinusT);
				}

				output.push(stringFromCharCode(digitToBasic(q, 0)));
				bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
				delta = 0;
				++handledCPCount;
			}
		}

		++delta;
		++n;

	}
	return output.join('');
};

/**
 * Converts a Punycode string representing a domain name or an email address
 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
 * it doesn't matter if you call it on a string that has already been
 * converted to Unicode.
 * @memberOf punycode
 * @param {String} input The Punycoded domain name or email address to
 * convert to Unicode.
 * @returns {String} The Unicode representation of the given Punycode
 * string.
 */
const toUnicode = function(input) {
	return mapDomain(input, function(string) {
		return regexPunycode.test(string)
			? punycode_es6_decode(string.slice(4).toLowerCase())
			: string;
	});
};

/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */
const toASCII = function(input) {
	return mapDomain(input, function(string) {
		return regexNonASCII.test(string)
			? 'xn--' + punycode_es6_encode(string)
			: string;
	});
};

/*--------------------------------------------------------------------------*/

/** Define the public API */
const punycode = {
	/**
	 * A string representing the current Punycode.js version number.
	 * @memberOf punycode
	 * @type String
	 */
	'version': '2.3.1',
	/**
	 * An object of methods to convert from JavaScript's internal character
	 * representation (UCS-2) to Unicode code points, and back.
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode
	 * @type Object
	 */
	'ucs2': {
		'decode': ucs2decode,
		'encode': ucs2encode
	},
	'decode': punycode_es6_decode,
	'encode': punycode_es6_encode,
	'toASCII': toASCII,
	'toUnicode': toUnicode
};


/* harmony default export */ const punycode_es6 = (punycode);

;// ../../node_modules/markdown-it/lib/presets/default.mjs
// markdown-it default options

/* harmony default export */ const presets_default = ({
  options: {
    // Enable HTML tags in source
    html: false,

    // Use '/' to close single tags (<br />)
    xhtmlOut: false,

    // Convert '\n' in paragraphs into <br>
    breaks: false,

    // CSS language prefix for fenced blocks
    langPrefix: 'language-',

    // autoconvert URL-like texts to links
    linkify: false,

    // Enable some language-neutral replacements + quotes beautification
    typographer: false,

    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,

    // Internal protection, recursion limit
    maxNesting: 100
  },

  components: {
    core: {},
    block: {},
    inline: {}
  }
});

;// ../../node_modules/markdown-it/lib/presets/zero.mjs
// "Zero" preset, with nothing enabled. Useful for manual configuring of simple
// modes. For example, to parse bold/italic only.

/* harmony default export */ const zero = ({
  options: {
    // Enable HTML tags in source
    html: false,

    // Use '/' to close single tags (<br />)
    xhtmlOut: false,

    // Convert '\n' in paragraphs into <br>
    breaks: false,

    // CSS language prefix for fenced blocks
    langPrefix: 'language-',

    // autoconvert URL-like texts to links
    linkify: false,

    // Enable some language-neutral replacements + quotes beautification
    typographer: false,

    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,

    // Internal protection, recursion limit
    maxNesting: 20
  },

  components: {

    core: {
      rules: [
        'normalize',
        'block',
        'inline',
        'text_join'
      ]
    },

    block: {
      rules: [
        'paragraph'
      ]
    },

    inline: {
      rules: [
        'text'
      ],
      rules2: [
        'balance_pairs',
        'fragments_join'
      ]
    }
  }
});

;// ../../node_modules/markdown-it/lib/presets/commonmark.mjs
// Commonmark default options

/* harmony default export */ const commonmark = ({
  options: {
    // Enable HTML tags in source
    html: true,

    // Use '/' to close single tags (<br />)
    xhtmlOut: true,

    // Convert '\n' in paragraphs into <br>
    breaks: false,

    // CSS language prefix for fenced blocks
    langPrefix: 'language-',

    // autoconvert URL-like texts to links
    linkify: false,

    // Enable some language-neutral replacements + quotes beautification
    typographer: false,

    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,

    // Internal protection, recursion limit
    maxNesting: 20
  },

  components: {

    core: {
      rules: [
        'normalize',
        'block',
        'inline',
        'text_join'
      ]
    },

    block: {
      rules: [
        'blockquote',
        'code',
        'fence',
        'heading',
        'hr',
        'html_block',
        'lheading',
        'list',
        'reference',
        'paragraph'
      ]
    },

    inline: {
      rules: [
        'autolink',
        'backticks',
        'emphasis',
        'entity',
        'escape',
        'html_inline',
        'image',
        'link',
        'newline',
        'text'
      ],
      rules2: [
        'balance_pairs',
        'emphasis',
        'fragments_join'
      ]
    }
  }
});

;// ../../node_modules/markdown-it/lib/index.mjs
// Main parser class















const config = {
  default: presets_default,
  zero: zero,
  commonmark: commonmark
}

//
// This validator can prohibit more than really needed to prevent XSS. It's a
// tradeoff to keep code simple and to be secure by default.
//
// If you need different setup - override validator method as you wish. Or
// replace it with dummy function and use external sanitizer.
//

const BAD_PROTO_RE = /^(vbscript|javascript|file|data):/
const GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/

function validateLink (url) {
  // url should be normalized at this point, and existing entities are decoded
  const str = url.trim().toLowerCase()

  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true
}

const RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:']

function normalizeLink (url) {
  const parsed = parse(url, true)

  if (parsed.hostname) {
    // Encode hostnames in urls like:
    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
    //
    // We don't encode unknown schemas, because it's likely that we encode
    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
    //
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode_es6.toASCII(parsed.hostname)
      } catch (er) { /**/ }
    }
  }

  return lib_encode(format(parsed))
}

function normalizeLinkText (url) {
  const parsed = parse(url, true)

  if (parsed.hostname) {
    // Encode hostnames in urls like:
    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
    //
    // We don't encode unknown schemas, because it's likely that we encode
    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
    //
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode_es6.toUnicode(parsed.hostname)
      } catch (er) { /**/ }
    }
  }

  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720
  return lib_decode(format(parsed), lib_decode.defaultChars + '%')
}

/**
 * class MarkdownIt
 *
 * Main parser/renderer class.
 *
 * ##### Usage
 *
 * ```javascript
 * // node.js, "classic" way:
 * var MarkdownIt = require('markdown-it'),
 *     md = new MarkdownIt();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // node.js, the same, but with sugar:
 * var md = require('markdown-it')();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // browser without AMD, added to "window" on script load
 * // Note, there are no dash.
 * var md = window.markdownit();
 * var result = md.render('# markdown-it rulezz!');
 * ```
 *
 * Single line rendering, without paragraph wrap:
 *
 * ```javascript
 * var md = require('markdown-it')();
 * var result = md.renderInline('__markdown-it__ rulezz!');
 * ```
 **/

/**
 * new MarkdownIt([presetName, options])
 * - presetName (String): optional, `commonmark` / `zero`
 * - options (Object)
 *
 * Creates parser instanse with given config. Can be called without `new`.
 *
 * ##### presetName
 *
 * MarkdownIt provides named presets as a convenience to quickly
 * enable/disable active syntax rules and options for common use cases.
 *
 * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.mjs) -
 *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
 * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.mjs) -
 *   similar to GFM, used when no preset name given. Enables all available rules,
 *   but still without html, typographer & autolinker.
 * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.mjs) -
 *   all rules disabled. Useful to quickly setup your config via `.enable()`.
 *   For example, when you need only `bold` and `italic` markup and nothing else.
 *
 * ##### options:
 *
 * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
 *   That's not safe! You may need external sanitizer to protect output from XSS.
 *   It's better to extend features via plugins, instead of enabling HTML.
 * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
 *   (`<br />`). This is needed only for full CommonMark compatibility. In real
 *   world you will need HTML output.
 * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
 * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
 *   Can be useful for external highlighters.
 * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
 * - __typographer__  - `false`. Set `true` to enable [some language-neutral
 *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs) +
 *   quotes beautification (smartquotes).
 * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
 *   pairs, when typographer enabled and smartquotes on. For example, you can
 *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
 *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
 * - __highlight__ - `null`. Highlighter function for fenced code blocks.
 *   Highlighter `function (str, lang)` should return escaped HTML. It can also
 *   return empty string if the source was not changed and should be escaped
 *   externaly. If result starts with <pre... internal wrapper is skipped.
 *
 * ##### Example
 *
 * ```javascript
 * // commonmark mode
 * var md = require('markdown-it')('commonmark');
 *
 * // default mode
 * var md = require('markdown-it')();
 *
 * // enable everything
 * var md = require('markdown-it')({
 *   html: true,
 *   linkify: true,
 *   typographer: true
 * });
 * ```
 *
 * ##### Syntax highlighting
 *
 * ```js
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;
 *       } catch (__) {}
 *     }
 *
 *     return ''; // use external default escaping
 *   }
 * });
 * ```
 *
 * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):
 *
 * ```javascript
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * // Actual default values
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return '<pre><code class="hljs">' +
 *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
 *                '</code></pre>';
 *       } catch (__) {}
 *     }
 *
 *     return '<pre><code class="hljs">' + md.utils.escapeHtml(str) + '</code></pre>';
 *   }
 * });
 * ```
 *
 **/
function MarkdownIt (presetName, options) {
  if (!(this instanceof MarkdownIt)) {
    return new MarkdownIt(presetName, options)
  }

  if (!options) {
    if (!isString(presetName)) {
      options = presetName || {}
      presetName = 'default'
    }
  }

  /**
   * MarkdownIt#inline -> ParserInline
   *
   * Instance of [[ParserInline]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.inline = new parser_inline()

  /**
   * MarkdownIt#block -> ParserBlock
   *
   * Instance of [[ParserBlock]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.block = new parser_block()

  /**
   * MarkdownIt#core -> Core
   *
   * Instance of [[Core]] chain executor. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.core = new parser_core()

  /**
   * MarkdownIt#renderer -> Renderer
   *
   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
   * rules for new token types, generated by plugins.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * function myToken(tokens, idx, options, env, self) {
   *   //...
   *   return result;
   * };
   *
   * md.renderer.rules['my_token'] = myToken
   * ```
   *
   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs).
   **/
  this.renderer = new renderer()

  /**
   * MarkdownIt#linkify -> LinkifyIt
   *
   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.mjs)
   * rule.
   **/
  this.linkify = new linkify_it()

  /**
   * MarkdownIt#validateLink(url) -> Boolean
   *
   * Link validation function. CommonMark allows too much in links. By default
   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
   * except some embedded image types.
   *
   * You can change this behaviour:
   *
   * ```javascript
   * var md = require('markdown-it')();
   * // enable everything
   * md.validateLink = function () { return true; }
   * ```
   **/
  this.validateLink = validateLink

  /**
   * MarkdownIt#normalizeLink(url) -> String
   *
   * Function used to encode link url to a machine-readable format,
   * which includes url-encoding, punycode, etc.
   **/
  this.normalizeLink = normalizeLink

  /**
   * MarkdownIt#normalizeLinkText(url) -> String
   *
   * Function used to decode link url to a human-readable format`
   **/
  this.normalizeLinkText = normalizeLinkText

  // Expose utils & helpers for easy acces from plugins

  /**
   * MarkdownIt#utils -> utils
   *
   * Assorted utility functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).
   **/
  this.utils = common_utils_namespaceObject

  /**
   * MarkdownIt#helpers -> helpers
   *
   * Link components parser functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
   **/
  this.helpers = utils_assign({}, helpers_namespaceObject)

  this.options = {}
  this.configure(presetName)

  if (options) { this.set(options) }
}

/** chainable
 * MarkdownIt.set(options)
 *
 * Set parser options (in the same format as in constructor). Probably, you
 * will never need it, but you can change options after constructor call.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .set({ html: true, breaks: true })
 *             .set({ typographer, true });
 * ```
 *
 * __Note:__ To achieve the best possible performance, don't modify a
 * `markdown-it` instance options on the fly. If you need multiple configurations
 * it's best to create multiple instances and initialize each with separate
 * config.
 **/
MarkdownIt.prototype.set = function (options) {
  utils_assign(this.options, options)
  return this
}

/** chainable, internal
 * MarkdownIt.configure(presets)
 *
 * Batch load of all options and compenent settings. This is internal method,
 * and you probably will not need it. But if you will - see available presets
 * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
 *
 * We strongly recommend to use presets instead of direct config loads. That
 * will give better compatibility with next versions.
 **/
MarkdownIt.prototype.configure = function (presets) {
  const self = this

  if (isString(presets)) {
    const presetName = presets
    presets = config[presetName]
    if (!presets) { throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name') }
  }

  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\'t be empty') }

  if (presets.options) { self.set(presets.options) }

  if (presets.components) {
    Object.keys(presets.components).forEach(function (name) {
      if (presets.components[name].rules) {
        self[name].ruler.enableOnly(presets.components[name].rules)
      }
      if (presets.components[name].rules2) {
        self[name].ruler2.enableOnly(presets.components[name].rules2)
      }
    })
  }
  return this
}

/** chainable
 * MarkdownIt.enable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to enable
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable list or rules. It will automatically find appropriate components,
 * containing rules with given names. If rule not found, and `ignoreInvalid`
 * not set - throws exception.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .enable(['sub', 'sup'])
 *             .disable('smartquotes');
 * ```
 **/
MarkdownIt.prototype.enable = function (list, ignoreInvalid) {
  let result = []

  if (!Array.isArray(list)) { list = [list] }

  ['core', 'block', 'inline'].forEach(function (chain) {
    result = result.concat(this[chain].ruler.enable(list, true))
  }, this)

  result = result.concat(this.inline.ruler2.enable(list, true))

  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })

  if (missed.length && !ignoreInvalid) {
    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed)
  }

  return this
}

/** chainable
 * MarkdownIt.disable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * The same as [[MarkdownIt.enable]], but turn specified rules off.
 **/
MarkdownIt.prototype.disable = function (list, ignoreInvalid) {
  let result = []

  if (!Array.isArray(list)) { list = [list] }

  ['core', 'block', 'inline'].forEach(function (chain) {
    result = result.concat(this[chain].ruler.disable(list, true))
  }, this)

  result = result.concat(this.inline.ruler2.disable(list, true))

  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })

  if (missed.length && !ignoreInvalid) {
    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed)
  }
  return this
}

/** chainable
 * MarkdownIt.use(plugin, params)
 *
 * Load specified plugin with given params into current parser instance.
 * It's just a sugar to call `plugin(md, params)` with curring.
 *
 * ##### Example
 *
 * ```javascript
 * var iterator = require('markdown-it-for-inline');
 * var md = require('markdown-it')()
 *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
 *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
 *             });
 * ```
 **/
MarkdownIt.prototype.use = function (plugin /*, params, ... */) {
  const args = [this].concat(Array.prototype.slice.call(arguments, 1))
  plugin.apply(plugin, args)
  return this
}

/** internal
 * MarkdownIt.parse(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Parse input string and return list of block tokens (special token type
 * "inline" will contain list of inline tokens). You should not call this
 * method directly, until you write custom renderer (for example, to produce
 * AST).
 *
 * `env` is used to pass data between "distributed" rules and return additional
 * metadata like reference info, needed for the renderer. It also can be used to
 * inject data in specific cases. Usually, you will be ok to pass `{}`,
 * and then pass updated object to renderer.
 **/
MarkdownIt.prototype.parse = function (src, env) {
  if (typeof src !== 'string') {
    throw new Error('Input data should be a String')
  }

  const state = new this.core.State(src, this, env)

  this.core.process(state)

  return state.tokens
}

/**
 * MarkdownIt.render(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Render markdown string into html. It does all magic for you :).
 *
 * `env` can be used to inject additional metadata (`{}` by default).
 * But you will not need it with high probability. See also comment
 * in [[MarkdownIt.parse]].
 **/
MarkdownIt.prototype.render = function (src, env) {
  env = env || {}

  return this.renderer.render(this.parse(src, env), this.options, env)
}

/** internal
 * MarkdownIt.parseInline(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
 * block tokens list with the single `inline` element, containing parsed inline
 * tokens in `children` property. Also updates `env` object.
 **/
MarkdownIt.prototype.parseInline = function (src, env) {
  const state = new this.core.State(src, this, env)

  state.inlineMode = true
  this.core.process(state)

  return state.tokens
}

/**
 * MarkdownIt.renderInline(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
 * will NOT be wrapped into `<p>` tags.
 **/
MarkdownIt.prototype.renderInline = function (src, env) {
  env = env || {}

  return this.renderer.render(this.parseInline(src, env), this.options, env)
}

/* harmony default export */ const markdown_it_lib = (MarkdownIt);

;// ../../node_modules/markdown-it/index.mjs


;// ../../packages/lib/markdownIt.ts

const md = new markdown_it_lib("default", {
    html: true,
    breaks: true,
    linkify: true
});

;// ./modules/ee/multi-language-surveys/components/localized-editor.tsx
/* __next_internal_client_entry_do_not_use__ LocalizedEditor auto */ 








const checkIfValueIsIncomplete = (id, isInvalid, surveyLanguageCodes, value)=>{
    const labelIds = [
        "subheader"
    ];
    if (value === undefined) return false;
    const isDefaultIncomplete = labelIds.includes(id) ? value.default.trim() !== "" : false;
    return isInvalid && !(0,utils/* isLabelValidForAllLanguages */.aV)(value, surveyLanguageCodes) && isDefaultIncomplete;
};
function LocalizedEditor({ id, value, localSurvey, isInvalid, updateQuestion, selectedLanguageCode, setSelectedLanguageCode, questionIdx, firstRender, setFirstRender, locale }) {
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const surveyLanguageCodes = (0,react.useMemo)(()=>(0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages), [
        localSurvey.languages
    ]);
    const isInComplete = (0,react.useMemo)(()=>checkIfValueIsIncomplete(id, isInvalid, surveyLanguageCodes, value), [
        id,
        isInvalid,
        surveyLanguageCodes,
        value
    ]);
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "relative w-full",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Editor, {
                disableLists: true,
                excludedToolbarItems: [
                    "blockType"
                ],
                firstRender: firstRender,
                getText: ()=>md.render(value ? value[selectedLanguageCode] ?? "" : ""),
                setFirstRender: setFirstRender,
                setText: (v)=>{
                    const translatedHtml = {
                        ...value,
                        [selectedLanguageCode]: v
                    };
                    if (questionIdx === -1) {
                        // welcome card
                        updateQuestion({
                            html: translatedHtml
                        });
                        return;
                    }
                    updateQuestion(questionIdx, {
                        html: translatedHtml
                    });
                }
            }, `${questionIdx}-${selectedLanguageCode}`),
            localSurvey.languages.length > 1 && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LanguageIndicator, {
                        selectedLanguageCode: selectedLanguageCode,
                        setFirstRender: setFirstRender,
                        setSelectedLanguageCode: setSelectedLanguageCode,
                        surveyLanguages: localSurvey.languages,
                        locale: locale
                    }),
                    value && selectedLanguageCode !== "default" && value.default ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "mt-1 flex text-xs text-gray-500",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("strong", {
                                children: [
                                    t("environments.project.languages.translate"),
                                    ":"
                                ]
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("label", {
                                className: "fb-htmlbody ml-1" // styles are in global.css
                                ,
                                dangerouslySetInnerHTML: {
                                    __html: purify.sanitize((0,recall/* recallToHeadline */.fV)(value, localSurvey, false, "default").default ?? "")
                                }
                            })
                        ]
                    }) : null
                ]
            }),
            isInComplete ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mt-1 text-xs text-red-400",
                children: t("environments.project.languages.incomplete_translations")
            }) : null
        ]
    });
}

;// ../../node_modules/lucide-react/dist/esm/icons/hand.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Hand = (0,createLucideIcon/* default */.A)("Hand", [
    [
        "path",
        {
            d: "M18 11V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2",
            key: "1fvzgz"
        }
    ],
    [
        "path",
        {
            d: "M14 10V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2",
            key: "1kc0my"
        }
    ],
    [
        "path",
        {
            d: "M10 10.5V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2v8",
            key: "10h0bg"
        }
    ],
    [
        "path",
        {
            d: "M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15",
            key: "1s1gnw"
        }
    ]
]);
 //# sourceMappingURL=hand.js.map

// EXTERNAL MODULE: ../../node_modules/next/dist/api/navigation.js
var navigation = __webpack_require__(470207);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/EditWelcomeCard.tsx
/* __next_internal_client_entry_do_not_use__ EditWelcomeCard auto */ 











const EditWelcomeCard = ({ localSurvey, setLocalSurvey, setActiveQuestionId, activeQuestionId, isInvalid, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [firstRender, setFirstRender] = (0,react.useState)(true);
    const path = (0,navigation.usePathname)();
    const environmentId = path?.split("/environments/")[1]?.split("/")[0];
    let open = activeQuestionId == "start";
    const setOpen = (e)=>{
        if (e) {
            setActiveQuestionId("start");
            setFirstRender(true);
        } else {
            setActiveQuestionId(null);
        }
    };
    const updateSurvey = (data)=>{
        setLocalSurvey({
            ...localSurvey,
            welcomeCard: {
                ...localSurvey.welcomeCard,
                ...data
            }
        });
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: (0,lib_cn.cn)(open ? "shadow-lg" : "shadow-md", "group flex flex-row rounded-lg bg-white"),
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: (0,lib_cn.cn)(open ? "bg-slate-50" : "", "flex w-10 items-center justify-center rounded-l-lg border-b border-l border-t group-aria-expanded:rounded-bl-none", isInvalid ? "bg-red-400" : "bg-white group-hover:bg-slate-50"),
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Hand, {
                    className: "h-4 w-4"
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
                open: open,
                onOpenChange: setOpen,
                className: "flex-1 rounded-r-lg border border-slate-200 transition-all duration-200 ease-in-out",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                        asChild: true,
                        className: "flex cursor-pointer justify-between rounded-r-lg p-4 hover:bg-slate-50",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "inline-flex",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                className: "text-sm font-semibold",
                                                children: t("common.welcome_card")
                                            }),
                                            !open && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                className: "mt-1 truncate text-xs text-slate-500",
                                                children: localSurvey?.welcomeCard?.enabled ? t("common.shown") : t("common.hidden")
                                            })
                                        ]
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    className: "flex items-center space-x-2",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                            htmlFor: "welcome-toggle",
                                            children: localSurvey?.welcomeCard?.enabled ? t("common.on") : t("common.off")
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                            id: "welcome-toggle",
                                            checked: localSurvey?.welcomeCard?.enabled,
                                            onClick: (e)=>{
                                                e.stopPropagation();
                                                updateSurvey({
                                                    enabled: !localSurvey.welcomeCard?.enabled
                                                });
                                            }
                                        })
                                    ]
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                        className: `flex flex-col px-4 ${open && "pb-6"}`,
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "mt-2",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                        htmlFor: "companyLogo",
                                        children: t("environments.surveys.edit.company_logo")
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "mt-3 flex w-full items-center justify-center",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(file_input/* FileInput */.z, {
                                        id: "welcome-card-image",
                                        allowedFileExtensions: [
                                            "png",
                                            "jpeg",
                                            "jpg",
                                            "webp"
                                        ],
                                        environmentId: environmentId,
                                        onFileUpload: (url)=>{
                                            updateSurvey({
                                                fileUrl: url[0]
                                            });
                                        },
                                        fileUrl: localSurvey?.welcomeCard?.fileUrl
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "mt-3",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                        id: "headline",
                                        value: localSurvey.welcomeCard.headline,
                                        label: t("common.note") + "*",
                                        localSurvey: localSurvey,
                                        questionIdx: -1,
                                        isInvalid: isInvalid,
                                        updateSurvey: updateSurvey,
                                        selectedLanguageCode: selectedLanguageCode,
                                        setSelectedLanguageCode: setSelectedLanguageCode,
                                        locale: locale
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    className: "mt-3",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                            htmlFor: "subheader",
                                            children: t("environments.surveys.edit.welcome_message")
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                            className: "mt-2",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LocalizedEditor, {
                                                id: "html",
                                                value: localSurvey.welcomeCard.html,
                                                localSurvey: localSurvey,
                                                isInvalid: isInvalid,
                                                updateQuestion: updateSurvey,
                                                selectedLanguageCode: selectedLanguageCode,
                                                setSelectedLanguageCode: setSelectedLanguageCode,
                                                firstRender: firstRender,
                                                setFirstRender: setFirstRender,
                                                questionIdx: -1,
                                                locale: locale
                                            })
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "mt-3 flex justify-between gap-8",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        className: "flex w-full space-x-2",
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                            className: "w-full",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                                id: "buttonLabel",
                                                value: localSurvey.welcomeCard.buttonLabel,
                                                localSurvey: localSurvey,
                                                questionIdx: -1,
                                                maxLength: 48,
                                                placeholder: t("common.next"),
                                                isInvalid: isInvalid,
                                                updateSurvey: updateSurvey,
                                                selectedLanguageCode: selectedLanguageCode,
                                                setSelectedLanguageCode: setSelectedLanguageCode,
                                                label: t("environments.surveys.edit.next_button_label"),
                                                locale: locale
                                            })
                                        })
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    className: "mt-8 flex items-center",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                            className: "mr-2",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                                id: "timeToFinish",
                                                name: "timeToFinish",
                                                checked: localSurvey?.welcomeCard?.timeToFinish,
                                                onCheckedChange: ()=>updateSurvey({
                                                        timeToFinish: !localSurvey.welcomeCard.timeToFinish
                                                    })
                                            })
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            className: "flex-column",
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                    htmlFor: "timeToFinish",
                                                    children: t("common.time_to_finish")
                                                }),
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                    className: "text-sm text-slate-500 dark:text-slate-400",
                                                    children: t("environments.surveys.edit.display_an_estimate_of_completion_time_for_survey")
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                localSurvey?.type === "link" && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    className: "mt-6 flex items-center",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                            className: "mr-2",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                                id: "showResponseCount",
                                                name: "showResponseCount",
                                                checked: localSurvey?.welcomeCard?.showResponseCount,
                                                onCheckedChange: ()=>updateSurvey({
                                                        showResponseCount: !localSurvey.welcomeCard.showResponseCount
                                                    })
                                            })
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            className: "flex-column",
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                    htmlFor: "showResponseCount",
                                                    children: t("common.show_response_count")
                                                }),
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                    className: "text-sm text-slate-500 dark:text-slate-400",
                                                    children: t("environments.surveys.edit.display_number_of_responses_for_survey")
                                                })
                                            ]
                                        })
                                    ]
                                })
                            ]
                        })
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ./modules/ui/components/tag/index.tsx
var tag = __webpack_require__(711940);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/HiddenFieldsCard.tsx
/* __next_internal_client_entry_do_not_use__ HiddenFieldsCard auto */ 















const HiddenFieldsCard = ({ activeQuestionId, localSurvey, setActiveQuestionId, setLocalSurvey })=>{
    const open = activeQuestionId == "hidden";
    const [hiddenField, setHiddenField] = (0,react.useState)("");
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const setOpen = (open)=>{
        if (open) {
            setActiveQuestionId("hidden");
        } else {
            setActiveQuestionId(null);
        }
    };
    const updateSurvey = (data, currentFieldId)=>{
        const questions = [
            ...localSurvey.questions
        ];
        // Remove recall info from question headlines
        if (currentFieldId) {
            questions.forEach((question)=>{
                for (const [languageCode, headline] of Object.entries(question.headline)){
                    if (headline.includes(`recall:${currentFieldId}`)) {
                        const recallInfo = (0,recall/* extractRecallInfo */.LW)(headline);
                        if (recallInfo) {
                            question.headline[languageCode] = headline.replace(recallInfo, "");
                        }
                    }
                }
            });
        }
        setLocalSurvey({
            ...localSurvey,
            questions,
            hiddenFields: {
                ...localSurvey.hiddenFields,
                ...data
            }
        });
    };
    const handleDeleteHiddenField = (fieldId)=>{
        const quesIdx = findHiddenFieldUsedInLogic(localSurvey, fieldId);
        if (quesIdx !== -1) {
            dist/* toast */.oR.error(t("environments.surveys.edit.fieldId_is_used_in_logic_of_question_please_remove_it_from_logic_first", {
                fieldId,
                questionIndex: quesIdx + 1
            }));
            return;
        }
        const isHiddenFieldUsedInFollowUp = localSurvey.followUps.filter((f)=>!f.deleted).some((followUp)=>{
            return followUp.action.properties.to === fieldId;
        });
        if (isHiddenFieldUsedInFollowUp) {
            dist/* toast */.oR.error(t("environments.surveys.edit.follow_ups_hidden_field_error"));
            return;
        }
        updateSurvey({
            enabled: true,
            fieldIds: localSurvey.hiddenFields?.fieldIds?.filter((q)=>q !== fieldId)
        }, fieldId);
    };
    // Auto Animate
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: (0,lib_cn.cn)(open ? "shadow-lg" : "shadow-md", "group z-10 flex flex-row rounded-lg bg-white"),
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: (0,lib_cn.cn)(open ? "bg-slate-50" : "bg-white group-hover:bg-slate-50", "flex w-10 items-center justify-center rounded-l-lg border-b border-l border-t group-aria-expanded:rounded-bl-none"),
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(eye_off/* default */.A, {
                    className: "h-4 w-4"
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
                open: open,
                onOpenChange: setOpen,
                className: "flex-1 rounded-r-lg border border-slate-200 transition-all duration-300 ease-in-out",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                        asChild: true,
                        className: "flex cursor-pointer justify-between rounded-r-lg p-4 hover:bg-slate-50",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "inline-flex",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                            className: "text-sm font-semibold",
                                            children: t("common.hidden_fields")
                                        })
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    className: "flex items-center space-x-2",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                            htmlFor: "hidden-fields-toggle",
                                            children: localSurvey?.hiddenFields?.enabled ? t("common.on") : t("common.off")
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                            id: "hidden-fields-toggle",
                                            checked: localSurvey?.hiddenFields?.enabled,
                                            onClick: (e)=>{
                                                e.stopPropagation();
                                                updateSurvey({
                                                    enabled: !localSurvey.hiddenFields?.enabled
                                                });
                                            }
                                        })
                                    ]
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                        className: `flex flex-col px-4 ${open && "pb-6"}`,
                        ref: parent,
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "flex flex-wrap gap-2",
                                ref: parent,
                                children: localSurvey.hiddenFields?.fieldIds && localSurvey.hiddenFields?.fieldIds?.length > 0 ? localSurvey.hiddenFields?.fieldIds?.map((fieldId)=>{
                                    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tag/* Tag */.v, {
                                        onDelete: (fieldId)=>handleDeleteHiddenField(fieldId),
                                        tagId: fieldId,
                                        tagName: fieldId
                                    }, fieldId);
                                }) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "mt-2 text-sm italic text-slate-500",
                                    children: t("environments.surveys.edit.no_hidden_fields_yet_add_first_one_below")
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
                                className: "mt-5",
                                onSubmit: (e)=>{
                                    e.preventDefault();
                                    const existingQuestionIds = localSurvey.questions.map((question)=>question.id);
                                    const existingEndingCardIds = localSurvey.endings.map((ending)=>ending.id);
                                    const existingHiddenFieldIds = localSurvey.hiddenFields.fieldIds ?? [];
                                    const validateIdError = (0,validation/* validateId */.GZ)("Hidden field", hiddenField, existingQuestionIds, existingEndingCardIds, existingHiddenFieldIds);
                                    if (validateIdError) {
                                        dist/* toast */.oR.error(validateIdError);
                                        return;
                                    }
                                    updateSurvey({
                                        fieldIds: [
                                            ...localSurvey.hiddenFields?.fieldIds || [],
                                            hiddenField
                                        ],
                                        enabled: true
                                    });
                                    dist/* toast */.oR.success(t("environments.surveys.edit.hidden_field_added_successfully"));
                                    setHiddenField("");
                                },
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                        htmlFor: "hiddenField",
                                        children: t("common.hidden_field")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "mt-2 flex items-center gap-2",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                autoFocus: true,
                                                id: "hiddenField",
                                                name: "hiddenField",
                                                value: hiddenField,
                                                onChange: (e)=>setHiddenField(e.target.value.trim()),
                                                placeholder: t("environments.surveys.edit.type_field_id") + "..."
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                                variant: "secondary",
                                                type: "submit",
                                                size: "sm",
                                                className: "whitespace-nowrap",
                                                children: t("environments.surveys.edit.add_hidden_field_id")
                                            })
                                        ]
                                    })
                                ]
                            })
                        ]
                    })
                ]
            })
        ]
    });
};

;// ./modules/ui/components/question-toggle-table/index.tsx
/* __next_internal_client_entry_do_not_use__ QuestionToggleTable auto */ 



const QuestionToggleTable = ({ type, fields, localSurvey, questionIdx, isInvalid, updateQuestion, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const onShowToggle = (field, show)=>{
        updateQuestion(questionIdx, {
            [field.id]: {
                show,
                required: field.required,
                placeholder: field.placeholder
            }
        });
    };
    const onRequiredToggle = (field, required)=>{
        updateQuestion(questionIdx, {
            [field.id]: {
                show: field.show,
                required,
                placeholder: field.placeholder
            }
        });
    };
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("table", {
        className: "mt-4 w-full table-fixed",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("thead", {
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("tr", {
                    className: "text-left text-slate-800",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("th", {
                            className: "w-1/4 text-sm font-semibold",
                            children: type === "address" ? t("environments.surveys.edit.address_fields") : t("environments.surveys.edit.contact_fields")
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("th", {
                            className: "w-1/6 text-sm font-semibold",
                            children: t("common.show")
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("th", {
                            className: "w-1/6 text-sm font-semibold",
                            children: t("environments.surveys.edit.required")
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("th", {
                            className: "text-sm font-semibold",
                            children: t("common.placeholder")
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("tbody", {
                children: fields.map((field)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("tr", {
                        className: "text-slate-900",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("td", {
                                className: "py-2 text-sm",
                                children: field.label
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("td", {
                                className: "py-",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                    checked: field.show,
                                    onCheckedChange: (show)=>{
                                        onShowToggle(field, show);
                                    },
                                    disabled: // if all the other fields are hidden, this should be disabled
                                    fields.filter((currentField)=>currentField.id !== field.id).every((field)=>!field.show)
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("td", {
                                className: "py-2",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                    checked: field.required,
                                    onCheckedChange: (required)=>{
                                        onRequiredToggle(field, required);
                                    },
                                    disabled: !field.show
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("td", {
                                className: "py-2",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                    id: `${field.id}.placeholder`,
                                    label: "",
                                    value: field.placeholder,
                                    localSurvey: localSurvey,
                                    questionIdx: questionIdx,
                                    isInvalid: isInvalid,
                                    updateQuestion: updateQuestion,
                                    selectedLanguageCode: selectedLanguageCode,
                                    setSelectedLanguageCode: setSelectedLanguageCode,
                                    locale: locale
                                })
                            })
                        ]
                    }, field.id))
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/ContactInfoQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ ContactInfoQuestionForm auto */ 








const ContactInfoQuestionForm = ({ question, questionIdx, updateQuestion, isInvalid, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const surveyLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages ?? []);
    const fields = [
        {
            id: "firstName",
            label: t("environments.surveys.edit.first_name"),
            ...question.firstName
        },
        {
            id: "lastName",
            label: t("environments.surveys.edit.last_name"),
            ...question.lastName
        },
        {
            id: "email",
            label: t("common.email"),
            ...question.email
        },
        {
            id: "phone",
            label: t("common.phone"),
            ...question.phone
        },
        {
            id: "company",
            label: t("environments.surveys.edit.company"),
            ...question.company
        }
    ];
    (0,react.useEffect)(()=>{
        const allFieldsAreOptional = [
            question.firstName,
            question.lastName,
            question.email,
            question.phone,
            question.company
        ].filter((field)=>field.show).every((field)=>!field.required);
        updateQuestion(questionIdx, {
            required: !allFieldsAreOptional
        });
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        question.firstName,
        question.lastName,
        question.email,
        question.phone,
        question.company
    ]);
    // Auto animate
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                label: t("environments.surveys.edit.question") + "*",
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: parent,
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                label: t("common.description"),
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        variant: "secondary",
                        className: "mt-4",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
                            });
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionToggleTable, {
                        type: "contact",
                        fields: fields,
                        localSurvey: localSurvey,
                        questionIdx: questionIdx,
                        isInvalid: isInvalid,
                        updateQuestion: updateQuestion,
                        selectedLanguageCode: selectedLanguageCode,
                        setSelectedLanguageCode: setSelectedLanguageCode,
                        locale: locale
                    })
                ]
            })
        ]
    });
};

;// ./modules/ui/components/shuffle-option-select/index.tsx
/* __next_internal_client_entry_do_not_use__ ShuffleOptionSelect auto */ 


const ShuffleOptionSelect = ({ questionIdx, shuffleOption, updateQuestion, shuffleOptionsTypes })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_select/* Select */.l6, {
        defaultValue: shuffleOption,
        value: shuffleOption,
        onValueChange: (e)=>{
            updateQuestion(questionIdx, {
                shuffleOption: e
            });
        },
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectTrigger */.bq, {
                className: "w-fit space-x-2 overflow-hidden border-0 font-medium text-slate-600",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectValue */.yv, {
                    placeholder: t("environments.surveys.edit.select_ordering")
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectContent */.gC, {
                children: Object.values(shuffleOptionsTypes).map((shuffleOptionsType)=>shuffleOptionsType.show && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectItem */.eb, {
                        value: shuffleOptionsType.id,
                        title: shuffleOptionsType.label,
                        children: shuffleOptionsType.label
                    }, shuffleOptionsType.id))
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/grip-vertical.js
var grip_vertical = __webpack_require__(149715);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/QuestionOptionChoice.tsx
/* __next_internal_client_entry_do_not_use__ QuestionOptionChoice auto */ 










const QuestionOptionChoice = ({ addChoice, choice, choiceIdx, deleteChoice, isInvalid, localSurvey, questionIdx, selectedLanguageCode, setSelectedLanguageCode, surveyLanguages, updateChoice, question, surveyLanguageCodes, updateQuestion, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const isDragDisabled = choice.id === "other";
    const { attributes, listeners, setNodeRef, transform, transition } = (0,sortable_esm/* useSortable */.gl)({
        id: choice.id,
        disabled: isDragDisabled
    });
    const style = {
        transition: transition ?? "transform 100ms ease",
        transform: utilities_esm/* CSS */.Ks.Translate.toString(transform)
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "flex w-full items-center gap-2",
        ref: setNodeRef,
        style: style,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: (0,lib_cn.cn)(choice.id === "other" && "invisible"),
                ...listeners,
                ...attributes,
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(grip_vertical/* default */.A, {
                    className: "h-4 w-4 cursor-move text-slate-400"
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex w-full space-x-2",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                        id: `choice-${choiceIdx}`,
                        placeholder: choice.id === "other" ? t("common.other") : t("environments.surveys.edit.option_idx", {
                            choiceIndex: choiceIdx + 1
                        }),
                        label: "",
                        localSurvey: localSurvey,
                        questionIdx: questionIdx,
                        value: choice.label,
                        updateChoice: updateChoice,
                        selectedLanguageCode: selectedLanguageCode,
                        setSelectedLanguageCode: setSelectedLanguageCode,
                        isInvalid: isInvalid && !isLabelValidForAllLanguages(question.choices[choiceIdx].label, surveyLanguages),
                        className: `${choice.id === "other" ? "border border-dashed" : ""} mt-0`,
                        locale: locale
                    }, choice.id),
                    choice.id === "other" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                        id: "otherOptionPlaceholder",
                        localSurvey: localSurvey,
                        placeholder: t("environments.surveys.edit.please_specify"),
                        label: "",
                        questionIdx: questionIdx,
                        value: question.otherOptionPlaceholder ? question.otherOptionPlaceholder : (0,utils/* createI18nString */.YV)(t("environments.surveys.edit.please_specify"), surveyLanguageCodes),
                        updateQuestion: updateQuestion,
                        selectedLanguageCode: selectedLanguageCode,
                        setSelectedLanguageCode: setSelectedLanguageCode,
                        isInvalid: isInvalid && !isLabelValidForAllLanguages(question.choices[choiceIdx].label, surveyLanguages),
                        className: "border border-dashed",
                        locale: locale
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex gap-2",
                children: [
                    question.choices && question.choices.length > 2 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                        tooltipContent: t("environments.surveys.edit.delete_choice"),
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                            variant: "secondary",
                            size: "icon",
                            "aria-label": "Delete choice",
                            onClick: (e)=>{
                                e.preventDefault();
                                deleteChoice(choiceIdx);
                            },
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash/* default */.A, {})
                        })
                    }),
                    choice.id !== "other" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                        tooltipContent: t("environments.surveys.edit.add_choice_below"),
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                            variant: "secondary",
                            size: "icon",
                            "aria-label": "Add choice below",
                            onClick: (e)=>{
                                e.preventDefault();
                                addChoice(choiceIdx);
                            },
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {})
                        })
                    })
                ]
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/RankingQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ RankingQuestionForm auto */ 













const RankingQuestionForm = ({ question, questionIdx, updateQuestion, isInvalid, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const lastChoiceRef = (0,react.useRef)(null);
    const [isInvalidValue, setIsInvalidValue] = (0,react.useState)(null);
    const surveyLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages);
    const surveyLanguages = localSurvey.languages ?? [];
    const updateChoice = (choiceIdx, updatedAttributes)=>{
        if (question.choices) {
            const newChoices = question.choices.map((choice, idx)=>{
                if (idx !== choiceIdx) return choice;
                return {
                    ...choice,
                    ...updatedAttributes
                };
            });
            updateQuestion(questionIdx, {
                choices: newChoices
            });
        }
    };
    const addChoice = (choiceIdx)=>{
        let newChoices = !question.choices ? [] : question.choices;
        const newChoice = {
            id: (0,cuid2/* createId */.sX)(),
            label: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
        };
        updateQuestion(questionIdx, {
            choices: [
                ...newChoices.slice(0, choiceIdx + 1),
                newChoice,
                ...newChoices.slice(choiceIdx + 1)
            ]
        });
    };
    const addOption = ()=>{
        const choices = !question.choices ? [] : question.choices;
        if (choices.length >= 25) {
            return;
        }
        const newChoice = {
            id: (0,cuid2/* createId */.sX)(),
            label: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
        };
        updateQuestion(questionIdx, {
            choices: [
                ...choices,
                newChoice
            ]
        });
    };
    const deleteChoice = (choiceIdx)=>{
        const newChoices = !question.choices ? [] : question.choices.filter((_, idx)=>idx !== choiceIdx);
        const choiceValue = question.choices[choiceIdx].label[selectedLanguageCode];
        if (isInvalidValue === choiceValue) {
            setIsInvalidValue(null);
        }
        updateQuestion(questionIdx, {
            choices: newChoices
        });
    };
    const shuffleOptionsTypes = {
        none: {
            id: "none",
            label: t("environments.surveys.edit.keep_current_order"),
            show: true
        },
        all: {
            id: "all",
            label: t("environments.surveys.edit.randomize_all"),
            show: question.choices.length > 0
        }
    };
    (0,react.useEffect)(()=>{
        if (lastChoiceRef.current) {
            lastChoiceRef.current?.focus();
        }
    }, [
        question.choices?.length
    ]);
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                label: t("environments.surveys.edit.question") + "*",
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: parent,
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                label: t("common.description"),
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        variant: "secondary",
                        className: "mt-3",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
                            });
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-3",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_label/* Label */.J, {
                        htmlFor: "choices",
                        children: [
                            t("environments.surveys.edit.options"),
                            "*"
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "mt-2",
                        id: "choices",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(core_esm/* DndContext */.Mp, {
                                id: "ranking-choices",
                                onDragEnd: (event)=>{
                                    const { active, over } = event;
                                    if (!active || !over) {
                                        return;
                                    }
                                    const activeIndex = question.choices.findIndex((choice)=>choice.id === active.id);
                                    const overIndex = question.choices.findIndex((choice)=>choice.id === over.id);
                                    const newChoices = [
                                        ...question.choices
                                    ];
                                    newChoices.splice(activeIndex, 1);
                                    newChoices.splice(overIndex, 0, question.choices[activeIndex]);
                                    updateQuestion(questionIdx, {
                                        choices: newChoices
                                    });
                                },
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(sortable_esm/* SortableContext */.gB, {
                                    items: question.choices,
                                    strategy: sortable_esm/* verticalListSortingStrategy */._G,
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        className: "flex flex-col gap-2",
                                        ref: parent,
                                        children: question.choices && question.choices.map((choice, choiceIdx)=>/*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionOptionChoice, {
                                                choice: choice,
                                                choiceIdx: choiceIdx,
                                                questionIdx: questionIdx,
                                                updateChoice: updateChoice,
                                                deleteChoice: deleteChoice,
                                                addChoice: addChoice,
                                                isInvalid: isInvalid,
                                                localSurvey: localSurvey,
                                                selectedLanguageCode: selectedLanguageCode,
                                                setSelectedLanguageCode: setSelectedLanguageCode,
                                                surveyLanguages: surveyLanguages,
                                                question: question,
                                                updateQuestion: updateQuestion,
                                                surveyLanguageCodes: surveyLanguageCodes,
                                                locale: locale
                                            }, choice.id))
                                    })
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "mt-2 flex flex-1 items-center justify-between gap-2",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                                        size: "sm",
                                        variant: "secondary",
                                        type: "button",
                                        disabled: question.choices?.length >= 25,
                                        onClick: ()=>addOption(),
                                        children: [
                                            t("environments.surveys.edit.add_option"),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {})
                                        ]
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ShuffleOptionSelect, {
                                        shuffleOptionsTypes: shuffleOptionsTypes,
                                        updateQuestion: updateQuestion,
                                        shuffleOption: question.shuffleOption,
                                        questionIdx: questionIdx
                                    })
                                ]
                            })
                        ]
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/chevron-right.js
var chevron_right = __webpack_require__(115758);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/AddressQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ AddressQuestionForm auto */ 








const AddressQuestionForm = ({ question, questionIdx, updateQuestion, isInvalid, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const surveyLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages ?? []);
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const fields = [
        {
            id: "addressLine1",
            label: t("environments.surveys.edit.address_line_1"),
            ...question.addressLine1
        },
        {
            id: "addressLine2",
            label: t("environments.surveys.edit.address_line_2"),
            ...question.addressLine2
        },
        {
            id: "city",
            label: t("environments.surveys.edit.city"),
            ...question.city
        },
        {
            id: "state",
            label: t("environments.surveys.edit.state"),
            ...question.state
        },
        {
            id: "zip",
            label: t("environments.surveys.edit.zip"),
            ...question.zip
        },
        {
            id: "country",
            label: t("environments.surveys.edit.country"),
            ...question.country
        }
    ];
    (0,react.useEffect)(()=>{
        const allFieldsAreOptional = [
            question.addressLine1,
            question.addressLine2,
            question.city,
            question.state,
            question.zip,
            question.country
        ].filter((field)=>field.show).every((field)=>!field.required);
        updateQuestion(questionIdx, {
            required: !allFieldsAreOptional
        });
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        question.addressLine1,
        question.addressLine2,
        question.city,
        question.state,
        question.zip,
        question.country
    ]);
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                label: t("environments.surveys.edit.question") + "*",
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: parent,
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                label: t("common.description"),
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        variant: "secondary",
                        className: "mt-4",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
                            });
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionToggleTable, {
                        type: "address",
                        fields: fields,
                        localSurvey: localSurvey,
                        questionIdx: questionIdx,
                        isInvalid: isInvalid,
                        updateQuestion: updateQuestion,
                        selectedLanguageCode: selectedLanguageCode,
                        setSelectedLanguageCode: setSelectedLanguageCode,
                        locale: locale
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ./modules/ui/components/command/index.tsx
var command = __webpack_require__(454319);
// EXTERNAL MODULE: ./modules/ui/components/popover/index.tsx
var popover = __webpack_require__(10015);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/x.js
var icons_x = __webpack_require__(673766);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/check.js
var check = __webpack_require__(129170);
// EXTERNAL MODULE: ../../node_modules/next/dist/api/image.js
var api_image = __webpack_require__(134088);
;// ./modules/ui/components/input-combo-box/index.tsx
/* __next_internal_client_entry_do_not_use__ InputCombobox auto */ 








const InputCombobox = ({ id = "temp", showSearch = true, searchPlaceholder = "Search...", options, inputProps, groupedOptions, value, onChangeValue, clearable = false, withInput = false, allowMultiSelect = false, showCheckIcon = false, comboboxClasses, emptyDropdownText = "environments.surveys.edit.no_option_found" })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [open, setOpen] = (0,react.useState)(false);
    const [inputType, setInputType] = (0,react.useState)(null);
    const [localValue, setLocalValue] = (0,react.useState)(null);
    const validOptions = (0,react.useMemo)(()=>{
        if (options?.length) {
            return options;
        }
        return groupedOptions?.flatMap((group)=>group.options);
    }, [
        options,
        groupedOptions
    ]);
    (0,react.useEffect)(()=>{
        if (value === null || value === undefined) {
            setLocalValue(null);
            setInputType(null);
        } else {
            if (Array.isArray(value)) {
                if (value.length > 0) {
                    setLocalValue(value);
                    if (inputType !== "dropdown") {
                        setInputType("dropdown");
                    }
                }
            } else {
                const option = validOptions?.find((option)=>option.value === value);
                if (option) {
                    setLocalValue(option.value);
                    if (inputType !== "dropdown") {
                        setInputType("dropdown");
                    }
                } else {
                    if (withInput) {
                        setLocalValue(value);
                        if (inputType !== "input") {
                            setInputType("input");
                        }
                    } else {
                        setLocalValue(null);
                        setInputType(null);
                    }
                }
            }
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        value
    ]);
    const handleMultiSelect = (option)=>{
        if (Array.isArray(localValue)) {
            const doesExist = localValue.includes(option.value);
            const newValue = doesExist ? localValue.filter((item)=>item !== option.value) : [
                ...localValue,
                option.value
            ];
            if (!newValue.length) {
                onChangeValue([]);
                setInputType(null);
            }
            onChangeValue(newValue, option);
            setLocalValue(newValue);
        } else {
            onChangeValue([
                option.value
            ], option);
            setLocalValue([
                option.value
            ]);
        }
    };
    const handleSelect = (option)=>{
        if (inputType !== "dropdown") {
            setInputType("dropdown");
        }
        if (allowMultiSelect) {
            handleMultiSelect(option);
        } else {
            onChangeValue(option.value, option);
            setLocalValue(option.value);
            setOpen(false);
        }
    };
    const onInputChange = (e)=>{
        const inputType = e.target.type;
        const value = e.target.value;
        setLocalValue(null);
        if (value === "") {
            onChangeValue("", undefined, true);
        }
        if (inputType !== "input") {
            setInputType("input");
        }
        const val = inputType === "number" ? Number(value) : value;
        setLocalValue(val);
        onChangeValue(val, undefined, true);
    };
    const getDisplayValue = (0,react.useMemo)(()=>{
        if (Array.isArray(localValue)) {
            return localValue.map((item, idx)=>{
                const option = validOptions?.find((opt)=>opt.value === item);
                if (!option) {
                    return null;
                }
                return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                    children: [
                        idx !== 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                            children: ","
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "flex items-center gap-2",
                            children: [
                                option.icon && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(option.icon, {
                                    className: "h-5 w-5 shrink-0 text-slate-400"
                                }),
                                option.imgSrc && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(api_image["default"], {
                                    src: option.imgSrc,
                                    alt: option.label,
                                    width: 24,
                                    height: 24
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                    children: option.label
                                })
                            ]
                        })
                    ]
                });
            });
        } else {
            const option = validOptions?.find((opt)=>opt.value === localValue);
            if (!option) {
                return null;
            }
            return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex items-center gap-2 truncate",
                children: [
                    option.icon && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(option.icon, {
                        className: "h-5 w-5 shrink-0 text-slate-400"
                    }),
                    option.imgSrc && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(api_image["default"], {
                        src: option.imgSrc,
                        alt: option.label,
                        width: 24,
                        height: 24
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                        className: "truncate",
                        children: option.label
                    })
                ]
            });
        }
    }, [
        localValue,
        validOptions
    ]);
    const handleClear = ()=>{
        setInputType(null);
        onChangeValue("");
        setLocalValue(null);
    };
    const isSelected = (option)=>{
        if (typeof localValue === "object") {
            if (Array.isArray(localValue)) {
                return localValue.find((item)=>item === option.value) !== undefined;
            }
            return localValue === option.value;
        }
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: (0,lib_cn.cn)("group/icon flex max-w-[440px] overflow-hidden rounded-md border border-slate-300 transition-colors duration-200 ease-in-out hover:border-slate-400", comboboxClasses),
        children: [
            withInput && inputType !== "dropdown" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                className: "min-w-0 rounded-none border-0 border-r border-slate-300 bg-white focus:border-slate-400",
                ...inputProps,
                id: `${id}-input`,
                value: localValue,
                onChange: onInputChange
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(popover/* Popover */.AM, {
                open: open,
                onOpenChange: setOpen,
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(popover/* PopoverTrigger */.Wv, {
                        asChild: true,
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            id: id,
                            role: "combobox",
                            "aria-controls": "options",
                            "aria-expanded": open,
                            className: (0,lib_cn.cn)("flex h-10 w-full shrink-0 cursor-pointer items-center justify-end rounded-md bg-white pr-2", {
                                "w-10 justify-center pr-0": withInput && inputType !== "dropdown"
                            }),
                            children: [
                                inputType === "dropdown" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "ellipsis flex w-full gap-2 truncate px-2",
                                    children: getDisplayValue
                                }),
                                clearable && inputType === "dropdown" ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(icons_x/* default */.A, {
                                    className: "h-5 w-5 shrink-0 text-slate-300 hover:text-slate-400",
                                    onClick: handleClear
                                }) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)(chevron_down/* default */.A, {
                                    className: "h-5 w-5 shrink-0 text-slate-300 transition-colors duration-200 ease-in-out group-hover/icon:text-slate-400"
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(popover/* PopoverContent */.hl, {
                        className: (0,lib_cn.cn)("h-full w-auto max-w-[400px] truncate p-0", {
                            "px-2 pt-2": showSearch
                        }),
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(command/* Command */.uB, {
                            className: "h-full max-h-[400px] overflow-y-auto",
                            children: [
                                showSearch && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(command/* CommandInput */.G7, {
                                    placeholder: searchPlaceholder,
                                    className: "h-8 border-slate-400 bg-white placeholder-slate-300"
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(command/* CommandList */.oI, {
                                    className: "m-1",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(command/* CommandEmpty */.xL, {
                                            className: "mx-2 my-0 text-xs font-semibold text-slate-500",
                                            children: t(emptyDropdownText)
                                        }),
                                        options && options.length > 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(command/* CommandGroup */.L$, {
                                            children: options.map((option)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)(command/* CommandItem */.h_, {
                                                    onSelect: ()=>handleSelect(option),
                                                    title: option.label,
                                                    className: "cursor-pointer truncate",
                                                    children: [
                                                        showCheckIcon && isSelected(option) && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(check/* default */.A, {
                                                            className: "mr-2 h-4 w-4 text-slate-300 hover:text-slate-400"
                                                        }),
                                                        option.icon && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(option.icon, {
                                                            className: "mr-2 h-5 w-5 shrink-0 text-slate-400"
                                                        }),
                                                        option.imgSrc && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(api_image["default"], {
                                                            src: option.imgSrc,
                                                            alt: option.label,
                                                            width: 24,
                                                            height: 24,
                                                            className: "mr-2 shrink-0"
                                                        }),
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                            className: "truncate",
                                                            children: option.label
                                                        })
                                                    ]
                                                }, option.value))
                                        }),
                                        groupedOptions?.map((group, idx)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                children: [
                                                    idx !== 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(command/* CommandSeparator */.fx, {
                                                        className: "bg-slate-300"
                                                    }, idx),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(command/* CommandGroup */.L$, {
                                                        heading: group.label,
                                                        children: group.options.map((option)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)(command/* CommandItem */.h_, {
                                                                onSelect: ()=>handleSelect(option),
                                                                className: "cursor-pointer truncate",
                                                                children: [
                                                                    showCheckIcon && isSelected(option) && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(check/* default */.A, {
                                                                        className: "mr-2 h-4 w-4 text-slate-300 hover:text-slate-400"
                                                                    }),
                                                                    option.icon && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(option.icon, {
                                                                        className: "mr-2 h-5 w-5 shrink-0 text-slate-400"
                                                                    }),
                                                                    option.imgSrc && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(api_image["default"], {
                                                                        src: option.imgSrc,
                                                                        alt: option.label,
                                                                        width: 24,
                                                                        height: 24,
                                                                        className: "mr-2 shrink-0"
                                                                    }),
                                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                                        className: "truncate",
                                                                        children: option.label
                                                                    })
                                                                ]
                                                            }, option.value))
                                                    })
                                                ]
                                            }, idx))
                                    ]
                                })
                            ]
                        })
                    })
                ]
            })
        ]
    });
};

;// ../../node_modules/lucide-react/dist/esm/icons/corner-down-right.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const CornerDownRight = (0,createLucideIcon/* default */.A)("CornerDownRight", [
    [
        "polyline",
        {
            points: "15 10 20 15 15 20",
            key: "1q7qjw"
        }
    ],
    [
        "path",
        {
            d: "M4 4v7a4 4 0 0 0 4 4h12",
            key: "z08zvw"
        }
    ]
]);
 //# sourceMappingURL=corner-down-right.js.map

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/ellipsis-vertical.js
var ellipsis_vertical = __webpack_require__(186902);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/LogicEditorActions.tsx
/* __next_internal_client_entry_do_not_use__ LogicEditorActions auto */ 







function LogicEditorActions({ localSurvey, logicItem, logicIdx, question, updateQuestion, questionIdx }) {
    const actions = logicItem.actions;
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const handleActionsChange = (operation, actionIdx, action)=>{
        const logicCopy = structuredClone(question.logic) ?? [];
        const currentLogicItem = logicCopy[logicIdx];
        const actionsClone = currentLogicItem.actions;
        switch(operation){
            case "remove":
                actionsClone.splice(actionIdx, 1);
                break;
            case "addBelow":
                actionsClone.splice(actionIdx + 1, 0, {
                    id: (0,cuid2/* createId */.sX)(),
                    objective: hasJumpToQuestionAction(logicItem.actions) ? "requireAnswer" : "jumpToQuestion",
                    target: ""
                });
                break;
            case "duplicate":
                actionsClone.splice(actionIdx + 1, 0, {
                    ...actionsClone[actionIdx],
                    id: (0,cuid2/* createId */.sX)()
                });
                break;
            case "update":
                if (!action) return;
                actionsClone[actionIdx] = action;
                break;
        }
        updateQuestion(questionIdx, {
            logic: logicCopy
        });
    };
    const handleObjectiveChange = (actionIdx, objective)=>{
        const action = actions[actionIdx];
        const actionBody = getUpdatedActionBody(action, objective);
        handleActionsChange("update", actionIdx, actionBody);
    };
    const handleValuesChange = (actionIdx, values)=>{
        const action = actions[actionIdx];
        const actionBody = {
            ...action,
            ...values
        };
        handleActionsChange("update", actionIdx, actionBody);
    };
    const filteredObjectiveOptions = getActionObjectiveOptions(t).filter((option)=>option.value !== "jumpToQuestion");
    const jumpToQuestionActionIdx = actions.findIndex((action)=>action.objective === "jumpToQuestion");
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "flex grow gap-2",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(CornerDownRight, {
                className: "mt-3 h-4 w-4 shrink-0"
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "flex grow flex-col gap-y-2",
                children: actions?.map((action, idx)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex grow items-center justify-between gap-x-2",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "block w-9 shrink-0",
                                children: idx === 0 ? t("environments.surveys.edit.then") : t("common.and")
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex grow items-center gap-x-2",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(InputCombobox, {
                                        id: `action-${idx}-objective`,
                                        showSearch: false,
                                        options: jumpToQuestionActionIdx === -1 || idx === jumpToQuestionActionIdx ? getActionObjectiveOptions(t) : filteredObjectiveOptions,
                                        value: action.objective,
                                        onChangeValue: (val)=>{
                                            handleObjectiveChange(idx, val);
                                        },
                                        comboboxClasses: "grow"
                                    }, `objective-${action.id}`),
                                    action.objective !== "calculate" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(InputCombobox, {
                                        id: `action-${idx}-target`,
                                        showSearch: false,
                                        options: getActionTargetOptions(action, localSurvey, questionIdx, t),
                                        value: action.target,
                                        onChangeValue: (val)=>{
                                            handleValuesChange(idx, {
                                                target: val
                                            });
                                        },
                                        comboboxClasses: "grow"
                                    }, `target-${action.id}`),
                                    action.objective === "calculate" && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(InputCombobox, {
                                                id: `action-${idx}-variableId`,
                                                showSearch: false,
                                                options: getActionVariableOptions(localSurvey),
                                                value: action.variableId,
                                                onChangeValue: (val)=>{
                                                    handleValuesChange(idx, {
                                                        variableId: val,
                                                        value: {
                                                            type: "static",
                                                            value: ""
                                                        }
                                                    });
                                                },
                                                comboboxClasses: "grow",
                                                emptyDropdownText: t("environments.surveys.edit.add_a_variable_to_calculate")
                                            }, `variableId-${action.id}`),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(InputCombobox, {
                                                id: `action-${idx}-operator`,
                                                showSearch: false,
                                                options: getActionOperatorOptions(t, localSurvey.variables.find((v)=>v.id === action.variableId)?.type),
                                                value: action.operator,
                                                onChangeValue: (val)=>{
                                                    handleValuesChange(idx, {
                                                        operator: val
                                                    });
                                                },
                                                comboboxClasses: "grow"
                                            }, `operator-${action.id}`),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(InputCombobox, {
                                                id: `action-${idx}-value`,
                                                withInput: true,
                                                clearable: true,
                                                value: action.value?.value ?? "",
                                                inputProps: {
                                                    placeholder: "Value",
                                                    type: localSurvey.variables.find((v)=>v.id === action.variableId)?.type || "text"
                                                },
                                                groupedOptions: getActionValueOptions(action.variableId, localSurvey, questionIdx, t),
                                                onChangeValue: (val, option, fromInput)=>{
                                                    const fieldType = option?.meta?.type;
                                                    if (!fromInput && fieldType !== "static") {
                                                        handleValuesChange(idx, {
                                                            value: {
                                                                type: fieldType,
                                                                value: val
                                                            }
                                                        });
                                                    } else if (fromInput) {
                                                        handleValuesChange(idx, {
                                                            value: {
                                                                type: "static",
                                                                value: val
                                                            }
                                                        });
                                                    }
                                                },
                                                comboboxClasses: "grow shrink-0"
                                            }, `value-${action.id}`)
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenu */.rI, {
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuTrigger */.ty, {
                                        id: `actions-${idx}-dropdown`,
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ellipsis_vertical/* default */.A, {
                                            className: "h-4 w-4 text-slate-700 hover:text-slate-950"
                                        })
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenuContent */.SQ, {
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                                onClick: ()=>{
                                                    handleActionsChange("addBelow", idx);
                                                },
                                                icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                                    className: "h-4 w-4"
                                                }),
                                                children: t("environments.surveys.edit.add_action_below")
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                                disabled: actions.length === 1,
                                                onClick: ()=>{
                                                    handleActionsChange("remove", idx);
                                                },
                                                icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash/* default */.A, {
                                                    className: "h-4 w-4"
                                                }),
                                                children: t("common.remove")
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                                onClick: ()=>{
                                                    handleActionsChange("duplicate", idx);
                                                },
                                                icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(copy/* default */.A, {
                                                    className: "h-4 w-4"
                                                }),
                                                children: t("common.duplicate")
                                            })
                                        ]
                                    })
                                ]
                            })
                        ]
                    }, action.id))
            })
        ]
    });
}

;// ../../node_modules/lucide-react/dist/esm/icons/workflow.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Workflow = (0,createLucideIcon/* default */.A)("Workflow", [
    [
        "rect",
        {
            width: "8",
            height: "8",
            x: "3",
            y: "3",
            rx: "2",
            key: "by2w9f"
        }
    ],
    [
        "path",
        {
            d: "M7 11v4a2 2 0 0 0 2 2h4",
            key: "xkn7yn"
        }
    ],
    [
        "rect",
        {
            width: "8",
            height: "8",
            x: "13",
            y: "13",
            rx: "2",
            key: "1cgmvn"
        }
    ]
]);
 //# sourceMappingURL=workflow.js.map

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/LogicEditorConditions.tsx
/* __next_internal_client_entry_do_not_use__ LogicEditorConditions auto */ 









function LogicEditorConditions({ conditions, logicIdx, question, localSurvey, questionIdx, updateQuestion, depth = 0 }) {
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    const handleAddConditionBelow = (resourceId)=>{
        const operator = getDefaultOperatorForQuestion(question, t);
        const condition = {
            id: (0,cuid2/* createId */.sX)(),
            leftOperand: {
                value: question.id,
                type: "question"
            },
            operator
        };
        const logicCopy = structuredClone(question.logic) ?? [];
        const logicItem = logicCopy[logicIdx];
        addConditionBelow(logicItem.conditions, resourceId, condition);
        updateQuestion(questionIdx, {
            logic: logicCopy
        });
    };
    const handleConnectorChange = (groupId)=>{
        const logicCopy = structuredClone(question.logic) ?? [];
        const logicItem = logicCopy[logicIdx];
        toggleGroupConnector(logicItem.conditions, groupId);
        updateQuestion(questionIdx, {
            logic: logicCopy
        });
    };
    const handleRemoveCondition = (resourceId)=>{
        const logicCopy = structuredClone(question.logic) ?? [];
        const logicItem = logicCopy[logicIdx];
        removeCondition(logicItem.conditions, resourceId);
        // Remove the logic item if there are zero conditions left
        if (logicItem.conditions.conditions.length === 0) {
            logicCopy.splice(logicIdx, 1);
        }
        updateQuestion(questionIdx, {
            logic: logicCopy
        });
    };
    const handleDuplicateCondition = (resourceId)=>{
        const logicCopy = structuredClone(question.logic) ?? [];
        const logicItem = logicCopy[logicIdx];
        duplicateCondition(logicItem.conditions, resourceId);
        updateQuestion(questionIdx, {
            logic: logicCopy
        });
    };
    const handleCreateGroup = (resourceId)=>{
        const logicCopy = structuredClone(question.logic) ?? [];
        const logicItem = logicCopy[logicIdx];
        createGroupFromResource(logicItem.conditions, resourceId);
        updateQuestion(questionIdx, {
            logic: logicCopy
        });
    };
    const handleUpdateCondition = (resourceId, updateConditionBody)=>{
        const logicCopy = structuredClone(question.logic) ?? [];
        const logicItem = logicCopy[logicIdx];
        updateCondition(logicItem.conditions, resourceId, updateConditionBody);
        updateQuestion(questionIdx, {
            logic: logicCopy
        });
    };
    const handleQuestionChange = (condition, value, option)=>{
        handleUpdateCondition(condition.id, {
            leftOperand: {
                value,
                type: option?.meta?.type
            },
            operator: "isSkipped",
            rightOperand: undefined
        });
    };
    const handleOperatorChange = (condition, value)=>{
        if (value !== condition.operator) {
            handleUpdateCondition(condition.id, {
                operator: value,
                rightOperand: undefined
            });
        }
    };
    const handleRightOperandChange = (condition, value, option)=>{
        const type = option?.meta?.type || "static";
        switch(type){
            case "question":
            case "hiddenField":
            case "variable":
                handleUpdateCondition(condition.id, {
                    rightOperand: {
                        value: value,
                        type
                    }
                });
                break;
            case "static":
                handleUpdateCondition(condition.id, {
                    rightOperand: {
                        value,
                        type
                    }
                });
                break;
        }
    };
    const renderCondition = (condition, index, parentConditionGroup)=>{
        const connector = parentConditionGroup.connector;
        if (isConditionGroup(condition)) {
            return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex items-start justify-between gap-4",
                children: [
                    index === 0 ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        children: t("environments.surveys.edit.when")
                    }) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: (0,lib_cn.cn)("w-14", index === 1 && "cursor-pointer underline"),
                        onClick: ()=>{
                            if (index !== 1) return;
                            handleConnectorChange(parentConditionGroup.id);
                        },
                        children: connector
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "rounded-lg border border-slate-400 p-3",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LogicEditorConditions, {
                            conditions: condition,
                            updateQuestion: updateQuestion,
                            localSurvey: localSurvey,
                            question: question,
                            questionIdx: questionIdx,
                            logicIdx: logicIdx,
                            depth: depth + 1
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "mt-2",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenu */.rI, {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuTrigger */.ty, {
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ellipsis_vertical/* default */.A, {
                                        className: "h-4 w-4 text-slate-700 hover:text-slate-950"
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenuContent */.SQ, {
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                            onClick: ()=>{
                                                handleAddConditionBelow(condition.id);
                                            },
                                            icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                                className: "h-4 w-4"
                                            }),
                                            children: t("environments.surveys.edit.add_condition_below")
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                            disabled: depth === 0 && conditions.conditions.length === 1,
                                            onClick: ()=>handleRemoveCondition(condition.id),
                                            icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash/* default */.A, {
                                                className: "h-4 w-4"
                                            }),
                                            children: t("common.remove")
                                        })
                                    ]
                                })
                            ]
                        })
                    })
                ]
            }, condition.id);
        }
        const conditionValueOptions = getConditionValueOptions(localSurvey, questionIdx, t);
        const conditionOperatorOptions = getConditionOperatorOptions(condition, localSurvey, t);
        const { show, options, showInput = false, inputType } = getMatchValueProps(condition, localSurvey, questionIdx, t);
        const allowMultiSelect = [
            "equalsOneOf",
            "includesAllOf",
            "includesOneOf",
            "doesNotIncludeOneOf",
            "doesNotIncludeAllOf"
        ].includes(condition.operator);
        return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
            className: "flex items-center gap-x-2",
            children: [
                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "w-10 shrink-0",
                    children: index === 0 ? t("environments.surveys.edit.when") : /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: (0,lib_cn.cn)("w-14", index === 1 && "cursor-pointer underline"),
                        onClick: ()=>{
                            if (index !== 1) return;
                            handleConnectorChange(parentConditionGroup.id);
                        },
                        children: connector
                    })
                }),
                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(InputCombobox, {
                    id: `condition-${depth}-${index}-conditionValue`,
                    showSearch: false,
                    groupedOptions: conditionValueOptions,
                    value: condition.leftOperand.value,
                    onChangeValue: (val, option)=>{
                        handleQuestionChange(condition, val, option);
                    },
                    comboboxClasses: "grow"
                }, "conditionValue"),
                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(InputCombobox, {
                    id: `condition-${depth}-${index}-conditionOperator`,
                    showSearch: false,
                    options: conditionOperatorOptions,
                    value: condition.operator,
                    onChangeValue: (val)=>{
                        handleOperatorChange(condition, val);
                    },
                    comboboxClasses: "grow min-w-[150px]"
                }, "conditionOperator"),
                show && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(InputCombobox, {
                    id: `condition-${depth}-${index}-conditionMatchValue`,
                    withInput: showInput,
                    inputProps: {
                        type: inputType,
                        placeholder: t("environments.surveys.edit.select_or_type_value")
                    },
                    showSearch: false,
                    groupedOptions: options,
                    allowMultiSelect: allowMultiSelect,
                    showCheckIcon: allowMultiSelect,
                    comboboxClasses: "grow min-w-[180px] max-w-[300px]",
                    value: condition.rightOperand?.value,
                    clearable: true,
                    onChangeValue: (val, option)=>{
                        handleRightOperandChange(condition, val, option);
                    }
                }, "conditionMatchValue"),
                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenu */.rI, {
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuTrigger */.ty, {
                            id: `condition-${depth}-${index}-dropdown`,
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ellipsis_vertical/* default */.A, {
                                className: "h-4 w-4 text-slate-700 hover:text-slate-950"
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenuContent */.SQ, {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                    onClick: ()=>{
                                        handleAddConditionBelow(condition.id);
                                    },
                                    icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                        className: "h-4 w-4"
                                    }),
                                    children: t("environments.surveys.edit.add_condition_below")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                    disabled: depth === 0 && conditions.conditions.length === 1,
                                    onClick: ()=>handleRemoveCondition(condition.id),
                                    icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash/* default */.A, {
                                        className: "h-4 w-4"
                                    }),
                                    children: t("common.remove")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                    onClick: ()=>handleDuplicateCondition(condition.id),
                                    icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(copy/* default */.A, {
                                        className: "h-4 w-4"
                                    }),
                                    children: t("common.duplicate")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                    onClick: ()=>handleCreateGroup(condition.id),
                                    icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Workflow, {
                                        className: "h-4 w-4"
                                    }),
                                    children: t("environments.surveys.edit.create_group")
                                })
                            ]
                        })
                    ]
                })
            ]
        }, condition.id);
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
        ref: parent,
        className: "flex flex-col gap-y-2",
        children: conditions?.conditions.map((condition, index)=>renderCondition(condition, index, conditions))
    });
}

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/arrow-right.js
var arrow_right = __webpack_require__(180760);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/LogicEditor.tsx
/* __next_internal_client_entry_do_not_use__ LogicEditor auto */ 








function LogicEditor({ localSurvey, logicItem, updateQuestion, question, questionIdx, logicIdx, isLast }) {
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const QUESTIONS_ICON_MAP = (0,questions/* getQuestionIconMap */.Ax)(t);
    const fallbackOptions = (0,react.useMemo)(()=>{
        let options = [];
        localSurvey.questions.forEach((ques)=>{
            if (ques.id === question.id) return null;
            options.push({
                icon: QUESTIONS_ICON_MAP[ques.type],
                label: (0,utils/* getLocalizedValue */.bT)(ques.headline, "default"),
                value: ques.id
            });
        });
        localSurvey.endings.forEach((ending)=>{
            options.push({
                label: ending.type === "endScreen" ? (0,utils/* getLocalizedValue */.bT)(ending.headline, "default") || t("environments.surveys.edit.end_screen_card") : ending.label || t("environments.surveys.edit.redirect_thank_you_card"),
                value: ending.id
            });
        });
        return options;
    }, [
        localSurvey.questions,
        localSurvey.endings,
        question.id,
        t
    ]);
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "flex w-full grow flex-col gap-4 overflow-x-auto pb-2 text-sm",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LogicEditorConditions, {
                conditions: logicItem.conditions,
                updateQuestion: updateQuestion,
                question: question,
                questionIdx: questionIdx,
                localSurvey: localSurvey,
                logicIdx: logicIdx
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LogicEditorActions, {
                logicItem: logicItem,
                logicIdx: logicIdx,
                question: question,
                updateQuestion: updateQuestion,
                localSurvey: localSurvey,
                questionIdx: questionIdx
            }),
            isLast ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex items-center space-x-2",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(arrow_right/* default */.A, {
                        className: "h-4 w-4"
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                        className: "text-nowrap text-slate-700",
                        children: t("environments.surveys.edit.all_other_answers_will_continue_to")
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_select/* Select */.l6, {
                        autoComplete: "true",
                        defaultValue: question.logicFallback || "defaultSelection",
                        onValueChange: (val)=>{
                            updateQuestion(questionIdx, {
                                logicFallback: val === "defaultSelection" ? undefined : val
                            });
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectTrigger */.bq, {
                                className: "w-auto bg-white",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectValue */.yv, {})
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_select/* SelectContent */.gC, {
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectItem */.eb, {
                                        value: "defaultSelection",
                                        children: t("environments.surveys.edit.next_question")
                                    }, "fallback_default_selection"),
                                    fallbackOptions.map((option)=>/*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_select/* SelectItem */.eb, {
                                            value: option.value,
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "flex items-center gap-2",
                                                children: [
                                                    option.icon,
                                                    option.label
                                                ]
                                            })
                                        }, `fallback_${option.value}`))
                                ]
                            })
                        ]
                    })
                ]
            }) : null
        ]
    });
}

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/split.js
var split = __webpack_require__(111678);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/ConditionalLogic.tsx
/* __next_internal_client_entry_do_not_use__ ConditionalLogic auto */ 












function ConditionalLogic({ localSurvey, question, questionIdx, updateQuestion }) {
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const transformedSurvey = (0,react.useMemo)(()=>{
        let modifiedSurvey = (0,recall/* replaceHeadlineRecall */.uD)(localSurvey, "default");
        modifiedSurvey = replaceEndingCardHeadlineRecall(modifiedSurvey, "default");
        return modifiedSurvey;
    }, [
        localSurvey
    ]);
    const addLogic = ()=>{
        const operator = getDefaultOperatorForQuestion(question, t);
        const initialCondition = {
            id: (0,cuid2/* createId */.sX)(),
            conditions: {
                id: (0,cuid2/* createId */.sX)(),
                connector: "and",
                conditions: [
                    {
                        id: (0,cuid2/* createId */.sX)(),
                        leftOperand: {
                            value: question.id,
                            type: "question"
                        },
                        operator
                    }
                ]
            },
            actions: [
                {
                    id: (0,cuid2/* createId */.sX)(),
                    objective: "jumpToQuestion",
                    target: ""
                }
            ]
        };
        updateQuestion(questionIdx, {
            logic: [
                ...question?.logic ?? [],
                initialCondition
            ]
        });
    };
    const handleRemoveLogic = (logicItemIdx)=>{
        const logicCopy = structuredClone(question.logic ?? []);
        const isLast = logicCopy.length === 1;
        logicCopy.splice(logicItemIdx, 1);
        updateQuestion(questionIdx, {
            logic: logicCopy,
            logicFallback: isLast ? undefined : question.logicFallback
        });
    };
    const moveLogic = (from, to)=>{
        const logicCopy = structuredClone(question.logic ?? []);
        const [movedItem] = logicCopy.splice(from, 1);
        logicCopy.splice(to, 0, movedItem);
        updateQuestion(questionIdx, {
            logic: logicCopy
        });
    };
    const duplicateLogic = (logicItemIdx)=>{
        const logicCopy = structuredClone(question.logic ?? []);
        const logicItem = logicCopy[logicItemIdx];
        const newLogicItem = duplicateLogicItem(logicItem);
        logicCopy.splice(logicItemIdx + 1, 0, newLogicItem);
        updateQuestion(questionIdx, {
            logic: logicCopy
        });
    };
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "mt-4",
        ref: parent,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_label/* Label */.J, {
                className: "flex gap-2",
                children: [
                    t("environments.surveys.edit.conditional_logic"),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(split/* default */.A, {
                        className: "h-4 w-4 rotate-90"
                    })
                ]
            }),
            question.logic && question.logic.length > 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mt-2 flex flex-col gap-4",
                ref: parent,
                children: question.logic.map((logicItem, logicItemIdx)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex w-full grow items-start gap-2 rounded-lg border border-slate-200 bg-slate-50 p-4",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LogicEditor, {
                                localSurvey: transformedSurvey,
                                logicItem: logicItem,
                                updateQuestion: updateQuestion,
                                question: question,
                                questionIdx: questionIdx,
                                logicIdx: logicItemIdx,
                                isLast: logicItemIdx === (question.logic ?? []).length - 1
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenu */.rI, {
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuTrigger */.ty, {
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ellipsis_vertical/* default */.A, {
                                            className: "h-4 w-4 text-slate-700 hover:text-slate-950"
                                        })
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(dropdown_menu/* DropdownMenuContent */.SQ, {
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                                onClick: ()=>{
                                                    duplicateLogic(logicItemIdx);
                                                },
                                                icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(copy/* default */.A, {
                                                    className: "h-4 w-4"
                                                }),
                                                children: t("common.duplicate")
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                                disabled: logicItemIdx === 0,
                                                onClick: ()=>{
                                                    moveLogic(logicItemIdx, logicItemIdx - 1);
                                                },
                                                icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(arrow_up/* default */.A, {
                                                    className: "h-4 w-4"
                                                }),
                                                children: t("common.move_up")
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                                disabled: logicItemIdx === (question.logic ?? []).length - 1,
                                                onClick: ()=>{
                                                    moveLogic(logicItemIdx, logicItemIdx + 1);
                                                },
                                                icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(arrow_down/* default */.A, {
                                                    className: "h-4 w-4"
                                                }),
                                                children: t("common.move_down")
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dropdown_menu/* DropdownMenuItem */._2, {
                                                onClick: ()=>{
                                                    handleRemoveLogic(logicItemIdx);
                                                },
                                                icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash/* default */.A, {
                                                    className: "h-4 w-4"
                                                }),
                                                children: t("common.remove")
                                            })
                                        ]
                                    })
                                ]
                            })
                        ]
                    }, logicItem.id))
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mt-2 flex items-center space-x-2",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                    id: "logicJumps",
                    type: "button",
                    name: "logicJumps",
                    size: "sm",
                    variant: "secondary",
                    onClick: addLogic,
                    children: [
                        t("environments.surveys.edit.add_logic"),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {})
                    ]
                })
            })
        ]
    });
}

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/UpdateQuestionId.tsx
/* __next_internal_client_entry_do_not_use__ UpdateQuestionId auto */ 







const UpdateQuestionId = ({ localSurvey, question, questionIdx, updateQuestion })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [currentValue, setCurrentValue] = (0,react.useState)(question.id);
    const [prevValue, setPrevValue] = (0,react.useState)(question.id);
    const [isInputInvalid, setIsInputInvalid] = (0,react.useState)(currentValue.trim() === "" || currentValue.includes(" "));
    const saveAction = ()=>{
        // return early if the input value was not changed
        if (currentValue === prevValue) {
            return;
        }
        const questionIds = localSurvey.questions.map((q)=>q.id);
        const endingCardIds = localSurvey.endings.map((e)=>e.id);
        const hiddenFieldIds = localSurvey.hiddenFields.fieldIds ?? [];
        const validateIdError = (0,validation/* validateId */.GZ)("Question", currentValue, questionIds, endingCardIds, hiddenFieldIds);
        if (validateIdError) {
            setIsInputInvalid(true);
            dist/* default */.Ay.error(validateIdError);
            setCurrentValue(prevValue);
            return;
        }
        setIsInputInvalid(false);
        dist/* default */.Ay.success(t("environments.surveys.edit.question_id_updated"));
        updateQuestion(questionIdx, {
            id: currentValue
        });
        setPrevValue(currentValue); // after successful update, set current value as previous value
    };
    const isButtonDisabled = ()=>{
        if (currentValue === question.id || currentValue.trim() === "") return true;
        else return false;
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                htmlFor: "questionId",
                children: t("common.question_id")
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-2 inline-flex w-full items-center space-x-2",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                        id: "questionId",
                        name: "questionId",
                        value: currentValue,
                        onChange: (e)=>{
                            setCurrentValue(e.target.value);
                        },
                        dir: "auto",
                        disabled: localSurvey.status !== "draft" && !question.isDraft,
                        className: `h-10 ${isInputInvalid ? "border-red-300 focus:border-red-300" : ""}`
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                        size: "sm",
                        onClick: saveAction,
                        disabled: isButtonDisabled(),
                        children: t("common.save")
                    })
                ]
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/AdvancedSettings.tsx



const AdvancedSettings = ({ question, questionIdx, localSurvey, updateQuestion })=>{
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "flex flex-col gap-4",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ConditionalLogic, {
                question: question,
                updateQuestion: updateQuestion,
                localSurvey: localSurvey,
                questionIdx: questionIdx
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(UpdateQuestionId, {
                question: question,
                questionIdx: questionIdx,
                localSurvey: localSurvey,
                updateQuestion: updateQuestion
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/CTAQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ CTAQuestionForm auto */ 








const CTAQuestionForm = ({ question, questionIdx, updateQuestion, lastQuestion, isInvalid, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const options = [
        {
            value: "internal",
            label: t("environments.surveys.edit.button_to_continue_in_survey")
        },
        {
            value: "external",
            label: t("environments.surveys.edit.button_to_link_to_external_url")
        }
    ];
    const [firstRender, setFirstRender] = (0,react.useState)(true);
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        ref: parent,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                label: t("environments.surveys.edit.question") + "*",
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-3",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                        htmlFor: "subheader",
                        children: t("common.description")
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "mt-2",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LocalizedEditor, {
                            id: "subheader",
                            value: question.html,
                            localSurvey: localSurvey,
                            isInvalid: isInvalid,
                            updateQuestion: updateQuestion,
                            selectedLanguageCode: selectedLanguageCode,
                            setSelectedLanguageCode: setSelectedLanguageCode,
                            firstRender: firstRender,
                            setFirstRender: setFirstRender,
                            questionIdx: questionIdx,
                            locale: locale
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mt-3",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(options_switch/* OptionsSwitch */.V, {
                    options: options,
                    currentOption: question.buttonExternal ? "external" : "internal",
                    handleOptionChange: (e)=>updateQuestion(questionIdx, {
                            buttonExternal: e === "external"
                        })
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mt-2 flex justify-between gap-8",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "flex w-full space-x-2",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                            id: "buttonLabel",
                            value: question.buttonLabel,
                            label: t("environments.surveys.edit.next_button_label"),
                            localSurvey: localSurvey,
                            questionIdx: questionIdx,
                            maxLength: 48,
                            placeholder: lastQuestion ? t("common.finish") : t("common.next"),
                            isInvalid: isInvalid,
                            updateQuestion: updateQuestion,
                            selectedLanguageCode: selectedLanguageCode,
                            setSelectedLanguageCode: setSelectedLanguageCode,
                            locale: locale
                        }),
                        questionIdx !== 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                            id: "backButtonLabel",
                            value: question.backButtonLabel,
                            label: t("environments.surveys.edit.back_button_label"),
                            localSurvey: localSurvey,
                            questionIdx: questionIdx,
                            maxLength: 48,
                            placeholder: "Back",
                            isInvalid: isInvalid,
                            updateQuestion: updateQuestion,
                            selectedLanguageCode: selectedLanguageCode,
                            setSelectedLanguageCode: setSelectedLanguageCode,
                            locale: locale
                        })
                    ]
                })
            }),
            question.buttonExternal && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-3 flex-1",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                        htmlFor: "buttonLabel",
                        children: t("environments.surveys.edit.button_url")
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "mt-2",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                            id: "buttonUrl",
                            name: "buttonUrl",
                            value: question.buttonUrl,
                            placeholder: "https://website.com",
                            onChange: (e)=>updateQuestion(questionIdx, {
                                    buttonUrl: e.target.value
                                })
                        })
                    })
                ]
            }),
            !question.required && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mt-2",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                    id: "dismissButtonLabel",
                    value: question.dismissButtonLabel,
                    label: t("environments.surveys.edit.skip_button_label"),
                    localSurvey: localSurvey,
                    questionIdx: questionIdx,
                    placeholder: "skip",
                    isInvalid: isInvalid,
                    updateQuestion: updateQuestion,
                    selectedLanguageCode: selectedLanguageCode,
                    setSelectedLanguageCode: setSelectedLanguageCode,
                    locale: locale
                })
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/CalQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ CalQuestionForm auto */ 









const CalQuestionForm = ({ localSurvey, question, questionIdx, updateQuestion, selectedLanguageCode, setSelectedLanguageCode, isInvalid, locale })=>{
    const surveyLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages);
    const [isCalHostEnabled, setIsCalHostEnabled] = (0,react.useState)(!!question.calHost);
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    (0,react.useEffect)(()=>{
        if (!isCalHostEnabled) {
            updateQuestion(questionIdx, {
                calHost: undefined
            });
        } else {
            updateQuestion(questionIdx, {
                calHost: question.calHost ?? "cal.com"
            });
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        isCalHostEnabled
    ]);
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                label: t("environments.surveys.edit.question") + "*",
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                label: t("common.description"),
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        className: "mt-3",
                        variant: "secondary",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
                            });
                        },
                        children: [
                            " ",
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "mt-5 flex flex-col gap-6",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex flex-col gap-3",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                        htmlFor: "calUserName",
                                        children: t("environments.surveys.edit.cal_username")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                            id: "calUserName",
                                            name: "calUserName",
                                            value: question.calUserName,
                                            onChange: (e)=>updateQuestion(questionIdx, {
                                                    calUserName: e.target.value
                                                })
                                        })
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                isChecked: isCalHostEnabled,
                                onToggle: (checked)=>setIsCalHostEnabled(checked),
                                htmlId: "calHost",
                                description: t("environments.surveys.edit.needed_for_self_hosted_cal_com_instance"),
                                childBorder: true,
                                title: t("environments.surveys.edit.custom_hostname"),
                                customContainerClass: "p-0",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "p-4",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "flex items-center gap-2",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                htmlFor: "calHost",
                                                children: t("environments.surveys.edit.hostname")
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                id: "calHost",
                                                name: "calHost",
                                                placeholder: "my-cal-instance.com",
                                                value: question.calHost,
                                                className: "bg-white",
                                                onChange: (e)=>updateQuestion(questionIdx, {
                                                        calHost: e.target.value
                                                    })
                                            })
                                        ]
                                    })
                                })
                            })
                        ]
                    })
                ]
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/ConsentQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ ConsentQuestionForm auto */ 





const ConsentQuestionForm = ({ question, questionIdx, updateQuestion, isInvalid, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const [firstRender, setFirstRender] = (0,react.useState)(true);
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                label: t("environments.surveys.edit.question") + "*",
                value: question.headline,
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-3",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                        htmlFor: "subheader",
                        children: t("common.description")
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "mt-2",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LocalizedEditor, {
                            id: "subheader",
                            value: question.html,
                            localSurvey: localSurvey,
                            isInvalid: isInvalid,
                            updateQuestion: updateQuestion,
                            selectedLanguageCode: selectedLanguageCode,
                            setSelectedLanguageCode: setSelectedLanguageCode,
                            firstRender: firstRender,
                            setFirstRender: setFirstRender,
                            questionIdx: questionIdx,
                            locale: locale
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "label",
                label: t("environments.surveys.edit.checkbox_label") + "*",
                placeholder: "I agree to the terms and conditions",
                value: question.label,
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/DateQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ DateQuestionForm auto */ 








const dateOptions = [
    {
        value: "M-d-y",
        label: "MM-DD-YYYY"
    },
    {
        value: "d-M-y",
        label: "DD-MM-YYYY"
    },
    {
        value: "y-M-d",
        label: "YYYY-MM-DD"
    }
];
const DateQuestionForm = ({ question, questionIdx, updateQuestion, isInvalid, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const surveyLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages);
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                label: t("environments.surveys.edit.question") + "*",
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: parent,
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                label: t("environments.surveys.edit.description"),
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        className: "mt-3",
                        variant: "secondary",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
                            });
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-3",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                        htmlFor: "questionType",
                        children: t("environments.surveys.edit.date_format")
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "mt-2 flex items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(options_switch/* OptionsSwitch */.V, {
                            options: dateOptions,
                            currentOption: question.format,
                            handleOptionChange: (value)=>updateQuestion(questionIdx, {
                                    format: value
                                })
                        })
                    })
                ]
            })
        ]
    });
};

;// ../../node_modules/next/dist/build/webpack/loaders/next-flight-server-reference-proxy-loader.js?id=7f2558c262e325508f06bf1b63ab29648d5bbe84b5&name=getOrganizationBillingInfoAction!

const getOrganizationBillingInfoAction = /*#__PURE__*/(0,action_client_wrapper.createServerReference)("7f2558c262e325508f06bf1b63ab29648d5bbe84b5", action_client_wrapper.callServer, undefined, action_client_wrapper.findSourceMapURL, "getOrganizationBillingInfoAction")
;// ./modules/utils/hooks/useGetBillingInfo.ts


const useGetBillingInfo = (organizationId)=>{
    const [billingInfo, setBillingInfo] = (0,react.useState)();
    const [isLoading, setIsLoading] = (0,react.useState)(false);
    const [error, setError] = (0,react.useState)("");
    (0,react.useEffect)(()=>{
        const getBillingInfo = async ()=>{
            try {
                setIsLoading(true);
                const billingInfo = await getOrganizationBillingInfoAction({
                    organizationId
                });
                if (billingInfo?.data) {
                    setIsLoading(false);
                    setBillingInfo(billingInfo.data);
                }
                setError("No billing info found");
                setIsLoading(false);
            } catch (err) {
                setIsLoading(false);
                setError(err.message);
            }
        };
        getBillingInfo();
    }, [
        organizationId
    ]);
    return {
        billingInfo,
        isLoading,
        error
    };
};

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/circle-x.js
var circle_x = __webpack_require__(911681);
// EXTERNAL MODULE: ../../packages/types/common.ts
var common = __webpack_require__(52615);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/FileUploadQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ FileUploadQuestionForm auto */ 














const FileUploadQuestionForm = ({ localSurvey, question, questionIdx, updateQuestion, isInvalid, project, selectedLanguageCode, setSelectedLanguageCode, isFormbricksCloud, locale })=>{
    const [extension, setExtension] = (0,react.useState)("");
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [isMaxSizeError, setMaxSizeError] = (0,react.useState)(false);
    const { billingInfo, error: billingInfoError, isLoading: billingInfoLoading } = useGetBillingInfo(project?.organizationId ?? "");
    const surveyLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages);
    const handleInputChange = (event)=>{
        setExtension(event.target.value);
    };
    const addExtension = (event)=>{
        event.preventDefault();
        event.stopPropagation();
        let modifiedExtension = extension.trim();
        // Remove the dot at the start if it exists
        if (modifiedExtension.startsWith(".")) {
            modifiedExtension = modifiedExtension.substring(1);
        }
        if (!modifiedExtension) {
            dist/* toast */.oR.error(t("environments.surveys.edit.please_enter_a_file_extension"));
            return;
        }
        const parsedExtensionResult = common/* ZAllowedFileExtension */.gK.safeParse(modifiedExtension);
        if (!parsedExtensionResult.success) {
            dist/* toast */.oR.error(t("environments.surveys.edit.this_file_type_is_not_supported"));
            return;
        }
        if (question.allowedFileExtensions) {
            if (!question.allowedFileExtensions.includes(modifiedExtension)) {
                updateQuestion(questionIdx, {
                    allowedFileExtensions: [
                        ...question.allowedFileExtensions,
                        modifiedExtension
                    ]
                });
                setExtension("");
            } else {
                dist/* toast */.oR.error(t("environments.surveys.edit.this_extension_is_already_added"));
            }
        } else {
            updateQuestion(questionIdx, {
                allowedFileExtensions: [
                    modifiedExtension
                ]
            });
            setExtension("");
        }
    };
    const removeExtension = (event, index)=>{
        event.preventDefault();
        if (question.allowedFileExtensions) {
            const updatedExtensions = [
                ...question?.allowedFileExtensions
            ];
            updatedExtensions.splice(index, 1);
            updateQuestion(questionIdx, {
                allowedFileExtensions: updatedExtensions
            });
        }
    };
    const maxSizeInMBLimit = (0,react.useMemo)(()=>{
        if (billingInfoError || billingInfoLoading || !billingInfo) {
            return 10;
        }
        if (billingInfo.plan !== "free") {
            // 1GB in MB
            return 1024;
        }
        return 10;
    }, [
        billingInfo,
        billingInfoError,
        billingInfoLoading
    ]);
    const handleMaxSizeInMBToggle = (checked)=>{
        const defaultMaxSizeInMB = isFormbricksCloud ? maxSizeInMBLimit : 1024;
        updateQuestion(questionIdx, {
            maxSizeInMB: checked ? defaultMaxSizeInMB : undefined
        });
    };
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                label: t("environments.surveys.edit.question") + "*",
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: parent,
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                label: t("common.description"),
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        className: "mt-3",
                        variant: "secondary",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
                            });
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mb-8 mt-6 space-y-6",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                        isChecked: question.allowMultipleFiles,
                        onToggle: ()=>updateQuestion(questionIdx, {
                                allowMultipleFiles: !question.allowMultipleFiles
                            }),
                        htmlId: "allowMultipleFile",
                        title: t("environments.surveys.edit.allow_multiple_files"),
                        description: t("environments.surveys.edit.let_people_upload_up_to_25_files_at_the_same_time"),
                        childBorder: true,
                        customContainerClass: "p-0"
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                        isChecked: !!question.maxSizeInMB,
                        onToggle: handleMaxSizeInMBToggle,
                        htmlId: "maxFileSize",
                        title: t("environments.surveys.edit.max_file_size"),
                        description: t("environments.surveys.edit.limit_the_maximum_file_size"),
                        childBorder: true,
                        customContainerClass: "p-0",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("label", {
                            htmlFor: "autoCompleteResponses",
                            className: "cursor-pointer bg-slate-50 p-4",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                    className: "text-sm font-semibold text-slate-700",
                                    children: [
                                        t("environments.surveys.edit.limit_upload_file_size_to"),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                            autoFocus: true,
                                            type: "number",
                                            id: "fileSizeLimit",
                                            value: question.maxSizeInMB,
                                            onChange: (e)=>{
                                                const parsedValue = parseInt(e.target.value, 10);
                                                if (isFormbricksCloud && parsedValue > maxSizeInMBLimit) {
                                                    dist/* toast */.oR.error(`${t("environments.surveys.edit.max_file_size_limit_is")} ${maxSizeInMBLimit} MB`);
                                                    setMaxSizeError(true);
                                                    updateQuestion(questionIdx, {
                                                        maxSizeInMB: maxSizeInMBLimit
                                                    });
                                                    return;
                                                }
                                                updateQuestion(questionIdx, {
                                                    maxSizeInMB: parseInt(e.target.value, 10)
                                                });
                                            },
                                            className: "ml-2 mr-2 inline w-20 bg-white text-center text-sm"
                                        }),
                                        "MB"
                                    ]
                                }),
                                isMaxSizeError && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                    className: "text-xs text-red-500",
                                    children: [
                                        t("environments.surveys.edit.max_file_size_limit_is"),
                                        " ",
                                        maxSizeInMBLimit,
                                        " MB.",
                                        " ",
                                        t("environments.surveys.edit.if_you_need_more_please"),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)((link_default()), {
                                            className: "underline",
                                            target: "_blank",
                                            href: `/environments/${localSurvey.environmentId}/settings/billing`,
                                            children: t("common.please_upgrade_your_plan")
                                        })
                                    ]
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                        isChecked: !!question.allowedFileExtensions,
                        onToggle: (checked)=>updateQuestion(questionIdx, {
                                allowedFileExtensions: checked ? [] : undefined
                            }),
                        htmlId: "limitFileType",
                        title: t("environments.surveys.edit.limit_file_types"),
                        description: t("environments.surveys.edit.control_which_file_types_can_be_uploaded"),
                        childBorder: true,
                        customContainerClass: "p-0",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "p-4",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "flex flex-row flex-wrap gap-2",
                                    children: question.allowedFileExtensions && question.allowedFileExtensions.map((item, index)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            className: "mb-2 flex h-8 items-center space-x-2 rounded-full bg-slate-200 px-2",
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                    className: "text-sm text-slate-800",
                                                    children: item
                                                }),
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                                    className: "inline-flex px-0",
                                                    variant: "ghost",
                                                    onClick: (e)=>removeExtension(e, index),
                                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(circle_x/* default */.A, {
                                                        className: "h-4 w-4"
                                                    })
                                                })
                                            ]
                                        }))
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    className: "flex items-center",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                            autoFocus: true,
                                            className: "mr-2 w-20 rounded-md bg-white placeholder:text-sm",
                                            placeholder: ".pdf",
                                            value: extension,
                                            onChange: handleInputChange,
                                            type: "text"
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                            size: "sm",
                                            variant: "secondary",
                                            onClick: (e)=>addExtension(e),
                                            children: t("environments.surveys.edit.allow_file_type")
                                        })
                                    ]
                                })
                            ]
                        })
                    })
                ]
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/MatrixQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ MatrixQuestionForm auto */ 










const MatrixQuestionForm = ({ question, questionIdx, updateQuestion, isInvalid, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const languageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages);
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    // Function to add a new Label input field
    const handleAddLabel = (type)=>{
        if (type === "row") {
            const updatedRows = [
                ...question.rows,
                (0,utils/* createI18nString */.YV)("", languageCodes)
            ];
            updateQuestion(questionIdx, {
                rows: updatedRows
            });
        } else {
            const updatedColumns = [
                ...question.columns,
                (0,utils/* createI18nString */.YV)("", languageCodes)
            ];
            updateQuestion(questionIdx, {
                columns: updatedColumns
            });
        }
    };
    // Function to delete a label input field
    const handleDeleteLabel = (type, index)=>{
        const labels = type === "row" ? question.rows : question.columns;
        if (labels.length <= 2) return; // Prevent deleting below minimum length
        const updatedLabels = labels.filter((_, idx)=>idx !== index);
        if (type === "row") {
            updateQuestion(questionIdx, {
                rows: updatedLabels
            });
        } else {
            updateQuestion(questionIdx, {
                columns: updatedLabels
            });
        }
    };
    const updateMatrixLabel = (index, type, matrixLabel)=>{
        const labels = type === "row" ? [
            ...question.rows
        ] : [
            ...question.columns
        ];
        // Update the label at the given index, or add a new label if index is undefined
        if (index !== undefined) {
            labels[index] = matrixLabel;
        } else {
            labels.push(matrixLabel);
        }
        if (type === "row") {
            updateQuestion(questionIdx, {
                rows: labels
            });
        } else {
            updateQuestion(questionIdx, {
                columns: labels
            });
        }
    };
    const handleKeyDown = (e, type)=>{
        if (e.key === "Enter") {
            e.preventDefault();
            handleAddLabel(type);
        }
    };
    const shuffleOptionsTypes = {
        none: {
            id: "none",
            label: t("environments.surveys.edit.keep_current_order"),
            show: true
        },
        all: {
            id: "all",
            label: t("environments.surveys.edit.randomize_all"),
            show: true
        },
        exceptLast: {
            id: "exceptLast",
            label: t("environments.surveys.edit.randomize_all_except_last"),
            show: true
        }
    };
    /// Auto animate
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                label: t("environments.surveys.edit.question") + "*",
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: parent,
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                label: t("common.description"),
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        variant: "secondary",
                        className: "mt-3",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", languageCodes)
                            });
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-3 grid grid-cols-2 gap-4",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                htmlFor: "rows",
                                children: t("environments.surveys.edit.rows")
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "mt-2 flex flex-col gap-2",
                                ref: parent,
                                children: [
                                    question.rows.map((_, index)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            className: "flex items-center",
                                            onKeyDown: (e)=>handleKeyDown(e, "row"),
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                                    id: `row-${index}`,
                                                    label: "",
                                                    localSurvey: localSurvey,
                                                    questionIdx: questionIdx,
                                                    value: question.rows[index],
                                                    updateMatrixLabel: updateMatrixLabel,
                                                    selectedLanguageCode: selectedLanguageCode,
                                                    setSelectedLanguageCode: setSelectedLanguageCode,
                                                    isInvalid: isInvalid && !isLabelValidForAllLanguages(question.rows[index], localSurvey.languages),
                                                    locale: locale
                                                }),
                                                question.rows.length > 2 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                                                    tooltipContent: t("common.delete"),
                                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                                        variant: "ghost",
                                                        size: "icon",
                                                        className: "ml-2",
                                                        onClick: (e)=>{
                                                            e.preventDefault();
                                                            handleDeleteLabel("row", index);
                                                        },
                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash/* default */.A, {})
                                                    })
                                                })
                                            ]
                                        }, `row-${index}`)),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                                        variant: "secondary",
                                        size: "sm",
                                        className: "w-fit",
                                        onClick: (e)=>{
                                            e.preventDefault();
                                            handleAddLabel("row");
                                        },
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {}),
                                            t("environments.surveys.edit.add_row")
                                        ]
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                htmlFor: "columns",
                                children: t("environments.surveys.edit.columns")
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "mt-2 flex flex-col gap-2",
                                ref: parent,
                                children: [
                                    question.columns.map((_, index)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            className: "flex items-center",
                                            onKeyDown: (e)=>handleKeyDown(e, "column"),
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                                    id: `column-${index}`,
                                                    label: "",
                                                    localSurvey: localSurvey,
                                                    questionIdx: questionIdx,
                                                    value: question.columns[index],
                                                    updateMatrixLabel: updateMatrixLabel,
                                                    selectedLanguageCode: selectedLanguageCode,
                                                    setSelectedLanguageCode: setSelectedLanguageCode,
                                                    isInvalid: isInvalid && !isLabelValidForAllLanguages(question.columns[index], localSurvey.languages),
                                                    locale: locale
                                                }),
                                                question.columns.length > 2 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipRenderer */.rE, {
                                                    tooltipContent: t("common.delete"),
                                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                                        variant: "ghost",
                                                        size: "icon",
                                                        className: "ml-2",
                                                        onClick: (e)=>{
                                                            e.preventDefault();
                                                            handleDeleteLabel("column", index);
                                                        },
                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash/* default */.A, {})
                                                    })
                                                })
                                            ]
                                        }, `column-${index}`)),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                                        variant: "secondary",
                                        size: "sm",
                                        className: "w-fit",
                                        onClick: (e)=>{
                                            e.preventDefault();
                                            handleAddLabel("column");
                                        },
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {}),
                                            t("environments.surveys.edit.add_column")
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "mt-3 flex flex-1 items-center justify-end gap-2",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ShuffleOptionSelect, {
                                    shuffleOptionsTypes: shuffleOptionsTypes,
                                    questionIdx: questionIdx,
                                    updateQuestion: updateQuestion,
                                    shuffleOption: question.shuffleOption
                                })
                            })
                        ]
                    })
                ]
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/MultipleChoiceQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ MultipleChoiceQuestionForm auto */ 
















const MultipleChoiceQuestionForm = ({ question, questionIdx, updateQuestion, isInvalid, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const lastChoiceRef = (0,react.useRef)(null);
    const [isNew, setIsNew] = (0,react.useState)(true);
    const [isInvalidValue, setisInvalidValue] = (0,react.useState)(null);
    const questionRef = (0,react.useRef)(null);
    const surveyLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages);
    const surveyLanguages = localSurvey.languages ?? [];
    const shuffleOptionsTypes = {
        none: {
            id: "none",
            label: t("environments.surveys.edit.keep_current_order"),
            show: true
        },
        all: {
            id: "all",
            label: t("environments.surveys.edit.randomize_all"),
            show: question.choices.filter((c)=>c.id === "other").length === 0
        },
        exceptLast: {
            id: "exceptLast",
            label: t("environments.surveys.edit.randomize_all_except_last"),
            show: true
        }
    };
    const updateChoice = (choiceIdx, updatedAttributes)=>{
        let newChoices = [];
        if (question.choices) {
            newChoices = question.choices.map((choice, idx)=>{
                if (idx !== choiceIdx) return choice;
                return {
                    ...choice,
                    ...updatedAttributes
                };
            });
        }
        updateQuestion(questionIdx, {
            choices: newChoices
        });
    };
    const addChoice = (choiceIdx)=>{
        setIsNew(false); // This question is no longer new.
        let newChoices = !question.choices ? [] : question.choices;
        const otherChoice = newChoices.find((choice)=>choice.id === "other");
        if (otherChoice) {
            newChoices = newChoices.filter((choice)=>choice.id !== "other");
        }
        const newChoice = {
            id: (0,cuid2/* createId */.sX)(),
            label: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
        };
        if (choiceIdx !== undefined) {
            newChoices.splice(choiceIdx + 1, 0, newChoice);
        } else {
            newChoices.push(newChoice);
        }
        if (otherChoice) {
            newChoices.push(otherChoice);
        }
        updateQuestion(questionIdx, {
            choices: newChoices
        });
    };
    const addOther = ()=>{
        if (question.choices.filter((c)=>c.id === "other").length === 0) {
            const newChoices = !question.choices ? [] : question.choices.filter((c)=>c.id !== "other");
            newChoices.push({
                id: "other",
                label: (0,utils/* createI18nString */.YV)("Other", surveyLanguageCodes)
            });
            updateQuestion(questionIdx, {
                choices: newChoices,
                ...question.shuffleOption === shuffleOptionsTypes.all.id && {
                    shuffleOption: shuffleOptionsTypes.exceptLast.id
                }
            });
        }
    };
    const deleteChoice = (choiceIdx)=>{
        const choiceToDelete = question.choices[choiceIdx].id;
        if (choiceToDelete !== "other") {
            const questionIdx = findOptionUsedInLogic(localSurvey, question.id, choiceToDelete);
            if (questionIdx !== -1) {
                dist/* default */.Ay.error(t("environments.surveys.edit.option_used_in_logic_error", {
                    questionIndex: questionIdx + 1
                }));
                return;
            }
        }
        const newChoices = !question.choices ? [] : question.choices.filter((_, idx)=>idx !== choiceIdx);
        const choiceValue = question.choices[choiceIdx].label[selectedLanguageCode];
        if (isInvalidValue === choiceValue) {
            setisInvalidValue(null);
        }
        updateQuestion(questionIdx, {
            choices: newChoices
        });
    };
    (0,react.useEffect)(()=>{
        if (lastChoiceRef.current) {
            lastChoiceRef.current?.focus();
        }
    }, [
        question.choices?.length
    ]);
    // This effect will run once on initial render, setting focus to the question input.
    (0,react.useEffect)(()=>{
        if (isNew && questionRef.current) {
            questionRef.current.focus();
        }
    }, [
        isNew
    ]);
    // Auto animate
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                label: t("environments.surveys.edit.question") + "*",
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: parent,
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                label: t("common.description"),
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        variant: "secondary",
                        className: "mt-3",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
                            });
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-3",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                        htmlFor: "choices",
                        children: "Options*"
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "mt-2",
                        id: "choices",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(core_esm/* DndContext */.Mp, {
                                id: "multi-choice-choices",
                                onDragEnd: (event)=>{
                                    const { active, over } = event;
                                    if (active.id === "other" || over?.id === "other") {
                                        return;
                                    }
                                    if (!active || !over) {
                                        return;
                                    }
                                    const activeIndex = question.choices.findIndex((choice)=>choice.id === active.id);
                                    const overIndex = question.choices.findIndex((choice)=>choice.id === over.id);
                                    const newChoices = [
                                        ...question.choices
                                    ];
                                    newChoices.splice(activeIndex, 1);
                                    newChoices.splice(overIndex, 0, question.choices[activeIndex]);
                                    updateQuestion(questionIdx, {
                                        choices: newChoices
                                    });
                                },
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(sortable_esm/* SortableContext */.gB, {
                                    items: question.choices,
                                    strategy: sortable_esm/* verticalListSortingStrategy */._G,
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        className: "flex flex-col gap-2",
                                        ref: parent,
                                        children: question.choices && question.choices.map((choice, choiceIdx)=>/*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionOptionChoice, {
                                                choice: choice,
                                                choiceIdx: choiceIdx,
                                                questionIdx: questionIdx,
                                                updateChoice: updateChoice,
                                                deleteChoice: deleteChoice,
                                                addChoice: addChoice,
                                                isInvalid: isInvalid,
                                                localSurvey: localSurvey,
                                                selectedLanguageCode: selectedLanguageCode,
                                                setSelectedLanguageCode: setSelectedLanguageCode,
                                                surveyLanguages: surveyLanguages,
                                                question: question,
                                                updateQuestion: updateQuestion,
                                                surveyLanguageCodes: surveyLanguageCodes,
                                                locale: locale
                                            }, choice.id))
                                    })
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "mt-2 flex items-center justify-between space-x-2",
                                children: [
                                    question.choices.filter((c)=>c.id === "other").length === 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                        size: "sm",
                                        variant: "secondary",
                                        type: "button",
                                        onClick: ()=>addOther(),
                                        children: t("environments.surveys.edit.add_other")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                        size: "sm",
                                        variant: "secondary",
                                        type: "button",
                                        onClick: ()=>{
                                            updateQuestion(questionIdx, {
                                                type: question.type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti ? types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle : types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti
                                            });
                                        },
                                        children: question.type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle ? t("environments.surveys.edit.convert_to_multiple_choice") : t("environments.surveys.edit.convert_to_single_choice")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        className: "flex flex-1 items-center justify-end gap-2",
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ShuffleOptionSelect, {
                                            questionIdx: questionIdx,
                                            shuffleOption: question.shuffleOption,
                                            updateQuestion: updateQuestion,
                                            shuffleOptionsTypes: shuffleOptionsTypes
                                        })
                                    })
                                ]
                            })
                        ]
                    })
                ]
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/NPSQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ NPSQuestionForm auto */ 







const NPSQuestionForm = ({ question, questionIdx, updateQuestion, lastQuestion, isInvalid, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const surveyLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages);
    // Auto animate
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                label: t("environments.surveys.edit.question") + "*",
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: parent,
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                label: t("common.description"),
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        variant: "secondary",
                        className: "mt-3",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
                            });
                        },
                        children: [
                            " ",
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex justify-between space-x-2",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "w-full",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                            id: "lowerLabel",
                            value: question.lowerLabel,
                            label: t("environments.surveys.edit.lower_label"),
                            localSurvey: localSurvey,
                            questionIdx: questionIdx,
                            isInvalid: isInvalid,
                            updateQuestion: updateQuestion,
                            selectedLanguageCode: selectedLanguageCode,
                            setSelectedLanguageCode: setSelectedLanguageCode,
                            locale: locale
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "w-full",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                            id: "upperLabel",
                            value: question.upperLabel,
                            label: t("environments.surveys.edit.upper_label"),
                            localSurvey: localSurvey,
                            questionIdx: questionIdx,
                            isInvalid: isInvalid,
                            updateQuestion: updateQuestion,
                            selectedLanguageCode: selectedLanguageCode,
                            setSelectedLanguageCode: setSelectedLanguageCode,
                            locale: locale
                        })
                    })
                ]
            }),
            !question.required && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mt-3",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                    id: "buttonLabel",
                    value: question.buttonLabel,
                    label: t("environments.surveys.edit.next_button_label"),
                    localSurvey: localSurvey,
                    questionIdx: questionIdx,
                    maxLength: 48,
                    placeholder: lastQuestion ? t("common.finish") : t("common.next"),
                    isInvalid: isInvalid,
                    updateQuestion: updateQuestion,
                    selectedLanguageCode: selectedLanguageCode,
                    setSelectedLanguageCode: setSelectedLanguageCode,
                    locale: locale
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                isChecked: question.isColorCodingEnabled,
                onToggle: ()=>updateQuestion(questionIdx, {
                        isColorCodingEnabled: !question.isColorCodingEnabled
                    }),
                htmlId: "isColorCodingEnabled",
                title: t("environments.surveys.edit.add_color_coding"),
                description: t("environments.surveys.edit.add_color_coding_description"),
                childBorder: true,
                customContainerClass: "p-0 mt-4"
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/hash.js
var hash = __webpack_require__(144960);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/OpenQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ OpenQuestionForm auto */ 











const OpenQuestionForm = ({ question, questionIdx, updateQuestion, isInvalid, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const questionTypes = [
        {
            value: "text",
            label: t("common.text"),
            icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(message_square_text/* default */.A, {
                className: "h-4 w-4"
            })
        },
        {
            value: "email",
            label: t("common.email"),
            icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(mail/* default */.A, {
                className: "h-4 w-4"
            })
        },
        {
            value: "url",
            label: t("common.url"),
            icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(icons_link/* default */.A, {
                className: "h-4 w-4"
            })
        },
        {
            value: "number",
            label: t("common.number"),
            icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(hash/* default */.A, {
                className: "h-4 w-4"
            })
        },
        {
            value: "phone",
            label: t("common.phone"),
            icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(phone/* default */.A, {
                className: "h-4 w-4"
            })
        }
    ];
    const defaultPlaceholder = getPlaceholderByInputType(question.inputType ?? "text");
    const surveyLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages ?? []);
    const [showCharLimits, setShowCharLimits] = (0,react.useState)(question.inputType === "text");
    const handleInputChange = (inputType)=>{
        const updatedAttributes = {
            inputType: inputType,
            placeholder: (0,utils/* createI18nString */.YV)(getPlaceholderByInputType(inputType), surveyLanguageCodes),
            longAnswer: inputType === "text" ? question.longAnswer : false,
            charLimit: {
                min: undefined,
                max: undefined
            }
        };
        setIsCharLimitEnabled(false);
        setShowCharLimits(inputType === "text");
        updateQuestion(questionIdx, updatedAttributes);
    };
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    const [isCharLimitEnabled, setIsCharLimitEnabled] = (0,react.useState)(false);
    (0,react.useEffect)(()=>{
        if (question?.charLimit?.min !== undefined || question?.charLimit?.max !== undefined) {
            setIsCharLimitEnabled(true);
        } else {
            setIsCharLimitEnabled(false);
        }
    }, []);
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                label: t("environments.surveys.edit.question") + "*",
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: parent,
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                label: t("common.description"),
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        variant: "secondary",
                        className: "mt-3",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
                            });
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mt-2",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                    id: "placeholder",
                    value: question.placeholder ? question.placeholder : (0,utils/* createI18nString */.YV)(defaultPlaceholder, surveyLanguageCodes),
                    localSurvey: localSurvey,
                    questionIdx: questionIdx,
                    isInvalid: isInvalid,
                    updateQuestion: updateQuestion,
                    selectedLanguageCode: selectedLanguageCode,
                    setSelectedLanguageCode: setSelectedLanguageCode,
                    label: t("common.placeholder"),
                    locale: locale
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-3",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                        htmlFor: "questionType",
                        children: t("common.input_type")
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "mt-2 flex items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(options_switch/* OptionsSwitch */.V, {
                            options: questionTypes,
                            currentOption: question.inputType,
                            handleOptionChange: handleInputChange
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mt-3",
                children: showCharLimits && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                    isChecked: isCharLimitEnabled,
                    onToggle: (checked)=>{
                        setIsCharLimitEnabled(checked);
                        updateQuestion(questionIdx, {
                            charLimit: {
                                enabled: checked,
                                min: undefined,
                                max: undefined
                            }
                        });
                    },
                    htmlId: "charLimit",
                    description: t("environments.surveys.edit.character_limit_toggle_description"),
                    childBorder: true,
                    title: t("environments.surveys.edit.character_limit_toggle_title"),
                    customContainerClass: "p-0",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex gap-4 p-4",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex items-center gap-2",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                        htmlFor: "minLength",
                                        children: t("common.minimum")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                        id: "minLength",
                                        name: "minLength",
                                        type: "number",
                                        min: 0,
                                        value: question?.charLimit?.min || "",
                                        "aria-label": t("common.minimum"),
                                        className: "bg-white",
                                        onChange: (e)=>updateQuestion(questionIdx, {
                                                charLimit: {
                                                    ...question?.charLimit,
                                                    min: e.target.value ? parseInt(e.target.value) : undefined
                                                }
                                            })
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex items-center gap-2",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                        htmlFor: "maxLength",
                                        children: t("common.maximum")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                        id: "maxLength",
                                        name: "maxLength",
                                        type: "number",
                                        min: 0,
                                        "aria-label": t("common.maximum"),
                                        value: question?.charLimit?.max || "",
                                        className: "bg-white",
                                        onChange: (e)=>updateQuestion(questionIdx, {
                                                charLimit: {
                                                    ...question?.charLimit,
                                                    max: e.target.value ? parseInt(e.target.value) : undefined
                                                }
                                            })
                                    })
                                ]
                            })
                        ]
                    })
                })
            })
        ]
    });
};
const getPlaceholderByInputType = (inputType)=>{
    switch(inputType){
        case "email":
            return "example@email.com";
        case "url":
            return "http://...";
        case "number":
            return "42";
        case "phone":
            return "+1 123 456 789";
        default:
            return "Type your answer here...";
    }
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/PictureSelectionForm.tsx
/* __next_internal_client_entry_do_not_use__ PictureSelectionForm auto */ 











const PictureSelectionForm = ({ localSurvey, question, questionIdx, updateQuestion, selectedLanguageCode, setSelectedLanguageCode, isInvalid, locale })=>{
    const environmentId = localSurvey.environmentId;
    const surveyLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages);
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const handleChoiceDeletion = (choiceValue)=>{
        // Filter out the deleted choice from the choices array
        const newChoices = question.choices?.filter((choice)=>choice.id !== choiceValue) || [];
        // Update the question with new choices and logic
        updateQuestion(questionIdx, {
            choices: newChoices
        });
    };
    const handleFileInputChanges = (urls)=>{
        // Handle choice deletion
        if (urls.length < question.choices.length) {
            const deletedChoice = question.choices.find((choice)=>!urls.includes(choice.imageUrl));
            if (deletedChoice) {
                handleChoiceDeletion(deletedChoice.id);
            }
        }
        // Handle choice addition
        const updatedChoices = urls.map((url)=>{
            const existingChoice = question.choices.find((choice)=>choice.imageUrl === url);
            return existingChoice ? {
                ...existingChoice
            } : {
                imageUrl: url,
                id: (0,cuid2/* createId */.sX)()
            };
        });
        updateQuestion(questionIdx, {
            choices: updatedChoices
        });
    };
    // Auto animate
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                label: t("environments.surveys.edit.question") + "*",
                value: question.headline,
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: parent,
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                label: t("common.description"),
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        variant: "secondary",
                        className: "mt-3",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
                            });
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-2",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_label/* Label */.J, {
                        htmlFor: "Images",
                        children: [
                            t("common.images"),
                            " ",
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("span", {
                                className: (0,lib_cn.cn)("text-slate-400", {
                                    "text-red-600": isInvalid && question.choices?.length < 2
                                }),
                                children: [
                                    "(",
                                    t("environments.surveys.edit.upload_at_least_2_images"),
                                    ")"
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "mt-3 flex w-full items-center justify-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(file_input/* FileInput */.z, {
                            id: "choices-file-input",
                            allowedFileExtensions: [
                                "png",
                                "jpeg",
                                "jpg",
                                "webp"
                            ],
                            environmentId: environmentId,
                            onFileUpload: handleFileInputChanges,
                            fileUrl: question?.choices?.map((choice)=>choice.imageUrl),
                            multiple: true
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "my-4 flex items-center space-x-2",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                        id: "multi-select-toggle",
                        checked: question.allowMulti,
                        onClick: (e)=>{
                            e.stopPropagation();
                            updateQuestion(questionIdx, {
                                allowMulti: !question.allowMulti
                            });
                        }
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                        htmlFor: "multi-select-toggle",
                        className: "cursor-pointer",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "ml-2",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h3", {
                                    className: "text-sm font-semibold text-slate-700",
                                    children: t("environments.surveys.edit.allow_multi_select")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "text-xs font-normal text-slate-500",
                                    children: t("environments.surveys.edit.allow_users_to_select_more_than_one_image")
                                })
                            ]
                        })
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/smile.js
var smile = __webpack_require__(691794);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/RatingTypeDropdown.tsx




const Dropdown = ({ options, defaultValue, onSelect, disabled = false })=>{
    const [selectedOption, setSelectedOption] = (0,react.useState)(options.filter((option)=>option.value === defaultValue)[0] || options[0]);
    (0,react.useEffect)(()=>{
        setSelectedOption(options.filter((option)=>option.value === defaultValue)[0] || options[0]);
    }, [
        defaultValue,
        options
    ]);
    const handleSelect = (option)=>{
        setSelectedOption(option);
        onSelect(option);
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_dropdown_menu_dist/* Root */.bL, {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_dropdown_menu_dist/* Trigger */.l9, {
                asChild: true,
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("button", {
                    type: "button",
                    className: "flex h-10 w-full rounded-md border border-slate-300 bg-transparent px-3 py-2 text-sm text-slate-800 placeholder:text-slate-400 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50 dark:border-slate-500 dark:text-slate-300",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("span", {
                            className: "flex flex-1",
                            children: [
                                selectedOption.icon && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(selectedOption.icon, {
                                    className: "mr-3 h-5 w-5"
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                    children: selectedOption ? selectedOption.label : "Select an option"
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                            className: "flex h-full items-center border-l pl-3",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(chevron_down/* default */.A, {
                                className: "h-4 w-4 text-slate-500"
                            })
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_dropdown_menu_dist/* Portal */.ZL, {
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_dropdown_menu_dist/* Content */.UC, {
                    className: "min-w-[220px] rounded-md bg-white text-sm text-slate-800 shadow-md",
                    align: "start",
                    children: options.map((option)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_dropdown_menu_dist/* Item */.q7, {
                            className: "flex cursor-pointer items-center p-3 hover:bg-slate-100 hover:outline-none data-[disabled]:cursor-default data-[disabled]:opacity-50",
                            disabled: disabled || option.disabled,
                            onSelect: ()=>handleSelect(option),
                            children: [
                                option.icon && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(option.icon, {
                                    className: "mr-3 h-5 w-5"
                                }),
                                option.label
                            ]
                        }, option.value))
                })
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/RatingQuestionForm.tsx
/* __next_internal_client_entry_do_not_use__ RatingQuestionForm auto */ 









const RatingQuestionForm = ({ question, questionIdx, updateQuestion, isInvalid, localSurvey, selectedLanguageCode, setSelectedLanguageCode, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const surveyLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages);
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                id: "headline",
                value: question.headline,
                label: t("environments.surveys.edit.question") + "*",
                localSurvey: localSurvey,
                questionIdx: questionIdx,
                isInvalid: isInvalid,
                updateQuestion: updateQuestion,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ref: parent,
                children: [
                    question.subheader !== undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "inline-flex w-full items-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "w-full",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                id: "subheader",
                                value: question.subheader,
                                label: t("common.description"),
                                localSurvey: localSurvey,
                                questionIdx: questionIdx,
                                isInvalid: isInvalid,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        })
                    }),
                    question.subheader === undefined && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                        size: "sm",
                        variant: "secondary",
                        className: "mt-3",
                        type: "button",
                        onClick: ()=>{
                            updateQuestion(questionIdx, {
                                subheader: (0,utils/* createI18nString */.YV)("", surveyLanguageCodes)
                            });
                        },
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                className: "mr-1 h-4 w-4"
                            }),
                            t("environments.surveys.edit.add_description")
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-3 flex justify-between gap-8",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex-1",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                htmlFor: "subheader",
                                children: t("environments.surveys.edit.scale")
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "mt-2",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Dropdown, {
                                    options: [
                                        {
                                            label: t("environments.surveys.edit.number"),
                                            value: "number",
                                            icon: hash/* default */.A
                                        },
                                        {
                                            label: t("environments.surveys.edit.star"),
                                            value: "star",
                                            icon: star/* default */.A
                                        },
                                        {
                                            label: t("environments.surveys.edit.smiley"),
                                            value: "smiley",
                                            icon: smile/* default */.A
                                        }
                                    ],
                                    defaultValue: question.scale || "number",
                                    onSelect: (option)=>{
                                        if (option.value === "star") {
                                            updateQuestion(questionIdx, {
                                                scale: option.value,
                                                isColorCodingEnabled: false
                                            });
                                            return;
                                        }
                                        updateQuestion(questionIdx, {
                                            scale: option.value
                                        });
                                    }
                                })
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex-1",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                htmlFor: "subheader",
                                children: t("environments.surveys.edit.range")
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "mt-2",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Dropdown, {
                                    options: [
                                        {
                                            label: t("environments.surveys.edit.five_points_recommended"),
                                            value: 5
                                        },
                                        {
                                            label: t("environments.surveys.edit.three_points"),
                                            value: 3
                                        },
                                        {
                                            label: t("environments.surveys.edit.four_points"),
                                            value: 4
                                        },
                                        {
                                            label: t("environments.surveys.edit.seven_points"),
                                            value: 7
                                        },
                                        {
                                            label: t("environments.surveys.edit.ten_points"),
                                            value: 10
                                        }
                                    ],
                                    /* disabled={survey.status !== "draft"} */ defaultValue: question.range || 5,
                                    onSelect: (option)=>updateQuestion(questionIdx, {
                                            range: option.value
                                        })
                                })
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex justify-between gap-8",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "flex-1",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                            id: "lowerLabel",
                            placeholder: "Not good",
                            value: question.lowerLabel,
                            label: t("environments.surveys.edit.lower_label"),
                            localSurvey: localSurvey,
                            questionIdx: questionIdx,
                            isInvalid: isInvalid,
                            updateQuestion: updateQuestion,
                            selectedLanguageCode: selectedLanguageCode,
                            setSelectedLanguageCode: setSelectedLanguageCode,
                            locale: locale
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "flex-1",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                            id: "upperLabel",
                            placeholder: "Very satisfied",
                            value: question.upperLabel,
                            label: t("environments.surveys.edit.upper_label"),
                            localSurvey: localSurvey,
                            questionIdx: questionIdx,
                            isInvalid: isInvalid,
                            updateQuestion: updateQuestion,
                            selectedLanguageCode: selectedLanguageCode,
                            setSelectedLanguageCode: setSelectedLanguageCode,
                            locale: locale
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mt-3",
                children: !question.required && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "flex-1",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                        id: "buttonLabel",
                        value: question.buttonLabel,
                        label: t("environments.surveys.edit.next_button_label"),
                        localSurvey: localSurvey,
                        questionIdx: questionIdx,
                        placeholder: "skip",
                        isInvalid: isInvalid,
                        updateQuestion: updateQuestion,
                        selectedLanguageCode: selectedLanguageCode,
                        setSelectedLanguageCode: setSelectedLanguageCode,
                        locale: locale
                    })
                })
            }),
            question.scale !== "star" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                isChecked: question.isColorCodingEnabled,
                onToggle: ()=>updateQuestion(questionIdx, {
                        isColorCodingEnabled: !question.isColorCodingEnabled
                    }),
                htmlId: "isColorCodingEnabled",
                title: t("environments.surveys.edit.add_color_coding"),
                description: t("environments.surveys.edit.add_color_coding_description"),
                childBorder: true,
                customContainerClass: "p-0 mt-4"
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/QuestionCard.tsx
/* __next_internal_client_entry_do_not_use__ QuestionCard auto */ 































const QuestionCard = ({ localSurvey, project, question, questionIdx, moveQuestion, updateQuestion, duplicateQuestion, deleteQuestion, activeQuestionId, setActiveQuestionId, lastQuestion, selectedLanguageCode, setSelectedLanguageCode, isInvalid, addQuestion, isFormbricksCloud, isCxMode, locale })=>{
    const { attributes, listeners, setNodeRef, transform, transition, isDragging } = (0,sortable_esm/* useSortable */.gl)({
        id: question.id
    });
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const QUESTIONS_ICON_MAP = (0,questions/* getQuestionIconMap */.Ax)(t);
    const open = activeQuestionId === question.id;
    const [openAdvanced, setOpenAdvanced] = (0,react.useState)(question.logic && question.logic.length > 0);
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    const updateEmptyButtonLabels = (labelKey, labelValue, skipIndex)=>{
        localSurvey.questions.forEach((q, index)=>{
            if (index === skipIndex) return;
            const currentLabel = q[labelKey];
            if (!currentLabel || currentLabel[selectedLanguageCode]?.trim() === "") {
                updateQuestion(index, {
                    [labelKey]: labelValue
                });
            }
        });
    };
    const getIsRequiredToggleDisabled = ()=>{
        if (question.type === types/* TSurveyQuestionTypeEnum */.wn.Address) {
            const allFieldsAreOptional = [
                question.addressLine1,
                question.addressLine2,
                question.city,
                question.state,
                question.zip,
                question.country
            ].filter((field)=>field.show).every((field)=>!field.required);
            if (allFieldsAreOptional) {
                return true;
            }
            return [
                question.addressLine1,
                question.addressLine2,
                question.city,
                question.state,
                question.zip,
                question.country
            ].filter((field)=>field.show).some((condition)=>condition.required === true);
        }
        if (question.type === types/* TSurveyQuestionTypeEnum */.wn.ContactInfo) {
            const allFieldsAreOptional = [
                question.firstName,
                question.lastName,
                question.email,
                question.phone,
                question.company
            ].filter((field)=>field.show).every((field)=>!field.required);
            if (allFieldsAreOptional) {
                return true;
            }
            return [
                question.firstName,
                question.lastName,
                question.email,
                question.phone,
                question.company
            ].filter((field)=>field.show).some((condition)=>condition.required === true);
        }
        return false;
    };
    const handleRequiredToggle = ()=>{
        // Fix for NPS and Rating questions having missing translations when buttonLabel is not removed
        if (!question.required && (question.type === "nps" || question.type === "rating")) {
            updateQuestion(questionIdx, {
                required: true,
                buttonLabel: undefined
            });
        } else {
            updateQuestion(questionIdx, {
                required: !question.required
            });
        }
    };
    const style = {
        transition: transition ?? "transform 100ms ease",
        transform: utilities_esm/* CSS */.Ks.Translate.toString(transform),
        zIndex: isDragging ? 10 : 1
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: (0,lib_cn.cn)(open ? "shadow-lg" : "shadow-md", "flex w-full flex-row rounded-lg bg-white duration-300"),
        ref: setNodeRef,
        style: style,
        id: question.id,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                ...listeners,
                ...attributes,
                className: (0,lib_cn.cn)(open ? "bg-slate-700" : "bg-slate-400", "top-0 w-10 rounded-l-lg p-2 text-center text-sm text-white hover:cursor-grab hover:bg-slate-600", isInvalid && "bg-red-400 hover:bg-red-600", "flex flex-col items-center justify-between"),
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "mt-3 flex w-full justify-center",
                        children: QUESTIONS_ICON_MAP[question.type]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("button", {
                        className: "opacity-0 hover:cursor-move group-hover:opacity-100",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Grip, {
                            className: "h-4 w-4"
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
                open: open,
                onOpenChange: ()=>{
                    if (activeQuestionId !== question.id) {
                        setActiveQuestionId(question.id);
                    } else {
                        setActiveQuestionId(null);
                    }
                },
                className: "w-[95%] flex-1 rounded-r-lg border border-slate-200",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                        asChild: true,
                        className: (0,lib_cn.cn)(open ? "" : " ", "flex cursor-pointer justify-between gap-4 rounded-r-lg p-4 hover:bg-slate-50"),
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "flex grow",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "flex grow flex-col justify-center",
                                        dir: "auto",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                className: "text-sm font-semibold",
                                                children: (0,recall/* recallToHeadline */.fV)(question.headline, localSurvey, true, selectedLanguageCode)[selectedLanguageCode] ? formatTextWithSlashes((0,recall/* recallToHeadline */.fV)(question.headline, localSurvey, true, selectedLanguageCode)[selectedLanguageCode] ?? "") : (0,questions/* getTSurveyQuestionTypeEnumName */.vV)(question.type, t)
                                            }),
                                            !open && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                className: "mt-1 truncate text-xs text-slate-500",
                                                children: question?.required ? t("environments.surveys.edit.required") : t("environments.surveys.edit.optional")
                                            })
                                        ]
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "flex items-center space-x-2",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(EditorCardMenu, {
                                        survey: localSurvey,
                                        cardIdx: questionIdx,
                                        lastCard: lastQuestion,
                                        duplicateCard: duplicateQuestion,
                                        deleteCard: deleteQuestion,
                                        moveCard: moveQuestion,
                                        card: question,
                                        project: project,
                                        updateCard: updateQuestion,
                                        addCard: addQuestion,
                                        cardType: "question",
                                        isCxMode: isCxMode
                                    })
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                        className: `flex flex-col px-4 ${open && "pb-4"}`,
                        children: [
                            question.type === types/* TSurveyQuestionTypeEnum */.wn.OpenText ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(OpenQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceSingle ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(MultipleChoiceQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.MultipleChoiceMulti ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(MultipleChoiceQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.NPS ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(NPSQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.CTA ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(CTAQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.Rating ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(RatingQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.Consent ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ConsentQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.Date ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(DateQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.PictureSelection ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(PictureSelectionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.FileUpload ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(FileUploadQuestionForm, {
                                localSurvey: localSurvey,
                                project: project,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                isFormbricksCloud: isFormbricksCloud,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.Cal ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(CalQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.Matrix ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(MatrixQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.Address ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(AddressQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.Ranking ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(RankingQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : question.type === types/* TSurveyQuestionTypeEnum */.wn.ContactInfo ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ContactInfoQuestionForm, {
                                localSurvey: localSurvey,
                                question: question,
                                questionIdx: questionIdx,
                                updateQuestion: updateQuestion,
                                lastQuestion: lastQuestion,
                                selectedLanguageCode: selectedLanguageCode,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isInvalid: isInvalid,
                                locale: locale
                            }) : null,
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "mt-4",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
                                    open: openAdvanced,
                                    onOpenChange: setOpenAdvanced,
                                    className: "mt-5",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                                            className: "flex items-center text-sm text-slate-700",
                                            children: [
                                                openAdvanced ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(chevron_down/* default */.A, {
                                                    className: "mr-1 h-4 w-3"
                                                }) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)(chevron_right/* default */.A, {
                                                    className: "mr-2 h-4 w-3"
                                                }),
                                                openAdvanced ? t("environments.surveys.edit.hide_advanced_settings") : t("environments.surveys.edit.show_advanced_settings")
                                            ]
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                                            className: "flex flex-col gap-4",
                                            ref: parent,
                                            children: [
                                                question.type !== types/* TSurveyQuestionTypeEnum */.wn.NPS && question.type !== types/* TSurveyQuestionTypeEnum */.wn.Rating && question.type !== types/* TSurveyQuestionTypeEnum */.wn.CTA ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                    className: "mt-2 flex space-x-2",
                                                    children: [
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                            className: "w-full",
                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                                                id: "buttonLabel",
                                                                value: question.buttonLabel,
                                                                label: t("environments.surveys.edit.next_button_label"),
                                                                localSurvey: localSurvey,
                                                                questionIdx: questionIdx,
                                                                maxLength: 48,
                                                                placeholder: lastQuestion ? t("common.finish") : t("common.next"),
                                                                isInvalid: isInvalid,
                                                                updateQuestion: updateQuestion,
                                                                selectedLanguageCode: selectedLanguageCode,
                                                                setSelectedLanguageCode: setSelectedLanguageCode,
                                                                onBlur: (e)=>{
                                                                    if (!question.buttonLabel) return;
                                                                    let translatedNextButtonLabel = {
                                                                        ...question.buttonLabel,
                                                                        [selectedLanguageCode]: e.target.value
                                                                    };
                                                                    if (questionIdx === localSurvey.questions.length - 1) return;
                                                                    updateEmptyButtonLabels("buttonLabel", translatedNextButtonLabel, localSurvey.questions.length - 1);
                                                                },
                                                                locale: locale
                                                            })
                                                        }),
                                                        questionIdx !== 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                                            id: "backButtonLabel",
                                                            value: question.backButtonLabel,
                                                            label: t("environments.surveys.edit.back_button_label"),
                                                            localSurvey: localSurvey,
                                                            questionIdx: questionIdx,
                                                            maxLength: 48,
                                                            placeholder: t("common.back"),
                                                            isInvalid: isInvalid,
                                                            updateQuestion: updateQuestion,
                                                            selectedLanguageCode: selectedLanguageCode,
                                                            setSelectedLanguageCode: setSelectedLanguageCode,
                                                            locale: locale,
                                                            onBlur: (e)=>{
                                                                if (!question.backButtonLabel) return;
                                                                let translatedBackButtonLabel = {
                                                                    ...question.backButtonLabel,
                                                                    [selectedLanguageCode]: e.target.value
                                                                };
                                                                updateEmptyButtonLabels("backButtonLabel", translatedBackButtonLabel, 0);
                                                            }
                                                        })
                                                    ]
                                                }) : null,
                                                (question.type === types/* TSurveyQuestionTypeEnum */.wn.Rating || question.type === types/* TSurveyQuestionTypeEnum */.wn.NPS) && questionIdx !== 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                    className: "mt-4",
                                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionFormInput, {
                                                        id: "backButtonLabel",
                                                        value: question.backButtonLabel,
                                                        label: `"Back" Button Label`,
                                                        localSurvey: localSurvey,
                                                        questionIdx: questionIdx,
                                                        maxLength: 48,
                                                        placeholder: "Back",
                                                        isInvalid: isInvalid,
                                                        updateQuestion: updateQuestion,
                                                        selectedLanguageCode: selectedLanguageCode,
                                                        setSelectedLanguageCode: setSelectedLanguageCode,
                                                        locale: locale
                                                    })
                                                }),
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(AdvancedSettings, {
                                                    question: question,
                                                    questionIdx: questionIdx,
                                                    localSurvey: localSurvey,
                                                    updateQuestion: updateQuestion
                                                })
                                            ]
                                        })
                                    ]
                                })
                            })
                        ]
                    }),
                    open && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "mx-4 flex justify-end space-x-6 border-t border-slate-200",
                        children: [
                            question.type === "openText" && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "my-4 flex items-center justify-end space-x-2",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                        htmlFor: "longAnswer",
                                        children: t("environments.surveys.edit.long_answer")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                        id: "longAnswer",
                                        disabled: question.inputType !== "text",
                                        checked: question.longAnswer !== false,
                                        onClick: (e)=>{
                                            e.stopPropagation();
                                            updateQuestion(questionIdx, {
                                                longAnswer: typeof question.longAnswer === "undefined" ? false : !question.longAnswer
                                            });
                                        }
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "my-4 flex items-center justify-end space-x-2",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                        htmlFor: "required-toggle",
                                        children: t("environments.surveys.edit.required")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                        id: "required-toggle",
                                        checked: question.required,
                                        disabled: getIsRequiredToggleDisabled(),
                                        onClick: (e)=>{
                                            e.stopPropagation();
                                            handleRequiredToggle();
                                        }
                                    })
                                ]
                            })
                        ]
                    })
                ]
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/QuestionsDroppable.tsx




const QuestionsDroppable = ({ activeQuestionId, deleteQuestion, duplicateQuestion, invalidQuestions, localSurvey, moveQuestion, project, selectedLanguageCode, setActiveQuestionId, setSelectedLanguageCode, updateQuestion, addQuestion, isFormbricksCloud, isCxMode, locale })=>{
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
        className: "group mb-5 flex w-full flex-col gap-5",
        ref: parent,
        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(sortable_esm/* SortableContext */.gB, {
            items: localSurvey.questions,
            strategy: sortable_esm/* verticalListSortingStrategy */._G,
            children: localSurvey.questions.map((question, questionIdx)=>/*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionCard, {
                    localSurvey: localSurvey,
                    project: project,
                    question: question,
                    questionIdx: questionIdx,
                    moveQuestion: moveQuestion,
                    updateQuestion: updateQuestion,
                    duplicateQuestion: duplicateQuestion,
                    selectedLanguageCode: selectedLanguageCode,
                    setSelectedLanguageCode: setSelectedLanguageCode,
                    deleteQuestion: deleteQuestion,
                    activeQuestionId: activeQuestionId,
                    setActiveQuestionId: setActiveQuestionId,
                    lastQuestion: questionIdx === localSurvey.questions.length - 1,
                    isInvalid: invalidQuestions ? invalidQuestions.includes(question.id) : false,
                    addQuestion: addQuestion,
                    isFormbricksCloud: isFormbricksCloud,
                    isCxMode: isCxMode,
                    locale: locale
                }, question.id))
        })
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/QuestionsView.tsx
/* __next_internal_client_entry_do_not_use__ QuestionsView auto */ 























const QuestionsView = ({ activeQuestionId, setActiveQuestionId, localSurvey, setLocalSurvey, project, invalidQuestions, setInvalidQuestions, setSelectedLanguageCode, selectedLanguageCode, isMultiLanguageAllowed, isFormbricksCloud, plan, isCxMode, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const internalQuestionIdMap = (0,react.useMemo)(()=>{
        return localSurvey.questions.reduce((acc, question)=>{
            acc[question.id] = (0,cuid2/* createId */.sX)();
            return acc;
        }, {});
    }, [
        localSurvey.questions
    ]);
    const surveyLanguages = localSurvey.languages;
    const handleQuestionLogicChange = (survey, compareId, updatedId)=>{
        const updateConditions = (conditions)=>{
            return {
                ...conditions,
                conditions: conditions?.conditions.map((condition)=>{
                    if (isConditionGroup(condition)) {
                        return updateConditions(condition);
                    } else {
                        return updateSingleCondition(condition);
                    }
                })
            };
        };
        const updateSingleCondition = (condition)=>{
            let updatedCondition = {
                ...condition
            };
            if (condition.leftOperand.value === compareId) {
                updatedCondition.leftOperand = {
                    ...condition.leftOperand,
                    value: updatedId
                };
            }
            if (condition.rightOperand?.type === "question" && condition.rightOperand?.value === compareId) {
                updatedCondition.rightOperand = {
                    ...condition.rightOperand,
                    value: updatedId
                };
            }
            return updatedCondition;
        };
        const updateActions = (actions)=>{
            return actions.map((action)=>{
                let updatedAction = {
                    ...action
                };
                if (updatedAction.objective === "jumpToQuestion" && updatedAction.target === compareId) {
                    updatedAction.target = updatedId;
                }
                if (updatedAction.objective === "requireAnswer" && updatedAction.target === compareId) {
                    updatedAction.target = updatedId;
                }
                return updatedAction;
            });
        };
        return {
            ...survey,
            questions: survey.questions.map((question)=>{
                let updatedQuestion = {
                    ...question
                };
                if (question.headline[selectedLanguageCode].includes(`recall:${compareId}`)) {
                    question.headline[selectedLanguageCode] = question.headline[selectedLanguageCode].replaceAll(`recall:${compareId}`, `recall:${updatedId}`);
                }
                // Update advanced logic
                if (question.logic) {
                    updatedQuestion.logic = question.logic.map((logicRule)=>({
                            ...logicRule,
                            conditions: updateConditions(logicRule.conditions),
                            actions: updateActions(logicRule.actions)
                        }));
                }
                return updatedQuestion;
            })
        };
    };
    (0,react.useEffect)(()=>{
        if (!invalidQuestions) return;
        let updatedInvalidQuestions = invalidQuestions;
        // Check welcome card
        if (localSurvey.welcomeCard.enabled && !isWelcomeCardValid(localSurvey.welcomeCard, surveyLanguages)) {
            if (!updatedInvalidQuestions.includes("start")) {
                updatedInvalidQuestions.push("start");
            }
        } else {
            updatedInvalidQuestions = updatedInvalidQuestions.filter((questionId)=>questionId !== "start");
        }
        // Check thank you card
        localSurvey.endings.forEach((ending)=>{
            if (!isEndingCardValid(ending, surveyLanguages)) {
                if (!updatedInvalidQuestions.includes(ending.id)) {
                    updatedInvalidQuestions.push(ending.id);
                }
            } else {
                updatedInvalidQuestions = updatedInvalidQuestions.filter((questionId)=>questionId !== ending.id);
            }
        });
        if (JSON.stringify(updatedInvalidQuestions) !== JSON.stringify(invalidQuestions)) {
            setInvalidQuestions(updatedInvalidQuestions);
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        localSurvey.languages,
        localSurvey.endings,
        localSurvey.welcomeCard
    ]);
    // function to validate individual questions
    const validateSurveyQuestion = (question)=>{
        // prevent this function to execute further if user hasnt still tried to save the survey
        if (invalidQuestions === null) {
            return;
        }
        const isFirstQuestion = question.id === localSurvey.questions[0].id;
        if (validateQuestion(question, surveyLanguages, isFirstQuestion)) {
            // If question is valid, we now check for cyclic logic
            const questionsWithCyclicLogic = (0,validation/* findQuestionsWithCyclicLogic */.c2)(localSurvey.questions);
            if (questionsWithCyclicLogic.includes(question.id) && !invalidQuestions.includes(question.id)) {
                setInvalidQuestions([
                    ...invalidQuestions,
                    question.id
                ]);
                return;
            }
            setInvalidQuestions(invalidQuestions.filter((id)=>id !== question.id));
            return;
        }
        setInvalidQuestions([
            ...invalidQuestions,
            question.id
        ]);
        return;
    };
    const updateQuestion = (questionIdx, updatedAttributes)=>{
        let updatedSurvey = {
            ...localSurvey
        };
        if ("id" in updatedAttributes) {
            // if the survey question whose id is to be changed is linked to logic of any other survey then changing it
            const initialQuestionId = updatedSurvey.questions[questionIdx].id;
            updatedSurvey = handleQuestionLogicChange(updatedSurvey, initialQuestionId, updatedAttributes.id);
            if (invalidQuestions?.includes(initialQuestionId)) {
                setInvalidQuestions(invalidQuestions.map((id)=>id === initialQuestionId ? updatedAttributes.id : id));
            }
            // relink the question to internal Id
            internalQuestionIdMap[updatedAttributes.id] = internalQuestionIdMap[localSurvey.questions[questionIdx].id];
            delete internalQuestionIdMap[localSurvey.questions[questionIdx].id];
            setActiveQuestionId(updatedAttributes.id);
        }
        updatedSurvey.questions[questionIdx] = {
            ...updatedSurvey.questions[questionIdx],
            ...updatedAttributes
        };
        const attributesToCheck = [
            "buttonLabel",
            "upperLabel",
            "lowerLabel"
        ];
        // If the value of buttonLabel, lowerLabel or upperLabel is equal to {default:""}, then delete buttonLabel key
        attributesToCheck.forEach((attribute)=>{
            if (Object.keys(updatedAttributes).includes(attribute)) {
                const currentLabel = updatedSurvey.questions[questionIdx][attribute];
                if (currentLabel && Object.keys(currentLabel).length === 1 && currentLabel["default"].trim() === "") {
                    delete updatedSurvey.questions[questionIdx][attribute];
                }
            }
        });
        setLocalSurvey(updatedSurvey);
        validateSurveyQuestion(updatedSurvey.questions[questionIdx]);
    };
    const deleteQuestion = (questionIdx)=>{
        const questionId = localSurvey.questions[questionIdx].id;
        const activeQuestionIdTemp = activeQuestionId ?? localSurvey.questions[0].id;
        let updatedSurvey = {
            ...localSurvey
        };
        // checking if this question is used in logic of any other question
        const quesIdx = findQuestionUsedInLogic(localSurvey, questionId);
        if (quesIdx !== -1) {
            dist/* default */.Ay.error(t("environments.surveys.edit.question_used_in_logic", {
                questionIndex: quesIdx + 1
            }));
            return;
        }
        // check if we are recalling from this question for every language
        updatedSurvey.questions.forEach((question)=>{
            for (const [languageCode, headline] of Object.entries(question.headline)){
                if (headline.includes(`recall:${questionId}`)) {
                    const recallInfo = (0,recall/* extractRecallInfo */.LW)(headline);
                    if (recallInfo) {
                        question.headline[languageCode] = headline.replace(recallInfo, "");
                    }
                }
            }
        });
        updatedSurvey.questions.splice(questionIdx, 1);
        const firstEndingCard = localSurvey.endings[0];
        setLocalSurvey(updatedSurvey);
        delete internalQuestionIdMap[questionId];
        if (questionId === activeQuestionIdTemp) {
            if (questionIdx <= localSurvey.questions.length && localSurvey.questions.length > 0) {
                setActiveQuestionId(localSurvey.questions[questionIdx % localSurvey.questions.length].id);
            } else if (firstEndingCard) {
                setActiveQuestionId(firstEndingCard.id);
            }
        }
        dist/* default */.Ay.success(t("environments.surveys.edit.question_deleted"));
    };
    const duplicateQuestion = (questionIdx)=>{
        const questionToDuplicate = (0,pollyfills_structuredClone/* structuredClone */.p)(localSurvey.questions[questionIdx]);
        const newQuestionId = (0,cuid2/* createId */.sX)();
        // create a copy of the question with a new id
        const duplicatedQuestion = {
            ...questionToDuplicate,
            id: newQuestionId
        };
        // insert the new question right after the original one
        const updatedSurvey = {
            ...localSurvey
        };
        updatedSurvey.questions.splice(questionIdx + 1, 0, duplicatedQuestion);
        setLocalSurvey(updatedSurvey);
        setActiveQuestionId(newQuestionId);
        internalQuestionIdMap[newQuestionId] = (0,cuid2/* createId */.sX)();
        dist/* default */.Ay.success(t("environments.surveys.edit.question_duplicated"));
    };
    const addQuestion = (question, index)=>{
        const updatedSurvey = {
            ...localSurvey
        };
        const languageSymbols = (0,utils/* extractLanguageCodes */.OJ)(localSurvey.languages);
        const updatedQuestion = (0,utils/* addMultiLanguageLabels */.Ci)(question, languageSymbols);
        if (index) {
            updatedSurvey.questions.splice(index, 0, {
                ...updatedQuestion,
                isDraft: true
            });
        } else {
            updatedSurvey.questions.push({
                ...updatedQuestion,
                isDraft: true
            });
        }
        setLocalSurvey(updatedSurvey);
        setActiveQuestionId(question.id);
        internalQuestionIdMap[question.id] = (0,cuid2/* createId */.sX)();
    };
    const addEndingCard = (index)=>{
        const updatedSurvey = (0,pollyfills_structuredClone/* structuredClone */.p)(localSurvey);
        const newEndingCard = (0,templates/* getDefaultEndingCard */.V0)(localSurvey.languages, t);
        updatedSurvey.endings.splice(index, 0, newEndingCard);
        setActiveQuestionId(newEndingCard.id);
        setLocalSurvey(updatedSurvey);
    };
    const moveQuestion = (questionIndex, up)=>{
        const newQuestions = Array.from(localSurvey.questions);
        const [reorderedQuestion] = newQuestions.splice(questionIndex, 1);
        const destinationIndex = up ? questionIndex - 1 : questionIndex + 1;
        newQuestions.splice(destinationIndex, 0, reorderedQuestion);
        const updatedSurvey = {
            ...localSurvey,
            questions: newQuestions
        };
        setLocalSurvey(updatedSurvey);
    };
    //useEffect to validate survey when changes are made to languages
    (0,react.useEffect)(()=>{
        if (!invalidQuestions) return;
        let updatedInvalidQuestions = invalidQuestions;
        // Validate each question
        localSurvey.questions.forEach((question, index)=>{
            updatedInvalidQuestions = validateSurveyQuestionsInBatch(question, updatedInvalidQuestions, surveyLanguages, index === 0);
        });
        if (JSON.stringify(updatedInvalidQuestions) !== JSON.stringify(invalidQuestions)) {
            setInvalidQuestions(updatedInvalidQuestions);
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        localSurvey.languages,
        localSurvey.questions,
        localSurvey.endings,
        localSurvey.welcomeCard
    ]);
    (0,react.useEffect)(()=>{
        const questionWithEmptyFallback = (0,recall/* checkForEmptyFallBackValue */.Yk)(localSurvey, selectedLanguageCode);
        if (questionWithEmptyFallback) {
            setActiveQuestionId(questionWithEmptyFallback.id);
            if (activeQuestionId === questionWithEmptyFallback.id) {
                dist/* default */.Ay.error(t("environments.surveys.edit.fallback_missing"));
            }
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        activeQuestionId,
        setActiveQuestionId
    ]);
    const sensors = (0,core_esm/* useSensors */.FR)((0,core_esm/* useSensor */.MS)(core_esm/* PointerSensor */.AN, {
        activationConstraint: {
            distance: 5
        }
    }));
    const onQuestionCardDragEnd = (event)=>{
        const { active, over } = event;
        const newQuestions = Array.from(localSurvey.questions);
        const sourceIndex = newQuestions.findIndex((question)=>question.id === active.id);
        const destinationIndex = newQuestions.findIndex((question)=>question.id === over?.id);
        const [reorderedQuestion] = newQuestions.splice(sourceIndex, 1);
        newQuestions.splice(destinationIndex, 0, reorderedQuestion);
        const updatedSurvey = {
            ...localSurvey,
            questions: newQuestions
        };
        setLocalSurvey(updatedSurvey);
    };
    const onEndingCardDragEnd = (event)=>{
        const { active, over } = event;
        const newEndings = Array.from(localSurvey.endings);
        const sourceIndex = newEndings.findIndex((ending)=>ending.id === active.id);
        const destinationIndex = newEndings.findIndex((ending)=>ending.id === over?.id);
        const [reorderedEndings] = newEndings.splice(sourceIndex, 1);
        newEndings.splice(destinationIndex, 0, reorderedEndings);
        const updatedSurvey = {
            ...localSurvey,
            endings: newEndings
        };
        setLocalSurvey(updatedSurvey);
    };
    // Auto animate
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "mt-12 w-full px-5 py-4",
        children: [
            !isCxMode && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "mb-5 flex w-full flex-col gap-5",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(EditWelcomeCard, {
                    localSurvey: localSurvey,
                    setLocalSurvey: setLocalSurvey,
                    setActiveQuestionId: setActiveQuestionId,
                    activeQuestionId: activeQuestionId,
                    isInvalid: invalidQuestions ? invalidQuestions.includes("start") : false,
                    setSelectedLanguageCode: setSelectedLanguageCode,
                    selectedLanguageCode: selectedLanguageCode,
                    locale: locale
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(core_esm/* DndContext */.Mp, {
                id: "questions",
                sensors: sensors,
                onDragEnd: onQuestionCardDragEnd,
                collisionDetection: core_esm/* closestCorners */.y$,
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionsDroppable, {
                    localSurvey: localSurvey,
                    project: project,
                    moveQuestion: moveQuestion,
                    updateQuestion: updateQuestion,
                    duplicateQuestion: duplicateQuestion,
                    selectedLanguageCode: selectedLanguageCode,
                    setSelectedLanguageCode: setSelectedLanguageCode,
                    deleteQuestion: deleteQuestion,
                    activeQuestionId: activeQuestionId,
                    setActiveQuestionId: setActiveQuestionId,
                    invalidQuestions: invalidQuestions,
                    addQuestion: addQuestion,
                    isFormbricksCloud: isFormbricksCloud,
                    isCxMode: isCxMode,
                    locale: locale
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(AddQuestionButton, {
                addQuestion: addQuestion,
                project: project,
                isCxMode: isCxMode
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-5 flex flex-col gap-5",
                ref: parent,
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("hr", {
                        className: "border-t border-dashed"
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(core_esm/* DndContext */.Mp, {
                        id: "endings",
                        sensors: sensors,
                        onDragEnd: onEndingCardDragEnd,
                        collisionDetection: core_esm/* closestCorners */.y$,
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(sortable_esm/* SortableContext */.gB, {
                            items: localSurvey.endings,
                            strategy: sortable_esm/* verticalListSortingStrategy */._G,
                            children: localSurvey.endings.map((ending, index)=>{
                                return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(EditEndingCard, {
                                    localSurvey: localSurvey,
                                    endingCardIndex: index,
                                    setLocalSurvey: setLocalSurvey,
                                    setActiveQuestionId: setActiveQuestionId,
                                    activeQuestionId: activeQuestionId,
                                    isInvalid: invalidQuestions ? invalidQuestions.includes(ending.id) : false,
                                    setSelectedLanguageCode: setSelectedLanguageCode,
                                    selectedLanguageCode: selectedLanguageCode,
                                    plan: plan,
                                    addEndingCard: addEndingCard,
                                    isFormbricksCloud: isFormbricksCloud,
                                    locale: locale
                                }, ending.id);
                            })
                        })
                    }),
                    !isCxMode && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(AddEndingCardButton, {
                                localSurvey: localSurvey,
                                setLocalSurvey: setLocalSurvey,
                                addEndingCard: addEndingCard
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("hr", {}),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(HiddenFieldsCard, {
                                localSurvey: localSurvey,
                                setLocalSurvey: setLocalSurvey,
                                setActiveQuestionId: setActiveQuestionId,
                                activeQuestionId: activeQuestionId
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SurveyVariablesCard, {
                                localSurvey: localSurvey,
                                setLocalSurvey: setLocalSurvey,
                                activeQuestionId: activeQuestionId,
                                setActiveQuestionId: setActiveQuestionId
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(MultiLanguageCard, {
                                localSurvey: localSurvey,
                                project: project,
                                setLocalSurvey: setLocalSurvey,
                                setActiveQuestionId: setActiveQuestionId,
                                activeQuestionId: activeQuestionId,
                                isMultiLanguageAllowed: isMultiLanguageAllowed,
                                isFormbricksCloud: isFormbricksCloud,
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                locale: locale
                            })
                        ]
                    })
                ]
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/TargetingLockedCard.tsx
/* __next_internal_client_entry_do_not_use__ TargetingLockedCard auto */ 





const TargetingLockedCard = ({ isFormbricksCloud, environmentId })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [open, setOpen] = (0,react.useState)(false);
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
        className: "w-full overflow-hidden rounded-lg border border-slate-300 bg-white",
        onOpenChange: setOpen,
        open: open,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                asChild: true,
                className: "h-full w-full cursor-pointer rounded-lg hover:bg-slate-50",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "inline-flex px-4 py-6",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "flex items-center pl-2 pr-5",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "rounded-full border border-slate-300 bg-slate-100 p-1",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Lock, {
                                    className: "h-4 w-4 text-slate-500",
                                    strokeWidth: 3
                                })
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "font-semibold text-slate-800",
                                    children: t("environments.segments.target_audience")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "mt-1 text-sm text-slate-500",
                                    children: t("environments.segments.pre_segment_users")
                                })
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                className: "min-w-full overflow-auto",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("hr", {
                        className: "text-slate-600"
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "flex items-center justify-center",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(upgrade_prompt/* UpgradePrompt */.d, {
                            title: t("environments.surveys.edit.unlock_targeting_title"),
                            description: t("environments.surveys.edit.unlock_targeting_description"),
                            buttons: [
                                {
                                    text: t("common.start_free_trial"),
                                    href: isFormbricksCloud ? `/environments/${environmentId}/settings/billing` : "https://formbricks.com/upgrade-self-hosting-license"
                                },
                                {
                                    text: t("common.learn_more"),
                                    href: isFormbricksCloud ? `/environments/${environmentId}/settings/billing` : "https://formbricks.com/learn-more-self-hosting-license"
                                }
                            ]
                        })
                    })
                ]
            })
        ]
    });
};

;// ../../node_modules/next/dist/build/webpack/loaders/next-flight-server-reference-proxy-loader.js?id=7fe6bcff2944a454891c847e7a2b35e7fa5424a16a&name=cloneSegmentAction!

const cloneSegmentAction = /*#__PURE__*/(0,action_client_wrapper.createServerReference)("7fe6bcff2944a454891c847e7a2b35e7fa5424a16a", action_client_wrapper.callServer, undefined, action_client_wrapper.findSourceMapURL, "cloneSegmentAction")
;// ../../node_modules/next/dist/build/webpack/loaders/next-flight-server-reference-proxy-loader.js?id=7fa1455a73fef63c6b670c6d3018b8c0e88c94475c&name=loadNewSegmentAction!

const loadNewSegmentAction = /*#__PURE__*/(0,action_client_wrapper.createServerReference)("7fa1455a73fef63c6b670c6d3018b8c0e88c94475c", action_client_wrapper.callServer, undefined, action_client_wrapper.findSourceMapURL, "loadNewSegmentAction")
// EXTERNAL MODULE: ../../node_modules/next/dist/build/webpack/loaders/next-flight-server-reference-proxy-loader.js?id=7f401506cbd8cbaf6e69a102af4b34faff51e6821d&name=updateSegmentAction!
var next_flight_server_reference_proxy_loaderid_7f401506cbd8cbaf6e69a102af4b34faff51e6821d_name_updateSegmentAction_ = __webpack_require__(386845);
// EXTERNAL MODULE: ../../node_modules/next/dist/build/webpack/loaders/next-flight-server-reference-proxy-loader.js?id=7f5f67ef7357726711b163b717490966a69d2206c9&name=createSegmentAction!
var next_flight_server_reference_proxy_loaderid_7f5f67ef7357726711b163b717490966a69d2206c9_name_createSegmentAction_ = __webpack_require__(155860);
;// ../../node_modules/next/dist/build/webpack/loaders/next-flight-server-reference-proxy-loader.js?id=7fd4a2f68d0f93b333143479d5d3345939d6141f48&name=resetSegmentFiltersAction!

const resetSegmentFiltersAction = /*#__PURE__*/(0,action_client_wrapper.createServerReference)("7fd4a2f68d0f93b333143479d5d3345939d6141f48", action_client_wrapper.callServer, undefined, action_client_wrapper.findSourceMapURL, "resetSegmentFiltersAction")
// EXTERNAL MODULE: ./modules/ui/components/alert/index.tsx
var components_alert = __webpack_require__(886762);
// EXTERNAL MODULE: ./modules/ui/components/alert-dialog/index.tsx
var alert_dialog = __webpack_require__(870255);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/loader-circle.js
var loader_circle = __webpack_require__(983324);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/users.js
var users = __webpack_require__(969614);
// EXTERNAL MODULE: ../../packages/lib/time.ts
var time = __webpack_require__(775453);
;// ./modules/ui/components/load-segment-modal/index.tsx
/* __next_internal_client_entry_do_not_use__ LoadSegmentModal auto */ 








const SegmentDetail = ({ segment, setIsSegmentEditorOpen, setOpen, setSegment, onSegmentLoad, surveyId, currentSegment })=>{
    const [isLoading, setIsLoading] = (0,react.useState)(false);
    const handleLoadNewSegment = async (segmentId)=>{
        try {
            if (currentSegment.id === segmentId) {
                return;
            }
            setIsLoading(true);
            const updatedSurvey = await onSegmentLoad(surveyId, segmentId);
            if (!updatedSurvey?.id || !updatedSurvey?.segment) {
                dist/* default */.Ay.error("Error loading survey");
                setIsLoading(false);
                setIsSegmentEditorOpen(false);
                setOpen(false);
                return;
            }
            const parsedFilters = types_segment/* ZSegmentFilters */.Ji.safeParse(updatedSurvey?.segment?.filters);
            if (!parsedFilters.success) {
                dist/* default */.Ay.error("Error loading survey");
                setIsLoading(false);
                setIsSegmentEditorOpen(false);
                setOpen(false);
                return;
            }
            setSegment({
                ...updatedSurvey.segment,
                description: updatedSurvey.segment.description || "",
                filters: parsedFilters.data,
                surveys: updatedSurvey.segment.surveys
            });
            setIsLoading(false);
        } catch (err) {
            setIsLoading(false);
            dist/* default */.Ay.error(err.message);
            setOpen(false);
        }
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: (0,lib_cn.cn)("relative mt-1 grid h-16 cursor-pointer grid-cols-5 content-center rounded-lg hover:bg-slate-100", currentSegment.id === segment.id && "pointer-events-none bg-slate-100 opacity-60"),
        onClick: async ()=>{
            setIsLoading(true);
            try {
                await handleLoadNewSegment(segment.id);
                setIsLoading(false);
            } catch (err) {
                setIsLoading(false);
            }
        },
        children: [
            isLoading && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "absolute inset-0 flex items-center justify-center bg-slate-50 opacity-80",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(loader_circle/* default */.A, {
                    className: "h-6 w-6 animate-spin"
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "col-span-3 flex items-center pl-6 text-sm",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "flex items-center gap-4",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "ph-no-capture h-8 w-8 flex-shrink-0 text-slate-700",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(users/* default */.A, {
                                className: "h-5 w-5"
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "flex flex-col",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "ph-no-capture font-medium text-slate-900",
                                    children: segment.title
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "ph-no-capture text-xs font-medium text-slate-500",
                                    children: segment.description
                                })
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "whitespace-wrap col-span-1 my-auto hidden text-center text-sm text-slate-500 sm:block",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "ph-no-capture text-slate-900",
                    children: (0,time/* timeSinceDate */.oS)(segment.updatedAt)
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "whitespace-wrap col-span-1 my-auto hidden text-center text-sm text-slate-500 sm:block",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "ph-no-capture text-slate-900",
                    children: (0,time/* formatDate */.Yq)(segment.createdAt)
                })
            })
        ]
    }, segment.id);
};
const LoadSegmentModal = ({ open, surveyId, setOpen, currentSegment, segments, setSegment, setIsSegmentEditorOpen, onSegmentLoad })=>{
    const handleResetState = ()=>{
        setOpen(false);
    };
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const segmentsArray = segments?.filter((segment)=>!segment.isPrivate);
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(modal/* Modal */.a, {
        open: open,
        setOpen: ()=>{
            handleResetState();
        },
        title: t("environments.surveys.edit.load_segment"),
        size: "lg",
        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_jsx_runtime.Fragment, {
            children: !segmentsArray?.length ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "group",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "flex h-16 w-full flex-col items-center justify-center rounded-lg text-slate-700",
                    children: t("environments.surveys.edit.you_have_not_created_a_segment_yet")
                })
            }) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "flex flex-col",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "grid h-12 grid-cols-5 content-center rounded-lg bg-slate-100 text-left text-sm font-semibold text-slate-900",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "col-span-3 pl-6",
                                    children: t("common.segment")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "col-span-1 hidden text-center sm:block",
                                    children: t("common.updated_at")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "col-span-1 hidden text-center sm:block",
                                    children: t("common.created_at")
                                })
                            ]
                        }),
                        segmentsArray.map((segment)=>/*#__PURE__*/ (0,react_jsx_runtime.jsx)(SegmentDetail, {
                                segment: segment,
                                setIsSegmentEditorOpen: setIsSegmentEditorOpen,
                                setOpen: setOpen,
                                setSegment: setSegment,
                                onSegmentLoad: onSegmentLoad,
                                surveyId: surveyId,
                                currentSegment: currentSegment
                            }))
                    ]
                })
            })
        })
    });
};

;// ./modules/ui/components/save-as-new-segment-modal/index.tsx
/* __next_internal_client_entry_do_not_use__ SaveAsNewSegmentModal auto */ 








const SaveAsNewSegmentModal = ({ open, setOpen, localSurvey, segment, setSegment, setIsSegmentEditorOpen, onCreateSegment, onUpdateSegment })=>{
    const { register, formState: { errors }, handleSubmit, setValue } = (0,index_esm/* useForm */.mN)();
    const [isLoading, setIsLoading] = (0,react.useState)(false);
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const handleReset = ()=>{
        setValue("title", "");
        setValue("description", "");
        setOpen(false);
    };
    const handleSaveSegment = async (data)=>{
        if (!segment || !segment?.filters.length) return;
        const createSegment = async ()=>{
            setIsLoading(true);
            const createdSegment = await onCreateSegment({
                environmentId: localSurvey.environmentId,
                surveyId: localSurvey.id,
                title: data.title,
                description: data.description ?? "",
                isPrivate: false,
                filters: segment?.filters
            });
            setSegment(createdSegment);
            setIsSegmentEditorOpen(false);
            setIsLoading(false);
            dist/* default */.Ay.success(t("environments.segments.segment_created_successfully"));
            handleReset();
        };
        const updateSegment = async ()=>{
            if (!!segment && segment?.isPrivate) {
                const updatedSegment = await onUpdateSegment(segment.id, {
                    ...segment,
                    title: data.title,
                    description: data.description,
                    isPrivate: false,
                    filters: segment?.filters
                });
                dist/* default */.Ay.success(t("environments.segments.segment_updated_successfully"));
                setSegment(updatedSegment);
                setIsSegmentEditorOpen(false);
                handleReset();
            }
        };
        try {
            // if the segment is private, update it to add title, description and make it public
            // otherwise, create a new segment
            setIsLoading(true);
            if (!!segment) {
                if (segment.id === "temp") {
                    await createSegment();
                } else {
                    await updateSegment();
                }
                return;
            }
            await createSegment();
            return;
        } catch (err) {
            dist/* default */.Ay.error(err.message);
            setIsLoading(false);
        }
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(modal/* Modal */.a, {
        open: open,
        setOpen: ()=>{
            handleReset();
        },
        noPadding: true,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "rounded-t-lg bg-slate-100",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "flex w-full items-center gap-4 p-6",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex items-center space-x-2",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "mr-1.5 h-6 w-6 text-slate-500",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(users/* default */.A, {
                                    className: "h-5 w-5"
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h3", {
                                        className: "text-base font-medium",
                                        children: t("environments.segments.save_as_new_segment")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                        className: "text-sm text-slate-600",
                                        children: t("environments.segments.save_your_filters_as_a_segment_to_use_it_in_other_surveys")
                                    })
                                ]
                            })
                        ]
                    })
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "rounded-lg bg-white",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("form", {
                    className: "flex flex-col gap-4",
                    onSubmit: handleSubmit(handleSaveSegment),
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "p-6",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex flex-col gap-4",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("label", {
                                                htmlFor: "title",
                                                className: "text-sm font-medium text-slate-700",
                                                children: t("common.name")
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                ...register("title", {
                                                    required: {
                                                        value: true,
                                                        message: t("environments.segments.title_is_required")
                                                    }
                                                }),
                                                type: "text",
                                                placeholder: t("environments.segments.ex_power_users"),
                                                className: "w-full p-2"
                                            }),
                                            errors?.title?.message && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                className: "text-xs text-red-500",
                                                children: errors?.title?.message
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("label", {
                                                htmlFor: "description",
                                                className: "text-sm font-medium text-slate-700",
                                                children: t("common.description")
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                ...register("description"),
                                                type: "text",
                                                placeholder: t("environments.segments.most_active_users_in_the_last_30_days"),
                                                className: "w-full p-2"
                                            }),
                                            errors?.title?.message && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                className: "text-xs text-red-500",
                                                children: errors?.title?.message
                                            })
                                        ]
                                    })
                                ]
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "flex justify-end border-t border-slate-200 p-6",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex space-x-2",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                        type: "button",
                                        variant: "ghost",
                                        onClick: ()=>{
                                            handleReset();
                                        },
                                        children: t("common.cancel")
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                        type: "submit",
                                        loading: isLoading,
                                        children: t("common.save")
                                    })
                                ]
                            })
                        })
                    ]
                })
            })
        ]
    });
};

;// ./modules/ui/components/segment-title/index.tsx
/* __next_internal_client_entry_do_not_use__ SegmentTitle auto */ 


const SegmentTitle = ({ title, description, isPrivate })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    if (isPrivate) {
        return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
            className: "mb-4",
            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                className: "text-sm font-semibold text-slate-800",
                children: t("environments.surveys.edit.send_survey_to_audience_who_match")
            })
        });
    }
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "flex items-center gap-3",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "rounded-full border border-slate-200 bg-white p-2",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(users/* default */.A, {
                    className: "h-6 w-6 text-slate-600"
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex flex-col",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h3", {
                        className: "font-medium text-slate-900",
                        children: title
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                        className: "text-sm text-slate-500",
                        children: description
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/filter.js
var filter = __webpack_require__(217626);
;// ./modules/ui/components/targeting-indicator/index.tsx
/* __next_internal_client_entry_do_not_use__ TargetingIndicator auto */ 


const TargetingIndicator = ({ segment })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const doFiltersExist = !!segment?.filters?.length;
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "ml-4 flex items-center gap-4",
        children: [
            doFiltersExist ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(users/* default */.A, {
                className: "h-6 w-6 text-slate-800"
            }) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)(filter/* default */.A, {
                className: "h-6 w-6 text-slate-800"
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex flex-col",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("h3", {
                        className: "text-sm font-medium text-slate-900",
                        children: [
                            t("environments.surveys.edit.audience"),
                            ":",
                            " ",
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                className: "font-bold",
                                children: doFiltersExist ? t("environments.surveys.edit.targeted") : t("environments.surveys.edit.everyone")
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                        className: "text-xs text-slate-500",
                        children: doFiltersExist ? t("environments.surveys.edit.only_people_who_match_your_targeting_can_be_surveyed") : t("environments.surveys.edit.without_a_filter_all_of_your_users_can_be_surveyed")
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/chevron-up.js
var chevron_up = __webpack_require__(397903);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/circle-alert.js
var circle_alert = __webpack_require__(88515);
// EXTERNAL MODULE: ./modules/ee/contacts/segments/components/add-filter-modal.tsx
var add_filter_modal = __webpack_require__(93584);
// EXTERNAL MODULE: ./modules/ee/contacts/segments/components/segment-editor.tsx + 2 modules
var segment_editor = __webpack_require__(781553);
;// ./modules/ee/contacts/segments/components/targeting-card.tsx
/* __next_internal_client_entry_do_not_use__ TargetingCard auto */ 



















function TargetingCard({ localSurvey, setLocalSurvey, environmentId, contactAttributeKeys, segments, initialSegment }) {
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const router = (0,navigation.useRouter)();
    const [open, setOpen] = (0,react.useState)(false);
    const [segment, setSegment] = (0,react.useState)(localSurvey.segment);
    const [addFilterModalOpen, setAddFilterModalOpen] = (0,react.useState)(false);
    const [saveAsNewSegmentModalOpen, setSaveAsNewSegmentModalOpen] = (0,react.useState)(false);
    const [resetAllFiltersModalOpen, setResetAllFiltersModalOpen] = (0,react.useState)(false);
    const [loadSegmentModalOpen, setLoadSegmentModalOpen] = (0,react.useState)(false);
    const [isSegmentEditorOpen, setIsSegmentEditorOpen] = (0,react.useState)(Boolean(localSurvey.segment?.isPrivate));
    const [segmentEditorViewOnly, setSegmentEditorViewOnly] = (0,react.useState)(true);
    process.env.__NEXT_PRIVATE_MINIMIZE_MACRO_FALSE && (0,react.useEffect)(()=>{
        setLocalSurvey((localSurveyOld)=>({
                ...localSurveyOld,
                segment
            }));
    }, [
        setLocalSurvey,
        segment
    ]);
    const isSegmentUsedInOtherSurveys = (0,react.useMemo)(()=>localSurvey.segment ? localSurvey.segment.surveys.length > 1 : false, [
        localSurvey.segment
    ]);
    const handleCloneSegment = async ()=>{
        if (!segment) return;
        try {
            const clonedSegmentResponse = await cloneSegmentAction({
                segmentId: segment.id,
                surveyId: localSurvey.id
            });
            if (clonedSegmentResponse?.data) {
                setSegment(clonedSegmentResponse.data);
            }
        } catch (err) {
            dist/* default */.Ay.error(err.message);
        }
    };
    process.env.__NEXT_PRIVATE_MINIMIZE_MACRO_FALSE && (0,react.useEffect)(()=>{
        if (segment && segment.filters.length > 0) {
            setOpen(true);
        }
    }, [
        segment,
        segment?.filters.length
    ]);
    process.env.__NEXT_PRIVATE_MINIMIZE_MACRO_FALSE && (0,react.useEffect)(()=>{
        if (localSurvey.type === "link") {
            setOpen(false);
        }
    }, [
        localSurvey.type
    ]);
    const handleAddFilterInGroup = (filter)=>{
        const updatedSegment = (0,pollyfills_structuredClone/* structuredClone */.p)(segment);
        if (updatedSegment?.filters.length === 0) {
            updatedSegment.filters.push({
                ...filter,
                connector: null
            });
        } else {
            updatedSegment?.filters.push(filter);
        }
        setSegment(updatedSegment);
    };
    const handleLoadNewSegment = async (surveyId, segmentId)=>{
        const updatedSurvey = await loadNewSegmentAction({
            surveyId: surveyId,
            segmentId
        });
        return updatedSurvey?.data;
    };
    const handleSaveAsNewSegmentUpdate = async (segmentId, data)=>{
        const updatedSegment = await (0,next_flight_server_reference_proxy_loaderid_7f401506cbd8cbaf6e69a102af4b34faff51e6821d_name_updateSegmentAction_/* updateSegmentAction */.l)({
            segmentId,
            environmentId,
            data
        });
        return updatedSegment?.data;
    };
    const handleSaveAsNewSegmentCreate = async (data)=>{
        const createdSegment = await (0,next_flight_server_reference_proxy_loaderid_7f5f67ef7357726711b163b717490966a69d2206c9_name_createSegmentAction_/* createSegmentAction */.W)(data);
        return createdSegment?.data;
    };
    const handleSaveSegment = async (data)=>{
        try {
            if (!segment) throw new Error(t("environments.segments.invalid_segment"));
            await (0,next_flight_server_reference_proxy_loaderid_7f401506cbd8cbaf6e69a102af4b34faff51e6821d_name_updateSegmentAction_/* updateSegmentAction */.l)({
                segmentId: segment.id,
                environmentId,
                data
            });
            dist/* default */.Ay.success(t("environments.segments.segment_saved_successfully"));
            setIsSegmentEditorOpen(false);
            setSegmentEditorViewOnly(true);
        } catch (err) {
            dist/* default */.Ay.error(err.message ?? t("environments.segments.error_saving_segment"));
        }
    };
    const handleResetAllFilters = async ()=>{
        try {
            const segmentResponse = await resetSegmentFiltersAction({
                surveyId: localSurvey.id
            });
            return segmentResponse?.data;
        } catch (err) {
            dist/* default */.Ay.error(t("environments.segments.error_resetting_filters"));
        }
    };
    if (localSurvey.type === "link") {
        return null; // Hide card completely
    }
    if (!segment) {
        throw new Error(t("environments.segments.invalid_segment"));
    }
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
        className: "w-full overflow-hidden rounded-lg border border-slate-300 bg-white",
        onOpenChange: setOpen,
        open: open,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                asChild: true,
                className: "h-full w-full cursor-pointer rounded-lg hover:bg-slate-50",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "inline-flex px-4 py-6",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "flex items-center pl-2 pr-5",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(check/* default */.A, {
                                className: "h-7 w-7 rounded-full border border-green-300 bg-green-100 p-1.5 text-green-600",
                                strokeWidth: 3
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "font-semibold text-slate-800",
                                    children: t("environments.segments.target_audience")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "mt-1 text-sm text-slate-500",
                                    children: t("environments.segments.pre_segment_users")
                                })
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                className: "min-w-full overflow-auto",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("hr", {
                        className: "text-slate-600"
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex flex-col gap-5 p-6",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(TargetingIndicator, {
                                segment: segment
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "filter-scrollbar flex flex-col gap-4 overflow-auto rounded-lg border border-slate-300 bg-slate-50 p-4",
                                children: [
                                    Boolean(segment) && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LoadSegmentModal, {
                                        currentSegment: segment,
                                        onSegmentLoad: handleLoadNewSegment,
                                        open: loadSegmentModalOpen,
                                        segments: segments,
                                        setIsSegmentEditorOpen: setIsSegmentEditorOpen,
                                        setOpen: setLoadSegmentModalOpen,
                                        setSegment: setSegment,
                                        surveyId: localSurvey.id
                                    }),
                                    isSegmentEditorOpen ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "flex w-full flex-col gap-2",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SegmentTitle, {
                                                description: localSurvey.segment?.description,
                                                isPrivate: segment?.isPrivate,
                                                title: localSurvey.segment?.title
                                            }),
                                            Boolean(segment?.filters.length) && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                className: "w-full",
                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(segment_editor/* SegmentEditor */.B, {
                                                    contactAttributeKeys: contactAttributeKeys,
                                                    environmentId: environmentId,
                                                    group: segment.filters,
                                                    segment: segment,
                                                    segments: segments,
                                                    setSegment: setSegment
                                                }, segment.filters.toString())
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: (0,lib_cn.cn)("mt-3 flex items-center gap-2", segment?.isPrivate && !segment.filters.length && "mt-0"),
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                                        onClick: ()=>{
                                                            setAddFilterModalOpen(true);
                                                        },
                                                        size: "sm",
                                                        variant: "secondary",
                                                        children: t("common.add_filter")
                                                    }),
                                                    isSegmentEditorOpen && !segment?.isPrivate ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                                        onClick: ()=>{
                                                            handleSaveSegment({
                                                                filters: segment?.filters ?? []
                                                            });
                                                        },
                                                        size: "sm",
                                                        variant: "secondary",
                                                        children: t("common.save_changes")
                                                    }) : null,
                                                    isSegmentEditorOpen && !segment?.isPrivate ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                                        className: "flex items-center gap-2",
                                                        onClick: ()=>{
                                                            setIsSegmentEditorOpen(false);
                                                            setSegmentEditorViewOnly(true);
                                                            if (initialSegment) {
                                                                setSegment(initialSegment);
                                                            }
                                                        },
                                                        size: "sm",
                                                        variant: "ghost",
                                                        children: t("common.cancel")
                                                    }) : null
                                                ]
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(add_filter_modal/* AddFilterModal */.b, {
                                                contactAttributeKeys: contactAttributeKeys,
                                                onAddFilter: (filter)=>{
                                                    handleAddFilterInGroup(filter);
                                                },
                                                open: addFilterModalOpen,
                                                segments: segments,
                                                setOpen: setAddFilterModalOpen
                                            }),
                                            Boolean(segment) && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SaveAsNewSegmentModal, {
                                                localSurvey: localSurvey,
                                                onCreateSegment: handleSaveAsNewSegmentCreate,
                                                onUpdateSegment: handleSaveAsNewSegmentUpdate,
                                                open: saveAsNewSegmentModalOpen,
                                                segment: segment,
                                                setIsSegmentEditorOpen: setIsSegmentEditorOpen,
                                                setOpen: setSaveAsNewSegmentModalOpen,
                                                setSegment: setSegment
                                            })
                                        ]
                                    }) : /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "flex flex-col gap-2 rounded-lg",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SegmentTitle, {
                                                description: localSurvey.segment?.description,
                                                isPrivate: segment?.isPrivate,
                                                title: localSurvey.segment?.title
                                            }),
                                            segmentEditorViewOnly && segment ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                className: "opacity-60",
                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(segment_editor/* SegmentEditor */.B, {
                                                    contactAttributeKeys: contactAttributeKeys,
                                                    environmentId: environmentId,
                                                    group: segment.filters,
                                                    segment: segment,
                                                    segments: segments,
                                                    setSegment: setSegment,
                                                    viewOnly: segmentEditorViewOnly
                                                }, segment.filters.toString())
                                            }) : null,
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "mt-3 flex items-center gap-3",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                                                        onClick: ()=>{
                                                            setSegmentEditorViewOnly(!segmentEditorViewOnly);
                                                        },
                                                        size: "sm",
                                                        variant: "secondary",
                                                        children: [
                                                            segmentEditorViewOnly ? t("environments.segments.hide_filters") : t("environments.segments.view_filters"),
                                                            segmentEditorViewOnly ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(chevron_up/* default */.A, {
                                                                className: "ml-2 h-3 w-3"
                                                            }) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)(chevron_down/* default */.A, {
                                                                className: "ml-2 h-3 w-3"
                                                            })
                                                        ]
                                                    }),
                                                    isSegmentUsedInOtherSurveys ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                                        onClick: ()=>handleCloneSegment(),
                                                        size: "sm",
                                                        variant: "secondary",
                                                        children: t("environments.segments.clone_and_edit_segment")
                                                    }) : null,
                                                    !isSegmentUsedInOtherSurveys && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                                                        onClick: ()=>{
                                                            setIsSegmentEditorOpen(true);
                                                            setSegmentEditorViewOnly(false);
                                                        },
                                                        size: "sm",
                                                        variant: isSegmentUsedInOtherSurveys ? "ghost" : "secondary",
                                                        children: [
                                                            t("environments.segments.edit_segment"),
                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(pencil/* default */.A, {
                                                                className: "ml-2 h-3 w-3"
                                                            })
                                                        ]
                                                    })
                                                ]
                                            }),
                                            isSegmentUsedInOtherSurveys ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                                className: "mt-1 flex items-center text-xs text-slate-500",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(circle_alert/* default */.A, {
                                                        className: "mr-1 inline h-3 w-3"
                                                    }),
                                                    t("environments.segments.this_segment_is_used_in_other_surveys"),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)((link_default()), {
                                                        className: "ml-1 underline",
                                                        href: `/environments/${environmentId}/segments`,
                                                        target: "_blank",
                                                        children: t("environments.segments.here")
                                                    })
                                                ]
                                            }) : null
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex gap-3",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                        onClick: ()=>{
                                            setLoadSegmentModalOpen(true);
                                        },
                                        size: "sm",
                                        variant: "secondary",
                                        children: t("environments.segments.load_segment")
                                    }),
                                    !segment?.isPrivate && Boolean(segment?.filters.length) && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                        onClick: ()=>{
                                            setResetAllFiltersModalOpen(true);
                                        },
                                        size: "sm",
                                        variant: "secondary",
                                        children: t("environments.segments.reset_all_filters")
                                    }),
                                    isSegmentEditorOpen && Boolean(segment?.filters.length) ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                                        className: "flex items-center gap-2",
                                        onClick: ()=>{
                                            setSaveAsNewSegmentModalOpen(true);
                                        },
                                        size: "sm",
                                        variant: "secondary",
                                        children: t("environments.segments.save_as_new_segment")
                                    }) : null,
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(alert_dialog/* AlertDialog */.L, {
                                        confirmBtnLabel: t("environments.segments.remove_all_filters"),
                                        declineBtnLabel: t("common.cancel"),
                                        headerText: t("common.are_you_sure"),
                                        mainText: t("environments.segments.this_action_resets_all_filters_in_this_survey"),
                                        onConfirm: async ()=>{
                                            const segment = await handleResetAllFilters();
                                            if (segment) {
                                                dist/* default */.Ay.success(t("environments.segments.filters_reset_successfully"));
                                                setSegment(segment);
                                                setResetAllFiltersModalOpen(false);
                                                router.refresh();
                                            }
                                        },
                                        onDecline: ()=>{
                                            setResetAllFiltersModalOpen(false);
                                        },
                                        open: resetAllFiltersModalOpen,
                                        setOpen: setResetAllFiltersModalOpen
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_alert/* Alert */.Fc, {
                            className: "flex items-center rounded-none bg-slate-50",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_alert/* AlertDescription */.TN, {
                                className: "ml-2",
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("span", {
                                    className: "mr-1 text-slate-600",
                                    children: [
                                        t("environments.segments.user_targeting_is_currently_only_available_when"),
                                        " ",
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)((link_default()), {
                                            href: "https://formbricks.com//docs/app-surveys/user-identification",
                                            target: "blank",
                                            className: "underline",
                                            children: t("environments.segments.identifying_users")
                                        }),
                                        " ",
                                        t("environments.segments.with_the_formbricks_sdk"),
                                        "."
                                    ]
                                })
                            })
                        })
                    })
                ]
            })
        ]
    });
}

// EXTERNAL MODULE: ./modules/ui/components/radio-group/index.tsx
var radio_group = __webpack_require__(540995);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/monitor.js
var monitor = __webpack_require__(923136);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/HowToSendCard.tsx
/* __next_internal_client_entry_do_not_use__ HowToSendCard auto */ 











const HowToSendCard = ({ localSurvey, setLocalSurvey, environment })=>{
    const [open, setOpen] = (0,react.useState)(false);
    const [appSetupCompleted, setAppSetupCompleted] = (0,react.useState)(false);
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    (0,react.useEffect)(()=>{
        if (environment) {
            setAppSetupCompleted(environment.appSetupCompleted);
        }
    }, [
        environment
    ]);
    const setSurveyType = (type)=>{
        const endingsTemp = localSurvey.endings;
        if (type === "link" && localSurvey.endings.length === 0) {
            endingsTemp.push((0,templates/* getDefaultEndingCard */.V0)(localSurvey.languages, t));
        }
        setLocalSurvey((prevSurvey)=>({
                ...prevSurvey,
                type,
                endings: endingsTemp
            }));
        // if the type is "app" and the local survey does not already have a segment, we create a new temporary segment
        if (type === "app" && !localSurvey.segment) {
            const tempSegment = {
                id: "temp",
                isPrivate: true,
                title: localSurvey.id,
                environmentId: environment.id,
                surveys: [
                    localSurvey.id
                ],
                filters: [],
                createdAt: new Date(),
                updatedAt: new Date(),
                description: ""
            };
            setLocalSurvey((prevSurvey)=>({
                    ...prevSurvey,
                    segment: tempSegment
                }));
        }
        // if the type is anything other than "app" and the local survey has a temporary segment, we remove it
        if (type !== "app" && localSurvey.segment?.id === "temp") {
            setLocalSurvey((prevSurvey)=>({
                    ...prevSurvey,
                    segment: null
                }));
        }
    };
    const options = [
        {
            id: "link",
            name: t("common.link_survey"),
            icon: icons_link/* default */.A,
            description: t("environments.surveys.edit.link_survey_description"),
            comingSoon: false,
            alert: false,
            hide: false
        },
        {
            id: "app",
            name: t("common.website_app_survey"),
            icon: monitor/* default */.A,
            description: t("environments.surveys.edit.app_survey_description"),
            comingSoon: false,
            alert: !appSetupCompleted
        }
    ];
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
        open: open,
        onOpenChange: setOpen,
        className: (0,lib_cn.cn)(open ? "" : "hover:bg-slate-50", "w-full space-y-2 rounded-lg border border-slate-300 bg-white"),
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                asChild: true,
                className: "h-full w-full cursor-pointer",
                id: "howToSendCardTrigger",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "inline-flex px-4 py-4",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "flex items-center pl-2 pr-5",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(check/* default */.A, {
                                strokeWidth: 3,
                                className: "h-7 w-7 rounded-full border border-green-300 bg-green-100 p-1.5 text-green-600"
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "font-semibold text-slate-800",
                                    children: t("common.survey_type")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "mt-1 text-sm text-slate-500",
                                    children: t("environments.surveys.edit.choose_where_to_run_the_survey")
                                })
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                className: "flex flex-col",
                ref: parent,
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("hr", {
                        className: "py-1 text-slate-600"
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "p-3",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroup */.z, {
                            defaultValue: "app",
                            value: localSurvey.type,
                            onValueChange: setSurveyType,
                            className: "flex flex-col space-y-3",
                            children: options.filter((option)=>!Boolean(option.hide)).map((option)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_label/* Label */.J, {
                                    htmlFor: option.id,
                                    className: (0,lib_cn.cn)("flex w-full items-center rounded-lg border bg-slate-50 p-4", option.comingSoon ? "border-slate-200 bg-slate-50/50" : option.id === localSurvey.type ? "border-brand-dark cursor-pointer bg-slate-50" : "cursor-pointer bg-slate-50"),
                                    id: `howToSendCardOption-${option.id}`,
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroupItem */.C, {
                                            value: option.id,
                                            id: option.id,
                                            className: "aria-checked:border-brand-dark mx-5 disabled:border-slate-400 aria-checked:border-2",
                                            disabled: option.comingSoon
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            className: "inline-flex items-center",
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(option.icon, {
                                                    className: "mr-4 h-8 w-8 text-slate-500"
                                                }),
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                    children: [
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                            className: "inline-flex items-center",
                                                            children: [
                                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                                    className: (0,lib_cn.cn)("font-semibold", option.comingSoon ? "text-slate-500" : "text-slate-800"),
                                                                    children: option.name
                                                                }),
                                                                option.comingSoon && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(badge/* Badge */.E, {
                                                                    size: "normal",
                                                                    type: "success",
                                                                    className: "ml-2",
                                                                    text: t("environments.settings.enterprise.coming_soon")
                                                                })
                                                            ]
                                                        }),
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                            className: "mt-2 text-xs font-normal text-slate-600",
                                                            children: option.description
                                                        }),
                                                        localSurvey.type === option.id && option.alert && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                            className: "mt-2 flex items-center space-x-3 rounded-lg border border-amber-200 bg-amber-50 px-4 py-2",
                                                            children: [
                                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(circle_alert/* default */.A, {
                                                                    className: "h-5 w-5 text-amber-500"
                                                                }),
                                                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                    className: "text-amber-800",
                                                                    children: [
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                                            className: "text-xs font-semibold",
                                                                            children: t("environments.surveys.edit.formbricks_sdk_is_not_connected")
                                                                        }),
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                                                            className: "text-xs font-normal",
                                                                            children: [
                                                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)((link_default()), {
                                                                                    href: `/environments/${environment.id}/project/${option.id}-connection`,
                                                                                    className: "underline hover:text-amber-900",
                                                                                    target: "_blank",
                                                                                    children: t("common.connect_formbricks")
                                                                                }),
                                                                                " ",
                                                                                t("environments.surveys.edit.and_launch_surveys_in_your_website_or_app")
                                                                            ]
                                                                        })
                                                                    ]
                                                                })
                                                            ]
                                                        })
                                                    ]
                                                })
                                            ]
                                        })
                                    ]
                                }, option.id))
                        })
                    })
                ]
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/RecontactOptionsCard.tsx
/* __next_internal_client_entry_do_not_use__ RecontactOptionsCard auto */ 










const RecontactOptionsCard = ({ localSurvey, setLocalSurvey, environmentId })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const displayOptions = (0,react.useMemo)(()=>[
            {
                id: "displayOnce",
                name: t("environments.surveys.edit.show_only_once"),
                description: t("environments.surveys.edit.the_survey_will_be_shown_once_even_if_person_doesnt_respond")
            },
            {
                id: "displaySome",
                name: t("environments.surveys.edit.show_multiple_times"),
                description: t("environments.surveys.edit.the_survey_will_be_shown_multiple_times_until_they_respond")
            },
            {
                id: "displayMultiple",
                name: t("environments.surveys.edit.until_they_submit_a_response"),
                description: t("environments.surveys.edit.if_you_really_want_that_answer_ask_until_you_get_it")
            },
            {
                id: "respondMultiple",
                name: t("environments.surveys.edit.keep_showing_while_conditions_match"),
                description: t("environments.surveys.edit.even_after_they_submitted_a_response_e_g_feedback_box")
            }
        ], [
        t
    ]);
    const [open, setOpen] = (0,react.useState)(false);
    const ignoreWaiting = localSurvey.recontactDays !== null;
    const [inputDays, setInputDays] = (0,react.useState)(localSurvey.recontactDays !== null ? localSurvey.recontactDays : 1);
    const [displayLimit, setDisplayLimit] = (0,react.useState)(localSurvey.displayLimit ?? 1);
    // Auto animate
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    const handleCheckMark = ()=>{
        if (ignoreWaiting) {
            const updatedSurvey = {
                ...localSurvey,
                recontactDays: null
            };
            setLocalSurvey(updatedSurvey);
        } else {
            const updatedSurvey = {
                ...localSurvey,
                recontactDays: 0
            };
            setLocalSurvey(updatedSurvey);
        }
    };
    const handleRecontactDaysChange = (event)=>{
        const value = Number(event.target.value);
        setInputDays(value);
        const updatedSurvey = {
            ...localSurvey,
            recontactDays: value
        };
        setLocalSurvey(updatedSurvey);
    };
    const handleRecontactSessionDaysChange = (event)=>{
        const value = Number(event.target.value);
        setDisplayLimit(value);
        const updatedSurvey = {
            ...localSurvey,
            displayLimit: value
        };
        setLocalSurvey(updatedSurvey);
    };
    (0,react.useEffect)(()=>{
        if (localSurvey.type === "link") {
            setOpen(false);
        }
    }, [
        localSurvey.type
    ]);
    if (localSurvey.type === "link") {
        return null; // Hide card completely
    }
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
        open: open,
        onOpenChange: (openState)=>{
            if (localSurvey.type !== "link") {
                setOpen(openState);
            }
        },
        className: "w-full rounded-lg border border-slate-300 bg-white",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                asChild: true,
                className: "h-full w-full cursor-pointer rounded-lg hover:bg-slate-50",
                id: "recontactOptionsCardTrigger",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "inline-flex px-4 py-4",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "flex items-center pl-2 pr-5",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(check/* default */.A, {
                                strokeWidth: 3,
                                className: "h-7 w-7 rounded-full border border-green-300 bg-green-100 p-1.5 text-green-600"
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "font-semibold text-slate-800",
                                    children: t("environments.surveys.edit.recontact_options")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "mt-1 text-sm text-slate-500",
                                    children: t("environments.surveys.edit.decide_how_often_people_can_answer_this_survey")
                                })
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                className: `flex flex-col ${open && "pb-3"}`,
                ref: parent,
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("hr", {
                        className: "py-1 text-slate-600"
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "p-3",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroup */.z, {
                            value: localSurvey.displayOption,
                            className: "flex flex-col space-y-3",
                            onValueChange: (v)=>{
                                if (v === "displayOnce" || v === "displayMultiple" || v === "respondMultiple") {
                                    const updatedSurvey = {
                                        ...localSurvey,
                                        displayOption: v
                                    };
                                    setLocalSurvey(updatedSurvey);
                                } else if (v === "displaySome") {
                                    const updatedSurvey = {
                                        ...localSurvey,
                                        displayOption: v,
                                        displayLimit
                                    };
                                    setLocalSurvey(updatedSurvey);
                                }
                            },
                            children: displayOptions.map((option)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_label/* Label */.J, {
                                            htmlFor: option.name,
                                            className: "flex w-full cursor-pointer items-center rounded-lg border bg-slate-50 p-4",
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroupItem */.C, {
                                                    value: option.id,
                                                    id: option.name,
                                                    className: "aria-checked:border-brand-dark mx-5 disabled:border-slate-400 aria-checked:border-2"
                                                }),
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                    children: [
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                            className: "font-semibold text-slate-700",
                                                            children: t(option.name)
                                                        }),
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                            className: "mt-2 text-xs font-normal text-slate-600",
                                                            children: t(option.description)
                                                        })
                                                    ]
                                                })
                                            ]
                                        }, option.name),
                                        option.id === "displaySome" && localSurvey.displayOption === "displaySome" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("label", {
                                            htmlFor: "displayLimit",
                                            className: "cursor-pointer p-4",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                                className: "text-sm font-semibold text-slate-700",
                                                children: [
                                                    t("environments.surveys.edit.show_survey_maximum_of"),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                        type: "number",
                                                        min: "1",
                                                        id: "displayLimit",
                                                        value: displayLimit.toString(),
                                                        onChange: (e)=>handleRecontactSessionDaysChange(e),
                                                        className: "mx-2 inline w-16 bg-white text-center text-sm"
                                                    }),
                                                    t("environments.surveys.edit.times"),
                                                    "."
                                                ]
                                            })
                                        })
                                    ]
                                }, option.id))
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                        htmlId: "recontactDays",
                        isChecked: ignoreWaiting,
                        onToggle: handleCheckMark,
                        title: t("environments.surveys.edit.ignore_waiting_time_between_surveys"),
                        childBorder: false,
                        description: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                            children: [
                                t("environments.surveys.edit.this_setting_overwrites_your"),
                                " ",
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)((link_default()), {
                                    className: "decoration-brand-dark underline",
                                    href: `/environments/${environmentId}/project/general`,
                                    target: "_blank",
                                    children: t("environments.surveys.edit.waiting_period")
                                }),
                                ". ",
                                t("environments.surveys.edit.use_with_caution")
                            ]
                        }),
                        children: localSurvey.recontactDays !== null && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(radio_group/* RadioGroup */.z, {
                            value: localSurvey.recontactDays.toString(),
                            className: "flex w-full flex-col space-y-3 bg-white",
                            onValueChange: (v)=>{
                                const updatedSurvey = {
                                    ...localSurvey,
                                    recontactDays: v === "null" ? null : Number(v)
                                };
                                setLocalSurvey(updatedSurvey);
                            },
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_label/* Label */.J, {
                                    htmlFor: "ignore",
                                    className: "flex w-full cursor-pointer items-center rounded-lg border bg-slate-50 p-4",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroupItem */.C, {
                                            value: "0",
                                            id: "ignore",
                                            className: "aria-checked:border-brand-dark mx-4 text-sm disabled:border-slate-400 aria-checked:border-2"
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                    className: "font-semibold text-slate-700",
                                                    children: t("environments.surveys.edit.always_show_survey")
                                                }),
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                    className: "mt-2 text-xs font-normal text-slate-600",
                                                    children: t("environments.surveys.edit.when_conditions_match_waiting_time_will_be_ignored_and_survey_shown")
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("label", {
                                    htmlFor: "newDays",
                                    className: "flex w-full cursor-pointer items-center rounded-lg border bg-slate-50 p-4",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroupItem */.C, {
                                            value: inputDays === 0 ? "1" : inputDays.toString(),
                                            id: "newDays",
                                            className: "aria-checked:border-brand-dark mx-4 disabled:border-slate-400 aria-checked:border-2"
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                                    className: "text-sm font-semibold text-slate-700",
                                                    children: [
                                                        t("environments.surveys.edit.wait"),
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                            type: "number",
                                                            min: "1",
                                                            id: "inputDays",
                                                            value: inputDays === 0 ? 1 : inputDays,
                                                            onChange: handleRecontactDaysChange,
                                                            className: "ml-2 mr-2 inline w-16 bg-white text-center text-sm"
                                                        }),
                                                        t("environments.surveys.edit.days_before_showing_this_survey_again"),
                                                        "."
                                                    ]
                                                }),
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                    className: "mt-2 text-xs font-normal text-slate-600",
                                                    children: t("environments.surveys.edit.overwrites_waiting_period_between_surveys_to_x_days", {
                                                        days: inputDays === 0 ? 1 : inputDays
                                                    })
                                                })
                                            ]
                                        })
                                    ]
                                })
                            ]
                        })
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/date-fns/format.js + 7 modules
var date_fns_format = __webpack_require__(73696);
;// ../../node_modules/lucide-react/dist/esm/icons/calendar-check.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const CalendarCheck = (0,createLucideIcon/* default */.A)("CalendarCheck", [
    [
        "path",
        {
            d: "M8 2v4",
            key: "1cmpym"
        }
    ],
    [
        "path",
        {
            d: "M16 2v4",
            key: "4m81vk"
        }
    ],
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "4",
            rx: "2",
            key: "1hopcy"
        }
    ],
    [
        "path",
        {
            d: "M3 10h18",
            key: "8toen8"
        }
    ],
    [
        "path",
        {
            d: "m9 16 2 2 4-4",
            key: "19s6y9"
        }
    ]
]);
 //# sourceMappingURL=calendar-check.js.map

;// ../../node_modules/lucide-react/dist/esm/icons/calendar.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Calendar = (0,createLucideIcon/* default */.A)("Calendar", [
    [
        "path",
        {
            d: "M8 2v4",
            key: "1cmpym"
        }
    ],
    [
        "path",
        {
            d: "M16 2v4",
            key: "4m81vk"
        }
    ],
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "4",
            rx: "2",
            key: "1hopcy"
        }
    ],
    [
        "path",
        {
            d: "M3 10h18",
            key: "8toen8"
        }
    ]
]);
 //# sourceMappingURL=calendar.js.map

// EXTERNAL MODULE: ../../node_modules/clsx/dist/clsx.mjs
var clsx = __webpack_require__(553626);
// EXTERNAL MODULE: ../../node_modules/mem/dist/index.js
var mem_dist = __webpack_require__(94226);
;// ../../node_modules/get-user-locale/dist/esm/index.js

function esm_isString(el) {
    return typeof el === 'string';
}
function isUnique(el, index, arr) {
    return arr.indexOf(el) === index;
}
function isAllLowerCase(el) {
    return el.toLowerCase() === el;
}
function fixCommas(el) {
    return el.indexOf(',') === -1 ? el : el.split(',');
}
function normalizeLocale(locale) {
    if (!locale) {
        return locale;
    }
    if (locale === 'C' || locale === 'posix' || locale === 'POSIX') {
        return 'en-US';
    }
    // If there's a dot (.) in the locale, it's likely in the format of "en-US.UTF-8", so we only take the first part
    if (locale.indexOf('.') !== -1) {
        var _a = locale.split('.')[0], actualLocale = _a === void 0 ? '' : _a;
        return normalizeLocale(actualLocale);
    }
    // If there's an at sign (@) in the locale, it's likely in the format of "en-US@posix", so we only take the first part
    if (locale.indexOf('@') !== -1) {
        var _b = locale.split('@')[0], actualLocale = _b === void 0 ? '' : _b;
        return normalizeLocale(actualLocale);
    }
    // If there's a dash (-) in the locale and it's not all lower case, it's already in the format of "en-US", so we return it
    if (locale.indexOf('-') === -1 || !isAllLowerCase(locale)) {
        return locale;
    }
    var _c = locale.split('-'), splitEl1 = _c[0], _d = _c[1], splitEl2 = _d === void 0 ? '' : _d;
    return "".concat(splitEl1, "-").concat(splitEl2.toUpperCase());
}
function getUserLocalesInternal(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.useFallbackLocale, useFallbackLocale = _c === void 0 ? true : _c, _d = _b.fallbackLocale, fallbackLocale = _d === void 0 ? 'en-US' : _d;
    var languageList = [];
    if (typeof navigator !== 'undefined') {
        var rawLanguages = navigator.languages || [];
        var languages = [];
        for (var _i = 0, rawLanguages_1 = rawLanguages; _i < rawLanguages_1.length; _i++) {
            var rawLanguagesItem = rawLanguages_1[_i];
            languages = languages.concat(fixCommas(rawLanguagesItem));
        }
        var rawLanguage = navigator.language;
        var language = rawLanguage ? fixCommas(rawLanguage) : rawLanguage;
        languageList = languageList.concat(languages, language);
    }
    if (useFallbackLocale) {
        languageList.push(fallbackLocale);
    }
    return languageList.filter(esm_isString).map(normalizeLocale).filter(isUnique);
}
var getUserLocales = mem_dist(getUserLocalesInternal, { cacheKey: JSON.stringify });
function getUserLocaleInternal(options) {
    return getUserLocales(options)[0] || null;
}
var getUserLocale = mem_dist(getUserLocaleInternal, { cacheKey: JSON.stringify });
/* harmony default export */ const esm = (getUserLocale);

;// ../../node_modules/@wojtekmaj/date-utils/dist/esm/index.js
/**
 * Utils
 */
function makeGetEdgeOfNeighbor(getPeriod, getEdgeOfPeriod, defaultOffset) {
    return function makeGetEdgeOfNeighborInternal(date, offset) {
        if (offset === void 0) { offset = defaultOffset; }
        var previousPeriod = getPeriod(date) + offset;
        return getEdgeOfPeriod(previousPeriod);
    };
}
function makeGetEnd(getBeginOfNextPeriod) {
    return function makeGetEndInternal(date) {
        return new Date(getBeginOfNextPeriod(date).getTime() - 1);
    };
}
function makeGetRange(getStart, getEnd) {
    return function makeGetRangeInternal(date) {
        return [getStart(date), getEnd(date)];
    };
}
/**
 * Simple getters - getting a property of a given point in time
 */
/**
 * Gets year from a given date.
 *
 * @param {DateLike} date Date to get year from
 * @returns {number} Year
 */
function getYear(date) {
    if (date instanceof Date) {
        return date.getFullYear();
    }
    if (typeof date === 'number') {
        return date;
    }
    var year = parseInt(date, 10);
    if (typeof date === 'string' && !isNaN(year)) {
        return year;
    }
    throw new Error("Failed to get year from date: ".concat(date, "."));
}
/**
 * Gets month from a given date.
 *
 * @param {Date} date Date to get month from
 * @returns {number} Month
 */
function getMonth(date) {
    if (date instanceof Date) {
        return date.getMonth();
    }
    throw new Error("Failed to get month from date: ".concat(date, "."));
}
/**
 * Gets human-readable month from a given date.
 *
 * @param {Date} date Date to get human-readable month from
 * @returns {number} Human-readable month
 */
function getMonthHuman(date) {
    if (date instanceof Date) {
        return date.getMonth() + 1;
    }
    throw new Error("Failed to get human-readable month from date: ".concat(date, "."));
}
/**
 * Gets day of the month from a given date.
 *
 * @param {Date} date Date to get day of the month from
 * @returns {number} Day of the month
 */
function getDate(date) {
    if (date instanceof Date) {
        return date.getDate();
    }
    throw new Error("Failed to get year from date: ".concat(date, "."));
}
/**
 * Gets hours from a given date.
 *
 * @param {Date | string} date Date to get hours from
 * @returns {number} Hours
 */
function getHours(date) {
    if (date instanceof Date) {
        return date.getHours();
    }
    if (typeof date === 'string') {
        var datePieces = date.split(':');
        if (datePieces.length >= 2) {
            var hoursString = datePieces[0];
            if (hoursString) {
                var hours = parseInt(hoursString, 10);
                if (!isNaN(hours)) {
                    return hours;
                }
            }
        }
    }
    throw new Error("Failed to get hours from date: ".concat(date, "."));
}
/**
 * Gets minutes from a given date.
 *
 * @param {Date | string} date Date to get minutes from
 * @returns {number} Minutes
 */
function getMinutes(date) {
    if (date instanceof Date) {
        return date.getMinutes();
    }
    if (typeof date === 'string') {
        var datePieces = date.split(':');
        if (datePieces.length >= 2) {
            var minutesString = datePieces[1] || '0';
            var minutes = parseInt(minutesString, 10);
            if (!isNaN(minutes)) {
                return minutes;
            }
        }
    }
    throw new Error("Failed to get minutes from date: ".concat(date, "."));
}
/**
 * Gets seconds from a given date.
 *
 * @param {Date | string} date Date to get seconds from
 * @returns {number} Seconds
 */
function getSeconds(date) {
    if (date instanceof Date) {
        return date.getSeconds();
    }
    if (typeof date === 'string') {
        var datePieces = date.split(':');
        if (datePieces.length >= 2) {
            var secondsWithMillisecondsString = datePieces[2] || '0';
            var seconds = parseInt(secondsWithMillisecondsString, 10);
            if (!isNaN(seconds)) {
                return seconds;
            }
        }
    }
    throw new Error("Failed to get seconds from date: ".concat(date, "."));
}
/**
 * Gets milliseconds from a given date.
 *
 * @param {Date | string} date Date to get milliseconds from
 * @returns {number} Milliseconds
 */
function getMilliseconds(date) {
    if (date instanceof Date) {
        return date.getMilliseconds();
    }
    if (typeof date === 'string') {
        var datePieces = date.split(':');
        if (datePieces.length >= 2) {
            var secondsWithMillisecondsString = datePieces[2] || '0';
            var millisecondsString = secondsWithMillisecondsString.split('.')[1] || '0';
            var milliseconds = parseInt(millisecondsString, 10);
            if (!isNaN(milliseconds)) {
                return milliseconds;
            }
        }
    }
    throw new Error("Failed to get seconds from date: ".concat(date, "."));
}
/**
 * Century
 */
/**
 * Gets century start date from a given date.
 *
 * @param {DateLike} date Date to get century start from
 * @returns {Date} Century start date
 */
function getCenturyStart(date) {
    var year = getYear(date);
    var centuryStartYear = year + ((-year + 1) % 100);
    var centuryStartDate = new Date();
    centuryStartDate.setFullYear(centuryStartYear, 0, 1);
    centuryStartDate.setHours(0, 0, 0, 0);
    return centuryStartDate;
}
/**
 * Gets previous century start date from a given date.
 *
 * @param {DateLike} date Date to get previous century start from
 * @returns {Date} Previous century start date
 */
var getPreviousCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, -100);
/**
 * Gets next century start date from a given date.
 *
 * @param {DateLike} date Date to get next century start from
 * @returns {Date} Next century start date
 */
var getNextCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, 100);
/**
 * Gets century end date from a given date.
 *
 * @param {DateLike} date Date to get century end from
 * @returns {Date} Century end date
 */
var getCenturyEnd = makeGetEnd(getNextCenturyStart);
/**
 * Gets previous century end date from a given date.
 *
 * @param {DateLike} date Date to get previous century end from
 * @returns {Date} Previous century end date
 */
var getPreviousCenturyEnd = makeGetEdgeOfNeighbor(getYear, getCenturyEnd, -100);
/**
 * Gets next century end date from a given date.
 *
 * @param {DateLike} date Date to get next century end from
 * @returns {Date} Next century end date
 */
var getNextCenturyEnd = makeGetEdgeOfNeighbor(getYear, getCenturyEnd, 100);
/**
 * Gets century start and end dates from a given date.
 *
 * @param {DateLike} date Date to get century start and end from
 * @returns {[Date, Date]} Century start and end dates
 */
var getCenturyRange = makeGetRange(getCenturyStart, getCenturyEnd);
/**
 * Decade
 */
/**
 * Gets decade start date from a given date.
 *
 * @param {DateLike} date Date to get decade start from
 * @returns {Date} Decade start date
 */
function getDecadeStart(date) {
    var year = getYear(date);
    var decadeStartYear = year + ((-year + 1) % 10);
    var decadeStartDate = new Date();
    decadeStartDate.setFullYear(decadeStartYear, 0, 1);
    decadeStartDate.setHours(0, 0, 0, 0);
    return decadeStartDate;
}
/**
 * Gets previous decade start date from a given date.
 *
 * @param {DateLike} date Date to get previous decade start from
 * @returns {Date} Previous decade start date
 */
var getPreviousDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, -10);
/**
 * Gets next decade start date from a given date.
 *
 * @param {DateLike} date Date to get next decade start from
 * @returns {Date} Next decade start date
 */
var getNextDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, 10);
/**
 * Gets decade end date from a given date.
 *
 * @param {DateLike} date Date to get decade end from
 * @returns {Date} Decade end date
 */
var getDecadeEnd = makeGetEnd(getNextDecadeStart);
/**
 * Gets previous decade end date from a given date.
 *
 * @param {DateLike} date Date to get previous decade end from
 * @returns {Date} Previous decade end date
 */
var getPreviousDecadeEnd = makeGetEdgeOfNeighbor(getYear, getDecadeEnd, -10);
/**
 * Gets next decade end date from a given date.
 *
 * @param {DateLike} date Date to get next decade end from
 * @returns {Date} Next decade end date
 */
var getNextDecadeEnd = makeGetEdgeOfNeighbor(getYear, getDecadeEnd, 10);
/**
 * Gets decade start and end dates from a given date.
 *
 * @param {DateLike} date Date to get decade start and end from
 * @returns {[Date, Date]} Decade start and end dates
 */
var getDecadeRange = makeGetRange(getDecadeStart, getDecadeEnd);
/**
 * Year
 */
/**
 * Gets year start date from a given date.
 *
 * @param {DateLike} date Date to get year start from
 * @returns {Date} Year start date
 */
function getYearStart(date) {
    var year = getYear(date);
    var yearStartDate = new Date();
    yearStartDate.setFullYear(year, 0, 1);
    yearStartDate.setHours(0, 0, 0, 0);
    return yearStartDate;
}
/**
 * Gets previous year start date from a given date.
 *
 * @param {DateLike} date Date to get previous year start from
 * @returns {Date} Previous year start date
 */
var getPreviousYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, -1);
/**
 * Gets next year start date from a given date.
 *
 * @param {DateLike} date Date to get next year start from
 * @returns {Date} Next year start date
 */
var getNextYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, 1);
/**
 * Gets year end date from a given date.
 *
 * @param {DateLike} date Date to get year end from
 * @returns {Date} Year end date
 */
var getYearEnd = makeGetEnd(getNextYearStart);
/**
 * Gets previous year end date from a given date.
 *
 * @param {DateLike} date Date to get previous year end from
 * @returns {Date} Previous year end date
 */
var getPreviousYearEnd = makeGetEdgeOfNeighbor(getYear, getYearEnd, -1);
/**
 * Gets next year end date from a given date.
 *
 * @param {DateLike} date Date to get next year end from
 * @returns {Date} Next year end date
 */
var getNextYearEnd = makeGetEdgeOfNeighbor(getYear, getYearEnd, 1);
/**
 * Gets year start and end dates from a given date.
 *
 * @param {DateLike} date Date to get year start and end from
 * @returns {[Date, Date]} Year start and end dates
 */
var getYearRange = makeGetRange(getYearStart, getYearEnd);
/**
 * Month
 */
function makeGetEdgeOfNeighborMonth(getEdgeOfPeriod, defaultOffset) {
    return function makeGetEdgeOfNeighborMonthInternal(date, offset) {
        if (offset === void 0) { offset = defaultOffset; }
        var year = getYear(date);
        var month = getMonth(date) + offset;
        var previousPeriod = new Date();
        previousPeriod.setFullYear(year, month, 1);
        previousPeriod.setHours(0, 0, 0, 0);
        return getEdgeOfPeriod(previousPeriod);
    };
}
/**
 * Gets month start date from a given date.
 *
 * @param {DateLike} date Date to get month start from
 * @returns {Date} Month start date
 */
function getMonthStart(date) {
    var year = getYear(date);
    var month = getMonth(date);
    var monthStartDate = new Date();
    monthStartDate.setFullYear(year, month, 1);
    monthStartDate.setHours(0, 0, 0, 0);
    return monthStartDate;
}
/**
 * Gets previous month start date from a given date.
 *
 * @param {DateLike} date Date to get previous month start from
 * @returns {Date} Previous month start date
 */
var getPreviousMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, -1);
/**
 * Gets next month start date from a given date.
 *
 * @param {DateLike} date Date to get next month start from
 * @returns {Date} Next month start date
 */
var getNextMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, 1);
/**
 * Gets month end date from a given date.
 *
 * @param {DateLike} date Date to get month end from
 * @returns {Date} Month end date
 */
var getMonthEnd = makeGetEnd(getNextMonthStart);
/**
 * Gets previous month end date from a given date.
 *
 * @param {DateLike} date Date to get previous month end from
 * @returns {Date} Previous month end date
 */
var getPreviousMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, -1);
/**
 * Gets next month end date from a given date.
 *
 * @param {DateLike} date Date to get next month end from
 * @returns {Date} Next month end date
 */
var getNextMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, 1);
/**
 * Gets month start and end dates from a given date.
 *
 * @param {DateLike} date Date to get month start and end from
 * @returns {[Date, Date]} Month start and end dates
 */
var getMonthRange = makeGetRange(getMonthStart, getMonthEnd);
/**
 * Day
 */
function makeGetEdgeOfNeighborDay(getEdgeOfPeriod, defaultOffset) {
    return function makeGetEdgeOfNeighborDayInternal(date, offset) {
        if (offset === void 0) { offset = defaultOffset; }
        var year = getYear(date);
        var month = getMonth(date);
        var day = getDate(date) + offset;
        var previousPeriod = new Date();
        previousPeriod.setFullYear(year, month, day);
        previousPeriod.setHours(0, 0, 0, 0);
        return getEdgeOfPeriod(previousPeriod);
    };
}
/**
 * Gets day start date from a given date.
 *
 * @param {DateLike} date Date to get day start from
 * @returns {Date} Day start date
 */
function getDayStart(date) {
    var year = getYear(date);
    var month = getMonth(date);
    var day = getDate(date);
    var dayStartDate = new Date();
    dayStartDate.setFullYear(year, month, day);
    dayStartDate.setHours(0, 0, 0, 0);
    return dayStartDate;
}
/**
 * Gets previous day start date from a given date.
 *
 * @param {DateLike} date Date to get previous day start from
 * @returns {Date} Previous day start date
 */
var getPreviousDayStart = makeGetEdgeOfNeighborDay(getDayStart, -1);
/**
 * Gets next day start date from a given date.
 *
 * @param {DateLike} date Date to get next day start from
 * @returns {Date} Next day start date
 */
var getNextDayStart = makeGetEdgeOfNeighborDay(getDayStart, 1);
/**
 * Gets day end date from a given date.
 *
 * @param {DateLike} date Date to get day end from
 * @returns {Date} Day end date
 */
var getDayEnd = makeGetEnd(getNextDayStart);
/**
 * Gets previous day end date from a given date.
 *
 * @param {DateLike} date Date to get previous day end from
 * @returns {Date} Previous day end date
 */
var getPreviousDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, -1);
/**
 * Gets next day end date from a given date.
 *
 * @param {DateLike} date Date to get next day end from
 * @returns {Date} Next day end date
 */
var getNextDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, 1);
/**
 * Gets day start and end dates from a given date.
 *
 * @param {DateLike} date Date to get day start and end from
 * @returns {[Date, Date]} Day start and end dates
 */
var getDayRange = makeGetRange(getDayStart, getDayEnd);
/**
 * Other
 */
/**
 * Returns a number of days in a month of a given date.
 *
 * @param {Date} date Date
 * @returns {number} Number of days in a month
 */
function getDaysInMonth(date) {
    return getDate(getMonthEnd(date));
}
function padStart(num, val) {
    if (val === void 0) { val = 2; }
    var numStr = "".concat(num);
    if (numStr.length >= val) {
        return num;
    }
    return "0000".concat(numStr).slice(-val);
}
/**
 * Returns local hours and minutes (hh:mm).
 *
 * @param {Date | string} date Date to get hours and minutes from
 * @returns {string} Local hours and minutes
 */
function getHoursMinutes(date) {
    var hours = padStart(getHours(date));
    var minutes = padStart(getMinutes(date));
    return "".concat(hours, ":").concat(minutes);
}
/**
 * Returns local hours, minutes and seconds (hh:mm:ss).
 *
 * @param {Date | string} date Date to get hours, minutes and seconds from
 * @returns {string} Local hours, minutes and seconds
 */
function getHoursMinutesSeconds(date) {
    var hours = padStart(getHours(date));
    var minutes = padStart(getMinutes(date));
    var seconds = padStart(getSeconds(date));
    return "".concat(hours, ":").concat(minutes, ":").concat(seconds);
}
/**
 * Returns local month in ISO-like format (YYYY-MM).
 *
 * @param {Date} date Date to get month in ISO-like format from
 * @returns {string} Local month in ISO-like format
 */
function getISOLocalMonth(date) {
    var year = padStart(getYear(date), 4);
    var month = padStart(getMonthHuman(date));
    return "".concat(year, "-").concat(month);
}
/**
 * Returns local date in ISO-like format (YYYY-MM-DD).
 *
 * @param {Date} date Date to get date in ISO-like format from
 * @returns {string} Local date in ISO-like format
 */
function getISOLocalDate(date) {
    var year = padStart(getYear(date), 4);
    var month = padStart(getMonthHuman(date));
    var day = padStart(getDate(date));
    return "".concat(year, "-").concat(month, "-").concat(day);
}
/**
 * Returns local date & time in ISO-like format (YYYY-MM-DDThh:mm:ss).
 *
 * @param {Date} date Date to get date & time in ISO-like format from
 * @returns {string} Local date & time in ISO-like format
 */
function getISOLocalDateTime(date) {
    return "".concat(getISOLocalDate(date), "T").concat(getHoursMinutesSeconds(date));
}

;// ../../node_modules/react-calendar/dist/esm/shared/const.js
var CALENDAR_TYPES = {
    GREGORY: 'gregory',
    HEBREW: 'hebrew',
    ISLAMIC: 'islamic',
    ISO_8601: 'iso8601',
};
var CALENDAR_TYPE_LOCALES = {
    gregory: [
        'en-CA',
        'en-US',
        'es-AR',
        'es-BO',
        'es-CL',
        'es-CO',
        'es-CR',
        'es-DO',
        'es-EC',
        'es-GT',
        'es-HN',
        'es-MX',
        'es-NI',
        'es-PA',
        'es-PE',
        'es-PR',
        'es-SV',
        'es-VE',
        'pt-BR',
    ],
    hebrew: ['he', 'he-IL'],
    islamic: [
        // ar-LB, ar-MA intentionally missing
        'ar',
        'ar-AE',
        'ar-BH',
        'ar-DZ',
        'ar-EG',
        'ar-IQ',
        'ar-JO',
        'ar-KW',
        'ar-LY',
        'ar-OM',
        'ar-QA',
        'ar-SA',
        'ar-SD',
        'ar-SY',
        'ar-YE',
        'dv',
        'dv-MV',
        'ps',
        'ps-AR',
    ],
};
var WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];

;// ../../node_modules/react-calendar/dist/esm/shared/dateFormatter.js

var formatterCache = new Map();
function getFormatter(options) {
    return function formatter(locale, date) {
        var localeWithDefault = locale || esm();
        if (!formatterCache.has(localeWithDefault)) {
            formatterCache.set(localeWithDefault, new Map());
        }
        var formatterCacheLocale = formatterCache.get(localeWithDefault);
        if (!formatterCacheLocale.has(options)) {
            formatterCacheLocale.set(options, new Intl.DateTimeFormat(localeWithDefault || undefined, options).format);
        }
        return formatterCacheLocale.get(options)(date);
    };
}
/**
 * Changes the hour in a Date to ensure right date formatting even if DST is messed up.
 * Workaround for bug in WebKit and Firefox with historical dates.
 * For more details, see:
 * https://bugs.chromium.org/p/chromium/issues/detail?id=750465
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1385643
 *
 * @param {Date} date Date.
 * @returns {Date} Date with hour set to 12.
 */
function toSafeHour(date) {
    var safeDate = new Date(date);
    return new Date(safeDate.setHours(12));
}
function getSafeFormatter(options) {
    return function (locale, date) { return getFormatter(options)(locale, toSafeHour(date)); };
}
var formatDateOptions = {
    day: 'numeric',
    month: 'numeric',
    year: 'numeric',
};
var formatDayOptions = { day: 'numeric' };
var formatLongDateOptions = {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
};
var formatMonthOptions = { month: 'long' };
var formatMonthYearOptions = {
    month: 'long',
    year: 'numeric',
};
var formatShortWeekdayOptions = { weekday: 'short' };
var formatWeekdayOptions = { weekday: 'long' };
var formatYearOptions = { year: 'numeric' };
var formatDate = getSafeFormatter(formatDateOptions);
var dateFormatter_formatDay = getSafeFormatter(formatDayOptions);
var dateFormatter_formatLongDate = getSafeFormatter(formatLongDateOptions);
var dateFormatter_formatMonth = getSafeFormatter(formatMonthOptions);
var dateFormatter_formatMonthYear = getSafeFormatter(formatMonthYearOptions);
var dateFormatter_formatShortWeekday = getSafeFormatter(formatShortWeekdayOptions);
var dateFormatter_formatWeekday = getSafeFormatter(formatWeekdayOptions);
var dateFormatter_formatYear = getSafeFormatter(formatYearOptions);

;// ../../node_modules/react-calendar/dist/esm/shared/dates.js



var SUNDAY = WEEKDAYS[0];
var FRIDAY = WEEKDAYS[5];
var SATURDAY = WEEKDAYS[6];
/* Simple getters - getting a property of a given point in time */
/**
 * Gets day of the week of a given date.
 * @param {Date} date Date.
 * @param {CalendarType} [calendarType="iso8601"] Calendar type.
 * @returns {number} Day of the week.
 */
function getDayOfWeek(date, calendarType) {
    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }
    var weekday = date.getDay();
    switch (calendarType) {
        case CALENDAR_TYPES.ISO_8601:
            // Shifts days of the week so that Monday is 0, Sunday is 6
            return (weekday + 6) % 7;
        case CALENDAR_TYPES.ISLAMIC:
            return (weekday + 1) % 7;
        case CALENDAR_TYPES.HEBREW:
        case CALENDAR_TYPES.GREGORY:
            return weekday;
        default:
            throw new Error('Unsupported calendar type.');
    }
}
/**
 * Century
 */
/**
 * Gets the year of the beginning of a century of a given date.
 * @param {Date} date Date.
 * @returns {number} Year of the beginning of a century.
 */
function getBeginOfCenturyYear(date) {
    var beginOfCentury = getCenturyStart(date);
    return getYear(beginOfCentury);
}
/**
 * Decade
 */
/**
 * Gets the year of the beginning of a decade of a given date.
 * @param {Date} date Date.
 * @returns {number} Year of the beginning of a decade.
 */
function getBeginOfDecadeYear(date) {
    var beginOfDecade = getDecadeStart(date);
    return getYear(beginOfDecade);
}
/**
 * Week
 */
/**
 * Returns the beginning of a given week.
 *
 * @param {Date} date Date.
 * @param {CalendarType} [calendarType="iso8601"] Calendar type.
 * @returns {Date} Beginning of a given week.
 */
function getBeginOfWeek(date, calendarType) {
    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }
    var year = getYear(date);
    var monthIndex = getMonth(date);
    var day = date.getDate() - getDayOfWeek(date, calendarType);
    return new Date(year, monthIndex, day);
}
/**
 * Gets week number according to ISO 8601 or US standard.
 * In ISO 8601, Arabic and Hebrew week 1 is the one with January 4.
 * In US calendar week 1 is the one with January 1.
 *
 * @param {Date} date Date.
 * @param {CalendarType} [calendarType="iso8601"] Calendar type.
 * @returns {number} Week number.
 */
function getWeekNumber(date, calendarType) {
    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }
    var calendarTypeForWeekNumber = calendarType === CALENDAR_TYPES.GREGORY ? CALENDAR_TYPES.GREGORY : CALENDAR_TYPES.ISO_8601;
    var beginOfWeek = getBeginOfWeek(date, calendarType);
    var year = getYear(date) + 1;
    var dayInWeekOne;
    var beginOfFirstWeek;
    // Look for the first week one that does not come after a given date
    do {
        dayInWeekOne = new Date(year, 0, calendarTypeForWeekNumber === CALENDAR_TYPES.ISO_8601 ? 4 : 1);
        beginOfFirstWeek = getBeginOfWeek(dayInWeekOne, calendarType);
        year -= 1;
    } while (date < beginOfFirstWeek);
    return Math.round((beginOfWeek.getTime() - beginOfFirstWeek.getTime()) / (8.64e7 * 7)) + 1;
}
/**
 * Others
 */
/**
 * Returns the beginning of a given range.
 *
 * @param {RangeType} rangeType Range type (e.g. 'day')
 * @param {Date} date Date.
 * @returns {Date} Beginning of a given range.
 */
function getBegin(rangeType, date) {
    switch (rangeType) {
        case 'century':
            return getCenturyStart(date);
        case 'decade':
            return getDecadeStart(date);
        case 'year':
            return getYearStart(date);
        case 'month':
            return getMonthStart(date);
        case 'day':
            return getDayStart(date);
        default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
    }
}
/**
 * Returns the beginning of a previous given range.
 *
 * @param {RangeType} rangeType Range type (e.g. 'day')
 * @param {Date} date Date.
 * @returns {Date} Beginning of a previous given range.
 */
function getBeginPrevious(rangeType, date) {
    switch (rangeType) {
        case 'century':
            return getPreviousCenturyStart(date);
        case 'decade':
            return getPreviousDecadeStart(date);
        case 'year':
            return getPreviousYearStart(date);
        case 'month':
            return getPreviousMonthStart(date);
        default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
    }
}
/**
 * Returns the beginning of a next given range.
 *
 * @param {RangeType} rangeType Range type (e.g. 'day')
 * @param {Date} date Date.
 * @returns {Date} Beginning of a next given range.
 */
function getBeginNext(rangeType, date) {
    switch (rangeType) {
        case 'century':
            return getNextCenturyStart(date);
        case 'decade':
            return getNextDecadeStart(date);
        case 'year':
            return getNextYearStart(date);
        case 'month':
            return getNextMonthStart(date);
        default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
    }
}
function getBeginPrevious2(rangeType, date) {
    switch (rangeType) {
        case 'decade':
            return getPreviousDecadeStart(date, -100);
        case 'year':
            return getPreviousYearStart(date, -10);
        case 'month':
            return getPreviousMonthStart(date, -12);
        default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
    }
}
function getBeginNext2(rangeType, date) {
    switch (rangeType) {
        case 'decade':
            return getNextDecadeStart(date, 100);
        case 'year':
            return getNextYearStart(date, 10);
        case 'month':
            return getNextMonthStart(date, 12);
        default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
    }
}
/**
 * Returns the end of a given range.
 *
 * @param {RangeType} rangeType Range type (e.g. 'day')
 * @param {Date} date Date.
 * @returns {Date} End of a given range.
 */
function getEnd(rangeType, date) {
    switch (rangeType) {
        case 'century':
            return getCenturyEnd(date);
        case 'decade':
            return getDecadeEnd(date);
        case 'year':
            return getYearEnd(date);
        case 'month':
            return getMonthEnd(date);
        case 'day':
            return getDayEnd(date);
        default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
    }
}
/**
 * Returns the end of a previous given range.
 *
 * @param {RangeType} rangeType Range type (e.g. 'day')
 * @param {Date} date Date.
 * @returns {Date} End of a previous given range.
 */
function getEndPrevious(rangeType, date) {
    switch (rangeType) {
        case 'century':
            return getPreviousCenturyEnd(date);
        case 'decade':
            return getPreviousDecadeEnd(date);
        case 'year':
            return getPreviousYearEnd(date);
        case 'month':
            return getPreviousMonthEnd(date);
        default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
    }
}
function getEndPrevious2(rangeType, date) {
    switch (rangeType) {
        case 'decade':
            return getPreviousDecadeEnd(date, -100);
        case 'year':
            return getPreviousYearEnd(date, -10);
        case 'month':
            return getPreviousMonthEnd(date, -12);
        default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
    }
}
/**
 * Returns an array with the beginning and the end of a given range.
 *
 * @param {RangeType} rangeType Range type (e.g. 'day')
 * @param {Date} date Date.
 * @returns {Date[]} Beginning and end of a given range.
 */
function getRange(rangeType, date) {
    switch (rangeType) {
        case 'century':
            return getCenturyRange(date);
        case 'decade':
            return getDecadeRange(date);
        case 'year':
            return getYearRange(date);
        case 'month':
            return getMonthRange(date);
        case 'day':
            return getDayRange(date);
        default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
    }
}
/**
 * Creates a range out of two values, ensuring they are in order and covering entire period ranges.
 *
 * @param {RangeType} rangeType Range type (e.g. 'day')
 * @param {Date} date1 First date.
 * @param {Date} date2 Second date.
 * @returns {Date[]} Beginning and end of a given range.
 */
function getValueRange(rangeType, date1, date2) {
    var rawNextValue = [date1, date2].sort(function (a, b) { return a.getTime() - b.getTime(); });
    return [getBegin(rangeType, rawNextValue[0]), getEnd(rangeType, rawNextValue[1])];
}
function toYearLabel(locale, formatYear, dates) {
    return dates.map(function (date) { return (formatYear || dateFormatter_formatYear)(locale, date); }).join(' – ');
}
/**
 * @callback FormatYear
 * @param {string} locale Locale.
 * @param {Date} date Date.
 * @returns {string} Formatted year.
 */
/**
 * Returns a string labelling a century of a given date.
 * For example, for 2017 it will return 2001-2100.
 *
 * @param {string} locale Locale.
 * @param {FormatYear} formatYear Function to format a year.
 * @param {Date|string|number} date Date or a year as a string or as a number.
 * @returns {string} String labelling a century of a given date.
 */
function getCenturyLabel(locale, formatYear, date) {
    return toYearLabel(locale, formatYear, getCenturyRange(date));
}
/**
 * Returns a string labelling a decade of a given date.
 * For example, for 2017 it will return 2011-2020.
 *
 * @param {string} locale Locale.
 * @param {FormatYear} formatYear Function to format a year.
 * @param {Date|string|number} date Date or a year as a string or as a number.
 * @returns {string} String labelling a decade of a given date.
 */
function getDecadeLabel(locale, formatYear, date) {
    return toYearLabel(locale, formatYear, getDecadeRange(date));
}
/**
 * Returns a boolean determining whether a given date is the current day of the week.
 *
 * @param {Date} date Date.
 * @returns {boolean} Whether a given date is the current day of the week.
 */
function isCurrentDayOfWeek(date) {
    return date.getDay() === new Date().getDay();
}
/**
 * Returns a boolean determining whether a given date is a weekend day.
 *
 * @param {Date} date Date.
 * @param {CalendarType} [calendarType="iso8601"] Calendar type.
 * @returns {boolean} Whether a given date is a weekend day.
 */
function isWeekend(date, calendarType) {
    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }
    var weekday = date.getDay();
    switch (calendarType) {
        case CALENDAR_TYPES.ISLAMIC:
        case CALENDAR_TYPES.HEBREW:
            return weekday === FRIDAY || weekday === SATURDAY;
        case CALENDAR_TYPES.ISO_8601:
        case CALENDAR_TYPES.GREGORY:
            return weekday === SATURDAY || weekday === SUNDAY;
        default:
            throw new Error('Unsupported calendar type.');
    }
}

;// ../../node_modules/react-calendar/dist/esm/Calendar/Navigation.js
/* __next_internal_client_entry_do_not_use__ default auto */ 



var className = 'react-calendar__navigation';
function Navigation(_a) {
    var activeStartDate = _a.activeStartDate, drillUp = _a.drillUp, _b = _a.formatMonthYear, formatMonthYear = _b === void 0 ? dateFormatter_formatMonthYear : _b, _c = _a.formatYear, formatYear = _c === void 0 ? dateFormatter_formatYear : _c, locale = _a.locale, maxDate = _a.maxDate, minDate = _a.minDate, _d = _a.navigationAriaLabel, navigationAriaLabel = _d === void 0 ? '' : _d, navigationAriaLive = _a.navigationAriaLive, navigationLabel = _a.navigationLabel, _e = _a.next2AriaLabel, next2AriaLabel = _e === void 0 ? '' : _e, _f = _a.next2Label, next2Label = _f === void 0 ? '»' : _f, _g = _a.nextAriaLabel, nextAriaLabel = _g === void 0 ? '' : _g, _h = _a.nextLabel, nextLabel = _h === void 0 ? '›' : _h, _j = _a.prev2AriaLabel, prev2AriaLabel = _j === void 0 ? '' : _j, _k = _a.prev2Label, prev2Label = _k === void 0 ? '«' : _k, _l = _a.prevAriaLabel, prevAriaLabel = _l === void 0 ? '' : _l, _m = _a.prevLabel, prevLabel = _m === void 0 ? '‹' : _m, setActiveStartDate = _a.setActiveStartDate, showDoubleView = _a.showDoubleView, view = _a.view, views = _a.views;
    var drillUpAvailable = views.indexOf(view) > 0;
    var shouldShowPrevNext2Buttons = view !== 'century';
    var previousActiveStartDate = getBeginPrevious(view, activeStartDate);
    var previousActiveStartDate2 = shouldShowPrevNext2Buttons ? getBeginPrevious2(view, activeStartDate) : undefined;
    var nextActiveStartDate = getBeginNext(view, activeStartDate);
    var nextActiveStartDate2 = shouldShowPrevNext2Buttons ? getBeginNext2(view, activeStartDate) : undefined;
    var prevButtonDisabled = function() {
        if (previousActiveStartDate.getFullYear() < 0) {
            return true;
        }
        var previousActiveEndDate = getEndPrevious(view, activeStartDate);
        return minDate && minDate >= previousActiveEndDate;
    }();
    var prev2ButtonDisabled = shouldShowPrevNext2Buttons && function() {
        if (previousActiveStartDate2.getFullYear() < 0) {
            return true;
        }
        var previousActiveEndDate = getEndPrevious2(view, activeStartDate);
        return minDate && minDate >= previousActiveEndDate;
    }();
    var nextButtonDisabled = maxDate && maxDate < nextActiveStartDate;
    var next2ButtonDisabled = shouldShowPrevNext2Buttons && maxDate && maxDate < nextActiveStartDate2;
    function onClickPrevious() {
        setActiveStartDate(previousActiveStartDate, 'prev');
    }
    function onClickPrevious2() {
        setActiveStartDate(previousActiveStartDate2, 'prev2');
    }
    function onClickNext() {
        setActiveStartDate(nextActiveStartDate, 'next');
    }
    function onClickNext2() {
        setActiveStartDate(nextActiveStartDate2, 'next2');
    }
    function renderLabel(date) {
        var label = function() {
            switch(view){
                case 'century':
                    return getCenturyLabel(locale, formatYear, date);
                case 'decade':
                    return getDecadeLabel(locale, formatYear, date);
                case 'year':
                    return formatYear(locale, date);
                case 'month':
                    return formatMonthYear(locale, date);
                default:
                    throw new Error("Invalid view: ".concat(view, "."));
            }
        }();
        return navigationLabel ? navigationLabel({
            date: date,
            label: label,
            locale: locale || getUserLocale() || undefined,
            view: view
        }) : label;
    }
    function renderButton() {
        var labelClassName = "".concat(className, "__label");
        return (0,react_jsx_runtime.jsxs)("button", {
            "aria-label": navigationAriaLabel,
            "aria-live": navigationAriaLive,
            className: labelClassName,
            disabled: !drillUpAvailable,
            onClick: drillUp,
            style: {
                flexGrow: 1
            },
            type: "button",
            children: [
                (0,react_jsx_runtime.jsx)("span", {
                    className: "".concat(labelClassName, "__labelText ").concat(labelClassName, "__labelText--from"),
                    children: renderLabel(activeStartDate)
                }),
                showDoubleView ? (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                    children: [
                        (0,react_jsx_runtime.jsx)("span", {
                            className: "".concat(labelClassName, "__divider"),
                            children: " \u2013 "
                        }),
                        (0,react_jsx_runtime.jsx)("span", {
                            className: "".concat(labelClassName, "__labelText ").concat(labelClassName, "__labelText--to"),
                            children: renderLabel(nextActiveStartDate)
                        })
                    ]
                }) : null
            ]
        });
    }
    return (0,react_jsx_runtime.jsxs)("div", {
        className: className,
        children: [
            prev2Label !== null && shouldShowPrevNext2Buttons ? (0,react_jsx_runtime.jsx)("button", {
                "aria-label": prev2AriaLabel,
                className: "".concat(className, "__arrow ").concat(className, "__prev2-button"),
                disabled: prev2ButtonDisabled,
                onClick: onClickPrevious2,
                type: "button",
                children: prev2Label
            }) : null,
            prevLabel !== null && (0,react_jsx_runtime.jsx)("button", {
                "aria-label": prevAriaLabel,
                className: "".concat(className, "__arrow ").concat(className, "__prev-button"),
                disabled: prevButtonDisabled,
                onClick: onClickPrevious,
                type: "button",
                children: prevLabel
            }),
            renderButton(),
            nextLabel !== null && (0,react_jsx_runtime.jsx)("button", {
                "aria-label": nextAriaLabel,
                className: "".concat(className, "__arrow ").concat(className, "__next-button"),
                disabled: nextButtonDisabled,
                onClick: onClickNext,
                type: "button",
                children: nextLabel
            }),
            next2Label !== null && shouldShowPrevNext2Buttons ? (0,react_jsx_runtime.jsx)("button", {
                "aria-label": next2AriaLabel,
                className: "".concat(className, "__arrow ").concat(className, "__next2-button"),
                disabled: next2ButtonDisabled,
                onClick: onClickNext2,
                type: "button",
                children: next2Label
            }) : null
        ]
    });
}

;// ../../node_modules/react-calendar/dist/esm/Flex.js
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


function toPercent(num) {
    return "".concat(num, "%");
}
function Flex(_a) {
    var children = _a.children, className = _a.className, count = _a.count, direction = _a.direction, offset = _a.offset, style = _a.style, wrap = _a.wrap, otherProps = __rest(_a, ["children", "className", "count", "direction", "offset", "style", "wrap"]);
    return ((0,react_jsx_runtime.jsx)("div", __assign({ className: className, style: __assign({ display: 'flex', flexDirection: direction, flexWrap: wrap ? 'wrap' : 'nowrap' }, style) }, otherProps, { children: react.Children.map(children, function (child, index) {
            var marginInlineStart = offset && index === 0 ? toPercent((100 * offset) / count) : null;
            return (0,react.cloneElement)(child, __assign(__assign({}, child.props), { style: {
                    flexBasis: toPercent(100 / count),
                    flexShrink: 0,
                    flexGrow: 0,
                    overflow: 'hidden',
                    marginLeft: marginInlineStart,
                    marginInlineStart: marginInlineStart,
                    marginInlineEnd: 0,
                } }));
        }) })));
}

;// ../../node_modules/react-calendar/dist/esm/shared/utils.js

/**
 * Returns a value no smaller than min and no larger than max.
 *
 * @param {Date} value Value to return.
 * @param {Date} min Minimum return value.
 * @param {Date} max Maximum return value.
 * @returns {Date} Value between min and max.
 */
function between(value, min, max) {
    if (min && min > value) {
        return min;
    }
    if (max && max < value) {
        return max;
    }
    return value;
}
function isValueWithinRange(value, range) {
    return range[0] <= value && range[1] >= value;
}
function isRangeWithinRange(greaterRange, smallerRange) {
    return greaterRange[0] <= smallerRange[0] && greaterRange[1] >= smallerRange[1];
}
function doRangesOverlap(range1, range2) {
    return isValueWithinRange(range1[0], range2) || isValueWithinRange(range1[1], range2);
}
function getRangeClassNames(valueRange, dateRange, baseClassName) {
    var isRange = doRangesOverlap(dateRange, valueRange);
    var classes = [];
    if (isRange) {
        classes.push(baseClassName);
        var isRangeStart = isValueWithinRange(valueRange[0], dateRange);
        var isRangeEnd = isValueWithinRange(valueRange[1], dateRange);
        if (isRangeStart) {
            classes.push("".concat(baseClassName, "Start"));
        }
        if (isRangeEnd) {
            classes.push("".concat(baseClassName, "End"));
        }
        if (isRangeStart && isRangeEnd) {
            classes.push("".concat(baseClassName, "BothEnds"));
        }
    }
    return classes;
}
function isCompleteValue(value) {
    if (Array.isArray(value)) {
        return value[0] !== null && value[1] !== null;
    }
    return value !== null;
}
function getTileClasses(args) {
    if (!args) {
        throw new Error('args is required');
    }
    var value = args.value, date = args.date, hover = args.hover;
    var className = 'react-calendar__tile';
    var classes = [className];
    if (!date) {
        return classes;
    }
    var now = new Date();
    var dateRange = (function () {
        if (Array.isArray(date)) {
            return date;
        }
        var dateType = args.dateType;
        if (!dateType) {
            throw new Error('dateType is required when date is not an array of two dates');
        }
        return getRange(dateType, date);
    })();
    if (isValueWithinRange(now, dateRange)) {
        classes.push("".concat(className, "--now"));
    }
    if (!value || !isCompleteValue(value)) {
        return classes;
    }
    var valueRange = (function () {
        if (Array.isArray(value)) {
            return value;
        }
        var valueType = args.valueType;
        if (!valueType) {
            throw new Error('valueType is required when value is not an array of two dates');
        }
        return getRange(valueType, value);
    })();
    if (isRangeWithinRange(valueRange, dateRange)) {
        classes.push("".concat(className, "--active"));
    }
    else if (doRangesOverlap(valueRange, dateRange)) {
        classes.push("".concat(className, "--hasActive"));
    }
    var valueRangeClassNames = getRangeClassNames(valueRange, dateRange, "".concat(className, "--range"));
    classes.push.apply(classes, valueRangeClassNames);
    var valueArray = Array.isArray(value) ? value : [value];
    if (hover && valueArray.length === 1) {
        var hoverRange = hover > valueRange[0] ? [valueRange[0], hover] : [hover, valueRange[0]];
        var hoverRangeClassNames = getRangeClassNames(hoverRange, dateRange, "".concat(className, "--hover"));
        classes.push.apply(classes, hoverRangeClassNames);
    }
    return classes;
}

;// ../../node_modules/react-calendar/dist/esm/TileGroup.js



function TileGroup(_a) {
    var className = _a.className, _b = _a.count, count = _b === void 0 ? 3 : _b, dateTransform = _a.dateTransform, dateType = _a.dateType, end = _a.end, hover = _a.hover, offset = _a.offset, renderTile = _a.renderTile, start = _a.start, _c = _a.step, step = _c === void 0 ? 1 : _c, value = _a.value, valueType = _a.valueType;
    var tiles = [];
    for (var point = start; point <= end; point += step) {
        var date = dateTransform(point);
        tiles.push(renderTile({
            classes: getTileClasses({
                date: date,
                dateType: dateType,
                hover: hover,
                value: value,
                valueType: valueType,
            }),
            date: date,
        }));
    }
    return ((0,react_jsx_runtime.jsx)(Flex, { className: className, count: count, offset: offset, wrap: true, children: tiles }));
}

;// ../../node_modules/react-calendar/dist/esm/Tile.js



function Tile(props) {
    var activeStartDate = props.activeStartDate, children = props.children, classes = props.classes, date = props.date, formatAbbr = props.formatAbbr, locale = props.locale, maxDate = props.maxDate, maxDateTransform = props.maxDateTransform, minDate = props.minDate, minDateTransform = props.minDateTransform, onClick = props.onClick, onMouseOver = props.onMouseOver, style = props.style, tileClassNameProps = props.tileClassName, tileContentProps = props.tileContent, tileDisabled = props.tileDisabled, view = props.view;
    var tileClassName = (0,react.useMemo)(function () {
        var args = { activeStartDate: activeStartDate, date: date, view: view };
        return typeof tileClassNameProps === 'function' ? tileClassNameProps(args) : tileClassNameProps;
    }, [activeStartDate, date, tileClassNameProps, view]);
    var tileContent = (0,react.useMemo)(function () {
        var args = { activeStartDate: activeStartDate, date: date, view: view };
        return typeof tileContentProps === 'function' ? tileContentProps(args) : tileContentProps;
    }, [activeStartDate, date, tileContentProps, view]);
    return ((0,react_jsx_runtime.jsxs)("button", { className: (0,clsx/* default */.A)(classes, tileClassName), disabled: (minDate && minDateTransform(minDate) > date) ||
            (maxDate && maxDateTransform(maxDate) < date) ||
            (tileDisabled === null || tileDisabled === void 0 ? void 0 : tileDisabled({ activeStartDate: activeStartDate, date: date, view: view })), onClick: onClick ? function (event) { return onClick(date, event); } : undefined, onFocus: onMouseOver ? function () { return onMouseOver(date); } : undefined, onMouseOver: onMouseOver ? function () { return onMouseOver(date); } : undefined, style: style, type: "button", children: [formatAbbr ? (0,react_jsx_runtime.jsx)("abbr", { "aria-label": formatAbbr(locale, date), children: children }) : children, tileContent] }));
}

;// ../../node_modules/react-calendar/dist/esm/CenturyView/Decade.js
var Decade_assign = (undefined && undefined.__assign) || function () {
    Decade_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Decade_assign.apply(this, arguments);
};
var Decade_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};





var Decade_className = 'react-calendar__century-view__decades__decade';
function Decade(_a) {
    var _b = _a.classes, classes = _b === void 0 ? [] : _b, currentCentury = _a.currentCentury, _c = _a.formatYear, formatYear = _c === void 0 ? dateFormatter_formatYear : _c, otherProps = Decade_rest(_a, ["classes", "currentCentury", "formatYear"]);
    var date = otherProps.date, locale = otherProps.locale;
    var classesProps = [];
    if (classes) {
        classesProps.push.apply(classesProps, classes);
    }
    if (Decade_className) {
        classesProps.push(Decade_className);
    }
    if (getCenturyStart(date).getFullYear() !== currentCentury) {
        classesProps.push("".concat(Decade_className, "--neighboringCentury"));
    }
    return ((0,react_jsx_runtime.jsx)(Tile, Decade_assign({}, otherProps, { classes: classesProps, maxDateTransform: getDecadeEnd, minDateTransform: getDecadeStart, view: "century", children: getDecadeLabel(locale, formatYear, date) })));
}

;// ../../node_modules/react-calendar/dist/esm/CenturyView/Decades.js
var Decades_assign = (undefined && undefined.__assign) || function () {
    Decades_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Decades_assign.apply(this, arguments);
};
var Decades_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};





function Decades(props) {
    var activeStartDate = props.activeStartDate, hover = props.hover, showNeighboringCentury = props.showNeighboringCentury, value = props.value, valueType = props.valueType, otherProps = Decades_rest(props, ["activeStartDate", "hover", "showNeighboringCentury", "value", "valueType"]);
    var start = getBeginOfCenturyYear(activeStartDate);
    var end = start + (showNeighboringCentury ? 119 : 99);
    return ((0,react_jsx_runtime.jsx)(TileGroup, { className: "react-calendar__century-view__decades", dateTransform: getDecadeStart, dateType: "decade", end: end, hover: hover, renderTile: function (_a) {
            var date = _a.date, otherTileProps = Decades_rest(_a, ["date"]);
            return ((0,react_jsx_runtime.jsx)(Decade, Decades_assign({}, otherProps, otherTileProps, { activeStartDate: activeStartDate, currentCentury: start, date: date }), date.getTime()));
        }, start: start, step: 10, value: value, valueType: valueType }));
}

;// ../../node_modules/react-calendar/dist/esm/CenturyView.js
var CenturyView_assign = (undefined && undefined.__assign) || function () {
    CenturyView_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return CenturyView_assign.apply(this, arguments);
};


/**
 * Displays a given century.
 */
function CenturyView(props) {
    function renderDecades() {
        return (0,react_jsx_runtime.jsx)(Decades, CenturyView_assign({}, props));
    }
    return (0,react_jsx_runtime.jsx)("div", { className: "react-calendar__century-view", children: renderDecades() });
}

;// ../../node_modules/react-calendar/dist/esm/DecadeView/Year.js
var Year_assign = (undefined && undefined.__assign) || function () {
    Year_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Year_assign.apply(this, arguments);
};
var Year_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};




var Year_className = 'react-calendar__decade-view__years__year';
function Year(_a) {
    var _b = _a.classes, classes = _b === void 0 ? [] : _b, currentDecade = _a.currentDecade, _c = _a.formatYear, formatYear = _c === void 0 ? dateFormatter_formatYear : _c, otherProps = Year_rest(_a, ["classes", "currentDecade", "formatYear"]);
    var date = otherProps.date, locale = otherProps.locale;
    var classesProps = [];
    if (classes) {
        classesProps.push.apply(classesProps, classes);
    }
    if (Year_className) {
        classesProps.push(Year_className);
    }
    if (getDecadeStart(date).getFullYear() !== currentDecade) {
        classesProps.push("".concat(Year_className, "--neighboringDecade"));
    }
    return ((0,react_jsx_runtime.jsx)(Tile, Year_assign({}, otherProps, { classes: classesProps, maxDateTransform: getYearEnd, minDateTransform: getYearStart, view: "decade", children: formatYear(locale, date) })));
}

;// ../../node_modules/react-calendar/dist/esm/DecadeView/Years.js
var Years_assign = (undefined && undefined.__assign) || function () {
    Years_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Years_assign.apply(this, arguments);
};
var Years_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};





function Years(props) {
    var activeStartDate = props.activeStartDate, hover = props.hover, showNeighboringDecade = props.showNeighboringDecade, value = props.value, valueType = props.valueType, otherProps = Years_rest(props, ["activeStartDate", "hover", "showNeighboringDecade", "value", "valueType"]);
    var start = getBeginOfDecadeYear(activeStartDate);
    var end = start + (showNeighboringDecade ? 11 : 9);
    return ((0,react_jsx_runtime.jsx)(TileGroup, { className: "react-calendar__decade-view__years", dateTransform: getYearStart, dateType: "year", end: end, hover: hover, renderTile: function (_a) {
            var date = _a.date, otherTileProps = Years_rest(_a, ["date"]);
            return ((0,react_jsx_runtime.jsx)(Year, Years_assign({}, otherProps, otherTileProps, { activeStartDate: activeStartDate, currentDecade: start, date: date }), date.getTime()));
        }, start: start, value: value, valueType: valueType }));
}

;// ../../node_modules/react-calendar/dist/esm/DecadeView.js
var DecadeView_assign = (undefined && undefined.__assign) || function () {
    DecadeView_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return DecadeView_assign.apply(this, arguments);
};


/**
 * Displays a given decade.
 */
function DecadeView(props) {
    function renderYears() {
        return (0,react_jsx_runtime.jsx)(Years, DecadeView_assign({}, props));
    }
    return (0,react_jsx_runtime.jsx)("div", { className: "react-calendar__decade-view", children: renderYears() });
}

;// ../../node_modules/react-calendar/dist/esm/YearView/Month.js
var Month_assign = (undefined && undefined.__assign) || function () {
    Month_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Month_assign.apply(this, arguments);
};
var Month_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};




var Month_className = 'react-calendar__year-view__months__month';
function Month(_a) {
    var _b = _a.classes, classes = _b === void 0 ? [] : _b, _c = _a.formatMonth, formatMonth = _c === void 0 ? dateFormatter_formatMonth : _c, _d = _a.formatMonthYear, formatMonthYear = _d === void 0 ? dateFormatter_formatMonthYear : _d, otherProps = Month_rest(_a, ["classes", "formatMonth", "formatMonthYear"]);
    var date = otherProps.date, locale = otherProps.locale;
    return ((0,react_jsx_runtime.jsx)(Tile, Month_assign({}, otherProps, { classes: __spreadArray(__spreadArray([], classes, true), [Month_className], false), formatAbbr: formatMonthYear, maxDateTransform: getMonthEnd, minDateTransform: getMonthStart, view: "year", children: formatMonth(locale, date) })));
}

;// ../../node_modules/react-calendar/dist/esm/YearView/Months.js
var Months_assign = (undefined && undefined.__assign) || function () {
    Months_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Months_assign.apply(this, arguments);
};
var Months_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};




function Months(props) {
    var activeStartDate = props.activeStartDate, hover = props.hover, value = props.value, valueType = props.valueType, otherProps = Months_rest(props, ["activeStartDate", "hover", "value", "valueType"]);
    var start = 0;
    var end = 11;
    var year = getYear(activeStartDate);
    return ((0,react_jsx_runtime.jsx)(TileGroup, { className: "react-calendar__year-view__months", dateTransform: function (monthIndex) {
            var date = new Date();
            date.setFullYear(year, monthIndex, 1);
            return getMonthStart(date);
        }, dateType: "month", end: end, hover: hover, renderTile: function (_a) {
            var date = _a.date, otherTileProps = Months_rest(_a, ["date"]);
            return ((0,react_jsx_runtime.jsx)(Month, Months_assign({}, otherProps, otherTileProps, { activeStartDate: activeStartDate, date: date }), date.getTime()));
        }, start: start, value: value, valueType: valueType }));
}

;// ../../node_modules/react-calendar/dist/esm/YearView.js
var YearView_assign = (undefined && undefined.__assign) || function () {
    YearView_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return YearView_assign.apply(this, arguments);
};


/**
 * Displays a given year.
 */
function YearView(props) {
    function renderMonths() {
        return (0,react_jsx_runtime.jsx)(Months, YearView_assign({}, props));
    }
    return (0,react_jsx_runtime.jsx)("div", { className: "react-calendar__year-view", children: renderMonths() });
}

;// ../../node_modules/react-calendar/dist/esm/MonthView/Day.js
var Day_assign = (undefined && undefined.__assign) || function () {
    Day_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Day_assign.apply(this, arguments);
};
var Day_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};





var Day_className = 'react-calendar__month-view__days__day';
function Day(_a) {
    var calendarType = _a.calendarType, _b = _a.classes, classes = _b === void 0 ? [] : _b, currentMonthIndex = _a.currentMonthIndex, _c = _a.formatDay, formatDay = _c === void 0 ? dateFormatter_formatDay : _c, _d = _a.formatLongDate, formatLongDate = _d === void 0 ? dateFormatter_formatLongDate : _d, otherProps = Day_rest(_a, ["calendarType", "classes", "currentMonthIndex", "formatDay", "formatLongDate"]);
    var date = otherProps.date, locale = otherProps.locale;
    var classesProps = [];
    if (classes) {
        classesProps.push.apply(classesProps, classes);
    }
    if (Day_className) {
        classesProps.push(Day_className);
    }
    if (isWeekend(date, calendarType)) {
        classesProps.push("".concat(Day_className, "--weekend"));
    }
    if (date.getMonth() !== currentMonthIndex) {
        classesProps.push("".concat(Day_className, "--neighboringMonth"));
    }
    return ((0,react_jsx_runtime.jsx)(Tile, Day_assign({}, otherProps, { classes: classesProps, formatAbbr: formatLongDate, maxDateTransform: getDayEnd, minDateTransform: getDayStart, view: "month", children: formatDay(locale, date) })));
}

;// ../../node_modules/react-calendar/dist/esm/MonthView/Days.js
var Days_assign = (undefined && undefined.__assign) || function () {
    Days_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Days_assign.apply(this, arguments);
};
var Days_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};





function Days(props) {
    var activeStartDate = props.activeStartDate, calendarType = props.calendarType, hover = props.hover, showFixedNumberOfWeeks = props.showFixedNumberOfWeeks, showNeighboringMonth = props.showNeighboringMonth, value = props.value, valueType = props.valueType, otherProps = Days_rest(props, ["activeStartDate", "calendarType", "hover", "showFixedNumberOfWeeks", "showNeighboringMonth", "value", "valueType"]);
    var year = getYear(activeStartDate);
    var monthIndex = getMonth(activeStartDate);
    var hasFixedNumberOfWeeks = showFixedNumberOfWeeks || showNeighboringMonth;
    var dayOfWeek = getDayOfWeek(activeStartDate, calendarType);
    var offset = hasFixedNumberOfWeeks ? 0 : dayOfWeek;
    /**
     * Defines on which day of the month the grid shall start. If we simply show current
     * month, we obviously start on day one, but if showNeighboringMonth is set to
     * true, we need to find the beginning of the week the first day of the month is in.
     */
    var start = (hasFixedNumberOfWeeks ? -dayOfWeek : 0) + 1;
    /**
     * Defines on which day of the month the grid shall end. If we simply show current
     * month, we need to stop on the last day of the month, but if showNeighboringMonth
     * is set to true, we need to find the end of the week the last day of the month is in.
     */
    var end = (function () {
        if (showFixedNumberOfWeeks) {
            // Always show 6 weeks
            return start + 6 * 7 - 1;
        }
        var daysInMonth = getDaysInMonth(activeStartDate);
        if (showNeighboringMonth) {
            var activeEndDate = new Date();
            activeEndDate.setFullYear(year, monthIndex, daysInMonth);
            activeEndDate.setHours(0, 0, 0, 0);
            var daysUntilEndOfTheWeek = 7 - getDayOfWeek(activeEndDate, calendarType) - 1;
            return daysInMonth + daysUntilEndOfTheWeek;
        }
        return daysInMonth;
    })();
    return ((0,react_jsx_runtime.jsx)(TileGroup, { className: "react-calendar__month-view__days", count: 7, dateTransform: function (day) {
            var date = new Date();
            date.setFullYear(year, monthIndex, day);
            return getDayStart(date);
        }, dateType: "day", hover: hover, end: end, renderTile: function (_a) {
            var date = _a.date, otherTileProps = Days_rest(_a, ["date"]);
            return ((0,react_jsx_runtime.jsx)(Day, Days_assign({}, otherProps, otherTileProps, { activeStartDate: activeStartDate, calendarType: calendarType, currentMonthIndex: monthIndex, date: date }), date.getTime()));
        }, offset: offset, start: start, value: value, valueType: valueType }));
}

;// ../../node_modules/react-calendar/dist/esm/MonthView/Weekdays.js






var Weekdays_className = 'react-calendar__month-view__weekdays';
var weekdayClassName = "".concat(Weekdays_className, "__weekday");
function Weekdays(props) {
    var calendarType = props.calendarType, _a = props.formatShortWeekday, formatShortWeekday = _a === void 0 ? dateFormatter_formatShortWeekday : _a, _b = props.formatWeekday, formatWeekday = _b === void 0 ? dateFormatter_formatWeekday : _b, locale = props.locale, onMouseLeave = props.onMouseLeave;
    var anyDate = new Date();
    var beginOfMonth = getMonthStart(anyDate);
    var year = getYear(beginOfMonth);
    var monthIndex = getMonth(beginOfMonth);
    var weekdays = [];
    for (var weekday = 1; weekday <= 7; weekday += 1) {
        var weekdayDate = new Date(year, monthIndex, weekday - getDayOfWeek(beginOfMonth, calendarType));
        var abbr = formatWeekday(locale, weekdayDate);
        weekdays.push((0,react_jsx_runtime.jsx)("div", { className: (0,clsx/* default */.A)(weekdayClassName, isCurrentDayOfWeek(weekdayDate) && "".concat(weekdayClassName, "--current"), isWeekend(weekdayDate, calendarType) && "".concat(weekdayClassName, "--weekend")), children: (0,react_jsx_runtime.jsx)("abbr", { "aria-label": abbr, title: abbr, children: formatShortWeekday(locale, weekdayDate).replace('.', '') }) }, weekday));
    }
    return ((0,react_jsx_runtime.jsx)(Flex, { className: Weekdays_className, count: 7, onFocus: onMouseLeave, onMouseOver: onMouseLeave, children: weekdays }));
}

;// ../../node_modules/react-calendar/dist/esm/MonthView/WeekNumber.js
var WeekNumber_assign = (undefined && undefined.__assign) || function () {
    WeekNumber_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return WeekNumber_assign.apply(this, arguments);
};
var WeekNumber_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};

var WeekNumber_className = 'react-calendar__tile';
function WeekNumber(props) {
    var onClickWeekNumber = props.onClickWeekNumber, weekNumber = props.weekNumber;
    var children = (0,react_jsx_runtime.jsx)("span", { children: weekNumber });
    if (onClickWeekNumber) {
        var date_1 = props.date, onClickWeekNumber_1 = props.onClickWeekNumber, weekNumber_1 = props.weekNumber, otherProps = WeekNumber_rest(props, ["date", "onClickWeekNumber", "weekNumber"]);
        return ((0,react_jsx_runtime.jsx)("button", WeekNumber_assign({}, otherProps, { className: WeekNumber_className, onClick: function (event) { return onClickWeekNumber_1(weekNumber_1, date_1, event); }, type: "button", children: children })));
        // biome-ignore lint/style/noUselessElse: TypeScript is unhappy if we remove this else
    }
    else {
        var date = props.date, onClickWeekNumber_2 = props.onClickWeekNumber, weekNumber_2 = props.weekNumber, otherProps = WeekNumber_rest(props, ["date", "onClickWeekNumber", "weekNumber"]);
        return ((0,react_jsx_runtime.jsx)("div", WeekNumber_assign({}, otherProps, { className: WeekNumber_className, children: children })));
    }
}

;// ../../node_modules/react-calendar/dist/esm/MonthView/WeekNumbers.js





function WeekNumbers(props) {
    var activeStartDate = props.activeStartDate, calendarType = props.calendarType, onClickWeekNumber = props.onClickWeekNumber, onMouseLeave = props.onMouseLeave, showFixedNumberOfWeeks = props.showFixedNumberOfWeeks;
    var numberOfWeeks = (function () {
        if (showFixedNumberOfWeeks) {
            return 6;
        }
        var numberOfDays = getDaysInMonth(activeStartDate);
        var startWeekday = getDayOfWeek(activeStartDate, calendarType);
        var days = numberOfDays - (7 - startWeekday);
        return 1 + Math.ceil(days / 7);
    })();
    var dates = (function () {
        var year = getYear(activeStartDate);
        var monthIndex = getMonth(activeStartDate);
        var day = getDate(activeStartDate);
        var result = [];
        for (var index = 0; index < numberOfWeeks; index += 1) {
            result.push(getBeginOfWeek(new Date(year, monthIndex, day + index * 7), calendarType));
        }
        return result;
    })();
    var weekNumbers = dates.map(function (date) { return getWeekNumber(date, calendarType); });
    return ((0,react_jsx_runtime.jsx)(Flex, { className: "react-calendar__month-view__weekNumbers", count: numberOfWeeks, direction: "column", onFocus: onMouseLeave, onMouseOver: onMouseLeave, style: { flexBasis: 'calc(100% * (1 / 8)', flexShrink: 0 }, children: weekNumbers.map(function (weekNumber, weekIndex) {
            var date = dates[weekIndex];
            if (!date) {
                throw new Error('date is not defined');
            }
            return ((0,react_jsx_runtime.jsx)(WeekNumber, { date: date, onClickWeekNumber: onClickWeekNumber, weekNumber: weekNumber }, weekNumber));
        }) }));
}

;// ../../node_modules/react-calendar/dist/esm/MonthView.js
var MonthView_assign = (undefined && undefined.__assign) || function () {
    MonthView_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return MonthView_assign.apply(this, arguments);
};
var MonthView_rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};






function getCalendarTypeFromLocale(locale) {
    if (locale) {
        for (var _i = 0, _a = Object.entries(CALENDAR_TYPE_LOCALES); _i < _a.length; _i++) {
            var _b = _a[_i], calendarType = _b[0], locales = _b[1];
            if (locales.includes(locale)) {
                return calendarType;
            }
        }
    }
    return CALENDAR_TYPES.ISO_8601;
}
/**
 * Displays a given month.
 */
function MonthView(props) {
    var activeStartDate = props.activeStartDate, locale = props.locale, onMouseLeave = props.onMouseLeave, showFixedNumberOfWeeks = props.showFixedNumberOfWeeks;
    var _a = props.calendarType, calendarType = _a === void 0 ? getCalendarTypeFromLocale(locale) : _a, formatShortWeekday = props.formatShortWeekday, formatWeekday = props.formatWeekday, onClickWeekNumber = props.onClickWeekNumber, showWeekNumbers = props.showWeekNumbers, childProps = MonthView_rest(props, ["calendarType", "formatShortWeekday", "formatWeekday", "onClickWeekNumber", "showWeekNumbers"]);
    function renderWeekdays() {
        return ((0,react_jsx_runtime.jsx)(Weekdays, { calendarType: calendarType, formatShortWeekday: formatShortWeekday, formatWeekday: formatWeekday, locale: locale, onMouseLeave: onMouseLeave }));
    }
    function renderWeekNumbers() {
        if (!showWeekNumbers) {
            return null;
        }
        return ((0,react_jsx_runtime.jsx)(WeekNumbers, { activeStartDate: activeStartDate, calendarType: calendarType, onClickWeekNumber: onClickWeekNumber, onMouseLeave: onMouseLeave, showFixedNumberOfWeeks: showFixedNumberOfWeeks }));
    }
    function renderDays() {
        return (0,react_jsx_runtime.jsx)(Days, MonthView_assign({ calendarType: calendarType }, childProps));
    }
    var className = 'react-calendar__month-view';
    return ((0,react_jsx_runtime.jsx)("div", { className: (0,clsx/* default */.A)(className, showWeekNumbers ? "".concat(className, "--weekNumbers") : ''), children: (0,react_jsx_runtime.jsxs)("div", { style: {
                display: 'flex',
                alignItems: 'flex-end',
            }, children: [renderWeekNumbers(), (0,react_jsx_runtime.jsxs)("div", { style: {
                        flexGrow: 1,
                        width: '100%',
                    }, children: [renderWeekdays(), renderDays()] })] }) }));
}

;// ../../node_modules/react-calendar/dist/esm/Calendar.js
/* __next_internal_client_entry_do_not_use__ default auto */ var Calendar_assign = undefined && undefined.__assign || function() {
    Calendar_assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return Calendar_assign.apply(this, arguments);
};










var baseClassName = 'react-calendar';
var allViews = [
    'century',
    'decade',
    'year',
    'month'
];
var allValueTypes = [
    'decade',
    'year',
    'month',
    'day'
];
var defaultMinDate = new Date();
defaultMinDate.setFullYear(1, 0, 1);
defaultMinDate.setHours(0, 0, 0, 0);
var defaultMaxDate = new Date(8.64e15);
function toDate(value) {
    if (value instanceof Date) {
        return value;
    }
    return new Date(value);
}
/**
 * Returns views array with disallowed values cut off.
 */ function getLimitedViews(minDetail, maxDetail) {
    return allViews.slice(allViews.indexOf(minDetail), allViews.indexOf(maxDetail) + 1);
}
/**
 * Determines whether a given view is allowed with currently applied settings.
 */ function isViewAllowed(view, minDetail, maxDetail) {
    var views = getLimitedViews(minDetail, maxDetail);
    return views.indexOf(view) !== -1;
}
/**
 * Gets either provided view if allowed by minDetail and maxDetail, or gets
 * the default view if not allowed.
 */ function getView(view, minDetail, maxDetail) {
    if (!view) {
        return maxDetail;
    }
    if (isViewAllowed(view, minDetail, maxDetail)) {
        return view;
    }
    return maxDetail;
}
/**
 * Returns value type that can be returned with currently applied settings.
 */ function getValueType(view) {
    var index = allViews.indexOf(view);
    return allValueTypes[index];
}
function getValue(value, index) {
    var rawValue = Array.isArray(value) ? value[index] : value;
    if (!rawValue) {
        return null;
    }
    var valueDate = toDate(rawValue);
    if (Number.isNaN(valueDate.getTime())) {
        throw new Error("Invalid date: ".concat(value));
    }
    return valueDate;
}
function getDetailValue(_a, index) {
    var value = _a.value, minDate = _a.minDate, maxDate = _a.maxDate, maxDetail = _a.maxDetail;
    var valuePiece = getValue(value, index);
    if (!valuePiece) {
        return null;
    }
    var valueType = getValueType(maxDetail);
    var detailValueFrom = function() {
        switch(index){
            case 0:
                return getBegin(valueType, valuePiece);
            case 1:
                return getEnd(valueType, valuePiece);
            default:
                throw new Error("Invalid index value: ".concat(index));
        }
    }();
    return between(detailValueFrom, minDate, maxDate);
}
var getDetailValueFrom = function(args) {
    return getDetailValue(args, 0);
};
var getDetailValueTo = function(args) {
    return getDetailValue(args, 1);
};
var getDetailValueArray = function(args) {
    return [
        getDetailValueFrom,
        getDetailValueTo
    ].map(function(fn) {
        return fn(args);
    });
};
function getActiveStartDate(_a) {
    var maxDate = _a.maxDate, maxDetail = _a.maxDetail, minDate = _a.minDate, minDetail = _a.minDetail, value = _a.value, view = _a.view;
    var rangeType = getView(view, minDetail, maxDetail);
    var valueFrom = getDetailValueFrom({
        value: value,
        minDate: minDate,
        maxDate: maxDate,
        maxDetail: maxDetail
    }) || new Date();
    return getBegin(rangeType, valueFrom);
}
function getInitialActiveStartDate(_a) {
    var activeStartDate = _a.activeStartDate, defaultActiveStartDate = _a.defaultActiveStartDate, defaultValue = _a.defaultValue, defaultView = _a.defaultView, maxDate = _a.maxDate, maxDetail = _a.maxDetail, minDate = _a.minDate, minDetail = _a.minDetail, value = _a.value, view = _a.view;
    var rangeType = getView(view, minDetail, maxDetail);
    var valueFrom = activeStartDate || defaultActiveStartDate;
    if (valueFrom) {
        return getBegin(rangeType, valueFrom);
    }
    return getActiveStartDate({
        maxDate: maxDate,
        maxDetail: maxDetail,
        minDate: minDate,
        minDetail: minDetail,
        value: value || defaultValue,
        view: view || defaultView
    });
}
function getIsSingleValue(value) {
    return value && (!Array.isArray(value) || value.length === 1);
}
function areDatesEqual(date1, date2) {
    return date1 instanceof Date && date2 instanceof Date && date1.getTime() === date2.getTime();
}
var Calendar_Calendar = /*#__PURE__*/ (0,react.forwardRef)(function Calendar(props, ref) {
    var activeStartDateProps = props.activeStartDate, allowPartialRange = props.allowPartialRange, calendarType = props.calendarType, className = props.className, defaultActiveStartDate = props.defaultActiveStartDate, defaultValue = props.defaultValue, defaultView = props.defaultView, formatDay = props.formatDay, formatLongDate = props.formatLongDate, formatMonth = props.formatMonth, formatMonthYear = props.formatMonthYear, formatShortWeekday = props.formatShortWeekday, formatWeekday = props.formatWeekday, formatYear = props.formatYear, _a = props.goToRangeStartOnSelect, goToRangeStartOnSelect = _a === void 0 ? true : _a, inputRef = props.inputRef, locale = props.locale, _b = props.maxDate, maxDate = _b === void 0 ? defaultMaxDate : _b, _c = props.maxDetail, maxDetail = _c === void 0 ? 'month' : _c, _d = props.minDate, minDate = _d === void 0 ? defaultMinDate : _d, _e = props.minDetail, minDetail = _e === void 0 ? 'century' : _e, navigationAriaLabel = props.navigationAriaLabel, navigationAriaLive = props.navigationAriaLive, navigationLabel = props.navigationLabel, next2AriaLabel = props.next2AriaLabel, next2Label = props.next2Label, nextAriaLabel = props.nextAriaLabel, nextLabel = props.nextLabel, onActiveStartDateChange = props.onActiveStartDateChange, onChangeProps = props.onChange, onClickDay = props.onClickDay, onClickDecade = props.onClickDecade, onClickMonth = props.onClickMonth, onClickWeekNumber = props.onClickWeekNumber, onClickYear = props.onClickYear, onDrillDown = props.onDrillDown, onDrillUp = props.onDrillUp, onViewChange = props.onViewChange, prev2AriaLabel = props.prev2AriaLabel, prev2Label = props.prev2Label, prevAriaLabel = props.prevAriaLabel, prevLabel = props.prevLabel, _f = props.returnValue, returnValue = _f === void 0 ? 'start' : _f, selectRange = props.selectRange, showDoubleView = props.showDoubleView, showFixedNumberOfWeeks = props.showFixedNumberOfWeeks, _g = props.showNavigation, showNavigation = _g === void 0 ? true : _g, showNeighboringCentury = props.showNeighboringCentury, showNeighboringDecade = props.showNeighboringDecade, _h = props.showNeighboringMonth, showNeighboringMonth = _h === void 0 ? true : _h, showWeekNumbers = props.showWeekNumbers, tileClassName = props.tileClassName, tileContent = props.tileContent, tileDisabled = props.tileDisabled, valueProps = props.value, viewProps = props.view;
    var _j = (0,react.useState)(defaultActiveStartDate), activeStartDateState = _j[0], setActiveStartDateState = _j[1];
    var _k = (0,react.useState)(null), hoverState = _k[0], setHoverState = _k[1];
    var _l = (0,react.useState)(Array.isArray(defaultValue) ? defaultValue.map(function(el) {
        return el !== null ? toDate(el) : null;
    }) : defaultValue !== null && defaultValue !== undefined ? toDate(defaultValue) : null), valueState = _l[0], setValueState = _l[1];
    var _m = (0,react.useState)(defaultView), viewState = _m[0], setViewState = _m[1];
    var activeStartDate = activeStartDateProps || activeStartDateState || getInitialActiveStartDate({
        activeStartDate: activeStartDateProps,
        defaultActiveStartDate: defaultActiveStartDate,
        defaultValue: defaultValue,
        defaultView: defaultView,
        maxDate: maxDate,
        maxDetail: maxDetail,
        minDate: minDate,
        minDetail: minDetail,
        value: valueProps,
        view: viewProps
    });
    var value = function() {
        var rawValue = function() {
            // In the middle of range selection, use value from state
            if (selectRange && getIsSingleValue(valueState)) {
                return valueState;
            }
            return valueProps !== undefined ? valueProps : valueState;
        }();
        if (!rawValue) {
            return null;
        }
        return Array.isArray(rawValue) ? rawValue.map(function(el) {
            return el !== null ? toDate(el) : null;
        }) : rawValue !== null ? toDate(rawValue) : null;
    }();
    var valueType = getValueType(maxDetail);
    var view = getView(viewProps || viewState, minDetail, maxDetail);
    var views = getLimitedViews(minDetail, maxDetail);
    var hover = selectRange ? hoverState : null;
    var drillDownAvailable = views.indexOf(view) < views.length - 1;
    var drillUpAvailable = views.indexOf(view) > 0;
    var getProcessedValue = (0,react.useCallback)(function(value) {
        var processFunction = function() {
            switch(returnValue){
                case 'start':
                    return getDetailValueFrom;
                case 'end':
                    return getDetailValueTo;
                case 'range':
                    return getDetailValueArray;
                default:
                    throw new Error('Invalid returnValue.');
            }
        }();
        return processFunction({
            maxDate: maxDate,
            maxDetail: maxDetail,
            minDate: minDate,
            value: value
        });
    }, [
        maxDate,
        maxDetail,
        minDate,
        returnValue
    ]);
    var setActiveStartDate = (0,react.useCallback)(function(nextActiveStartDate, action) {
        setActiveStartDateState(nextActiveStartDate);
        var args = {
            action: action,
            activeStartDate: nextActiveStartDate,
            value: value,
            view: view
        };
        if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {
            onActiveStartDateChange(args);
        }
    }, [
        activeStartDate,
        onActiveStartDateChange,
        value,
        view
    ]);
    var onClickTile = (0,react.useCallback)(function(value, event) {
        var callback = function() {
            switch(view){
                case 'century':
                    return onClickDecade;
                case 'decade':
                    return onClickYear;
                case 'year':
                    return onClickMonth;
                case 'month':
                    return onClickDay;
                default:
                    throw new Error("Invalid view: ".concat(view, "."));
            }
        }();
        if (callback) callback(value, event);
    }, [
        onClickDay,
        onClickDecade,
        onClickMonth,
        onClickYear,
        view
    ]);
    var drillDown = (0,react.useCallback)(function(nextActiveStartDate, event) {
        if (!drillDownAvailable) {
            return;
        }
        onClickTile(nextActiveStartDate, event);
        var nextView = views[views.indexOf(view) + 1];
        if (!nextView) {
            throw new Error('Attempted to drill down from the lowest view.');
        }
        setActiveStartDateState(nextActiveStartDate);
        setViewState(nextView);
        var args = {
            action: 'drillDown',
            activeStartDate: nextActiveStartDate,
            value: value,
            view: nextView
        };
        if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {
            onActiveStartDateChange(args);
        }
        if (onViewChange && view !== nextView) {
            onViewChange(args);
        }
        if (onDrillDown) {
            onDrillDown(args);
        }
    }, [
        activeStartDate,
        drillDownAvailable,
        onActiveStartDateChange,
        onClickTile,
        onDrillDown,
        onViewChange,
        value,
        view,
        views
    ]);
    var drillUp = (0,react.useCallback)(function() {
        if (!drillUpAvailable) {
            return;
        }
        var nextView = views[views.indexOf(view) - 1];
        if (!nextView) {
            throw new Error('Attempted to drill up from the highest view.');
        }
        var nextActiveStartDate = getBegin(nextView, activeStartDate);
        setActiveStartDateState(nextActiveStartDate);
        setViewState(nextView);
        var args = {
            action: 'drillUp',
            activeStartDate: nextActiveStartDate,
            value: value,
            view: nextView
        };
        if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {
            onActiveStartDateChange(args);
        }
        if (onViewChange && view !== nextView) {
            onViewChange(args);
        }
        if (onDrillUp) {
            onDrillUp(args);
        }
    }, [
        activeStartDate,
        drillUpAvailable,
        onActiveStartDateChange,
        onDrillUp,
        onViewChange,
        value,
        view,
        views
    ]);
    var onChange = (0,react.useCallback)(function(rawNextValue, event) {
        var previousValue = value;
        onClickTile(rawNextValue, event);
        var isFirstValueInRange = selectRange && !getIsSingleValue(previousValue);
        var nextValue;
        if (selectRange) {
            // Range selection turned on
            if (isFirstValueInRange) {
                // Value has 0 or 2 elements - either way we're starting a new array
                // First value
                nextValue = getBegin(valueType, rawNextValue);
            } else {
                if (!previousValue) {
                    throw new Error('previousValue is required');
                }
                if (Array.isArray(previousValue)) {
                    throw new Error('previousValue must not be an array');
                }
                // Second value
                nextValue = getValueRange(valueType, previousValue, rawNextValue);
            }
        } else {
            // Range selection turned off
            nextValue = getProcessedValue(rawNextValue);
        }
        var nextActiveStartDate = // Range selection turned off
        !selectRange || // Range selection turned on, first value
        isFirstValueInRange || // Range selection turned on, second value, goToRangeStartOnSelect toggled on
        goToRangeStartOnSelect ? getActiveStartDate({
            maxDate: maxDate,
            maxDetail: maxDetail,
            minDate: minDate,
            minDetail: minDetail,
            value: nextValue,
            view: view
        }) : null;
        event.persist();
        setActiveStartDateState(nextActiveStartDate);
        setValueState(nextValue);
        var args = {
            action: 'onChange',
            activeStartDate: nextActiveStartDate,
            value: nextValue,
            view: view
        };
        if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {
            onActiveStartDateChange(args);
        }
        if (onChangeProps) {
            if (selectRange) {
                var isSingleValue = getIsSingleValue(nextValue);
                if (!isSingleValue) {
                    onChangeProps(nextValue || null, event);
                } else if (allowPartialRange) {
                    if (Array.isArray(nextValue)) {
                        throw new Error('value must not be an array');
                    }
                    onChangeProps([
                        nextValue || null,
                        null
                    ], event);
                }
            } else {
                onChangeProps(nextValue || null, event);
            }
        }
    }, [
        activeStartDate,
        allowPartialRange,
        getProcessedValue,
        goToRangeStartOnSelect,
        maxDate,
        maxDetail,
        minDate,
        minDetail,
        onActiveStartDateChange,
        onChangeProps,
        onClickTile,
        selectRange,
        value,
        valueType,
        view
    ]);
    function onMouseOver(nextHover) {
        setHoverState(nextHover);
    }
    function onMouseLeave() {
        setHoverState(null);
    }
    (0,react.useImperativeHandle)(ref, function() {
        return {
            activeStartDate: activeStartDate,
            drillDown: drillDown,
            drillUp: drillUp,
            onChange: onChange,
            setActiveStartDate: setActiveStartDate,
            value: value,
            view: view
        };
    }, [
        activeStartDate,
        drillDown,
        drillUp,
        onChange,
        setActiveStartDate,
        value,
        view
    ]);
    function renderContent(next) {
        var currentActiveStartDate = next ? getBeginNext(view, activeStartDate) : getBegin(view, activeStartDate);
        var onClick = drillDownAvailable ? drillDown : onChange;
        var commonProps = {
            activeStartDate: currentActiveStartDate,
            hover: hover,
            locale: locale,
            maxDate: maxDate,
            minDate: minDate,
            onClick: onClick,
            onMouseOver: selectRange ? onMouseOver : undefined,
            tileClassName: tileClassName,
            tileContent: tileContent,
            tileDisabled: tileDisabled,
            value: value,
            valueType: valueType
        };
        switch(view){
            case 'century':
                {
                    return (0,react_jsx_runtime.jsx)(CenturyView, Calendar_assign({
                        formatYear: formatYear,
                        showNeighboringCentury: showNeighboringCentury
                    }, commonProps));
                }
            case 'decade':
                {
                    return (0,react_jsx_runtime.jsx)(DecadeView, Calendar_assign({
                        formatYear: formatYear,
                        showNeighboringDecade: showNeighboringDecade
                    }, commonProps));
                }
            case 'year':
                {
                    return (0,react_jsx_runtime.jsx)(YearView, Calendar_assign({
                        formatMonth: formatMonth,
                        formatMonthYear: formatMonthYear
                    }, commonProps));
                }
            case 'month':
                {
                    return (0,react_jsx_runtime.jsx)(MonthView, Calendar_assign({
                        calendarType: calendarType,
                        formatDay: formatDay,
                        formatLongDate: formatLongDate,
                        formatShortWeekday: formatShortWeekday,
                        formatWeekday: formatWeekday,
                        onClickWeekNumber: onClickWeekNumber,
                        onMouseLeave: selectRange ? onMouseLeave : undefined,
                        showFixedNumberOfWeeks: typeof showFixedNumberOfWeeks !== 'undefined' ? showFixedNumberOfWeeks : showDoubleView,
                        showNeighboringMonth: showNeighboringMonth,
                        showWeekNumbers: showWeekNumbers
                    }, commonProps));
                }
            default:
                throw new Error("Invalid view: ".concat(view, "."));
        }
    }
    function renderNavigation() {
        if (!showNavigation) {
            return null;
        }
        return (0,react_jsx_runtime.jsx)(Navigation, {
            activeStartDate: activeStartDate,
            drillUp: drillUp,
            formatMonthYear: formatMonthYear,
            formatYear: formatYear,
            locale: locale,
            maxDate: maxDate,
            minDate: minDate,
            navigationAriaLabel: navigationAriaLabel,
            navigationAriaLive: navigationAriaLive,
            navigationLabel: navigationLabel,
            next2AriaLabel: next2AriaLabel,
            next2Label: next2Label,
            nextAriaLabel: nextAriaLabel,
            nextLabel: nextLabel,
            prev2AriaLabel: prev2AriaLabel,
            prev2Label: prev2Label,
            prevAriaLabel: prevAriaLabel,
            prevLabel: prevLabel,
            setActiveStartDate: setActiveStartDate,
            showDoubleView: showDoubleView,
            view: view,
            views: views
        });
    }
    var valueArray = Array.isArray(value) ? value : [
        value
    ];
    return (0,react_jsx_runtime.jsxs)("div", {
        className: (0,clsx/* default */.A)(baseClassName, selectRange && valueArray.length === 1 && "".concat(baseClassName, "--selectRange"), showDoubleView && "".concat(baseClassName, "--doubleView"), className),
        ref: inputRef,
        children: [
            renderNavigation(),
            (0,react_jsx_runtime.jsxs)("div", {
                className: "".concat(baseClassName, "__viewContainer"),
                onBlur: selectRange ? onMouseLeave : undefined,
                onMouseLeave: selectRange ? onMouseLeave : undefined,
                children: [
                    renderContent(),
                    showDoubleView ? renderContent(true) : null
                ]
            })
        ]
    });
});
/* harmony default export */ const esm_Calendar = (Calendar_Calendar);

;// ../../node_modules/react-calendar/dist/esm/index.js







/* harmony default export */ const dist_esm = (esm_Calendar);

// EXTERNAL MODULE: ./modules/ui/components/date-picker/styles.css
var styles = __webpack_require__(800661);
;// ./modules/ui/components/date-picker/index.tsx
/* __next_internal_client_entry_do_not_use__ DatePicker auto */ 









const getOrdinalSuffix = (day)=>{
    if (day > 3 && day < 21) return "th"; // 11th, 12th, 13th, etc.
    switch(day % 10){
        case 1:
            return "st";
        case 2:
            return "nd";
        case 3:
            return "rd";
        default:
            return "th";
    }
};
const DatePicker = ({ date, updateSurveyDate })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [value, onChange] = (0,react.useState)(date ? new Date(date) : undefined);
    const [formattedDate, setFormattedDate] = (0,react.useState)(date ? (0,date_fns_format/* format */.GP)(new Date(date), "do MMM, yyyy") : undefined);
    const [isOpen, setIsOpen] = (0,react.useState)(false);
    const btnRef = (0,react.useRef)(null);
    const onDateChange = (date)=>{
        if (date) {
            updateSurveyDate(date);
            const day = date.getDate();
            const ordinalSuffix = getOrdinalSuffix(day);
            const formatted = (0,date_fns_format/* format */.GP)(date, `d'${ordinalSuffix}' MMM, yyyy`);
            setFormattedDate(formatted);
            onChange(date);
            setIsOpen(false);
        }
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(popover/* Popover */.AM, {
        open: isOpen,
        onOpenChange: setIsOpen,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(popover/* PopoverTrigger */.Wv, {
                asChild: true,
                children: formattedDate ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                    variant: "ghost",
                    className: (0,lib_cn.cn)("w-[280px] justify-start border border-slate-300 bg-white text-left font-normal transition-all ease-in hover:bg-slate-300", !formattedDate && "text-muted-foreground bg-slate-800"),
                    ref: btnRef,
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(CalendarCheck, {
                            className: "mr-2 h-4 w-4"
                        }),
                        formattedDate
                    ]
                }) : /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                    variant: "ghost",
                    className: (0,lib_cn.cn)("w-[280px] justify-start border border-slate-300 bg-white text-left font-normal hover:bg-slate-300", !formattedDate && "text-muted-foreground"),
                    onClick: ()=>setIsOpen(true),
                    ref: btnRef,
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Calendar, {
                            className: "mr-2 h-4 w-4"
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                            children: t("common.pick_a_date")
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(popover/* PopoverContent */.hl, {
                align: "start",
                className: "min-w-96 rounded-lg px-4 py-3",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(dist_esm, {
                    value: value,
                    onChange: (date)=>onDateChange(date),
                    minDate: new Date(),
                    className: "!border-0",
                    tileClassName: ({ date })=>{
                        const baseClass = "hover:fb-bg-input-bg-selected fb-rounded-custom fb-h-9 fb-p-0 fb-mt-1 fb-font-normal fb-text-heading aria-selected:fb-opacity-100 focus:fb-ring-2 focus:fb-bg-slate-200";
                        // today's date class
                        if (date.getDate() === new Date().getDate() && date.getMonth() === new Date().getMonth() && date.getFullYear() === new Date().getFullYear()) {
                            return `${baseClass} !fb-bg-brand !fb-border-border-highlight !fb-text-heading focus:fb-ring-2 focus:fb-bg-slate-200`;
                        }
                        // active date class
                        if (date.getDate() === value?.getDate() && date.getMonth() === value?.getMonth() && date.getFullYear() === value?.getFullYear()) {
                            return `${baseClass} !fb-bg-brand !fb-border-border-highlight !fb-text-heading`;
                        }
                        return baseClass;
                    },
                    showNeighboringMonth: false
                })
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/ResponseOptionsCard.tsx
/* __next_internal_client_entry_do_not_use__ ResponseOptionsCard auto */ 













const ResponseOptionsCard = ({ localSurvey, setLocalSurvey, responseCount })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [open, setOpen] = (0,react.useState)(localSurvey.type === "link" ? true : false);
    const autoComplete = localSurvey.autoComplete !== null;
    const [runOnDateToggle, setRunOnDateToggle] = (0,react.useState)(false);
    const [closeOnDateToggle, setCloseOnDateToggle] = (0,react.useState)(false);
    react.useState;
    const [surveyClosedMessageToggle, setSurveyClosedMessageToggle] = (0,react.useState)(false);
    const [verifyEmailToggle, setVerifyEmailToggle] = (0,react.useState)(localSurvey.isVerifyEmailEnabled);
    const [isSingleResponsePerEmailEnabledToggle, setIsSingleResponsePerEmailToggle] = (0,react.useState)(localSurvey.isSingleResponsePerEmailEnabled);
    const [surveyClosedMessage, setSurveyClosedMessage] = (0,react.useState)({
        heading: t("environments.surveys.edit.survey_completed_heading"),
        subheading: t("environments.surveys.edit.survey_completed_subheading")
    });
    const [singleUseMessage, setSingleUseMessage] = (0,react.useState)({
        heading: t("environments.surveys.edit.survey_already_answered_heading"),
        subheading: t("environments.surveys.edit.survey_already_answered_subheading")
    });
    const [singleUseEncryption, setSingleUseEncryption] = (0,react.useState)(true);
    const [runOnDate, setRunOnDate] = (0,react.useState)(null);
    const [closeOnDate, setCloseOnDate] = (0,react.useState)(null);
    const isPinProtectionEnabled = localSurvey.pin !== null;
    const [verifyProtectWithPinError, setVerifyProtectWithPinError] = (0,react.useState)(null);
    const handleRunOnDateToggle = ()=>{
        if (runOnDateToggle) {
            setRunOnDateToggle(false);
            if (localSurvey.runOnDate) {
                setRunOnDate(null);
                setLocalSurvey({
                    ...localSurvey,
                    runOnDate: null
                });
            }
        } else {
            setRunOnDateToggle(true);
        }
    };
    const handleCloseOnDateToggle = ()=>{
        if (closeOnDateToggle) {
            setCloseOnDateToggle(false);
            if (localSurvey.closeOnDate) {
                setCloseOnDate(null);
                setLocalSurvey({
                    ...localSurvey,
                    closeOnDate: null
                });
            }
        } else {
            setCloseOnDateToggle(true);
        }
    };
    const handleProtectSurveyWithPinToggle = ()=>{
        setLocalSurvey((prevSurvey)=>({
                ...prevSurvey,
                pin: isPinProtectionEnabled ? null : "1234"
            }));
    };
    const handleProtectSurveyPinChange = (pin)=>{
        //check if pin only contains numbers
        const validation = /^\d+$/;
        const isValidPin = validation.test(pin);
        if (!isValidPin) return dist/* default */.Ay.error(t("environments.surveys.edit.pin_can_only_contain_numbers"));
        setLocalSurvey({
            ...localSurvey,
            pin
        });
    };
    const handleProtectSurveyPinBlurEvent = ()=>{
        if (!localSurvey.pin) return setVerifyProtectWithPinError(null);
        const regexPattern = /^\d{4}$/;
        const isValidPin = regexPattern.test(`${localSurvey.pin}`);
        if (!isValidPin) return setVerifyProtectWithPinError(t("environments.surveys.edit.pin_must_be_a_four_digit_number"));
        setVerifyProtectWithPinError(null);
    };
    const handleSurveyPinInputKeyDown = (e)=>{
        const exceptThisSymbols = [
            "e",
            "E",
            "+",
            "-",
            "."
        ];
        if (exceptThisSymbols.includes(e.key)) e.preventDefault();
    };
    const handleCloseSurveyMessageToggle = ()=>{
        setSurveyClosedMessageToggle((prev)=>!prev);
        if (surveyClosedMessageToggle && localSurvey.surveyClosedMessage) {
            setLocalSurvey({
                ...localSurvey,
                surveyClosedMessage: null
            });
        }
    };
    const handleVerifyEmailToogle = ()=>{
        setVerifyEmailToggle(!verifyEmailToggle);
        setLocalSurvey({
            ...localSurvey,
            isVerifyEmailEnabled: !localSurvey.isVerifyEmailEnabled
        });
    };
    const handleSingleResponsePerEmailToggle = ()=>{
        setIsSingleResponsePerEmailToggle(!isSingleResponsePerEmailEnabledToggle);
        setLocalSurvey({
            ...localSurvey,
            isSingleResponsePerEmailEnabled: !localSurvey.isSingleResponsePerEmailEnabled
        });
    };
    const handleRunOnDateChange = (date)=>{
        const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0));
        setRunOnDate(utcDate);
        setLocalSurvey({
            ...localSurvey,
            runOnDate: utcDate ?? null
        });
    };
    const handleCloseOnDateChange = (date)=>{
        const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0));
        setCloseOnDate(utcDate);
        setLocalSurvey({
            ...localSurvey,
            closeOnDate: utcDate ?? null
        });
    };
    const handleClosedSurveyMessageChange = ({ heading, subheading })=>{
        const message = {
            enabled: closeOnDateToggle,
            heading: heading ?? surveyClosedMessage.heading,
            subheading: subheading ?? surveyClosedMessage.subheading
        };
        setSurveyClosedMessage(message);
        setLocalSurvey({
            ...localSurvey,
            surveyClosedMessage: message
        });
    };
    const handleSingleUseSurveyToggle = ()=>{
        if (!localSurvey.singleUse?.enabled) {
            setLocalSurvey({
                ...localSurvey,
                singleUse: {
                    enabled: true,
                    ...singleUseMessage,
                    isEncrypted: singleUseEncryption
                }
            });
        } else {
            setLocalSurvey({
                ...localSurvey,
                singleUse: {
                    enabled: false,
                    isEncrypted: false
                }
            });
        }
    };
    const handleSingleUseSurveyMessageChange = ({ heading, subheading })=>{
        const message = {
            heading: heading ?? singleUseMessage.heading,
            subheading: subheading ?? singleUseMessage.subheading
        };
        const localSurveySingleUseEnabled = localSurvey.singleUse?.enabled ?? false;
        setSingleUseMessage(message);
        setLocalSurvey({
            ...localSurvey,
            singleUse: {
                enabled: localSurveySingleUseEnabled,
                ...message,
                isEncrypted: singleUseEncryption
            }
        });
    };
    const hangleSingleUseEncryptionToggle = ()=>{
        if (!singleUseEncryption) {
            setSingleUseEncryption(true);
            setLocalSurvey({
                ...localSurvey,
                singleUse: {
                    enabled: true,
                    ...singleUseMessage,
                    isEncrypted: true
                }
            });
        } else {
            setSingleUseEncryption(false);
            setLocalSurvey({
                ...localSurvey,
                singleUse: {
                    enabled: true,
                    ...singleUseMessage,
                    isEncrypted: false
                }
            });
        }
    };
    (0,react.useEffect)(()=>{
        if (!!localSurvey.surveyClosedMessage) {
            setSurveyClosedMessage({
                heading: localSurvey.surveyClosedMessage.heading ?? surveyClosedMessage.heading,
                subheading: localSurvey.surveyClosedMessage.subheading ?? surveyClosedMessage.subheading
            });
            setSurveyClosedMessageToggle(true);
        }
        if (localSurvey.singleUse?.enabled) {
            setSingleUseMessage({
                heading: localSurvey.singleUse.heading ?? singleUseMessage.heading,
                subheading: localSurvey.singleUse.subheading ?? singleUseMessage.subheading
            });
            setSingleUseEncryption(localSurvey.singleUse.isEncrypted);
        }
        if (localSurvey.runOnDate) {
            setRunOnDate(localSurvey.runOnDate);
            setRunOnDateToggle(true);
        }
        if (localSurvey.closeOnDate) {
            setCloseOnDate(localSurvey.closeOnDate);
            setCloseOnDateToggle(true);
        }
    }, [
        localSurvey,
        singleUseMessage.heading,
        singleUseMessage.subheading,
        surveyClosedMessage.heading,
        surveyClosedMessage.subheading
    ]);
    const toggleAutocomplete = ()=>{
        if (autoComplete) {
            const updatedSurvey = {
                ...localSurvey,
                autoComplete: null
            };
            setLocalSurvey(updatedSurvey);
        } else {
            const updatedSurvey = {
                ...localSurvey,
                autoComplete: Math.max(25, responseCount + 5)
            };
            setLocalSurvey(updatedSurvey);
        }
    };
    const handleInputResponse = (e)=>{
        let value = parseInt(e.target.value);
        if (Number.isNaN(value) || value < 1) {
            value = 1;
        }
        const updatedSurvey = {
            ...localSurvey,
            autoComplete: value
        };
        setLocalSurvey(updatedSurvey);
    };
    const handleInputResponseBlur = (e)=>{
        if (parseInt(e.target.value) === 0) {
            dist/* default */.Ay.error(t("environments.surveys.edit.response_limit_can_t_be_set_to_0"));
            return;
        }
        if (parseInt(e.target.value) <= responseCount) {
            dist/* default */.Ay.error(t("environments.surveys.edit.response_limit_needs_to_exceed_number_of_received_responses", {
                responseCount
            }));
            return;
        }
    };
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
        open: open,
        onOpenChange: setOpen,
        className: (0,lib_cn.cn)(open ? "" : "hover:bg-slate-50", "w-full space-y-2 rounded-lg border border-slate-300 bg-white"),
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                asChild: true,
                className: "h-full w-full cursor-pointer",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "inline-flex px-4 py-4",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "flex items-center pl-2 pr-5",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(check/* default */.A, {
                                    strokeWidth: 3,
                                    className: "h-7 w-7 rounded-full border border-green-300 bg-green-100 p-1.5 text-green-600"
                                }),
                                " "
                            ]
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "font-semibold text-slate-800",
                                    children: t("environments.surveys.edit.response_options")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "mt-1 text-sm text-slate-500",
                                    children: t("environments.surveys.edit.response_limits_redirections_and_more")
                                })
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                className: "flex flex-col",
                ref: parent,
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("hr", {
                        className: "py-1 text-slate-600"
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "p-3",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                htmlId: "closeOnNumberOfResponse",
                                isChecked: autoComplete,
                                onToggle: toggleAutocomplete,
                                title: t("environments.surveys.edit.close_survey_on_response_limit"),
                                description: t("environments.surveys.edit.automatically_close_the_survey_after_a_certain_number_of_responses"),
                                childBorder: true,
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("label", {
                                    htmlFor: "autoCompleteResponses",
                                    className: "cursor-pointer bg-slate-50 p-4",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                        className: "text-sm font-semibold text-slate-700",
                                        children: [
                                            t("environments.surveys.edit.automatically_mark_the_survey_as_complete_after"),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                autoFocus: true,
                                                type: "number",
                                                min: responseCount ? (responseCount + 1).toString() : "1",
                                                id: "autoCompleteResponses",
                                                value: localSurvey.autoComplete?.toString(),
                                                onChange: handleInputResponse,
                                                onBlur: handleInputResponseBlur,
                                                className: "ml-2 mr-2 inline w-20 bg-white text-center text-sm"
                                            }),
                                            t("environments.surveys.edit.completed_responses")
                                        ]
                                    })
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                htmlId: "runOnDate",
                                isChecked: runOnDateToggle,
                                onToggle: handleRunOnDateToggle,
                                title: t("environments.surveys.edit.release_survey_on_date"),
                                description: t("environments.surveys.edit.automatically_release_the_survey_at_the_beginning_of_the_day_utc"),
                                childBorder: true,
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "p-4",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(DatePicker, {
                                        date: runOnDate,
                                        updateSurveyDate: handleRunOnDateChange
                                    })
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                htmlId: "closeOnDate",
                                isChecked: closeOnDateToggle,
                                onToggle: handleCloseOnDateToggle,
                                title: t("environments.surveys.edit.close_survey_on_date"),
                                description: t("environments.surveys.edit.automatically_closes_the_survey_at_the_beginning_of_the_day_utc"),
                                childBorder: true,
                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "p-4",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(DatePicker, {
                                        date: closeOnDate,
                                        updateSurveyDate: handleCloseOnDateChange
                                    })
                                })
                            }),
                            localSurvey.type === "link" && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                        htmlId: "adjustSurveyClosedMessage",
                                        isChecked: surveyClosedMessageToggle,
                                        onToggle: handleCloseSurveyMessageToggle,
                                        title: t("environments.surveys.edit.adjust_survey_closed_message"),
                                        description: t("environments.surveys.edit.adjust_survey_closed_message_description"),
                                        childBorder: true,
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                            className: "flex w-full items-center space-x-1 p-4 pb-4",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "w-full cursor-pointer items-center bg-slate-50",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                        htmlFor: "headline",
                                                        children: t("environments.surveys.edit.heading")
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                        autoFocus: true,
                                                        id: "heading",
                                                        className: "mb-4 mt-2 bg-white",
                                                        name: "heading",
                                                        defaultValue: surveyClosedMessage.heading,
                                                        onChange: (e)=>handleClosedSurveyMessageChange({
                                                                heading: e.target.value
                                                            })
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                        htmlFor: "headline",
                                                        children: t("environments.surveys.edit.subheading")
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                        className: "mt-2 bg-white",
                                                        id: "subheading",
                                                        name: "subheading",
                                                        defaultValue: surveyClosedMessage.subheading,
                                                        onChange: (e)=>handleClosedSurveyMessageChange({
                                                                subheading: e.target.value
                                                            })
                                                    })
                                                ]
                                            })
                                        })
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                        htmlId: "singleUserSurveyOptions",
                                        isChecked: !!localSurvey.singleUse?.enabled,
                                        onToggle: handleSingleUseSurveyToggle,
                                        title: t("environments.surveys.edit.single_use_survey_links"),
                                        description: t("environments.surveys.edit.single_use_survey_links_description"),
                                        childBorder: true,
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                            className: "flex w-full items-center space-x-1 p-4 pb-4",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "w-full cursor-pointer items-center bg-slate-50",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                        className: "row mb-2 flex cursor-default items-center space-x-2",
                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                            htmlFor: "howItWorks",
                                                            children: t("environments.surveys.edit.how_it_works")
                                                        })
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("ul", {
                                                        className: "mb-3 ml-4 cursor-default list-inside list-disc space-y-1",
                                                        children: [
                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("li", {
                                                                className: "text-sm text-slate-600",
                                                                children: t("environments.surveys.edit.blocks_survey_if_the_survey_url_has_no_single_use_id_suid")
                                                            }),
                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("li", {
                                                                className: "text-sm text-slate-600",
                                                                children: t("environments.surveys.edit.blocks_survey_if_a_submission_with_the_single_use_id_suid_exists_already")
                                                            }),
                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("li", {
                                                                className: "text-sm text-slate-600",
                                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)((link_default()), {
                                                                    href: "https://formbricks.com/docs/link-surveys/single-use-links",
                                                                    target: "_blank",
                                                                    className: "underline",
                                                                    children: [
                                                                        t("common.read_docs"),
                                                                        " ",
                                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(arrow_up_right/* default */.A, {
                                                                            className: "inline",
                                                                            size: 16
                                                                        })
                                                                    ]
                                                                })
                                                            })
                                                        ]
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                        htmlFor: "headline",
                                                        children: t("environments.surveys.edit.link_used_message")
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                        autoFocus: true,
                                                        id: "heading",
                                                        className: "mb-4 mt-2 bg-white",
                                                        name: "heading",
                                                        value: singleUseMessage.heading,
                                                        onChange: (e)=>handleSingleUseSurveyMessageChange({
                                                                heading: e.target.value
                                                            })
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                        htmlFor: "headline",
                                                        children: t("environments.surveys.edit.subheading")
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                        className: "mb-4 mt-2 bg-white",
                                                        id: "subheading",
                                                        name: "subheading",
                                                        value: singleUseMessage.subheading,
                                                        onChange: (e)=>handleSingleUseSurveyMessageChange({
                                                                subheading: e.target.value
                                                            })
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                        htmlFor: "headline",
                                                        children: t("environments.surveys.edit.url_encryption")
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                            className: "mt-2 flex items-center space-x-1",
                                                            children: [
                                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                                                    id: "encryption-switch",
                                                                    checked: singleUseEncryption,
                                                                    onCheckedChange: hangleSingleUseEncryptionToggle
                                                                }),
                                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                                    htmlFor: "encryption-label",
                                                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                                        className: "ml-2",
                                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                                            className: "text-sm font-normal text-slate-600",
                                                                            children: t("environments.surveys.edit.enable_encryption_of_single_use_id_suid_in_survey_url")
                                                                        })
                                                                    })
                                                                })
                                                            ]
                                                        })
                                                    })
                                                ]
                                            })
                                        })
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                        htmlId: "verifyEmailBeforeSubmission",
                                        isChecked: verifyEmailToggle,
                                        onToggle: handleVerifyEmailToogle,
                                        title: t("environments.surveys.edit.verify_email_before_submission"),
                                        description: t("environments.surveys.edit.verify_email_before_submission_description"),
                                        childBorder: true,
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                            className: "m-1",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                                htmlId: "preventDoubleSubmission",
                                                isChecked: isSingleResponsePerEmailEnabledToggle,
                                                onToggle: handleSingleResponsePerEmailToggle,
                                                title: t("environments.surveys.edit.prevent_double_submission"),
                                                description: t("environments.surveys.edit.prevent_double_submission_description")
                                            })
                                        })
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                        htmlId: "protectSurveyWithPin",
                                        isChecked: isPinProtectionEnabled,
                                        onToggle: handleProtectSurveyWithPinToggle,
                                        title: t("environments.surveys.edit.protect_survey_with_pin"),
                                        description: t("environments.surveys.edit.protect_survey_with_pin_description"),
                                        childBorder: true,
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            className: "p-4",
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                    htmlFor: "headline",
                                                    className: "sr-only",
                                                    children: t("environments.surveys.edit.add_pin")
                                                }),
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                    autoFocus: true,
                                                    id: "pin",
                                                    isInvalid: Boolean(verifyProtectWithPinError),
                                                    className: "bg-white",
                                                    name: "pin",
                                                    placeholder: t("environments.surveys.edit.add_a_four_digit_pin"),
                                                    onBlur: handleProtectSurveyPinBlurEvent,
                                                    defaultValue: localSurvey.pin ? localSurvey.pin : undefined,
                                                    onKeyDown: handleSurveyPinInputKeyDown,
                                                    onChange: (e)=>handleProtectSurveyPinChange(e.target.value)
                                                }),
                                                verifyProtectWithPinError && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                    className: "pt-1 text-sm text-red-700",
                                                    children: verifyProtectWithPinError
                                                })
                                            ]
                                        })
                                    })
                                ]
                            })
                        ]
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ./modules/ui/components/preview-survey/lib/utils.ts
var preview_survey_lib_utils = __webpack_require__(598584);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/Placement.tsx
/* __next_internal_client_entry_do_not_use__ Placement auto */ 





const Placement = ({ setCurrentPlacement, currentPlacement, setOverlay, overlay, setClickOutsideClose, clickOutsideClose })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const placements = [
        {
            name: t("common.bottom_right"),
            value: "bottomRight",
            disabled: false
        },
        {
            name: t("common.top_right"),
            value: "topRight",
            disabled: false
        },
        {
            name: t("common.top_left"),
            value: "topLeft",
            disabled: false
        },
        {
            name: t("common.bottom_left"),
            value: "bottomLeft",
            disabled: false
        },
        {
            name: t("common.centered_modal"),
            value: "center",
            disabled: false
        }
    ];
    const overlayStyle = currentPlacement === "center" && overlay === "dark" ? "bg-slate-700/80" : "bg-slate-200";
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "flex",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroup */.z, {
                        onValueChange: (e)=>setCurrentPlacement(e),
                        value: currentPlacement,
                        children: placements.map((placement)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "flex items-center space-x-2 whitespace-nowrap",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroupItem */.C, {
                                        id: placement.value,
                                        value: placement.value,
                                        disabled: placement.disabled
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                        htmlFor: placement.value,
                                        className: "text-slate-900",
                                        children: t(placement.name)
                                    })
                                ]
                            }, placement.value))
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: (0,lib_cn.cn)(clickOutsideClose ? "" : "cursor-not-allowed", "relative ml-8 h-40 w-full rounded", overlayStyle),
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: (0,lib_cn.cn)("absolute h-16 w-16 cursor-default rounded bg-slate-700", (0,preview_survey_lib_utils/* getPlacementStyle */.n)(currentPlacement))
                        })
                    })
                ]
            }),
            currentPlacement === "center" && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "mt-6 space-y-2",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                className: "font-semibold",
                                children: t("environments.surveys.edit.centered_modal_overlay_color")
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(radio_group/* RadioGroup */.z, {
                                onValueChange: (overlay)=>setOverlay(overlay),
                                value: overlay,
                                className: "flex space-x-4",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "flex items-center space-x-2 whitespace-nowrap",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroupItem */.C, {
                                                id: "lightOverlay",
                                                value: "light"
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                htmlFor: "lightOverlay",
                                                className: "text-slate-900",
                                                children: t("common.light_overlay")
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "flex items-center space-x-2 whitespace-nowrap",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroupItem */.C, {
                                                id: "darkOverlay",
                                                value: "dark"
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                htmlFor: "darkOverlay",
                                                className: "text-slate-900",
                                                children: t("common.dark_overlay")
                                            })
                                        ]
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "mt-6 space-y-2",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                className: "font-semibold",
                                children: t("common.allow_users_to_exit_by_clicking_outside_the_survey")
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(radio_group/* RadioGroup */.z, {
                                onValueChange: (value)=>setClickOutsideClose(value === "allow"),
                                value: clickOutsideClose ? "allow" : "disallow",
                                className: "flex space-x-4",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "flex items-center space-x-2 whitespace-nowrap",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroupItem */.C, {
                                                id: "disallow",
                                                value: "disallow"
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                htmlFor: "disallow",
                                                className: "text-slate-900",
                                                children: t("common.disallow")
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "flex items-center space-x-2 whitespace-nowrap",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(radio_group/* RadioGroupItem */.C, {
                                                id: "allow",
                                                value: "allow"
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                                htmlFor: "allow",
                                                className: "text-slate-900",
                                                children: t("common.allow")
                                            })
                                        ]
                                    })
                                ]
                            })
                        ]
                    })
                ]
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/SurveyPlacementCard.tsx
/* __next_internal_client_entry_do_not_use__ SurveyPlacementCard auto */ 









const SurveyPlacementCard = ({ localSurvey, setLocalSurvey, environmentId })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [open, setOpen] = (0,react.useState)(false);
    const { projectOverwrites } = localSurvey ?? {};
    const { placement, clickOutsideClose, darkOverlay } = projectOverwrites ?? {};
    const setProjectOverwrites = (projectOverwrites)=>{
        setLocalSurvey({
            ...localSurvey,
            projectOverwrites: projectOverwrites
        });
    };
    const togglePlacement = ()=>{
        if (setProjectOverwrites) {
            setProjectOverwrites({
                ...projectOverwrites,
                placement: !!placement ? null : "bottomRight",
                clickOutsideClose: false,
                darkOverlay: false
            });
        }
    };
    const handlePlacementChange = (placement)=>{
        if (setProjectOverwrites) {
            setProjectOverwrites({
                ...projectOverwrites,
                placement
            });
        }
    };
    const handleOverlay = (overlayType)=>{
        const darkOverlay = overlayType === "dark";
        if (setProjectOverwrites) {
            setProjectOverwrites({
                ...projectOverwrites,
                darkOverlay
            });
        }
    };
    const handleClickOutsideClose = (clickOutsideClose)=>{
        if (setProjectOverwrites) {
            setProjectOverwrites({
                ...projectOverwrites,
                clickOutsideClose
            });
        }
    };
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
        open: open,
        onOpenChange: (openState)=>{
            if (localSurvey.type !== "link") {
                setOpen(openState);
            }
        },
        className: "w-full rounded-lg border border-slate-300 bg-white",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                asChild: true,
                className: "h-full w-full cursor-pointer rounded-lg hover:bg-slate-50",
                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "inline-flex px-4 py-4",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "flex items-center pl-2 pr-5",
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(check/* default */.A, {
                                strokeWidth: 3,
                                className: "h-7 w-7 rounded-full border border-green-300 bg-green-100 p-1.5 text-green-600"
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "font-semibold text-slate-800",
                                    children: t("environments.surveys.edit.survey_placement")
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                    className: "mt-1 text-sm text-slate-500",
                                    children: t("environments.surveys.edit.overwrite_the_global_placement_of_the_survey")
                                })
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                className: `flex ${open && "pb-3"}`,
                ref: parent,
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("hr", {
                        className: "py-1 text-slate-600"
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "p-6",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "flex flex-col gap-4",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    className: "flex items-center space-x-1",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                            id: "surveyDeadline",
                                            checked: !!placement,
                                            onCheckedChange: togglePlacement
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_label/* Label */.J, {
                                            htmlFor: "surveyDeadline",
                                            className: "cursor-pointer",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "ml-2",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                        className: "flex items-center gap-2",
                                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h3", {
                                                            className: "text-sm font-semibold text-slate-700",
                                                            children: t("environments.surveys.edit.overwrite_placement")
                                                        })
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                        className: "text-xs font-normal text-slate-500",
                                                        children: t("environments.surveys.edit.change_the_placement_of_this_survey")
                                                    })
                                                ]
                                            })
                                        })
                                    ]
                                }),
                                placement && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "flex items-center space-x-1 pb-4",
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        className: "flex w-full cursor-pointer items-center rounded-lg border bg-slate-50 p-4",
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                            className: "w-full items-center",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Placement, {
                                                currentPlacement: placement,
                                                setCurrentPlacement: handlePlacementChange,
                                                setOverlay: handleOverlay,
                                                overlay: darkOverlay ? "dark" : "light",
                                                setClickOutsideClose: handleClickOutsideClose,
                                                clickOutsideClose: !!clickOutsideClose
                                            })
                                        })
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                        className: "text-xs text-slate-500",
                                        children: [
                                            t("environments.surveys.edit.to_keep_the_placement_over_all_surveys_consistent_you_can"),
                                            " ",
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)((link_default()), {
                                                href: `/environments/${environmentId}/project/look`,
                                                target: "_blank",
                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                    className: "underline",
                                                    children: t("environments.surveys.edit.set_the_global_placement_in_the_look_feel_settings")
                                                })
                                            })
                                        ]
                                    })
                                })
                            ]
                        })
                    })
                ]
            })
        ]
    });
};

// EXTERNAL MODULE: ./modules/ee/teams/utils/teams.ts
var teams = __webpack_require__(708171);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/code-xml.js
var code_xml = __webpack_require__(217537);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/mouse-pointer-click.js
var mouse_pointer_click = __webpack_require__(277792);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/sparkles.js
var sparkles = __webpack_require__(158539);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/trash-2.js
var trash_2 = __webpack_require__(800087);
// EXTERNAL MODULE: ../../packages/lib/membership/utils.ts
var membership_utils = __webpack_require__(100274);
// EXTERNAL MODULE: ./modules/ui/components/modal-with-tabs/index.tsx
var modal_with_tabs = __webpack_require__(980933);
// EXTERNAL MODULE: ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/CreateNewActionTab.tsx
var CreateNewActionTab = __webpack_require__(438583);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/SavedActionsTab.tsx
/* __next_internal_client_entry_do_not_use__ SavedActionsTab auto */ 




const SavedActionsTab = ({ actionClasses, localSurvey, setLocalSurvey, setOpen })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const availableActions = actionClasses.filter((actionClass)=>!localSurvey.triggers.some((trigger)=>trigger.actionClass.id === actionClass.id));
    const [filteredActionClasses, setFilteredActionClasses] = (0,react.useState)(availableActions);
    const codeActions = filteredActionClasses.filter((actionClass)=>actionClass.type === "code");
    const noCodeActions = filteredActionClasses.filter((actionClass)=>actionClass.type === "noCode");
    const automaticActions = filteredActionClasses.filter((actionClass)=>actionClass.type === "automatic");
    const handleActionClick = (action)=>{
        setLocalSurvey((prev)=>({
                ...prev,
                triggers: prev.triggers.concat({
                    actionClass: action
                })
            }));
        setOpen(false);
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                type: "text",
                onChange: (e)=>{
                    setFilteredActionClasses(availableActions.filter((actionClass)=>actionClass.name.toLowerCase().includes(e.target.value.toLowerCase())));
                },
                className: "mb-2 bg-white",
                placeholder: "Search actions",
                id: "search-actions"
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "max-h-96 overflow-y-auto",
                children: [
                    automaticActions,
                    noCodeActions,
                    codeActions
                ].map((actions, i)=>actions.length > 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "me-4",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h2", {
                                className: "mb-2 mt-4 font-semibold",
                                children: i === 0 ? t("common.automatic") : i === 1 ? t("common.no_code") : t("common.code")
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "flex flex-col gap-2",
                                children: actions.map((action)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "cursor-pointer rounded-md border border-slate-300 bg-white px-4 py-2 hover:bg-slate-100",
                                        onClick: ()=>handleActionClick(action),
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                className: "mt-1 flex items-center",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                        className: "mr-1.5 h-4 w-4 text-slate-600",
                                                        children: action.type === "code" ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(code_xml/* default */.A, {
                                                            className: "h-4 w-4"
                                                        }) : action.type === "noCode" ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(mouse_pointer_click/* default */.A, {
                                                            className: "h-4 w-4"
                                                        }) : action.type === "automatic" ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(sparkles/* default */.A, {
                                                            className: "h-4 w-4"
                                                        }) : null
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h4", {
                                                        className: "text-sm font-semibold text-slate-600",
                                                        children: action.name
                                                    })
                                                ]
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                className: "mt-1 text-xs text-slate-500",
                                                children: action.description
                                            })
                                        ]
                                    }, action.id))
                            })
                        ]
                    }, i))
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/AddActionModal.tsx
/* __next_internal_client_entry_do_not_use__ AddActionModal auto */ 




const AddActionModal = ({ open, setOpen, actionClasses, setActionClasses, localSurvey, setLocalSurvey, isReadOnly, environmentId })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const tabs = [
        {
            title: t("environments.surveys.edit.select_saved_action"),
            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SavedActionsTab, {
                actionClasses: actionClasses,
                localSurvey: localSurvey,
                setLocalSurvey: setLocalSurvey,
                setOpen: setOpen
            })
        },
        {
            title: t("environments.surveys.edit.capture_new_action"),
            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(CreateNewActionTab/* CreateNewActionTab */.U, {
                actionClasses: actionClasses,
                setActionClasses: setActionClasses,
                setOpen: setOpen,
                isReadOnly: isReadOnly,
                setLocalSurvey: setLocalSurvey,
                environmentId: environmentId
            })
        }
    ];
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(modal_with_tabs/* ModalWithTabs */.O, {
        label: t("common.add_action"),
        description: t("environments.surveys.edit.capture_a_new_action_to_trigger_a_survey_on"),
        open: open,
        setOpen: setOpen,
        tabs: tabs,
        size: "md",
        closeOnOutsideClick: false,
        restrictOverflow: true
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/WhenToSendCard.tsx
/* __next_internal_client_entry_do_not_use__ WhenToSendCard auto */ 











const WhenToSendCard = ({ environmentId, localSurvey, setLocalSurvey, propActionClasses, membershipRole, projectPermission })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const [open, setOpen] = (0,react.useState)(localSurvey.type === "app" ? true : false);
    const [isAddActionModalOpen, setAddActionModalOpen] = (0,react.useState)(false);
    const [actionClasses, setActionClasses] = (0,react.useState)(propActionClasses);
    const [randomizerToggle, setRandomizerToggle] = (0,react.useState)(localSurvey.displayPercentage ? true : false);
    const { isMember } = (0,membership_utils/* getAccessFlags */.c)(membershipRole);
    const { hasReadAccess } = (0,teams/* getTeamPermissionFlags */.od)(projectPermission);
    const isReadOnly = isMember && hasReadAccess;
    const autoClose = localSurvey.autoClose !== null;
    const delay = localSurvey.delay !== 0;
    const handleRemoveTriggerEvent = (idx)=>{
        const updatedSurvey = {
            ...localSurvey
        };
        updatedSurvey.triggers = [
            ...localSurvey.triggers.slice(0, idx),
            ...localSurvey.triggers.slice(idx + 1)
        ];
        setLocalSurvey(updatedSurvey);
    };
    const handleAutoCloseToggle = ()=>{
        if (autoClose) {
            const updatedSurvey = {
                ...localSurvey,
                autoClose: null
            };
            setLocalSurvey(updatedSurvey);
        } else {
            const updatedSurvey = {
                ...localSurvey,
                autoClose: 10
            };
            setLocalSurvey(updatedSurvey);
        }
    };
    const handleDelayToggle = ()=>{
        if (delay) {
            const updatedSurvey = {
                ...localSurvey,
                delay: 0
            };
            setLocalSurvey(updatedSurvey);
        } else {
            const updatedSurvey = {
                ...localSurvey,
                delay: 5
            };
            setLocalSurvey(updatedSurvey);
        }
    };
    const handleDisplayPercentageToggle = ()=>{
        if (localSurvey.displayPercentage) {
            const updatedSurvey = {
                ...localSurvey,
                displayPercentage: null
            };
            setLocalSurvey(updatedSurvey);
        } else {
            const updatedSurvey = {
                ...localSurvey,
                displayPercentage: 50
            };
            setLocalSurvey(updatedSurvey);
        }
        setRandomizerToggle(!randomizerToggle);
    };
    const handleInputSeconds = (e)=>{
        let value = parseInt(e.target.value);
        if (value < 1 || Number.isNaN(value)) {
            value = 0;
        }
        const updatedSurvey = {
            ...localSurvey,
            autoClose: value
        };
        setLocalSurvey(updatedSurvey);
    };
    const handleTriggerDelay = (e)=>{
        let value = parseInt(e.target.value);
        if (value < 1 || Number.isNaN(value)) {
            value = 0;
        }
        const updatedSurvey = {
            ...localSurvey,
            delay: value
        };
        setLocalSurvey(updatedSurvey);
    };
    const handleRandomizerInput = (e)=>{
        let value = parseFloat(e.target.value);
        if (Number.isNaN(value)) {
            value = 0.01;
        }
        if (value < 0.01) value = 0.01;
        if (value > 100) value = 100;
        // Round value to two decimal places. eg: 10.555(and higher like 10.556) -> 10.56 and 10.554(and lower like 10.553) ->10.55
        value = Math.round(value * 100) / 100;
        const updatedSurvey = {
            ...localSurvey,
            displayPercentage: value
        };
        setLocalSurvey(updatedSurvey);
    };
    (0,react.useEffect)(()=>{
        if (localSurvey.type === "link") {
            setOpen(false);
        }
    }, [
        localSurvey.type
    ]);
    // Auto animate
    const [parent] = (0,auto_animate_react/* useAutoAnimate */.Q)();
    const containsEmptyTriggers = (0,react.useMemo)(()=>{
        return !localSurvey.triggers || !localSurvey.triggers.length || !localSurvey.triggers[0];
    }, [
        localSurvey
    ]);
    if (localSurvey.type === "link") {
        return null; // Hide card completely
    }
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_jsx_runtime.Fragment, {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* Root */.bL, {
                open: open,
                onOpenChange: (openState)=>{
                    if (localSurvey.type !== "link") {
                        setOpen(openState);
                    }
                },
                className: "w-full rounded-lg border border-slate-300 bg-white",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_collapsible_dist/* CollapsibleTrigger */.R6, {
                        asChild: true,
                        className: "h-full w-full cursor-pointer rounded-lg hover:bg-slate-50",
                        id: "whenToSendCardTrigger",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                            className: "inline-flex px-4 py-4",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                    className: "flex items-center pl-2 pr-5",
                                    children: containsEmptyTriggers ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                        className: "h-7 w-7 rounded-full border border-amber-500 bg-amber-50"
                                    }) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)(check/* default */.A, {
                                        strokeWidth: 3,
                                        className: "h-7 w-7 rounded-full border border-green-300 bg-green-100 p-1.5 text-green-600"
                                    })
                                }),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                            className: "font-semibold text-slate-800",
                                            children: t("environments.surveys.edit.survey_trigger")
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                            className: "mt-1 text-sm text-slate-500",
                                            children: t("environments.surveys.edit.choose_the_actions_which_trigger_the_survey")
                                        })
                                    ]
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(react_collapsible_dist/* CollapsibleContent */.Ke, {
                        className: "flex flex-col",
                        ref: parent,
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("hr", {
                                className: "py-1 text-slate-600"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                className: "px-3 pb-3 pt-1",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "filter-scrollbar flex flex-col gap-4 overflow-auto rounded-lg border border-slate-300 bg-slate-50 p-4",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                className: "text-sm font-semibold text-slate-800",
                                                children: t("environments.surveys.edit.trigger_survey_when_one_of_the_actions_is_fired")
                                            }),
                                            localSurvey.triggers.filter(Boolean).map((trigger, idx)=>{
                                                return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                    className: "flex items-center gap-2",
                                                    children: [
                                                        idx !== 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                            className: "ml-1 text-sm font-bold text-slate-700",
                                                            children: "or"
                                                        }),
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                            className: "flex grow items-center justify-between rounded-md border border-slate-300 bg-white p-2 px-3",
                                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                children: [
                                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                        className: "mt-1 flex items-center",
                                                                        children: [
                                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                                                className: "mr-1.5 h-4 w-4 text-slate-600",
                                                                                children: trigger.actionClass.type === "code" ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(code_xml/* default */.A, {
                                                                                    className: "h-4 w-4"
                                                                                }) : trigger.actionClass.type === "noCode" ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(mouse_pointer_click/* default */.A, {
                                                                                    className: "h-4 w-4"
                                                                                }) : trigger.actionClass.type === "automatic" ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)(sparkles/* default */.A, {
                                                                                    className: "h-4 w-4"
                                                                                }) : null
                                                                            }),
                                                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h4", {
                                                                                className: "text-sm font-semibold text-slate-600",
                                                                                children: trigger.actionClass.name
                                                                            })
                                                                        ]
                                                                    }),
                                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                                                        className: "mt-1 text-xs text-slate-500",
                                                                        children: [
                                                                            trigger.actionClass.description && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                                                                                className: "mr-1",
                                                                                children: trigger.actionClass.description
                                                                            }),
                                                                            trigger.actionClass.type === "code" && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("span", {
                                                                                className: "mr-1 border-l border-slate-400 pl-1 first:border-l-0 first:pl-0",
                                                                                children: [
                                                                                    t("environments.surveys.edit.key"),
                                                                                    ": ",
                                                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("b", {
                                                                                        children: trigger.actionClass.key
                                                                                    })
                                                                                ]
                                                                            }),
                                                                            trigger.actionClass.type === "noCode" && trigger.actionClass.noCodeConfig?.type === "click" && trigger.actionClass.noCodeConfig?.elementSelector.cssSelector && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("span", {
                                                                                className: "mr-1 border-l border-slate-400 pl-1 first:border-l-0 first:pl-0",
                                                                                children: [
                                                                                    t("environments.surveys.edit.css_selector"),
                                                                                    ":",
                                                                                    " ",
                                                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("b", {
                                                                                        children: trigger.actionClass.noCodeConfig?.elementSelector.cssSelector
                                                                                    })
                                                                                ]
                                                                            }),
                                                                            trigger.actionClass.type === "noCode" && trigger.actionClass.noCodeConfig?.type === "click" && trigger.actionClass.noCodeConfig?.elementSelector.innerHtml && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("span", {
                                                                                className: "mr-1 border-l border-slate-400 pl-1 first:border-l-0 first:pl-0",
                                                                                children: [
                                                                                    t("environments.surveys.edit.inner_text"),
                                                                                    ":",
                                                                                    " ",
                                                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("b", {
                                                                                        children: trigger.actionClass.noCodeConfig?.elementSelector.innerHtml
                                                                                    })
                                                                                ]
                                                                            }),
                                                                            trigger.actionClass.type === "noCode" && trigger.actionClass.noCodeConfig?.urlFilters && trigger.actionClass.noCodeConfig.urlFilters.length > 0 ? /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("span", {
                                                                                className: "mr-1 border-l border-slate-400 pl-1 first:border-l-0 first:pl-0",
                                                                                children: [
                                                                                    t("environments.surveys.edit.url_filters"),
                                                                                    ":",
                                                                                    " ",
                                                                                    trigger.actionClass.noCodeConfig.urlFilters.map((urlFilter, index)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("span", {
                                                                                            children: [
                                                                                                urlFilter.rule,
                                                                                                " ",
                                                                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)("b", {
                                                                                                    children: urlFilter.value
                                                                                                }),
                                                                                                trigger.actionClass.type === "noCode" && index !== (trigger.actionClass.noCodeConfig?.urlFilters?.length || 0) - 1 && ", "
                                                                                            ]
                                                                                        }, index))
                                                                                ]
                                                                            }) : null
                                                                        ]
                                                                    })
                                                                ]
                                                            })
                                                        }, trigger.actionClass.id),
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(trash_2/* default */.A, {
                                                            className: "h-4 w-4 cursor-pointer text-slate-600",
                                                            onClick: ()=>handleRemoveTriggerEvent(idx)
                                                        })
                                                    ]
                                                }, trigger.actionClass.id);
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                                                    variant: "secondary",
                                                    size: "sm",
                                                    onClick: ()=>{
                                                        setAddActionModalOpen(true);
                                                    },
                                                    children: [
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(plus/* default */.A, {
                                                            className: "mr-2 h-4 w-4"
                                                        }),
                                                        t("common.add_action")
                                                    ]
                                                })
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                        className: "mb-4 mt-8 space-y-1 px-4",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("h3", {
                                                className: "font-semibold text-slate-800",
                                                children: t("environments.surveys.edit.survey_display_settings")
                                            }),
                                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                                className: "text-sm text-slate-500",
                                                children: t("environments.surveys.edit.add_a_delay_or_auto_close_the_survey")
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                        htmlId: "delay",
                                        isChecked: delay,
                                        onToggle: handleDelayToggle,
                                        title: t("environments.surveys.edit.add_delay_before_showing_survey"),
                                        description: t("environments.surveys.edit.wait_a_few_seconds_after_the_trigger_before_showing_the_survey"),
                                        childBorder: true,
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("label", {
                                            htmlFor: "triggerDelay",
                                            className: "flex w-full cursor-pointer items-center rounded-lg border bg-slate-50 p-4",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                                children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                                    className: "text-sm font-semibold text-slate-700",
                                                    children: [
                                                        t("environments.surveys.edit.wait"),
                                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                            type: "number",
                                                            min: "0",
                                                            id: "triggerDelay",
                                                            value: localSurvey.delay.toString(),
                                                            onChange: (e)=>handleTriggerDelay(e),
                                                            className: "ml-2 mr-2 inline w-16 bg-white text-center text-sm"
                                                        }),
                                                        t("environments.surveys.edit.seconds_before_showing_the_survey")
                                                    ]
                                                })
                                            })
                                        })
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                        htmlId: "autoClose",
                                        isChecked: autoClose,
                                        onToggle: handleAutoCloseToggle,
                                        title: t("environments.surveys.edit.auto_close_on_inactivity"),
                                        description: t("environments.surveys.edit.automatically_close_the_survey_if_the_user_does_not_respond_after_certain_number_of_seconds"),
                                        childBorder: true,
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("label", {
                                            htmlFor: "autoCloseSeconds",
                                            className: "cursor-pointer p-4",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                                className: "text-sm font-semibold text-slate-700",
                                                children: [
                                                    t("environments.surveys.edit.automatically_close_survey_after"),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                        type: "number",
                                                        min: "1",
                                                        id: "autoCloseSeconds",
                                                        value: localSurvey.autoClose?.toString(),
                                                        onChange: (e)=>handleInputSeconds(e),
                                                        className: "mx-2 inline w-16 bg-white text-center text-sm"
                                                    }),
                                                    t("environments.surveys.edit.seconds_after_trigger_the_survey_will_be_closed_if_no_response")
                                                ]
                                            })
                                        })
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(advanced_option_toggle/* AdvancedOptionToggle */.S, {
                                        htmlId: "randomizer",
                                        isChecked: randomizerToggle,
                                        onToggle: handleDisplayPercentageToggle,
                                        title: t("environments.surveys.edit.show_survey_to_users"),
                                        description: t("environments.surveys.edit.only_display_the_survey_to_a_subset_of_the_users"),
                                        childBorder: true,
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("label", {
                                            htmlFor: "small-range",
                                            className: "cursor-pointer p-4",
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                                className: "text-sm font-semibold text-slate-700",
                                                children: [
                                                    t("environments.surveys.edit.show_to_x_percentage_of_targeted_users", {
                                                        percentage: localSurvey.displayPercentage
                                                    }),
                                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                                                        id: "small-range",
                                                        type: "number",
                                                        step: "0.01",
                                                        min: "0.01",
                                                        max: "100",
                                                        value: localSurvey.displayPercentage ?? "",
                                                        onChange: handleRandomizerInput,
                                                        className: "mx-2 inline w-20 bg-white text-center text-sm"
                                                    })
                                                ]
                                            })
                                        })
                                    })
                                ]
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(AddActionModal, {
                environmentId: environmentId,
                open: isAddActionModalOpen,
                setOpen: setAddActionModalOpen,
                actionClasses: actionClasses,
                setActionClasses: setActionClasses,
                isReadOnly: isReadOnly,
                localSurvey: localSurvey,
                setLocalSurvey: setLocalSurvey
            })
        ]
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/SettingsView.tsx








const SettingsView = ({ environment, localSurvey, setLocalSurvey, actionClasses, contactAttributeKeys, segments, responseCount, membershipRole, isUserTargetingAllowed = false, projectPermission, isFormbricksCloud })=>{
    const isAppSurvey = localSurvey.type === "app";
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "mt-12 space-y-3 p-5",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(HowToSendCard, {
                localSurvey: localSurvey,
                setLocalSurvey: setLocalSurvey,
                environment: environment
            }),
            localSurvey.type === "app" ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                children: isUserTargetingAllowed ? /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                    className: "relative",
                    children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "blur-none",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(TargetingCard, {
                            localSurvey: localSurvey,
                            setLocalSurvey: setLocalSurvey,
                            environmentId: environment.id,
                            contactAttributeKeys: contactAttributeKeys,
                            segments: segments,
                            initialSegment: segments.find((segment)=>segment.id === localSurvey.segment?.id)
                        }, localSurvey.segment?.id)
                    })
                }) : /*#__PURE__*/ (0,react_jsx_runtime.jsx)(TargetingLockedCard, {
                    isFormbricksCloud: isFormbricksCloud,
                    environmentId: environment.id
                })
            }) : null,
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(WhenToSendCard, {
                localSurvey: localSurvey,
                setLocalSurvey: setLocalSurvey,
                environmentId: environment.id,
                propActionClasses: actionClasses,
                membershipRole: membershipRole,
                projectPermission: projectPermission
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ResponseOptionsCard, {
                localSurvey: localSurvey,
                setLocalSurvey: setLocalSurvey,
                responseCount: responseCount
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(RecontactOptionsCard, {
                localSurvey: localSurvey,
                setLocalSurvey: setLocalSurvey,
                environmentId: environment.id
            }),
            isAppSurvey && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SurveyPlacementCard, {
                localSurvey: localSurvey,
                setLocalSurvey: setLocalSurvey,
                environmentId: environment.id
            })
        ]
    });
};

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/rotate-ccw.js
var rotate_ccw = __webpack_require__(560889);
// EXTERNAL MODULE: ../../packages/lib/styling/constants.ts
var constants = __webpack_require__(361414);
// EXTERNAL MODULE: ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/BackgroundStylingCard.tsx + 7 modules
var BackgroundStylingCard = __webpack_require__(80558);
// EXTERNAL MODULE: ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/CardStylingSettings.tsx + 4 modules
var CardStylingSettings = __webpack_require__(979493);
// EXTERNAL MODULE: ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/FormStylingSettings.tsx + 1 modules
var FormStylingSettings = __webpack_require__(200999);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/StylingView.tsx
/* __next_internal_client_entry_do_not_use__ StylingView auto */ 














const StylingView = ({ colors, environment, project, localSurvey, setLocalSurvey, setStyling, styling, localStylingChanges, setLocalStylingChanges, isUnsplashConfigured, isCxMode })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const form = (0,index_esm/* useForm */.mN)({
        defaultValues: {
            ...constants/* defaultStyling */.O,
            ...project.styling,
            ...localSurvey.styling
        }
    });
    const overwriteThemeStyling = form.watch("overwriteThemeStyling");
    const setOverwriteThemeStyling = (value)=>form.setValue("overwriteThemeStyling", value);
    const [formStylingOpen, setFormStylingOpen] = (0,react.useState)(false);
    const [cardStylingOpen, setCardStylingOpen] = (0,react.useState)(false);
    const [stylingOpen, setStylingOpen] = (0,react.useState)(false);
    const [confirmResetStylingModalOpen, setConfirmResetStylingModalOpen] = (0,react.useState)(false);
    const onResetThemeStyling = ()=>{
        const { allowStyleOverwrite, ...baseStyling } = project.styling ?? {};
        setStyling({
            ...baseStyling,
            overwriteThemeStyling: true
        });
        form.reset({
            ...baseStyling,
            overwriteThemeStyling: true
        });
        setConfirmResetStylingModalOpen(false);
        dist/* default */.Ay.success(t("environments.surveys.edit.styling_set_to_theme_styles"));
    };
    (0,react.useEffect)(()=>{
        if (!overwriteThemeStyling) {
            setFormStylingOpen(false);
            setCardStylingOpen(false);
            setStylingOpen(false);
        }
    }, [
        overwriteThemeStyling
    ]);
    (0,react.useEffect)(()=>{
        const subscription = form.watch((data)=>{
            setLocalSurvey((prev)=>({
                    ...prev,
                    styling: {
                        ...prev.styling,
                        ...data
                    }
                }));
        });
        return ()=>subscription.unsubscribe();
    }, [
        form,
        setLocalSurvey
    ]);
    const defaultProjectStyling = (0,react.useMemo)(()=>{
        const { styling: projectStyling } = project;
        const { allowStyleOverwrite, ...baseStyling } = projectStyling ?? {};
        return baseStyling;
    }, [
        project
    ]);
    const handleOverwriteToggle = (value)=>{
        // survey styling from the server is surveyStyling, it could either be set or not
        // if its set and the toggle is turned off, we set the local styling to the server styling
        setOverwriteThemeStyling(value);
        // if the toggle is turned on, we set the local styling to the project styling
        if (value) {
            if (!styling) {
                // copy the project styling to the survey styling
                setStyling({
                    ...defaultProjectStyling,
                    overwriteThemeStyling: true
                });
                return;
            }
            // if there are local styling changes, we set the styling to the local styling changes that were previously stored
            if (localStylingChanges) {
                setStyling(localStylingChanges);
            } else {
                setStyling({
                    ...defaultProjectStyling,
                    overwriteThemeStyling: true
                });
            }
        } else {
            // copy the styling to localStylingChanges
            setLocalStylingChanges(styling);
            // copy the project styling to the survey styling
            setStyling({
                ...defaultProjectStyling,
                overwriteThemeStyling: false
            });
        }
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormProvider */.Op, {
        ...form,
        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("form", {
            onSubmit: (e)=>e.preventDefault(),
            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-12 space-y-3 p-5",
                children: [
                    !isCxMode && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "flex items-center gap-4 py-4",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormField */.zB, {
                            control: form.control,
                            name: "overwriteThemeStyling",
                            render: ({ field })=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_form/* FormItem */.eI, {
                                    className: "flex items-center gap-2 space-y-0",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormControl */.MJ, {
                                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_switch/* Switch */.d, {
                                                checked: !!field.value,
                                                onCheckedChange: handleOverwriteToggle
                                            })
                                        }),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormLabel */.lR, {
                                                    className: "text-base font-semibold text-slate-900",
                                                    children: t("environments.surveys.edit.add_custom_styles")
                                                }),
                                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_form/* FormDescription */.Rr, {
                                                    className: "text-sm text-slate-800",
                                                    children: t("environments.surveys.edit.override_theme_with_individual_styles_for_this_survey")
                                                })
                                            ]
                                        })
                                    ]
                                })
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(FormStylingSettings/* FormStylingSettings */.Y, {
                        open: formStylingOpen,
                        setOpen: setFormStylingOpen,
                        disabled: !overwriteThemeStyling,
                        form: form
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(CardStylingSettings/* CardStylingSettings */.a, {
                        open: cardStylingOpen,
                        setOpen: setCardStylingOpen,
                        surveyType: localSurvey.type,
                        disabled: !overwriteThemeStyling,
                        project: project,
                        form: form
                    }),
                    localSurvey.type === "link" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(BackgroundStylingCard/* BackgroundStylingCard */.X, {
                        open: stylingOpen,
                        setOpen: setStylingOpen,
                        environmentId: environment.id,
                        colors: colors,
                        disabled: !overwriteThemeStyling,
                        isUnsplashConfigured: isUnsplashConfigured,
                        form: form
                    }),
                    !isCxMode && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "mt-4 flex h-8 items-center justify-between",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                children: overwriteThemeStyling && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                                    type: "button",
                                    variant: "ghost",
                                    className: "flex items-center gap-2",
                                    onClick: ()=>setConfirmResetStylingModalOpen(true),
                                    children: [
                                        t("environments.surveys.edit.reset_to_theme_styles"),
                                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(rotate_ccw/* default */.A, {
                                            className: "h-4 w-4"
                                        })
                                    ]
                                })
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                                className: "text-sm text-slate-500",
                                children: [
                                    t("environments.surveys.edit.adjust_the_theme_in_the"),
                                    " ",
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)((link_default()), {
                                        href: `/environments/${environment.id}/project/look`,
                                        target: "_blank",
                                        className: "font-semibold underline",
                                        children: t("common.look_and_feel")
                                    }),
                                    " ",
                                    t("common.settings")
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(alert_dialog/* AlertDialog */.L, {
                        open: confirmResetStylingModalOpen,
                        setOpen: setConfirmResetStylingModalOpen,
                        headerText: t("environments.surveys.edit.reset_to_theme_styles"),
                        mainText: t("environments.surveys.edit.reset_to_theme_styles_main_text"),
                        confirmBtnLabel: t("common.confirm"),
                        onDecline: ()=>setConfirmResetStylingModalOpen(false),
                        onConfirm: onResetThemeStyling
                    })
                ]
            })
        })
    });
};

;// ../../node_modules/lucide-react/dist/esm/icons/crown.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Crown = (0,createLucideIcon/* default */.A)("Crown", [
    [
        "path",
        {
            d: "M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z",
            key: "1vdc57"
        }
    ],
    [
        "path",
        {
            d: "M5 21h14",
            key: "11awu3"
        }
    ]
]);
 //# sourceMappingURL=crown.js.map

;// ./modules/ui/components/pro-badge/index.tsx


const ProBadge = ()=>{
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "ml-2 flex items-center justify-center rounded-lg border border-slate-200 bg-slate-100 p-0.5 text-slate-500",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Crown, {
                className: "h-3 w-3"
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("span", {
                className: "ml-1 text-xs",
                children: "PRO"
            })
        ]
    });
};

;// ../../node_modules/lucide-react/dist/esm/icons/paintbrush.js
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Paintbrush = (0,createLucideIcon/* default */.A)("Paintbrush", [
    [
        "path",
        {
            d: "m14.622 17.897-10.68-2.913",
            key: "vj2p1u"
        }
    ],
    [
        "path",
        {
            d: "M18.376 2.622a1 1 0 1 1 3.002 3.002L17.36 9.643a.5.5 0 0 0 0 .707l.944.944a2.41 2.41 0 0 1 0 3.408l-.944.944a.5.5 0 0 1-.707 0L8.354 7.348a.5.5 0 0 1 0-.707l.944-.944a2.41 2.41 0 0 1 3.408 0l.944.944a.5.5 0 0 0 .707 0z",
            key: "18tc5c"
        }
    ],
    [
        "path",
        {
            d: "M9 8c-1.804 2.71-3.97 3.46-6.583 3.948a.507.507 0 0 0-.302.819l7.32 8.883a1 1 0 0 0 1.185.204C12.735 20.405 16 16.792 16 15",
            key: "ytzfxy"
        }
    ]
]);
 //# sourceMappingURL=paintbrush.js.map

// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/settings.js
var settings = __webpack_require__(174753);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/SurveyEditorTabs.tsx
/* __next_internal_client_entry_do_not_use__ SurveyEditorTabs auto */ 





const SurveyEditorTabs = ({ activeId, setActiveId, isStylingTabVisible, isCxMode, isSurveyFollowUpsAllowed = false })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const tabsComputed = (0,react.useMemo)(()=>{
        const tabs = [
            {
                id: "questions",
                label: t("common.questions"),
                icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(rows_3/* default */.A, {
                    className: "h-5 w-5"
                })
            },
            {
                id: "styling",
                label: t("common.styling"),
                icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(Paintbrush, {
                    className: "h-5 w-5"
                })
            },
            {
                id: "settings",
                label: t("common.settings"),
                icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(settings/* default */.A, {
                    className: "h-5 w-5"
                })
            },
            {
                id: "followUps",
                label: t("environments.surveys.edit.follow_ups"),
                icon: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(mail/* default */.A, {
                    className: "h-5 w-5"
                }),
                isPro: !isSurveyFollowUpsAllowed
            }
        ];
        if (isStylingTabVisible) {
            return tabs;
        }
        return tabs.filter((tab)=>tab.id !== "styling");
    }, [
        isStylingTabVisible,
        isSurveyFollowUpsAllowed
    ]);
    // Hide settings tab in CX mode
    let tabsToDisplay = isCxMode ? tabsComputed.filter((tab)=>tab.id !== "settings") : tabsComputed;
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
        className: "fixed z-30 flex h-12 w-full items-center justify-center border-b bg-white md:w-1/2",
        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("nav", {
            className: "flex h-full items-center space-x-4",
            "aria-label": "Tabs",
            children: tabsToDisplay.map((tab)=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("button", {
                    type: "button",
                    onClick: ()=>setActiveId(tab.id),
                    className: (0,lib_cn.cn)(tab.id === activeId ? "border-brand-dark font-semibold text-slate-900" : "border-transparent text-slate-500 hover:text-slate-700", "flex h-full items-center border-b-2 px-3 text-sm font-medium"),
                    "aria-current": tab.id === activeId ? "page" : undefined,
                    children: [
                        tab.icon && /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "mr-2 h-5 w-5",
                            children: tab.icon
                        }),
                        tab.label,
                        tab.isPro && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(ProBadge, {})
                    ]
                }, tab.id))
        })
    });
};

// EXTERNAL MODULE: ./lib/utils/helper.ts
var helper = __webpack_require__(856763);
// EXTERNAL MODULE: ../../node_modules/lodash/isEqual.js
var isEqual = __webpack_require__(628177);
var isEqual_default = /*#__PURE__*/__webpack_require__.n(isEqual);
// EXTERNAL MODULE: ../../node_modules/lucide-react/dist/esm/icons/arrow-left.js
var arrow_left = __webpack_require__(681129);
;// ../../node_modules/next/dist/build/webpack/loaders/next-flight-server-reference-proxy-loader.js?id=7f6f190ac6fd08333ac9d50baa5d128e0933520390&name=updateSurveyAction!

const updateSurveyAction = /*#__PURE__*/(0,action_client_wrapper.createServerReference)("7f6f190ac6fd08333ac9d50baa5d128e0933520390", action_client_wrapper.callServer, undefined, action_client_wrapper.findSourceMapURL, "updateSurveyAction")
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/SurveyMenuBar.tsx
/* __next_internal_client_entry_do_not_use__ SurveyMenuBar auto */ 
















const SurveyMenuBar = ({ localSurvey, survey, environment, setLocalSurvey, activeId, setActiveId, setInvalidQuestions, project, responseCount, selectedLanguageCode, isCxMode, locale })=>{
    const { t } = (0,tolgee_react_esm/* useTranslate */.WD)();
    const router = (0,navigation.useRouter)();
    const [audiencePrompt, setAudiencePrompt] = (0,react.useState)(true);
    const [isLinkSurvey, setIsLinkSurvey] = (0,react.useState)(true);
    const [isConfirmDialogOpen, setConfirmDialogOpen] = (0,react.useState)(false);
    const [isSurveyPublishing, setIsSurveyPublishing] = (0,react.useState)(false);
    const [isSurveySaving, setIsSurveySaving] = (0,react.useState)(false);
    const cautionText = t("environments.surveys.edit.caution_text");
    (0,react.useEffect)(()=>{
        if (audiencePrompt && activeId === "settings") {
            setAudiencePrompt(false);
        }
    }, [
        activeId,
        audiencePrompt
    ]);
    (0,react.useEffect)(()=>{
        setIsLinkSurvey(localSurvey.type === "link");
    }, [
        localSurvey.type
    ]);
    (0,react.useEffect)(()=>{
        const warningText = t("environments.surveys.edit.unsaved_changes_warning");
        const handleWindowClose = (e)=>{
            if (!isEqual_default()(localSurvey, survey)) {
                e.preventDefault();
                return e.returnValue = warningText;
            }
        };
        window.addEventListener("beforeunload", handleWindowClose);
        return ()=>{
            window.removeEventListener("beforeunload", handleWindowClose);
        };
    }, [
        localSurvey,
        survey,
        t
    ]);
    const clearSurveyLocalStorage = ()=>{
        if (typeof localStorage !== "undefined") {
            localStorage.removeItem(`${localSurvey.id}-columnOrder`);
            localStorage.removeItem(`${localSurvey.id}-columnVisibility`);
        }
    };
    const containsEmptyTriggers = (0,react.useMemo)(()=>{
        if (localSurvey.type === "link") return false;
        const noTriggers = !localSurvey.triggers || localSurvey.triggers.length === 0 || !localSurvey.triggers[0];
        if (noTriggers) return true;
        return false;
    }, [
        localSurvey
    ]);
    const disableSave = (0,react.useMemo)(()=>{
        if (isSurveySaving) return true;
        if (localSurvey.status !== "draft" && containsEmptyTriggers) return true;
    }, [
        containsEmptyTriggers,
        isSurveySaving,
        localSurvey.status
    ]);
    const handleBack = ()=>{
        const { updatedAt, ...localSurveyRest } = localSurvey;
        const { updatedAt: _, ...surveyRest } = survey;
        if (!isEqual_default()(localSurveyRest, surveyRest)) {
            setConfirmDialogOpen(true);
        } else {
            router.back();
        }
    };
    const handleTemporarySegment = async ()=>{
        if (localSurvey.segment && localSurvey.type === "app" && localSurvey.segment?.id === "temp") {
            const { filters } = localSurvey.segment;
            // create a new private segment
            const newSegment = await (0,next_flight_server_reference_proxy_loaderid_7f5f67ef7357726711b163b717490966a69d2206c9_name_createSegmentAction_/* createSegmentAction */.W)({
                environmentId: localSurvey.environmentId,
                filters,
                isPrivate: true,
                surveyId: localSurvey.id,
                title: localSurvey.id
            });
            return newSegment?.data;
        }
    };
    const handleSegmentUpdate = async ()=>{
        if (localSurvey.segment && localSurvey.segment.id === "temp") {
            const segment = await handleTemporarySegment();
            return segment ?? null;
        }
        return localSurvey.segment;
    };
    const validateSurveyWithZod = ()=>{
        const localSurveyValidation = types/* ZSurvey */.pf.safeParse(localSurvey);
        if (!localSurveyValidation.success) {
            const currentError = localSurveyValidation.error.errors[0];
            if (currentError.path[0] === "questions") {
                const questionIdx = currentError.path[1];
                const question = localSurvey.questions[questionIdx];
                if (question) {
                    setInvalidQuestions((prevInvalidQuestions)=>prevInvalidQuestions ? [
                            ...prevInvalidQuestions,
                            question.id
                        ] : [
                            question.id
                        ]);
                }
            } else if (currentError.path[0] === "welcomeCard") {
                setInvalidQuestions((prevInvalidQuestions)=>prevInvalidQuestions ? [
                        ...prevInvalidQuestions,
                        "start"
                    ] : [
                        "start"
                    ]);
            } else if (currentError.path[0] === "endings") {
                const endingIdx = typeof currentError.path[1] === "number" ? currentError.path[1] : -1;
                setInvalidQuestions((prevInvalidQuestions)=>prevInvalidQuestions ? [
                        ...prevInvalidQuestions,
                        localSurvey.endings[endingIdx].id
                    ] : [
                        localSurvey.endings[endingIdx].id
                    ]);
            }
            if (currentError.code === "custom") {
                const params = currentError.params ?? {};
                if (params.invalidLanguageCodes && params.invalidLanguageCodes.length) {
                    const invalidLanguageLabels = params.invalidLanguageCodes.map((invalidLanguage)=>(0,utils/* getLanguageLabel */.rJ)(invalidLanguage, locale) ?? invalidLanguage);
                    const messageSplit = currentError.message.split("-fLang-")[0];
                    dist/* default */.Ay.error(`${messageSplit} ${invalidLanguageLabels.join(", ")}`);
                } else {
                    dist/* default */.Ay.error(currentError.message, {
                        className: "w-fit !max-w-md"
                    });
                }
                return false;
            }
            dist/* default */.Ay.error(currentError.message);
            return false;
        }
        return true;
    };
    const handleSurveySave = async ()=>{
        setIsSurveySaving(true);
        const isSurveyValidatedWithZod = validateSurveyWithZod();
        if (!isSurveyValidatedWithZod) {
            setIsSurveySaving(false);
            return false;
        }
        try {
            const isSurveyValidResult = isSurveyValid(localSurvey, selectedLanguageCode, t);
            if (!isSurveyValidResult) {
                setIsSurveySaving(false);
                return false;
            }
            localSurvey.questions = localSurvey.questions.map((question)=>{
                const { isDraft, ...rest } = question;
                return rest;
            });
            localSurvey.endings = localSurvey.endings.map((ending)=>{
                if (ending.type === "redirectToUrl") {
                    return types/* ZSurveyRedirectUrlCard */.GJ.parse(ending);
                } else {
                    return types/* ZSurveyEndScreenCard */.gA.parse(ending);
                }
            });
            if (localSurvey.type !== "link" && !localSurvey.triggers?.length) {
                dist/* default */.Ay.error(t("environments.surveys.edit.please_set_a_survey_trigger"));
                setIsSurveySaving(false);
                return false;
            }
            const segment = await handleSegmentUpdate();
            clearSurveyLocalStorage();
            const updatedSurveyResponse = await updateSurveyAction({
                ...localSurvey,
                segment
            });
            setIsSurveySaving(false);
            if (updatedSurveyResponse?.data) {
                setLocalSurvey(updatedSurveyResponse.data);
                dist/* default */.Ay.success(t("environments.surveys.edit.changes_saved"));
            } else {
                const errorMessage = (0,helper/* getFormattedErrorMessage */.g3)(updatedSurveyResponse);
                dist/* default */.Ay.error(errorMessage);
                return false;
            }
            return true;
        } catch (e) {
            console.error(e);
            setIsSurveySaving(false);
            dist/* default */.Ay.error(t("environments.surveys.edit.error_saving_changes"));
            return false;
        }
    };
    const handleSaveAndGoBack = async ()=>{
        const isSurveySaved = await handleSurveySave();
        if (isSurveySaved) {
            router.back();
        }
    };
    const handleSurveyPublish = async ()=>{
        setIsSurveyPublishing(true);
        const isSurveyValidatedWithZod = validateSurveyWithZod();
        if (!isSurveyValidatedWithZod) {
            setIsSurveyPublishing(false);
            return;
        }
        try {
            const isSurveyValidResult = isSurveyValid(localSurvey, selectedLanguageCode, t);
            if (!isSurveyValidResult) {
                setIsSurveyPublishing(false);
                return;
            }
            const status = localSurvey.runOnDate ? "scheduled" : "inProgress";
            const segment = await handleSegmentUpdate();
            clearSurveyLocalStorage();
            await updateSurveyAction({
                ...localSurvey,
                status,
                segment
            });
            setIsSurveyPublishing(false);
            router.push(`/environments/${environment.id}/surveys/${localSurvey.id}/summary?success=true`);
        } catch (error) {
            console.error(error);
            dist/* default */.Ay.error(t("environments.surveys.edit.error_publishing_survey"));
            setIsSurveyPublishing(false);
        }
    };
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(react_jsx_runtime.Fragment, {
        children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
            className: "border-b border-slate-200 bg-white px-5 py-2.5 sm:flex sm:items-center sm:justify-between",
            children: [
                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "flex h-full items-center space-x-2 whitespace-nowrap",
                    children: [
                        !isCxMode && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                            size: "sm",
                            variant: "secondary",
                            className: "h-full",
                            onClick: ()=>{
                                handleBack();
                            },
                            children: [
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(arrow_left/* default */.A, {}),
                                t("common.back")
                            ]
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("p", {
                            className: "hidden pl-4 font-semibold md:block",
                            children: [
                                project.name,
                                " / "
                            ]
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(input/* Input */.p, {
                            defaultValue: localSurvey.name,
                            onChange: (e)=>{
                                const updatedSurvey = {
                                    ...localSurvey,
                                    name: e.target.value
                                };
                                setLocalSurvey(updatedSurvey);
                            },
                            className: "h-8 w-72 border-white py-0 hover:border-slate-200"
                        })
                    ]
                }),
                responseCount > 0 && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "flex items-center rounded-lg border border-amber-200 bg-amber-100 p-1.5 text-amber-800 shadow-sm lg:mx-auto",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipProvider */.Bc, {
                            delayDuration: 50,
                            children: /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(tooltip/* Tooltip */.m_, {
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipTrigger */.k$, {
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(triangle_alert/* default */.A, {
                                            className: "h-5 w-5 text-amber-400"
                                        })
                                    }),
                                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)(tooltip/* TooltipContent */.ZI, {
                                        side: "top",
                                        className: "lg:hidden",
                                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                                            className: "py-2 text-center text-xs text-slate-500 dark:text-slate-400",
                                            children: cautionText
                                        })
                                    })
                                ]
                            })
                        }),
                        /*#__PURE__*/ (0,react_jsx_runtime.jsx)("p", {
                            className: "hidden text-ellipsis whitespace-nowrap pl-1.5 text-xs md:text-sm lg:block",
                            children: cautionText
                        })
                    ]
                }),
                /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                    className: "mt-3 flex sm:ml-4 sm:mt-0",
                    children: [
                        !isCxMode && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                            disabled: disableSave,
                            variant: "secondary",
                            size: "sm",
                            className: "mr-3",
                            loading: isSurveySaving,
                            onClick: ()=>handleSurveySave(),
                            type: "submit",
                            children: t("common.save")
                        }),
                        localSurvey.status !== "draft" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                            disabled: disableSave,
                            className: "mr-3",
                            size: "sm",
                            loading: isSurveySaving,
                            onClick: ()=>handleSaveAndGoBack(),
                            children: t("environments.surveys.edit.save_and_close")
                        }),
                        localSurvey.status === "draft" && audiencePrompt && !isLinkSurvey && /*#__PURE__*/ (0,react_jsx_runtime.jsxs)(components_button/* Button */.$, {
                            size: "sm",
                            onClick: ()=>{
                                setAudiencePrompt(false);
                                setActiveId("settings");
                            },
                            children: [
                                t("environments.surveys.edit.continue_to_settings"),
                                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(settings/* default */.A, {})
                            ]
                        }),
                        localSurvey.status === "draft" && (!audiencePrompt || isLinkSurvey) && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(components_button/* Button */.$, {
                            size: "sm",
                            disabled: isSurveySaving || containsEmptyTriggers,
                            loading: isSurveyPublishing,
                            onClick: handleSurveyPublish,
                            children: isCxMode ? t("environments.surveys.edit.save_and_close") : t("environments.surveys.edit.publish")
                        })
                    ]
                }),
                /*#__PURE__*/ (0,react_jsx_runtime.jsx)(alert_dialog/* AlertDialog */.L, {
                    headerText: t("environments.surveys.edit.confirm_survey_changes"),
                    open: isConfirmDialogOpen,
                    setOpen: setConfirmDialogOpen,
                    mainText: t("environments.surveys.edit.unsaved_changes_warning"),
                    confirmBtnLabel: t("common.save"),
                    declineBtnLabel: t("common.discard"),
                    declineBtnVariant: "destructive",
                    onDecline: ()=>{
                        setConfirmDialogOpen(false);
                        router.back();
                    },
                    onConfirm: ()=>handleSaveAndGoBack()
                })
            ]
        })
    });
};

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/SurveyEditor.tsx
/* __next_internal_client_entry_do_not_use__ SurveyEditor auto */ 













const SurveyEditor = ({ survey, project, environment, actionClasses, contactAttributeKeys, segments, responseCount, membershipRole, colors, isMultiLanguageAllowed, isUserTargetingAllowed = false, isFormbricksCloud, isUnsplashConfigured, plan, isCxMode = false, locale, projectPermission, mailFrom, isSurveyFollowUpsAllowed = false, userEmail })=>{
    const [activeView, setActiveView] = (0,react.useState)("questions");
    const [activeQuestionId, setActiveQuestionId] = (0,react.useState)(null);
    const [localSurvey, setLocalSurvey] = (0,react.useState)(()=>(0,pollyfills_structuredClone/* structuredClone */.p)(survey));
    const [invalidQuestions, setInvalidQuestions] = (0,react.useState)(null);
    const [selectedLanguageCode, setSelectedLanguageCode] = (0,react.useState)("default");
    const surveyEditorRef = (0,react.useRef)(null);
    const [localProject, setLocalProject] = (0,react.useState)(project);
    const [styling, setStyling] = (0,react.useState)(localSurvey?.styling);
    const [localStylingChanges, setLocalStylingChanges] = (0,react.useState)(null);
    const fetchLatestProject = (0,react.useCallback)(async ()=>{
        const refetchProjectResponse = await refetchProjectAction({
            projectId: localProject.id
        });
        if (refetchProjectResponse?.data) {
            setLocalProject(refetchProjectResponse.data);
        }
    }, [
        localProject.id
    ]);
    useDocumentVisibility(fetchLatestProject);
    (0,react.useEffect)(()=>{
        if (survey) {
            if (localSurvey) return;
            const surveyClone = (0,pollyfills_structuredClone/* structuredClone */.p)(survey);
            setLocalSurvey(surveyClone);
            if (survey.questions.length > 0) {
                setActiveQuestionId(survey.questions[0].id);
            }
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        survey
    ]);
    (0,react.useEffect)(()=>{
        const listener = ()=>{
            if (document.visibilityState === "visible") {
                const fetchLatestProject = async ()=>{
                    const refetchProjectResponse = await refetchProjectAction({
                        projectId: localProject.id
                    });
                    if (refetchProjectResponse?.data) {
                        setLocalProject(refetchProjectResponse.data);
                    }
                };
                fetchLatestProject();
            }
        };
        document.addEventListener("visibilitychange", listener);
        return ()=>{
            document.removeEventListener("visibilitychange", listener);
        };
    }, [
        localProject.id
    ]);
    // when the survey type changes, we need to reset the active question id to the first question
    (0,react.useEffect)(()=>{
        if (localSurvey?.questions?.length && localSurvey.questions.length > 0) {
            setActiveQuestionId(localSurvey.questions[0].id);
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        localSurvey?.type,
        survey?.questions
    ]);
    (0,react.useEffect)(()=>{
        if (!localSurvey?.languages) return;
        const enabledLanguageCodes = (0,utils/* extractLanguageCodes */.OJ)((0,utils/* getEnabledLanguages */.rc)(localSurvey.languages ?? []));
        if (!enabledLanguageCodes.includes(selectedLanguageCode)) {
            setSelectedLanguageCode("default");
        }
    }, [
        localSurvey?.languages,
        selectedLanguageCode
    ]);
    if (!localSurvey) {
        return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LoadingSkeleton, {});
    }
    return /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "flex h-full w-full flex-col",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SurveyMenuBar, {
                setLocalSurvey: setLocalSurvey,
                localSurvey: localSurvey,
                survey: survey,
                environment: environment,
                activeId: activeView,
                setActiveId: setActiveView,
                setInvalidQuestions: setInvalidQuestions,
                project: localProject,
                responseCount: responseCount,
                selectedLanguageCode: selectedLanguageCode,
                setSelectedLanguageCode: setSelectedLanguageCode,
                isCxMode: isCxMode,
                locale: locale
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "relative z-0 flex flex-1 overflow-hidden",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("main", {
                        className: "relative z-0 w-1/2 flex-1 overflow-y-auto bg-slate-50 focus:outline-none",
                        ref: surveyEditorRef,
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SurveyEditorTabs, {
                                activeId: activeView,
                                setActiveId: setActiveView,
                                isCxMode: isCxMode,
                                isStylingTabVisible: !!project.styling.allowStyleOverwrite,
                                isSurveyFollowUpsAllowed: isSurveyFollowUpsAllowed
                            }),
                            activeView === "questions" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(QuestionsView, {
                                localSurvey: localSurvey,
                                setLocalSurvey: setLocalSurvey,
                                activeQuestionId: activeQuestionId,
                                setActiveQuestionId: setActiveQuestionId,
                                project: localProject,
                                invalidQuestions: invalidQuestions,
                                setInvalidQuestions: setInvalidQuestions,
                                selectedLanguageCode: selectedLanguageCode ? selectedLanguageCode : "default",
                                setSelectedLanguageCode: setSelectedLanguageCode,
                                isMultiLanguageAllowed: isMultiLanguageAllowed,
                                isFormbricksCloud: isFormbricksCloud,
                                plan: plan,
                                isCxMode: isCxMode,
                                locale: locale
                            }),
                            activeView === "styling" && project.styling.allowStyleOverwrite && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(StylingView, {
                                colors: colors,
                                environment: environment,
                                localSurvey: localSurvey,
                                setLocalSurvey: setLocalSurvey,
                                project: localProject,
                                styling: styling ?? null,
                                setStyling: setStyling,
                                localStylingChanges: localStylingChanges,
                                setLocalStylingChanges: setLocalStylingChanges,
                                isUnsplashConfigured: isUnsplashConfigured,
                                isCxMode: isCxMode
                            }),
                            activeView === "settings" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SettingsView, {
                                environment: environment,
                                localSurvey: localSurvey,
                                setLocalSurvey: setLocalSurvey,
                                actionClasses: actionClasses,
                                contactAttributeKeys: contactAttributeKeys,
                                segments: segments,
                                responseCount: responseCount,
                                membershipRole: membershipRole,
                                isUserTargetingAllowed: isUserTargetingAllowed,
                                projectPermission: projectPermission,
                                isFormbricksCloud: isFormbricksCloud
                            }),
                            activeView === "followUps" && /*#__PURE__*/ (0,react_jsx_runtime.jsx)(FollowUpsView, {
                                localSurvey: localSurvey,
                                setLocalSurvey: setLocalSurvey,
                                selectedLanguageCode: selectedLanguageCode,
                                mailFrom: mailFrom,
                                isSurveyFollowUpsAllowed: isSurveyFollowUpsAllowed,
                                userEmail: userEmail,
                                locale: locale
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("aside", {
                        className: "group hidden flex-1 flex-shrink-0 items-center justify-center overflow-hidden border-l border-slate-200 bg-slate-100 shadow-inner md:flex md:flex-col",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)(preview_survey/* PreviewSurvey */.V, {
                            survey: localSurvey,
                            questionId: activeQuestionId,
                            project: localProject,
                            environment: environment,
                            previewType: localSurvey.type === "app" ? "modal" : "fullwidth",
                            languageCode: selectedLanguageCode,
                            onFileUpload: async (file)=>file.name
                        })
                    })
                ]
            })
        ]
    });
};


/***/ }),

/***/ 708171:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JJ: () => (/* binding */ TeamPermissionMapping),
/* harmony export */   V$: () => (/* binding */ getTeamAccessFlags),
/* harmony export */   od: () => (/* binding */ getTeamPermissionFlags)
/* harmony export */ });
/* unused harmony export TeamRoleMapping */
/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(896330);
/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);

const TeamPermissionMapping = {
    [_prisma_client__WEBPACK_IMPORTED_MODULE_0__.ProjectTeamPermission.read]: "Read",
    [_prisma_client__WEBPACK_IMPORTED_MODULE_0__.ProjectTeamPermission.readWrite]: "Read & write",
    [_prisma_client__WEBPACK_IMPORTED_MODULE_0__.ProjectTeamPermission.manage]: "Manage"
};
const TeamRoleMapping = {
    [_prisma_client__WEBPACK_IMPORTED_MODULE_0__.TeamUserRole.admin]: "Team Admin",
    [_prisma_client__WEBPACK_IMPORTED_MODULE_0__.TeamUserRole.contributor]: "Contributor"
};
const getTeamAccessFlags = (role)=>{
    const isAdmin = role === _prisma_client__WEBPACK_IMPORTED_MODULE_0__.TeamUserRole.admin;
    const isContributor = role === _prisma_client__WEBPACK_IMPORTED_MODULE_0__.TeamUserRole.contributor;
    return {
        isAdmin,
        isContributor
    };
};
const getTeamPermissionFlags = (permissionLevel)=>{
    const hasReadAccess = permissionLevel === _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ProjectTeamPermission.read;
    const hasReadWriteAccess = permissionLevel === _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ProjectTeamPermission.readWrite;
    const hasManageAccess = permissionLevel === _prisma_client__WEBPACK_IMPORTED_MODULE_0__.ProjectTeamPermission.manage;
    return {
        hasReadAccess,
        hasReadWriteAccess,
        hasManageAccess
    };
};


/***/ }),

/***/ 661989:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ Badge)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(983773);


const Badge = ({ text, type, size, className })=>{
    const bgColor = {
        warning: "bg-amber-100",
        success: "bg-emerald-100",
        error: "bg-red-100",
        gray: "bg-slate-100"
    };
    const borderColor = {
        warning: "border-amber-200",
        success: "border-emerald-200",
        error: "border-red-200",
        gray: "border-slate-200"
    };
    const textColor = {
        warning: "text-amber-800",
        success: "text-emerald-800",
        error: "text-red-800",
        gray: "text-slate-600"
    };
    const padding = {
        tiny: "px-1.5 py-0.5",
        normal: "px-2.5 py-0.5",
        large: "px-3.5 py-1"
    };
    const textSize = size === "large" ? "text-sm" : "text-xs";
    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", {
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_1__.cn)("inline-flex cursor-default items-center rounded-full border font-medium", bgColor[type], borderColor[type], textColor[type], padding[size], textSize, className),
        children: text
    });
};


/***/ }),

/***/ 879387:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   S: () => (/* binding */ Checkbox)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _radix_ui_react_checkbox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20913);
/* harmony import */ var _barrel_optimize_names_Check_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(129170);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(891616);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(983773);
/* __next_internal_client_entry_do_not_use__ Checkbox auto */ 




const Checkbox = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_checkbox__WEBPACK_IMPORTED_MODULE_2__/* .Root */ .bL, {
        ref: ref,
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("peer h-5 w-5 shrink-0 rounded-md border border-slate-300 bg-white focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-slate-700 dark:text-slate-600 dark:focus:ring-slate-400 dark:focus:ring-offset-slate-900", className),
        ...props,
        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_checkbox__WEBPACK_IMPORTED_MODULE_2__/* .Indicator */ .C1, {
            className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("flex items-center justify-center"),
            children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Check_lucide_react__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A, {
                className: "h-4 w-4"
            })
        })
    }));
Checkbox.displayName = _radix_ui_react_checkbox__WEBPACK_IMPORTED_MODULE_2__/* .Root */ .bL.displayName;



/***/ }),

/***/ 12199:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ ConfirmationModal)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _modules_ui_components_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(248852);
/* harmony import */ var _modules_ui_components_modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(383207);
/* harmony import */ var _tolgee_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(397674);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(891616);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* __next_internal_client_entry_do_not_use__ ConfirmationModal auto */ 




const ConfirmationModal = ({ title, onConfirm, open, setOpen, text, buttonText, isButtonDisabled = false, buttonVariant = "destructive", buttonLoading = false, closeOnOutsideClick = true, hideCloseButton })=>{
    const { t } = (0,_tolgee_react__WEBPACK_IMPORTED_MODULE_4__/* .useTranslate */ .WD)();
    const handleButtonAction = async ()=>{
        if (isButtonDisabled) return;
        await onConfirm();
    };
    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_modules_ui_components_modal__WEBPACK_IMPORTED_MODULE_2__/* .Modal */ .a, {
        open: open,
        setOpen: setOpen,
        title: title,
        hideCloseButton: hideCloseButton,
        closeOnOutsideClick: closeOnOutsideClick,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", {
                className: "text-slate-900",
                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", {
                    className: "mt-2 whitespace-pre-wrap",
                    children: text
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", {
                className: "mt-4 space-x-2 text-right",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_modules_ui_components_button__WEBPACK_IMPORTED_MODULE_1__/* .Button */ .$, {
                        variant: "ghost",
                        onClick: ()=>setOpen(false),
                        children: t("common.cancel")
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_modules_ui_components_button__WEBPACK_IMPORTED_MODULE_1__/* .Button */ .$, {
                        loading: buttonLoading,
                        disabled: isButtonDisabled,
                        variant: buttonVariant,
                        onClick: handleButtonAction,
                        children: buttonText
                    })
                ]
            })
        ]
    });
};


/***/ }),

/***/ 556825:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hr: () => (/* binding */ DropdownMenuRadioGroup),
/* harmony export */   Ht: () => (/* binding */ DropdownMenuRadioItem),
/* harmony export */   I: () => (/* binding */ DropdownMenuGroup),
/* harmony export */   M5: () => (/* binding */ DropdownMenuSubContent),
/* harmony export */   SQ: () => (/* binding */ DropdownMenuContent),
/* harmony export */   _2: () => (/* binding */ DropdownMenuItem),
/* harmony export */   dc: () => (/* binding */ DropdownMenuPortal),
/* harmony export */   lv: () => (/* binding */ DropdownMenuSub),
/* harmony export */   mB: () => (/* binding */ DropdownMenuSeparator),
/* harmony export */   nV: () => (/* binding */ DropdownMenuSubTrigger),
/* harmony export */   rI: () => (/* binding */ DropdownMenu),
/* harmony export */   ty: () => (/* binding */ DropdownMenuTrigger)
/* harmony export */ });
/* unused harmony exports DropdownMenuCheckboxItem, DropdownMenuLabel, DropdownMenuShortcut */
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(551892);
/* harmony import */ var _barrel_optimize_names_Check_ChevronRight_Circle_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(115758);
/* harmony import */ var _barrel_optimize_names_Check_ChevronRight_Circle_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(129170);
/* harmony import */ var _barrel_optimize_names_Check_ChevronRight_Circle_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(648968);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(891616);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(983773);
/* __next_internal_client_entry_do_not_use__ DropdownMenu,DropdownMenuCheckboxItem,DropdownMenuContent,DropdownMenuGroup,DropdownMenuItem,DropdownMenuLabel,DropdownMenuPortal,DropdownMenuRadioGroup,DropdownMenuRadioItem,DropdownMenuSeparator,DropdownMenuShortcut,DropdownMenuSub,DropdownMenuSubContent,DropdownMenuSubTrigger,DropdownMenuTrigger auto */ 




const DropdownMenu = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Root */ .bL;
const DropdownMenuTrigger = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Trigger */ .l9;
const DropdownMenuGroup = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Group */ .YJ;
const DropdownMenuPortal = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Portal */ .ZL;
const DropdownMenuSub = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Sub */ .Pb;
const DropdownMenuRadioGroup = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .RadioGroup */ .z6;
const DropdownMenuSubTrigger = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, inset, children, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .SubTrigger */ .ZP, {
        ref: ref,
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("flex cursor-default select-none items-center rounded-lg px-2 py-1.5 text-sm font-medium text-slate-600 outline-none hover:text-slate-700 focus:bg-slate-100 data-[state=open]:bg-slate-100", inset && "pl-8", className),
        ...props,
        children: [
            children,
            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Check_ChevronRight_Circle_lucide_react__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A, {
                className: "ml-auto h-4 w-4"
            })
        ]
    }));
DropdownMenuSubTrigger.displayName = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .SubTrigger */ .ZP.displayName;
const DropdownMenuSubContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .SubContent */ .G5, {
        ref: ref,
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("animate-in slide-in-from-left-1 z-50 min-w-[8rem] overflow-hidden rounded-lg border border-slate-200 bg-white p-1 font-medium text-slate-600 shadow-sm hover:text-slate-700", className),
        ...props
    }));
DropdownMenuSubContent.displayName = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .SubContent */ .G5.displayName;
const DropdownMenuContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, sideOffset = 4, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Portal */ .ZL, {
        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Content */ .UC, {
            ref: ref,
            sideOffset: sideOffset,
            className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("animate-in data-[side=right]:slide-in-from-left-2 data-[side=left]:slide-in-from-right-2 data-[side=bottom]:slide-in-from-top-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-lg border border-slate-200 bg-white p-1 font-medium text-slate-700 shadow-sm", className),
            ...props
        })
    }));
DropdownMenuContent.displayName = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Content */ .UC.displayName;
const DropdownMenuItem = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, children, inset, icon, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .q7, {
        ref: ref,
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("relative flex w-full cursor-pointer select-none items-center gap-x-2 rounded-lg px-2 py-1.5 text-sm font-medium outline-none focus:bg-slate-100 data-[disabled]:pointer-events-none data-[disabled]:opacity-50", inset && "pl-8", className),
        ...props,
        children: [
            icon,
            children
        ]
    }));
DropdownMenuItem.displayName = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .q7.displayName;
const DropdownMenuCheckboxItem = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, children, checked, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .CheckboxItem */ .H_, {
        ref: ref,
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("relative flex cursor-default select-none items-center rounded-lg py-1.5 pl-8 pr-2 text-sm font-medium outline-none focus:bg-slate-100 data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className),
        checked: checked,
        ...props,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", {
                className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center",
                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .ItemIndicator */ .VF, {
                    children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Check_ChevronRight_Circle_lucide_react__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .A, {
                        className: "h-4 w-4"
                    })
                })
            }),
            children
        ]
    }));
DropdownMenuCheckboxItem.displayName = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .CheckboxItem */ .H_.displayName;
const DropdownMenuRadioItem = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, children, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .RadioItem */ .hN, {
        ref: ref,
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("relative flex cursor-default select-none items-center rounded-lg py-1.5 pl-8 pr-2 text-sm font-medium outline-none focus:bg-slate-100 data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className),
        ...props,
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", {
                className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center",
                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .ItemIndicator */ .VF, {
                    children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Check_ChevronRight_Circle_lucide_react__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A, {
                        className: "h-2 w-2 fill-current"
                    })
                })
            }),
            children
        ]
    }));
DropdownMenuRadioItem.displayName = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .RadioItem */ .hN.displayName;
const DropdownMenuLabel = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, inset, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Label */ .JU, {
        ref: ref,
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("px-2 py-1.5 text-sm font-semibold text-slate-900", inset && "pl-8", className),
        ...props
    }));
DropdownMenuLabel.displayName = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Label */ .JU.displayName;
const DropdownMenuSeparator = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Separator */ .wv, {
        ref: ref,
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("-mx-1 my-1 h-px bg-slate-100", className),
        ...props
    }));
DropdownMenuSeparator.displayName = _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_2__/* .Separator */ .wv.displayName;
const DropdownMenuShortcut = ({ className, ...props })=>{
    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", {
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("ml-auto text-xs tracking-widest text-slate-500", className),
        ...props
    });
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";



/***/ }),

/***/ 438624:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p: () => (/* binding */ Input)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(891616);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(983773);



const Input = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, isInvalid, ...props }, ref)=>{
    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input", {
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_2__.cn)("focus:border-brand-dark flex h-10 w-full rounded-md border border-slate-300 bg-transparent px-3 py-2 text-sm text-slate-800 placeholder:text-slate-400 focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-slate-500 dark:text-slate-300", className, isInvalid && "border border-red-500 focus:border-red-500"),
        ref: ref,
        ...props
    });
});
Input.displayName = "Input";



/***/ }),

/***/ 61330:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   J: () => (/* binding */ Label)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _radix_ui_react_label__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(446470);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(891616);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(983773);
/* __next_internal_client_entry_do_not_use__ Label auto */ 



const Label = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_label__WEBPACK_IMPORTED_MODULE_2__/* .Root */ .b, {
        ref: ref,
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("text-sm font-medium leading-none text-slate-800 disabled:opacity-70 peer-disabled:cursor-not-allowed peer-disabled:opacity-70 dark:text-slate-400 dark:peer-disabled:opacity-70", className),
        ...props
    }));
Label.displayName = _radix_ui_react_label__WEBPACK_IMPORTED_MODULE_2__/* .Root */ .b.displayName;



/***/ }),

/***/ 383207:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ Modal)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(374560);
/* harmony import */ var _barrel_optimize_names_XIcon_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(673766);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(891616);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(983773);





const DialogPortal = _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Portal */ .ZL;
const DialogOverlay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, blur, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Overlay */ .hJ, {
        ref: ref,
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)(blur && "backdrop-blur-md", "fixed inset-0 z-50 bg-slate-500 bg-opacity-30", "data-[state='closed']:animate-fadeOut data-[state='open']:animate-fadeIn"),
        ...props
    }));
DialogOverlay.displayName = _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Overlay */ .hJ.displayName;
const sizeClassName = {
    md: "sm:max-w-xl",
    lg: "sm:max-w-[820px]",
    xl: "sm:max-w-[960px] sm:max-h-[640px]",
    xxl: "sm:max-w-[1240px] sm:max-h-[760px]"
};
const DialogContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, children, blur, noPadding, size, hideCloseButton, restrictOverflow = false, closeOnOutsideClick, title, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DialogPortal, {
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DialogOverlay, {
                blur: blur
            }),
            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Content */ .UC, {
                ref: ref,
                className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("fixed left-[50%] top-[50%] z-50 translate-x-[-50%] translate-y-[-50%] transform rounded-lg bg-white text-left shadow-xl transition-all sm:my-2 sm:w-full sm:max-w-xl", `${noPadding ? "" : "px-4 pb-4 pt-5 sm:p-6"}`, "data-[state='closed']:animate-fadeOut data-[state='open']:animate-fadeIn", size && sizeClassName && sizeClassName[size], !restrictOverflow && "overflow-hidden", className),
                ...props,
                onPointerDownOutside: (e)=>{
                    if (!closeOnOutsideClick) {
                        e.preventDefault();
                    }
                },
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .DialogTitle */ .L3, {
                        children: title && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", {
                            className: "mb-4 text-xl font-bold text-slate-500",
                            children: title
                        })
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .DialogDescription */ .rr, {}),
                    children,
                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Close */ .bm, {
                        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("absolute right-0 top-0 hidden pr-4 pt-4 text-slate-400 hover:text-slate-500 focus:outline-none focus:ring-0 sm:block", hideCloseButton && "!hidden"),
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_XIcon_lucide_react__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A, {
                                className: "h-6 w-6 rounded-md bg-white"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", {
                                className: "sr-only",
                                children: "Close"
                            })
                        ]
                    })
                ]
            })
        ]
    }));
DialogContent.displayName = _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Content */ .UC.displayName;
const Modal = ({ open, setOpen, children, blur = true, size = "md", noPadding, hideCloseButton = false, closeOnOutsideClick = true, title, className, restrictOverflow = false })=>{
    if (!open) return null;
    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_2__/* .Root */ .bL, {
        open: open,
        onOpenChange: (open)=>setOpen(open),
        modal: true,
        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DialogContent, {
            blur: blur,
            size: size,
            noPadding: noPadding,
            hideCloseButton: hideCloseButton,
            closeOnOutsideClick: closeOnOutsideClick,
            title: title,
            className: className,
            restrictOverflow: restrictOverflow,
            children: children
        })
    });
};


/***/ }),

/***/ 10015:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AM: () => (/* binding */ Popover),
/* harmony export */   Wv: () => (/* binding */ PopoverTrigger),
/* harmony export */   hl: () => (/* binding */ PopoverContent)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(578661);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(891616);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(983773);
/* __next_internal_client_entry_do_not_use__ Popover,PopoverTrigger,PopoverContent auto */ 



const Popover = _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_2__/* .Root */ .bL;
const PopoverTrigger = _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_2__/* .Trigger */ .l9;
const PopoverContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_2__/* .Portal */ .ZL, {
        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_2__/* .Content */ .UC, {
            ref: ref,
            align: align,
            sideOffset: sideOffset,
            className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("animate-in data-[side=bottom]:slide-in-from-top-2 data-[side=top]:slide-in-from-bottom-2 data-[side=right]:slide-in-from-left-2 data-[side=left]:slide-in-from-right-2 z-50 w-72 rounded-md border border-slate-100 bg-white p-4 shadow-md outline-none", className),
            ...props
        })
    }));
PopoverContent.displayName = _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_2__/* .Content */ .UC.displayName;



/***/ }),

/***/ 493204:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   d: () => (/* binding */ Switch)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _radix_ui_react_switch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(635276);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(891616);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(983773);
/* __next_internal_client_entry_do_not_use__ Switch auto */ 



const Switch = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_switch__WEBPACK_IMPORTED_MODULE_2__/* .Root */ .bL, {
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("peer inline-flex h-[20px] w-[40px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-slate-900 data-[state=unchecked]:bg-slate-200", className),
        ...props,
        ref: ref,
        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_switch__WEBPACK_IMPORTED_MODULE_2__/* .Thumb */ .zi, {
            className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_3__.cn)("pointer-events-none block h-4 w-4 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0")
        })
    }));
Switch.displayName = _radix_ui_react_switch__WEBPACK_IMPORTED_MODULE_2__/* .Root */ .bL.displayName;



/***/ }),

/***/ 711940:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   v: () => (/* binding */ Tag)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _barrel_optimize_names_XCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(911681);
/* harmony import */ var _formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(983773);



const Tag = ({ tagId, tagName, onDelete, tags, setTagsState, highlight, allowDelete = true })=>{
    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", {
        className: (0,_formbricks_lib_cn__WEBPACK_IMPORTED_MODULE_1__.cn)("relative flex items-center justify-between gap-2 rounded-full bg-slate-600 px-2 py-1 text-slate-100", highlight && "animate-shake"),
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", {
                className: "flex items-center gap-2",
                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", {
                    className: "text-sm",
                    children: tagName
                })
            }),
            allowDelete && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", {
                className: "cursor-pointer text-sm",
                onClick: ()=>{
                    if (tags && setTagsState) setTagsState(tags.filter((tag)=>tag.tagId !== tagId));
                    onDelete(tagId);
                },
                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_XCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, {
                    fontSize: 24,
                    className: "h-4 w-4 text-slate-100 hover:text-slate-200"
                })
            })
        ]
    }, tagId);
};


/***/ }),

/***/ 530519:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   d: () => (/* binding */ UpgradePrompt)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _modules_ui_components_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(248852);
/* harmony import */ var _barrel_optimize_names_KeyIcon_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(178741);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(36888);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);




const UpgradePrompt = ({ title, description, buttons })=>{
    const [primaryButton, secondaryButton] = buttons;
    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", {
        className: "flex w-full flex-col items-center gap-6 p-6",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", {
                className: "rounded-md border border-slate-200 p-3",
                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_KeyIcon_lucide_react__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A, {
                    className: "h-6 w-6 text-slate-900"
                })
            }),
            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", {
                className: "flex max-w-[80%] flex-col items-center gap-2 text-center",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", {
                        className: "text-xl font-semibold text-slate-900",
                        children: title
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", {
                        className: "text-sm text-slate-500",
                        children: description
                    })
                ]
            }),
            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", {
                className: "flex gap-3",
                children: [
                    primaryButton.href ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_modules_ui_components_button__WEBPACK_IMPORTED_MODULE_1__/* .Button */ .$, {
                        asChild: true,
                        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)((next_link__WEBPACK_IMPORTED_MODULE_2___default()), {
                            href: primaryButton.href,
                            target: "_blank",
                            rel: "noopener noreferrer",
                            children: primaryButton.text
                        })
                    }) : /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_modules_ui_components_button__WEBPACK_IMPORTED_MODULE_1__/* .Button */ .$, {
                        onClick: primaryButton.onClick,
                        children: primaryButton.text
                    }),
                    secondaryButton.href ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_modules_ui_components_button__WEBPACK_IMPORTED_MODULE_1__/* .Button */ .$, {
                        variant: "secondary",
                        asChild: true,
                        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)((next_link__WEBPACK_IMPORTED_MODULE_2___default()), {
                            href: secondaryButton.href,
                            target: "_blank",
                            rel: "noopener noreferrer",
                            children: secondaryButton.text
                        })
                    }) : /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_modules_ui_components_button__WEBPACK_IMPORTED_MODULE_1__/* .Button */ .$, {
                        variant: "secondary",
                        onClick: secondaryButton.onClick,
                        children: secondaryButton.text
                    })
                ]
            })
        ]
    });
};


/***/ }),

/***/ 435465:
/***/ ((module) => {

"use strict";
/*! @license DOMPurify 3.2.3 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.3/LICENSE */



const {
  entries,
  setPrototypeOf,
  isFrozen,
  getPrototypeOf,
  getOwnPropertyDescriptor
} = Object;
let {
  freeze,
  seal,
  create
} = Object; // eslint-disable-line import/no-mutable-exports
let {
  apply,
  construct
} = typeof Reflect !== 'undefined' && Reflect;
if (!freeze) {
  freeze = function freeze(x) {
    return x;
  };
}
if (!seal) {
  seal = function seal(x) {
    return x;
  };
}
if (!apply) {
  apply = function apply(fun, thisValue, args) {
    return fun.apply(thisValue, args);
  };
}
if (!construct) {
  construct = function construct(Func, args) {
    return new Func(...args);
  };
}
const arrayForEach = unapply(Array.prototype.forEach);
const arrayPop = unapply(Array.prototype.pop);
const arrayPush = unapply(Array.prototype.push);
const stringToLowerCase = unapply(String.prototype.toLowerCase);
const stringToString = unapply(String.prototype.toString);
const stringMatch = unapply(String.prototype.match);
const stringReplace = unapply(String.prototype.replace);
const stringIndexOf = unapply(String.prototype.indexOf);
const stringTrim = unapply(String.prototype.trim);
const objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);
const regExpTest = unapply(RegExp.prototype.test);
const typeErrorCreate = unconstruct(TypeError);
/**
 * Creates a new function that calls the given function with a specified thisArg and arguments.
 *
 * @param func - The function to be wrapped and called.
 * @returns A new function that calls the given function with a specified thisArg and arguments.
 */
function unapply(func) {
  return function (thisArg) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return apply(func, thisArg, args);
  };
}
/**
 * Creates a new function that constructs an instance of the given constructor function with the provided arguments.
 *
 * @param func - The constructor function to be wrapped and called.
 * @returns A new function that constructs an instance of the given constructor function with the provided arguments.
 */
function unconstruct(func) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return construct(func, args);
  };
}
/**
 * Add properties to a lookup table
 *
 * @param set - The set to which elements will be added.
 * @param array - The array containing elements to be added to the set.
 * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.
 * @returns The modified set with added elements.
 */
function addToSet(set, array) {
  let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;
  if (setPrototypeOf) {
    // Make 'in' and truthy checks like Boolean(set.constructor)
    // independent of any properties defined on Object.prototype.
    // Prevent prototype setters from intercepting set as a this value.
    setPrototypeOf(set, null);
  }
  let l = array.length;
  while (l--) {
    let element = array[l];
    if (typeof element === 'string') {
      const lcElement = transformCaseFunc(element);
      if (lcElement !== element) {
        // Config presets (e.g. tags.js, attrs.js) are immutable.
        if (!isFrozen(array)) {
          array[l] = lcElement;
        }
        element = lcElement;
      }
    }
    set[element] = true;
  }
  return set;
}
/**
 * Clean up an array to harden against CSPP
 *
 * @param array - The array to be cleaned.
 * @returns The cleaned version of the array
 */
function cleanArray(array) {
  for (let index = 0; index < array.length; index++) {
    const isPropertyExist = objectHasOwnProperty(array, index);
    if (!isPropertyExist) {
      array[index] = null;
    }
  }
  return array;
}
/**
 * Shallow clone an object
 *
 * @param object - The object to be cloned.
 * @returns A new object that copies the original.
 */
function clone(object) {
  const newObject = create(null);
  for (const [property, value] of entries(object)) {
    const isPropertyExist = objectHasOwnProperty(object, property);
    if (isPropertyExist) {
      if (Array.isArray(value)) {
        newObject[property] = cleanArray(value);
      } else if (value && typeof value === 'object' && value.constructor === Object) {
        newObject[property] = clone(value);
      } else {
        newObject[property] = value;
      }
    }
  }
  return newObject;
}
/**
 * This method automatically checks if the prop is function or getter and behaves accordingly.
 *
 * @param object - The object to look up the getter function in its prototype chain.
 * @param prop - The property name for which to find the getter function.
 * @returns The getter function found in the prototype chain or a fallback function.
 */
function lookupGetter(object, prop) {
  while (object !== null) {
    const desc = getOwnPropertyDescriptor(object, prop);
    if (desc) {
      if (desc.get) {
        return unapply(desc.get);
      }
      if (typeof desc.value === 'function') {
        return unapply(desc.value);
      }
    }
    object = getPrototypeOf(object);
  }
  function fallbackValue() {
    return null;
  }
  return fallbackValue;
}

const html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);
const svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);
const svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);
// List of SVG elements that are disallowed by default.
// We still need to know them so that we can do namespace
// checks properly in case one wants to add them to
// allow-list.
const svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);
const mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']);
// Similarly to SVG, we want to know all MathML elements,
// even those that we disallow by default.
const mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);
const text = freeze(['#text']);

const html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'popover', 'popovertarget', 'popovertargetaction', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'wrap', 'xmlns', 'slot']);
const svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'amplitude', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'exponent', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'slope', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'tablevalues', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
const mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
const xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

// eslint-disable-next-line unicorn/better-regex
const MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
const ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
const TMPLIT_EXPR = seal(/\$\{[\w\W]*}/gm); // eslint-disable-line unicorn/better-regex
const DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]+$/); // eslint-disable-line no-useless-escape
const ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
);
const IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
const ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
);
const DOCTYPE_NAME = seal(/^html$/i);
const CUSTOM_ELEMENT = seal(/^[a-z][.\w]*(-[.\w]+)+$/i);

var EXPRESSIONS = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ARIA_ATTR: ARIA_ATTR,
  ATTR_WHITESPACE: ATTR_WHITESPACE,
  CUSTOM_ELEMENT: CUSTOM_ELEMENT,
  DATA_ATTR: DATA_ATTR,
  DOCTYPE_NAME: DOCTYPE_NAME,
  ERB_EXPR: ERB_EXPR,
  IS_ALLOWED_URI: IS_ALLOWED_URI,
  IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,
  MUSTACHE_EXPR: MUSTACHE_EXPR,
  TMPLIT_EXPR: TMPLIT_EXPR
});

/* eslint-disable @typescript-eslint/indent */
// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
const NODE_TYPE = {
  element: 1,
  attribute: 2,
  text: 3,
  cdataSection: 4,
  entityReference: 5,
  // Deprecated
  entityNode: 6,
  // Deprecated
  progressingInstruction: 7,
  comment: 8,
  document: 9,
  documentType: 10,
  documentFragment: 11,
  notation: 12 // Deprecated
};
const getGlobal = function getGlobal() {
  return typeof window === 'undefined' ? null : window;
};
/**
 * Creates a no-op policy for internal use only.
 * Don't export this function outside this module!
 * @param trustedTypes The policy factory.
 * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).
 * @return The policy created (or null, if Trusted Types
 * are not supported or creating the policy failed).
 */
const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {
  if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
    return null;
  }
  // Allow the callers to control the unique policy name
  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
  // Policy creation with duplicate names throws in Trusted Types.
  let suffix = null;
  const ATTR_NAME = 'data-tt-policy-suffix';
  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {
    suffix = purifyHostElement.getAttribute(ATTR_NAME);
  }
  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');
  try {
    return trustedTypes.createPolicy(policyName, {
      createHTML(html) {
        return html;
      },
      createScriptURL(scriptUrl) {
        return scriptUrl;
      }
    });
  } catch (_) {
    // Policy creation failed (most likely another DOMPurify script has
    // already run). Skip creating the policy, as this will only cause errors
    // if TT are enforced.
    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
    return null;
  }
};
const _createHooksMap = function _createHooksMap() {
  return {
    afterSanitizeAttributes: [],
    afterSanitizeElements: [],
    afterSanitizeShadowDOM: [],
    beforeSanitizeAttributes: [],
    beforeSanitizeElements: [],
    beforeSanitizeShadowDOM: [],
    uponSanitizeAttribute: [],
    uponSanitizeElement: [],
    uponSanitizeShadowNode: []
  };
};
function createDOMPurify() {
  let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();
  const DOMPurify = root => createDOMPurify(root);
  DOMPurify.version = '3.2.3';
  DOMPurify.removed = [];
  if (!window || !window.document || window.document.nodeType !== NODE_TYPE.document) {
    // Not running in a browser, provide a factory function
    // so that you can pass your own Window
    DOMPurify.isSupported = false;
    return DOMPurify;
  }
  let {
    document
  } = window;
  const originalDocument = document;
  const currentScript = originalDocument.currentScript;
  const {
    DocumentFragment,
    HTMLTemplateElement,
    Node,
    Element,
    NodeFilter,
    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,
    HTMLFormElement,
    DOMParser,
    trustedTypes
  } = window;
  const ElementPrototype = Element.prototype;
  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
  const remove = lookupGetter(ElementPrototype, 'remove');
  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');
  // As per issue #47, the web-components registry is inherited by a
  // new document created via createHTMLDocument. As per the spec
  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
  // a new empty registry is used when creating a template contents owner
  // document, so we use that as our parent document to ensure nothing
  // is inherited.
  if (typeof HTMLTemplateElement === 'function') {
    const template = document.createElement('template');
    if (template.content && template.content.ownerDocument) {
      document = template.content.ownerDocument;
    }
  }
  let trustedTypesPolicy;
  let emptyHTML = '';
  const {
    implementation,
    createNodeIterator,
    createDocumentFragment,
    getElementsByTagName
  } = document;
  const {
    importNode
  } = originalDocument;
  let hooks = _createHooksMap();
  /**
   * Expose whether this browser supports running the full DOMPurify.
   */
  DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;
  const {
    MUSTACHE_EXPR,
    ERB_EXPR,
    TMPLIT_EXPR,
    DATA_ATTR,
    ARIA_ATTR,
    IS_SCRIPT_OR_DATA,
    ATTR_WHITESPACE,
    CUSTOM_ELEMENT
  } = EXPRESSIONS;
  let {
    IS_ALLOWED_URI: IS_ALLOWED_URI$1
  } = EXPRESSIONS;
  /**
   * We consider the elements and attributes below to be safe. Ideally
   * don't add any new ones but feel free to remove unwanted ones.
   */
  /* allowed element names */
  let ALLOWED_TAGS = null;
  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);
  /* Allowed attribute names */
  let ALLOWED_ATTR = null;
  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);
  /*
   * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.
   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
   */
  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {
    tagNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    attributeNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: false
    }
  }));
  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */
  let FORBID_TAGS = null;
  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */
  let FORBID_ATTR = null;
  /* Decide if ARIA attributes are okay */
  let ALLOW_ARIA_ATTR = true;
  /* Decide if custom data attributes are okay */
  let ALLOW_DATA_ATTR = true;
  /* Decide if unknown protocols are okay */
  let ALLOW_UNKNOWN_PROTOCOLS = false;
  /* Decide if self-closing tags in attributes are allowed.
   * Usually removed due to a mXSS issue in jQuery 3.0 */
  let ALLOW_SELF_CLOSE_IN_ATTR = true;
  /* Output should be safe for common template engines.
   * This means, DOMPurify removes data attributes, mustaches and ERB
   */
  let SAFE_FOR_TEMPLATES = false;
  /* Output should be safe even for XML used within HTML and alike.
   * This means, DOMPurify removes comments when containing risky content.
   */
  let SAFE_FOR_XML = true;
  /* Decide if document with <html>... should be returned */
  let WHOLE_DOCUMENT = false;
  /* Track whether config is already set on this instance of DOMPurify. */
  let SET_CONFIG = false;
  /* Decide if all elements (e.g. style, script) must be children of
   * document.body. By default, browsers might move them to document.head */
  let FORCE_BODY = false;
  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
   * string (or a TrustedHTML object if Trusted Types are supported).
   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
   */
  let RETURN_DOM = false;
  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
   * string  (or a TrustedHTML object if Trusted Types are supported) */
  let RETURN_DOM_FRAGMENT = false;
  /* Try to return a Trusted Type object instead of a string, return a string in
   * case Trusted Types are not supported  */
  let RETURN_TRUSTED_TYPE = false;
  /* Output should be free from DOM clobbering attacks?
   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.
   */
  let SANITIZE_DOM = true;
  /* Achieve full DOM Clobbering protection by isolating the namespace of named
   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.
   *
   * HTML/DOM spec rules that enable DOM Clobbering:
   *   - Named Access on Window (§7.3.3)
   *   - DOM Tree Accessors (§3.1.5)
   *   - Form Element Parent-Child Relations (§4.10.3)
   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)
   *   - HTMLCollection (§4.2.10.2)
   *
   * Namespace isolation is implemented by prefixing `id` and `name` attributes
   * with a constant string, i.e., `user-content-`
   */
  let SANITIZE_NAMED_PROPS = false;
  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';
  /* Keep element content when removing element? */
  let KEEP_CONTENT = true;
  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
   * of importing it into a new Document and returning a sanitized copy */
  let IN_PLACE = false;
  /* Allow usage of profiles like html, svg and mathMl */
  let USE_PROFILES = {};
  /* Tags to ignore content of when KEEP_CONTENT is true */
  let FORBID_CONTENTS = null;
  const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);
  /* Tags that are safe for data: URIs */
  let DATA_URI_TAGS = null;
  const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);
  /* Attributes safe for values like "javascript:" */
  let URI_SAFE_ATTRIBUTES = null;
  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);
  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
  /* Document namespace */
  let NAMESPACE = HTML_NAMESPACE;
  let IS_EMPTY_INPUT = false;
  /* Allowed XHTML+XML namespaces */
  let ALLOWED_NAMESPACES = null;
  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
  let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);
  let HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);
  // Certain elements are allowed in both SVG and HTML
  // namespace. We need to specify them explicitly
  // so that they don't get erroneously deleted from
  // HTML namespace.
  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);
  /* Parsing of strict XHTML documents */
  let PARSER_MEDIA_TYPE = null;
  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
  let transformCaseFunc = null;
  /* Keep a reference to config to pass to hooks */
  let CONFIG = null;
  /* Ideally, do not touch anything below this line */
  /* ______________________________________________ */
  const formElement = document.createElement('form');
  const isRegexOrFunction = function isRegexOrFunction(testValue) {
    return testValue instanceof RegExp || testValue instanceof Function;
  };
  /**
   * _parseConfig
   *
   * @param cfg optional config literal
   */
  // eslint-disable-next-line complexity
  const _parseConfig = function _parseConfig() {
    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (CONFIG && CONFIG === cfg) {
      return;
    }
    /* Shield configuration object from tampering */
    if (!cfg || typeof cfg !== 'object') {
      cfg = {};
    }
    /* Shield configuration object from prototype pollution */
    cfg = clone(cfg);
    PARSER_MEDIA_TYPE =
    // eslint-disable-next-line unicorn/prefer-includes
    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;
    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.
    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;
    /* Set configuration parameters */
    ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
    ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;
    DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;
    FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
    FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
    FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
    USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;
    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true
    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true
    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false
    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true
    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false
    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true
    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false
    RETURN_DOM = cfg.RETURN_DOM || false; // Default false
    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false
    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false
    FORCE_BODY = cfg.FORCE_BODY || false; // Default false
    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true
    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false
    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true
    IN_PLACE = cfg.IN_PLACE || false; // Default false
    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;
    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
    MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;
    HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;
    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
    }
    if (SAFE_FOR_TEMPLATES) {
      ALLOW_DATA_ATTR = false;
    }
    if (RETURN_DOM_FRAGMENT) {
      RETURN_DOM = true;
    }
    /* Parse profile info */
    if (USE_PROFILES) {
      ALLOWED_TAGS = addToSet({}, text);
      ALLOWED_ATTR = [];
      if (USE_PROFILES.html === true) {
        addToSet(ALLOWED_TAGS, html$1);
        addToSet(ALLOWED_ATTR, html);
      }
      if (USE_PROFILES.svg === true) {
        addToSet(ALLOWED_TAGS, svg$1);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.svgFilters === true) {
        addToSet(ALLOWED_TAGS, svgFilters);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.mathMl === true) {
        addToSet(ALLOWED_TAGS, mathMl$1);
        addToSet(ALLOWED_ATTR, mathMl);
        addToSet(ALLOWED_ATTR, xml);
      }
    }
    /* Merge configuration parameters */
    if (cfg.ADD_TAGS) {
      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
        ALLOWED_TAGS = clone(ALLOWED_TAGS);
      }
      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
    }
    if (cfg.ADD_ATTR) {
      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
        ALLOWED_ATTR = clone(ALLOWED_ATTR);
      }
      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
    }
    if (cfg.ADD_URI_SAFE_ATTR) {
      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
    }
    if (cfg.FORBID_CONTENTS) {
      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
        FORBID_CONTENTS = clone(FORBID_CONTENTS);
      }
      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
    }
    /* Add #text in case KEEP_CONTENT is set to true */
    if (KEEP_CONTENT) {
      ALLOWED_TAGS['#text'] = true;
    }
    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */
    if (WHOLE_DOCUMENT) {
      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
    }
    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */
    if (ALLOWED_TAGS.table) {
      addToSet(ALLOWED_TAGS, ['tbody']);
      delete FORBID_TAGS.tbody;
    }
    if (cfg.TRUSTED_TYPES_POLICY) {
      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
      }
      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
      }
      // Overwrite existing TrustedTypes policy.
      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;
      // Sign local variables required by `sanitize`.
      emptyHTML = trustedTypesPolicy.createHTML('');
    } else {
      // Uninitialized policy, attempt to initialize the internal dompurify policy.
      if (trustedTypesPolicy === undefined) {
        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);
      }
      // If creating the internal policy succeeded sign internal variables.
      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {
        emptyHTML = trustedTypesPolicy.createHTML('');
      }
    }
    // Prevent further manipulation of configuration.
    // Not available in IE8, Safari 5, etc.
    if (freeze) {
      freeze(cfg);
    }
    CONFIG = cfg;
  };
  /* Keep track of all possible SVG and MathML tags
   * so that we can perform the namespace checks
   * correctly. */
  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);
  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);
  /**
   * @param element a DOM element whose namespace is being checked
   * @returns Return false if the element has a
   *  namespace that a spec-compliant parser would never
   *  return. Return true otherwise.
   */
  const _checkValidNamespace = function _checkValidNamespace(element) {
    let parent = getParentNode(element);
    // In JSDOM, if we're inside shadow DOM, then parentNode
    // can be null. We just simulate parent in this case.
    if (!parent || !parent.tagName) {
      parent = {
        namespaceURI: NAMESPACE,
        tagName: 'template'
      };
    }
    const tagName = stringToLowerCase(element.tagName);
    const parentTagName = stringToLowerCase(parent.tagName);
    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
      return false;
    }
    if (element.namespaceURI === SVG_NAMESPACE) {
      // The only way to switch from HTML namespace to SVG
      // is via <svg>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'svg';
      }
      // The only way to switch from MathML to SVG is via`
      // svg if parent is either <annotation-xml> or MathML
      // text integration points.
      if (parent.namespaceURI === MATHML_NAMESPACE) {
        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
      }
      // We only allow elements that are defined in SVG
      // spec. All others are disallowed in SVG namespace.
      return Boolean(ALL_SVG_TAGS[tagName]);
    }
    if (element.namespaceURI === MATHML_NAMESPACE) {
      // The only way to switch from HTML namespace to MathML
      // is via <math>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'math';
      }
      // The only way to switch from SVG to MathML is via
      // <math> and HTML integration points
      if (parent.namespaceURI === SVG_NAMESPACE) {
        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
      }
      // We only allow elements that are defined in MathML
      // spec. All others are disallowed in MathML namespace.
      return Boolean(ALL_MATHML_TAGS[tagName]);
    }
    if (element.namespaceURI === HTML_NAMESPACE) {
      // The only way to switch from SVG to HTML is via
      // HTML integration points, and from MathML to HTML
      // is via MathML text integration points
      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      // We disallow tags that are specific for MathML
      // or SVG and should never appear in HTML namespace
      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
    }
    // For XHTML and XML documents that support custom namespaces
    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {
      return true;
    }
    // The code should never reach this place (this means
    // that the element somehow got namespace that is not
    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).
    // Return false just in case.
    return false;
  };
  /**
   * _forceRemove
   *
   * @param node a DOM node
   */
  const _forceRemove = function _forceRemove(node) {
    arrayPush(DOMPurify.removed, {
      element: node
    });
    try {
      // eslint-disable-next-line unicorn/prefer-dom-node-remove
      getParentNode(node).removeChild(node);
    } catch (_) {
      remove(node);
    }
  };
  /**
   * _removeAttribute
   *
   * @param name an Attribute name
   * @param element a DOM node
   */
  const _removeAttribute = function _removeAttribute(name, element) {
    try {
      arrayPush(DOMPurify.removed, {
        attribute: element.getAttributeNode(name),
        from: element
      });
    } catch (_) {
      arrayPush(DOMPurify.removed, {
        attribute: null,
        from: element
      });
    }
    element.removeAttribute(name);
    // We void attribute values for unremovable "is" attributes
    if (name === 'is') {
      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
        try {
          _forceRemove(element);
        } catch (_) {}
      } else {
        try {
          element.setAttribute(name, '');
        } catch (_) {}
      }
    }
  };
  /**
   * _initDocument
   *
   * @param dirty - a string of dirty markup
   * @return a DOM, filled with the dirty markup
   */
  const _initDocument = function _initDocument(dirty) {
    /* Create a HTML document */
    let doc = null;
    let leadingWhitespace = null;
    if (FORCE_BODY) {
      dirty = '<remove></remove>' + dirty;
    } else {
      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
      const matches = stringMatch(dirty, /^[\r\n\t ]+/);
      leadingWhitespace = matches && matches[0];
    }
    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {
      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
      dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
    }
    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
    /*
     * Use the DOMParser API by default, fallback later if needs be
     * DOMParser not work for svg when has multiple root element.
     */
    if (NAMESPACE === HTML_NAMESPACE) {
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
      } catch (_) {}
    }
    /* Use createHTMLDocument in case DOMParser is not available */
    if (!doc || !doc.documentElement) {
      doc = implementation.createDocument(NAMESPACE, 'template', null);
      try {
        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
      } catch (_) {
        // Syntax error if dirtyPayload is invalid xml
      }
    }
    const body = doc.body || doc.documentElement;
    if (dirty && leadingWhitespace) {
      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
    }
    /* Work on whole document or just its body */
    if (NAMESPACE === HTML_NAMESPACE) {
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
    }
    return WHOLE_DOCUMENT ? doc.documentElement : body;
  };
  /**
   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
   *
   * @param root The root element or node to start traversing on.
   * @return The created NodeIterator
   */
  const _createNodeIterator = function _createNodeIterator(root) {
    return createNodeIterator.call(root.ownerDocument || root, root,
    // eslint-disable-next-line no-bitwise
    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);
  };
  /**
   * _isClobbered
   *
   * @param element element to check for clobbering attacks
   * @return true if clobbered, false if safe
   */
  const _isClobbered = function _isClobbered(element) {
    return element instanceof HTMLFormElement && (typeof element.nodeName !== 'string' || typeof element.textContent !== 'string' || typeof element.removeChild !== 'function' || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== 'function' || typeof element.setAttribute !== 'function' || typeof element.namespaceURI !== 'string' || typeof element.insertBefore !== 'function' || typeof element.hasChildNodes !== 'function');
  };
  /**
   * Checks whether the given object is a DOM node.
   *
   * @param value object to check whether it's a DOM node
   * @return true is object is a DOM node
   */
  const _isNode = function _isNode(value) {
    return typeof Node === 'function' && value instanceof Node;
  };
  function _executeHooks(hooks, currentNode, data) {
    arrayForEach(hooks, hook => {
      hook.call(DOMPurify, currentNode, data, CONFIG);
    });
  }
  /**
   * _sanitizeElements
   *
   * @protect nodeName
   * @protect textContent
   * @protect removeChild
   * @param currentNode to check for permission to exist
   * @return true if node was killed, false if left alive
   */
  const _sanitizeElements = function _sanitizeElements(currentNode) {
    let content = null;
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeElements, currentNode, null);
    /* Check if element is clobbered or can clobber */
    if (_isClobbered(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Now let's check the element's type and name */
    const tagName = transformCaseFunc(currentNode.nodeName);
    /* Execute a hook if present */
    _executeHooks(hooks.uponSanitizeElement, currentNode, {
      tagName,
      allowedTags: ALLOWED_TAGS
    });
    /* Detect mXSS attempts abusing namespace confusion */
    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove any occurrence of processing instructions */
    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove any kind of possibly harmful comments */
    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\w]/g, currentNode.data)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove element if anything forbids its presence */
    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
      /* Check if we have a custom element to handle */
      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {
          return false;
        }
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {
          return false;
        }
      }
      /* Keep content except for bad-listed elements */
      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
        const parentNode = getParentNode(currentNode) || currentNode.parentNode;
        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;
        if (childNodes && parentNode) {
          const childCount = childNodes.length;
          for (let i = childCount - 1; i >= 0; --i) {
            const childClone = cloneNode(childNodes[i], true);
            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;
            parentNode.insertBefore(childClone, getNextSibling(currentNode));
          }
        }
      }
      _forceRemove(currentNode);
      return true;
    }
    /* Check whether element has a valid namespace */
    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Make sure that older browsers don't get fallback-tag mXSS */
    if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Sanitize element content to be template-safe */
    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {
      /* Get the element's text content */
      content = currentNode.textContent;
      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
        content = stringReplace(content, expr, ' ');
      });
      if (currentNode.textContent !== content) {
        arrayPush(DOMPurify.removed, {
          element: currentNode.cloneNode()
        });
        currentNode.textContent = content;
      }
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeElements, currentNode, null);
    return false;
  };
  /**
   * _isValidAttribute
   *
   * @param lcTag Lowercase tag name of containing element.
   * @param lcName Lowercase attribute name.
   * @param value Attribute value.
   * @return Returns true if `value` is valid, otherwise false.
   */
  // eslint-disable-next-line complexity
  const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
    /* Make sure attribute cannot clobber */
    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
      return false;
    }
    /* Allow valid data-* attributes: At least one character after "-"
        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
        We don't need to check the value; it's always URI safe. */
    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
      if (
      // First condition does a very basic check if a) it's basically a valid custom element tagname AND
      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
      _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||
      // Alternative, second condition checks if it's an `is`-attribute, AND
      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {
        return false;
      }
      /* Check value is safe. First, is attr inert? If so, is safe */
    } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {
      return false;
    } else ;
    return true;
  };
  /**
   * _isBasicCustomElement
   * checks if at least one dash is included in tagName, and it's not the first char
   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
   *
   * @param tagName name of the tag of the node to sanitize
   * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.
   */
  const _isBasicCustomElement = function _isBasicCustomElement(tagName) {
    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);
  };
  /**
   * _sanitizeAttributes
   *
   * @protect attributes
   * @protect nodeName
   * @protect removeAttribute
   * @protect setAttribute
   *
   * @param currentNode to sanitize
   */
  const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);
    const {
      attributes
    } = currentNode;
    /* Check if we have attributes; if not we might have a text node */
    if (!attributes || _isClobbered(currentNode)) {
      return;
    }
    const hookEvent = {
      attrName: '',
      attrValue: '',
      keepAttr: true,
      allowedAttributes: ALLOWED_ATTR,
      forceKeepAttr: undefined
    };
    let l = attributes.length;
    /* Go backwards over all attributes; safely remove bad ones */
    while (l--) {
      const attr = attributes[l];
      const {
        name,
        namespaceURI,
        value: attrValue
      } = attr;
      const lcName = transformCaseFunc(name);
      let value = name === 'value' ? attrValue : stringTrim(attrValue);
      /* Execute a hook if present */
      hookEvent.attrName = lcName;
      hookEvent.attrValue = value;
      hookEvent.keepAttr = true;
      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set
      _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);
      value = hookEvent.attrValue;
      /* Full DOM Clobbering protection via namespace isolation,
       * Prefix id and name attributes with `user-content-`
       */
      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {
        // Remove the attribute with this value
        _removeAttribute(name, currentNode);
        // Prefix the value and later re-create the attribute with the sanitized value
        value = SANITIZE_NAMED_PROPS_PREFIX + value;
      }
      /* Work around a security issue with comments inside attributes */
      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\/(style|title)/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      /* Did the hooks approve of the attribute? */
      if (hookEvent.forceKeepAttr) {
        continue;
      }
      /* Remove attribute */
      _removeAttribute(name, currentNode);
      /* Did the hooks approve of the attribute? */
      if (!hookEvent.keepAttr) {
        continue;
      }
      /* Work around a security issue in jQuery 3.0 */
      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      /* Sanitize attribute content to be template-safe */
      if (SAFE_FOR_TEMPLATES) {
        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
          value = stringReplace(value, expr, ' ');
        });
      }
      /* Is `value` valid for this attribute? */
      const lcTag = transformCaseFunc(currentNode.nodeName);
      if (!_isValidAttribute(lcTag, lcName, value)) {
        continue;
      }
      /* Handle attributes that require Trusted Types */
      if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {
        if (namespaceURI) ; else {
          switch (trustedTypes.getAttributeType(lcTag, lcName)) {
            case 'TrustedHTML':
              {
                value = trustedTypesPolicy.createHTML(value);
                break;
              }
            case 'TrustedScriptURL':
              {
                value = trustedTypesPolicy.createScriptURL(value);
                break;
              }
          }
        }
      }
      /* Handle invalid data-* attribute set by try-catching it */
      try {
        if (namespaceURI) {
          currentNode.setAttributeNS(namespaceURI, name, value);
        } else {
          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
          currentNode.setAttribute(name, value);
        }
        if (_isClobbered(currentNode)) {
          _forceRemove(currentNode);
        } else {
          arrayPop(DOMPurify.removed);
        }
      } catch (_) {}
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);
  };
  /**
   * _sanitizeShadowDOM
   *
   * @param fragment to iterate over recursively
   */
  const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
    let shadowNode = null;
    const shadowIterator = _createNodeIterator(fragment);
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);
    while (shadowNode = shadowIterator.nextNode()) {
      /* Execute a hook if present */
      _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);
      /* Sanitize tags and elements */
      _sanitizeElements(shadowNode);
      /* Check attributes next */
      _sanitizeAttributes(shadowNode);
      /* Deep shadow DOM detected */
      if (shadowNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(shadowNode.content);
      }
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);
  };
  // eslint-disable-next-line complexity
  DOMPurify.sanitize = function (dirty) {
    let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let body = null;
    let importedNode = null;
    let currentNode = null;
    let returnNode = null;
    /* Make sure we have a string to sanitize.
      DO NOT return early, as this will return the wrong type if
      the user has requested a DOM object rather than a string */
    IS_EMPTY_INPUT = !dirty;
    if (IS_EMPTY_INPUT) {
      dirty = '<!-->';
    }
    /* Stringify, in case dirty is an object */
    if (typeof dirty !== 'string' && !_isNode(dirty)) {
      if (typeof dirty.toString === 'function') {
        dirty = dirty.toString();
        if (typeof dirty !== 'string') {
          throw typeErrorCreate('dirty is not a string, aborting');
        }
      } else {
        throw typeErrorCreate('toString is not a function');
      }
    }
    /* Return dirty HTML if DOMPurify cannot run */
    if (!DOMPurify.isSupported) {
      return dirty;
    }
    /* Assign config vars */
    if (!SET_CONFIG) {
      _parseConfig(cfg);
    }
    /* Clean up removed elements */
    DOMPurify.removed = [];
    /* Check if dirty is correctly typed for IN_PLACE */
    if (typeof dirty === 'string') {
      IN_PLACE = false;
    }
    if (IN_PLACE) {
      /* Do some early pre-sanitization to avoid unsafe root nodes */
      if (dirty.nodeName) {
        const tagName = transformCaseFunc(dirty.nodeName);
        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');
        }
      }
    } else if (dirty instanceof Node) {
      /* If dirty is a DOM element, append to an empty document to avoid
         elements being stripped by the parser */
      body = _initDocument('<!---->');
      importedNode = body.ownerDocument.importNode(dirty, true);
      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') {
        /* Node is already a body, use as is */
        body = importedNode;
      } else if (importedNode.nodeName === 'HTML') {
        body = importedNode;
      } else {
        // eslint-disable-next-line unicorn/prefer-dom-node-append
        body.appendChild(importedNode);
      }
    } else {
      /* Exit directly if we have nothing to do */
      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&
      // eslint-disable-next-line unicorn/prefer-includes
      dirty.indexOf('<') === -1) {
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
      }
      /* Initialize the document to work on */
      body = _initDocument(dirty);
      /* Check we have a DOM node from the data */
      if (!body) {
        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';
      }
    }
    /* Remove first element node (ours) if FORCE_BODY is set */
    if (body && FORCE_BODY) {
      _forceRemove(body.firstChild);
    }
    /* Get node iterator */
    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);
    /* Now start iterating over the created document */
    while (currentNode = nodeIterator.nextNode()) {
      /* Sanitize tags and elements */
      _sanitizeElements(currentNode);
      /* Check attributes next */
      _sanitizeAttributes(currentNode);
      /* Shadow DOM detected, sanitize it */
      if (currentNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(currentNode.content);
      }
    }
    /* If we sanitized `dirty` in-place, return it. */
    if (IN_PLACE) {
      return dirty;
    }
    /* Return sanitized string or DOM */
    if (RETURN_DOM) {
      if (RETURN_DOM_FRAGMENT) {
        returnNode = createDocumentFragment.call(body.ownerDocument);
        while (body.firstChild) {
          // eslint-disable-next-line unicorn/prefer-dom-node-append
          returnNode.appendChild(body.firstChild);
        }
      } else {
        returnNode = body;
      }
      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {
        /*
          AdoptNode() is not used because internal state is not reset
          (e.g. the past names map of a HTMLFormElement), this is safe
          in theory but we would rather not risk another attack vector.
          The state that is cloned by importNode() is explicitly defined
          by the specs.
        */
        returnNode = importNode.call(originalDocument, returnNode, true);
      }
      return returnNode;
    }
    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
    /* Serialize doctype if allowed */
    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + serializedHTML;
    }
    /* Sanitize final string template-safe */
    if (SAFE_FOR_TEMPLATES) {
      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
        serializedHTML = stringReplace(serializedHTML, expr, ' ');
      });
    }
    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
  };
  DOMPurify.setConfig = function () {
    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _parseConfig(cfg);
    SET_CONFIG = true;
  };
  DOMPurify.clearConfig = function () {
    CONFIG = null;
    SET_CONFIG = false;
  };
  DOMPurify.isValidAttribute = function (tag, attr, value) {
    /* Initialize shared config vars if necessary. */
    if (!CONFIG) {
      _parseConfig({});
    }
    const lcTag = transformCaseFunc(tag);
    const lcName = transformCaseFunc(attr);
    return _isValidAttribute(lcTag, lcName, value);
  };
  DOMPurify.addHook = function (entryPoint, hookFunction) {
    if (typeof hookFunction !== 'function') {
      return;
    }
    arrayPush(hooks[entryPoint], hookFunction);
  };
  DOMPurify.removeHook = function (entryPoint) {
    return arrayPop(hooks[entryPoint]);
  };
  DOMPurify.removeHooks = function (entryPoint) {
    hooks[entryPoint] = [];
  };
  DOMPurify.removeAllHooks = function () {
    hooks = _createHooksMap();
  };
  return DOMPurify;
}
var purify = createDOMPurify();

module.exports = purify;
//# sourceMappingURL=purify.cjs.js.map


/***/ }),

/***/ 904855:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function e(e){return e&&e.default||e}module.exports=global.DOMPurify=global.DOMPurify||("undefined"!=typeof window?e(__webpack_require__(435465)):function(){const r=e(__webpack_require__(435465)),{JSDOM:u}=e(__webpack_require__(832325)),{window:o}=new u("<!DOCTYPE html>");return r(o)}());

/***/ }),

/***/ 747457:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(666973),
    root = __webpack_require__(193972);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),

/***/ 45760:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hashClear = __webpack_require__(53575),
    hashDelete = __webpack_require__(880691),
    hashGet = __webpack_require__(709498),
    hashHas = __webpack_require__(194526),
    hashSet = __webpack_require__(757542);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ 514940:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var listCacheClear = __webpack_require__(380920),
    listCacheDelete = __webpack_require__(493615),
    listCacheGet = __webpack_require__(877894),
    listCacheHas = __webpack_require__(339970),
    listCacheSet = __webpack_require__(330010);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ 189776:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(666973),
    root = __webpack_require__(193972);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ 904228:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mapCacheClear = __webpack_require__(999891),
    mapCacheDelete = __webpack_require__(687751),
    mapCacheGet = __webpack_require__(365214),
    mapCacheHas = __webpack_require__(680234),
    mapCacheSet = __webpack_require__(178034);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ 90739:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(666973),
    root = __webpack_require__(193972);

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),

/***/ 203126:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(666973),
    root = __webpack_require__(193972);

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),

/***/ 338070:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(904228),
    setCacheAdd = __webpack_require__(353499),
    setCacheHas = __webpack_require__(985892);

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),

/***/ 991010:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(514940),
    stackClear = __webpack_require__(774757),
    stackDelete = __webpack_require__(642229),
    stackGet = __webpack_require__(783044),
    stackHas = __webpack_require__(828104),
    stackSet = __webpack_require__(415336);

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),

/***/ 470965:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(193972);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),

/***/ 478492:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(666973),
    root = __webpack_require__(193972);

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),

/***/ 24013:
/***/ ((module) => {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),

/***/ 567072:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTimes = __webpack_require__(800551),
    isArguments = __webpack_require__(651357),
    isArray = __webpack_require__(152488),
    isBuffer = __webpack_require__(681215),
    isIndex = __webpack_require__(289834),
    isTypedArray = __webpack_require__(152984);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),

/***/ 72335:
/***/ ((module) => {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),

/***/ 405955:
/***/ ((module) => {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),

/***/ 145256:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__(706331);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ 156966:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(72335),
    isArray = __webpack_require__(152488);

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),

/***/ 42101:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(263229),
    isObjectLike = __webpack_require__(354109);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),

/***/ 365817:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqualDeep = __webpack_require__(170639),
    isObjectLike = __webpack_require__(354109);

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),

/***/ 170639:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(991010),
    equalArrays = __webpack_require__(414864),
    equalByTag = __webpack_require__(383955),
    equalObjects = __webpack_require__(212700),
    getTag = __webpack_require__(628528),
    isArray = __webpack_require__(152488),
    isBuffer = __webpack_require__(681215),
    isTypedArray = __webpack_require__(152984);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),

/***/ 937986:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(740577),
    isMasked = __webpack_require__(553765),
    isObject = __webpack_require__(828750),
    toSource = __webpack_require__(445288);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ 744896:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(263229),
    isLength = __webpack_require__(252681),
    isObjectLike = __webpack_require__(354109);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),

/***/ 869277:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPrototype = __webpack_require__(66216),
    nativeKeys = __webpack_require__(248207);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),

/***/ 800551:
/***/ ((module) => {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),

/***/ 799025:
/***/ ((module) => {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),

/***/ 695466:
/***/ ((module) => {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),

/***/ 41972:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(193972);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ 414864:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__(338070),
    arraySome = __webpack_require__(405955),
    cacheHas = __webpack_require__(695466);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),

/***/ 383955:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(856504),
    Uint8Array = __webpack_require__(470965),
    eq = __webpack_require__(706331),
    equalArrays = __webpack_require__(414864),
    mapToArray = __webpack_require__(209484),
    setToArray = __webpack_require__(718330);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),

/***/ 212700:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getAllKeys = __webpack_require__(648427);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),

/***/ 648427:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__(156966),
    getSymbols = __webpack_require__(840761),
    keys = __webpack_require__(444197);

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),

/***/ 856294:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isKeyable = __webpack_require__(970397);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ 666973:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsNative = __webpack_require__(937986),
    getValue = __webpack_require__(655701);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ 840761:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayFilter = __webpack_require__(24013),
    stubArray = __webpack_require__(501064);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),

/***/ 628528:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DataView = __webpack_require__(747457),
    Map = __webpack_require__(189776),
    Promise = __webpack_require__(90739),
    Set = __webpack_require__(203126),
    WeakMap = __webpack_require__(478492),
    baseGetTag = __webpack_require__(263229),
    toSource = __webpack_require__(445288);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),

/***/ 655701:
/***/ ((module) => {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ 53575:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(582511);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ 880691:
/***/ ((module) => {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ 709498:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(582511);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ 194526:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(582511);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ 757542:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(582511);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ 289834:
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ 970397:
/***/ ((module) => {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ 553765:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var coreJsData = __webpack_require__(41972);

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ 66216:
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),

/***/ 380920:
/***/ ((module) => {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ 493615:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(145256);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ 877894:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(145256);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ 339970:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(145256);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ 330010:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(145256);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ 999891:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Hash = __webpack_require__(45760),
    ListCache = __webpack_require__(514940),
    Map = __webpack_require__(189776);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ 687751:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(856294);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ 365214:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(856294);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ 680234:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(856294);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ 178034:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(856294);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ 209484:
/***/ ((module) => {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),

/***/ 582511:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(666973);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ 248207:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(347848);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ 416604:
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var freeGlobal = __webpack_require__(596837);

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;


/***/ }),

/***/ 347848:
/***/ ((module) => {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ 353499:
/***/ ((module) => {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),

/***/ 985892:
/***/ ((module) => {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),

/***/ 718330:
/***/ ((module) => {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),

/***/ 774757:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(514940);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),

/***/ 642229:
/***/ ((module) => {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),

/***/ 783044:
/***/ ((module) => {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),

/***/ 828104:
/***/ ((module) => {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),

/***/ 415336:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(514940),
    Map = __webpack_require__(189776),
    MapCache = __webpack_require__(904228);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),

/***/ 445288:
/***/ ((module) => {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ 706331:
/***/ ((module) => {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ 651357:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsArguments = __webpack_require__(42101),
    isObjectLike = __webpack_require__(354109);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),

/***/ 353355:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(740577),
    isLength = __webpack_require__(252681);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ 681215:
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(193972),
    stubFalse = __webpack_require__(30534);

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;


/***/ }),

/***/ 628177:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqual = __webpack_require__(365817);

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;


/***/ }),

/***/ 740577:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(263229),
    isObject = __webpack_require__(828750);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ 252681:
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ 152984:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsTypedArray = __webpack_require__(744896),
    baseUnary = __webpack_require__(799025),
    nodeUtil = __webpack_require__(416604);

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),

/***/ 444197:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__(567072),
    baseKeys = __webpack_require__(869277),
    isArrayLike = __webpack_require__(353355);

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),

/***/ 501064:
/***/ ((module) => {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ 30534:
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ 180760:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ ArrowRight)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58303);
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const ArrowRight = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)("ArrowRight", [
    [
        "path",
        {
            d: "M5 12h14",
            key: "1ays0h"
        }
    ],
    [
        "path",
        {
            d: "m12 5 7 7-7 7",
            key: "xquz4c"
        }
    ]
]);
 //# sourceMappingURL=arrow-right.js.map


/***/ }),

/***/ 617836:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ CalendarDays)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58303);
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const CalendarDays = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)("CalendarDays", [
    [
        "path",
        {
            d: "M8 2v4",
            key: "1cmpym"
        }
    ],
    [
        "path",
        {
            d: "M16 2v4",
            key: "4m81vk"
        }
    ],
    [
        "rect",
        {
            width: "18",
            height: "18",
            x: "3",
            y: "4",
            rx: "2",
            key: "1hopcy"
        }
    ],
    [
        "path",
        {
            d: "M3 10h18",
            key: "8toen8"
        }
    ],
    [
        "path",
        {
            d: "M8 14h.01",
            key: "6423bh"
        }
    ],
    [
        "path",
        {
            d: "M12 14h.01",
            key: "1etili"
        }
    ],
    [
        "path",
        {
            d: "M16 14h.01",
            key: "1gbofw"
        }
    ],
    [
        "path",
        {
            d: "M8 18h.01",
            key: "lrp35t"
        }
    ],
    [
        "path",
        {
            d: "M12 18h.01",
            key: "mhygvu"
        }
    ],
    [
        "path",
        {
            d: "M16 18h.01",
            key: "kzsmim"
        }
    ]
]);
 //# sourceMappingURL=calendar-days.js.map


/***/ }),

/***/ 88515:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ CircleAlert)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58303);
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const CircleAlert = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)("CircleAlert", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "8",
            y2: "12",
            key: "1pkeuh"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12.01",
            y1: "16",
            y2: "16",
            key: "4dfq90"
        }
    ]
]);
 //# sourceMappingURL=circle-alert.js.map


/***/ }),

/***/ 359802:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ Contact)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58303);
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Contact = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)("Contact", [
    [
        "path",
        {
            d: "M16 2v2",
            key: "scm5qe"
        }
    ],
    [
        "path",
        {
            d: "M7 22v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2",
            key: "1waht3"
        }
    ],
    [
        "path",
        {
            d: "M8 2v2",
            key: "pbkmx"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "11",
            r: "3",
            key: "itu57m"
        }
    ],
    [
        "rect",
        {
            x: "3",
            y: "4",
            width: "18",
            height: "18",
            rx: "2",
            key: "12vinp"
        }
    ]
]);
 //# sourceMappingURL=contact.js.map


/***/ }),

/***/ 412090:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ FileDigit)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58303);
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const FileDigit = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)("FileDigit", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4",
            key: "1pf5j1"
        }
    ],
    [
        "path",
        {
            d: "M14 2v4a2 2 0 0 0 2 2h4",
            key: "tnqrlb"
        }
    ],
    [
        "rect",
        {
            width: "4",
            height: "6",
            x: "2",
            y: "12",
            rx: "2",
            key: "jm304g"
        }
    ],
    [
        "path",
        {
            d: "M10 12h2v6",
            key: "12zw74"
        }
    ],
    [
        "path",
        {
            d: "M10 18h4",
            key: "1ulq68"
        }
    ]
]);
 //# sourceMappingURL=file-digit.js.map


/***/ }),

/***/ 341556:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ FileType2)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58303);
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const FileType2 = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)("FileType2", [
    [
        "path",
        {
            d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4",
            key: "1pf5j1"
        }
    ],
    [
        "path",
        {
            d: "M14 2v4a2 2 0 0 0 2 2h4",
            key: "tnqrlb"
        }
    ],
    [
        "path",
        {
            d: "M2 13v-1h6v1",
            key: "1dh9dg"
        }
    ],
    [
        "path",
        {
            d: "M5 12v6",
            key: "150t9c"
        }
    ],
    [
        "path",
        {
            d: "M4 18h2",
            key: "1xrofg"
        }
    ]
]);
 //# sourceMappingURL=file-type-2.js.map


/***/ }),

/***/ 338490:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ House)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58303);
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const House = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)("House", [
    [
        "path",
        {
            d: "M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8",
            key: "5wwlr5"
        }
    ],
    [
        "path",
        {
            d: "M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z",
            key: "1d0kgt"
        }
    ]
]);
 //# sourceMappingURL=house.js.map


/***/ }),

/***/ 321070:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ Phone)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58303);
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Phone = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)("Phone", [
    [
        "path",
        {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
        }
    ]
]);
 //# sourceMappingURL=phone.js.map


/***/ }),

/***/ 523528:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ Presentation)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58303);
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Presentation = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)("Presentation", [
    [
        "path",
        {
            d: "M2 3h20",
            key: "91anmk"
        }
    ],
    [
        "path",
        {
            d: "M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3",
            key: "2k9sn8"
        }
    ],
    [
        "path",
        {
            d: "m7 21 5-5 5 5",
            key: "bip4we"
        }
    ]
]);
 //# sourceMappingURL=presentation.js.map


/***/ }),

/***/ 691794:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ Smile)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58303);
/**
 * @license lucide-react v0.468.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ 
const Smile = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)("Smile", [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "M8 14s1.5 2 4 2 4-2 4-2",
            key: "1y1vjs"
        }
    ],
    [
        "line",
        {
            x1: "9",
            x2: "9.01",
            y1: "9",
            y2: "9",
            key: "yxxnd0"
        }
    ],
    [
        "line",
        {
            x1: "15",
            x2: "15.01",
            y1: "9",
            y2: "9",
            key: "1p4y9e"
        }
    ]
]);
 //# sourceMappingURL=smile.js.map


/***/ }),

/***/ 394920:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const p_defer_1 = __importDefault(__webpack_require__(418277));
function mapAgeCleaner(map, property = 'maxAge') {
    let processingKey;
    let processingTimer;
    let processingDeferred;
    const cleanup = () => __awaiter(this, void 0, void 0, function* () {
        if (processingKey !== undefined) {
            // If we are already processing an item, we can safely exit
            return;
        }
        const setupTimer = (item) => __awaiter(this, void 0, void 0, function* () {
            processingDeferred = p_defer_1.default();
            const delay = item[1][property] - Date.now();
            if (delay <= 0) {
                // Remove the item immediately if the delay is equal to or below 0
                map.delete(item[0]);
                processingDeferred.resolve();
                return;
            }
            // Keep track of the current processed key
            processingKey = item[0];
            processingTimer = setTimeout(() => {
                // Remove the item when the timeout fires
                map.delete(item[0]);
                if (processingDeferred) {
                    processingDeferred.resolve();
                }
            }, delay);
            // tslint:disable-next-line:strict-type-predicates
            if (typeof processingTimer.unref === 'function') {
                // Don't hold up the process from exiting
                processingTimer.unref();
            }
            return processingDeferred.promise;
        });
        try {
            for (const entry of map) {
                yield setupTimer(entry);
            }
        }
        catch (_a) {
            // Do nothing if an error occurs, this means the timer was cleaned up and we should stop processing
        }
        processingKey = undefined;
    });
    const reset = () => {
        processingKey = undefined;
        if (processingTimer !== undefined) {
            clearTimeout(processingTimer);
            processingTimer = undefined;
        }
        if (processingDeferred !== undefined) { // tslint:disable-line:early-exit
            processingDeferred.reject(undefined);
            processingDeferred = undefined;
        }
    };
    const originalSet = map.set.bind(map);
    map.set = (key, value) => {
        if (map.has(key)) {
            // If the key already exist, remove it so we can add it back at the end of the map.
            map.delete(key);
        }
        // Call the original `map.set`
        const result = originalSet(key, value);
        // If we are already processing a key and the key added is the current processed key, stop processing it
        if (processingKey && processingKey === key) {
            reset();
        }
        // Always run the cleanup method in case it wasn't started yet
        cleanup(); // tslint:disable-line:no-floating-promises
        return result;
    };
    cleanup(); // tslint:disable-line:no-floating-promises
    return map;
}
exports["default"] = mapAgeCleaner;
// Add support for CJS
module.exports = mapAgeCleaner;
module.exports["default"] = mapAgeCleaner;


/***/ }),

/***/ 94226:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const mimicFn = __webpack_require__(35433);
const mapAgeCleaner = __webpack_require__(394920);
const decoratorInstanceMap = new WeakMap();
const cacheStore = new WeakMap();
/**
[Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input.

@param fn - Function to be memoized.

@example
```
import mem = require('mem');

let i = 0;
const counter = () => ++i;
const memoized = mem(counter);

memoized('foo');
//=> 1

// Cached as it's the same arguments
memoized('foo');
//=> 1

// Not cached anymore as the arguments changed
memoized('bar');
//=> 2

memoized('bar');
//=> 2
```
*/
const mem = (fn, { cacheKey, cache = new Map(), maxAge } = {}) => {
    if (typeof maxAge === 'number') {
        // TODO: Drop after https://github.com/SamVerschueren/map-age-cleaner/issues/5
        // @ts-expect-error
        mapAgeCleaner(cache);
    }
    const memoized = function (...arguments_) {
        const key = cacheKey ? cacheKey(arguments_) : arguments_[0];
        const cacheItem = cache.get(key);
        if (cacheItem) {
            return cacheItem.data;
        }
        const result = fn.apply(this, arguments_);
        cache.set(key, {
            data: result,
            maxAge: maxAge ? Date.now() + maxAge : Number.POSITIVE_INFINITY
        });
        return result;
    };
    mimicFn(memoized, fn, {
        ignoreNonConfigurable: true
    });
    cacheStore.set(memoized, cache);
    return memoized;
};
/**
@returns A [decorator](https://github.com/tc39/proposal-decorators) to memoize class methods or static class methods.

@example
```
import mem = require('mem');

class Example {
    index = 0

    @mem.decorator()
    counter() {
        return ++this.index;
    }
}

class ExampleWithOptions {
    index = 0

    @mem.decorator({maxAge: 1000})
    counter() {
        return ++this.index;
    }
}
```
*/
mem.decorator = (options = {}) => (target, propertyKey, descriptor) => {
    const input = target[propertyKey];
    if (typeof input !== 'function') {
        throw new TypeError('The decorated value must be a function');
    }
    delete descriptor.value;
    delete descriptor.writable;
    descriptor.get = function () {
        if (!decoratorInstanceMap.has(this)) {
            const value = mem(input, options);
            decoratorInstanceMap.set(this, value);
            return value;
        }
        return decoratorInstanceMap.get(this);
    };
};
/**
Clear all cached data of a memoized function.

@param fn - Memoized function.
*/
mem.clear = (fn) => {
    const cache = cacheStore.get(fn);
    if (!cache) {
        throw new TypeError('Can\'t clear a function that was not memoized!');
    }
    if (typeof cache.clear !== 'function') {
        throw new TypeError('The cache Map can\'t be cleared!');
    }
    cache.clear();
};
module.exports = mem;


/***/ }),

/***/ 35433:
/***/ ((module) => {

"use strict";


const copyProperty = (to, from, property, ignoreNonConfigurable) => {
	// `Function#length` should reflect the parameters of `to` not `from` since we keep its body.
	// `Function#prototype` is non-writable and non-configurable so can never be modified.
	if (property === 'length' || property === 'prototype') {
		return;
	}

	// `Function#arguments` and `Function#caller` should not be copied. They were reported to be present in `Reflect.ownKeys` for some devices in React Native (#41), so we explicitly ignore them here.
	if (property === 'arguments' || property === 'caller') {
		return;
	}

	const toDescriptor = Object.getOwnPropertyDescriptor(to, property);
	const fromDescriptor = Object.getOwnPropertyDescriptor(from, property);

	if (!canCopyProperty(toDescriptor, fromDescriptor) && ignoreNonConfigurable) {
		return;
	}

	Object.defineProperty(to, property, fromDescriptor);
};

// `Object.defineProperty()` throws if the property exists, is not configurable and either:
//  - one its descriptors is changed
//  - it is non-writable and its value is changed
const canCopyProperty = function (toDescriptor, fromDescriptor) {
	return toDescriptor === undefined || toDescriptor.configurable || (
		toDescriptor.writable === fromDescriptor.writable &&
		toDescriptor.enumerable === fromDescriptor.enumerable &&
		toDescriptor.configurable === fromDescriptor.configurable &&
		(toDescriptor.writable || toDescriptor.value === fromDescriptor.value)
	);
};

const changePrototype = (to, from) => {
	const fromPrototype = Object.getPrototypeOf(from);
	if (fromPrototype === Object.getPrototypeOf(to)) {
		return;
	}

	Object.setPrototypeOf(to, fromPrototype);
};

const wrappedToString = (withName, fromBody) => `/* Wrapped ${withName}*/\n${fromBody}`;

const toStringDescriptor = Object.getOwnPropertyDescriptor(Function.prototype, 'toString');
const toStringName = Object.getOwnPropertyDescriptor(Function.prototype.toString, 'name');

// We call `from.toString()` early (not lazily) to ensure `from` can be garbage collected.
// We use `bind()` instead of a closure for the same reason.
// Calling `from.toString()` early also allows caching it in case `to.toString()` is called several times.
const changeToString = (to, from, name) => {
	const withName = name === '' ? '' : `with ${name.trim()}() `;
	const newToString = wrappedToString.bind(null, withName, from.toString());
	// Ensure `to.toString.toString` is non-enumerable and has the same `same`
	Object.defineProperty(newToString, 'name', toStringName);
	Object.defineProperty(to, 'toString', {...toStringDescriptor, value: newToString});
};

const mimicFn = (to, from, {ignoreNonConfigurable = false} = {}) => {
	const {name} = to;

	for (const property of Reflect.ownKeys(from)) {
		copyProperty(to, from, property, ignoreNonConfigurable);
	}

	changePrototype(to, from);
	changeToString(to, from, name);

	return to;
};

module.exports = mimicFn;


/***/ }),

/***/ 418277:
/***/ ((module) => {

"use strict";

module.exports = () => {
	const ret = {};

	ret.promise = new Promise((resolve, reject) => {
		ret.resolve = resolve;
		ret.reject = reject;
	});

	return ret;
};


/***/ }),

/***/ 809598:
/***/ (() => {

Prism.languages.c = Prism.languages.extend('clike', {
	'comment': {
		pattern: /\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,
		greedy: true
	},
	'string': {
		// https://en.cppreference.com/w/c/language/string_literal
		pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
		greedy: true
	},
	'class-name': {
		pattern: /(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,
		lookbehind: true
	},
	'keyword': /\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,
	'function': /\b[a-z_]\w*(?=\s*\()/i,
	'number': /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,
	'operator': />>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/
});

Prism.languages.insertBefore('c', 'string', {
	'char': {
		// https://en.cppreference.com/w/c/language/character_constant
		pattern: /'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,
		greedy: true
	}
});

Prism.languages.insertBefore('c', 'string', {
	'macro': {
		// allow for multiline macro definitions
		// spaces after the # character compile fine with gcc
		pattern: /(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,
		lookbehind: true,
		greedy: true,
		alias: 'property',
		inside: {
			'string': [
				{
					// highlight the path of the include statement as a string
					pattern: /^(#\s*include\s*)<[^>]+>/,
					lookbehind: true
				},
				Prism.languages.c['string']
			],
			'char': Prism.languages.c['char'],
			'comment': Prism.languages.c['comment'],
			'macro-name': [
				{
					pattern: /(^#\s*define\s+)\w+\b(?!\()/i,
					lookbehind: true
				},
				{
					pattern: /(^#\s*define\s+)\w+\b(?=\()/i,
					lookbehind: true,
					alias: 'function'
				}
			],
			// highlight macro directives as keywords
			'directive': {
				pattern: /^(#\s*)[a-z]+/,
				lookbehind: true,
				alias: 'keyword'
			},
			'directive-hash': /^#/,
			'punctuation': /##|\\(?=[\r\n])/,
			'expression': {
				pattern: /\S[\s\S]*/,
				inside: Prism.languages.c
			}
		}
	}
});

Prism.languages.insertBefore('c', 'function', {
	// highlight predefined macros as constants
	'constant': /\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/
});

delete Prism.languages.c['boolean'];


/***/ }),

/***/ 141901:
/***/ (() => {

Prism.languages.clike = {
	'comment': [
		{
			pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
			lookbehind: true,
			greedy: true
		},
		{
			pattern: /(^|[^\\:])\/\/.*/,
			lookbehind: true,
			greedy: true
		}
	],
	'string': {
		pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
		greedy: true
	},
	'class-name': {
		pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
		lookbehind: true,
		inside: {
			'punctuation': /[.\\]/
		}
	},
	'keyword': /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
	'boolean': /\b(?:false|true)\b/,
	'function': /\b\w+(?=\()/,
	'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
	'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
	'punctuation': /[{}[\];(),.:]/
};


/***/ }),

/***/ 612886:
/***/ (() => {

(function (Prism) {

	var keyword = /\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/;
	var modName = /\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g, function () { return keyword.source; });

	Prism.languages.cpp = Prism.languages.extend('c', {
		'class-name': [
			{
				pattern: RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source
					.replace(/<keyword>/g, function () { return keyword.source; })),
				lookbehind: true
			},
			// This is intended to capture the class name of method implementations like:
			//   void foo::bar() const {}
			// However! The `foo` in the above example could also be a namespace, so we only capture the class name if
			// it starts with an uppercase letter. This approximation should give decent results.
			/\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,
			// This will capture the class name before destructors like:
			//   Foo::~Foo() {}
			/\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,
			// This also intends to capture the class name of method implementations but here the class has template
			// parameters, so it can't be a namespace (until C++ adds generic namespaces).
			/\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/
		],
		'keyword': keyword,
		'number': {
			pattern: /(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,
			greedy: true
		},
		'operator': />>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,
		'boolean': /\b(?:false|true)\b/
	});

	Prism.languages.insertBefore('cpp', 'string', {
		'module': {
			// https://en.cppreference.com/w/cpp/language/modules
			pattern: RegExp(
				/(\b(?:import|module)\s+)/.source +
				'(?:' +
				// header-name
				/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source +
				'|' +
				// module name or partition or both
				/<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g, function () { return modName; }) +
				')'
			),
			lookbehind: true,
			greedy: true,
			inside: {
				'string': /^[<"][\s\S]+/,
				'operator': /:/,
				'punctuation': /\./
			}
		},
		'raw-string': {
			pattern: /R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,
			alias: 'string',
			greedy: true
		}
	});

	Prism.languages.insertBefore('cpp', 'keyword', {
		'generic-function': {
			pattern: /\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,
			inside: {
				'function': /^\w+/,
				'generic': {
					pattern: /<[\s\S]+/,
					alias: 'class-name',
					inside: Prism.languages.cpp
				}
			}
		}
	});

	Prism.languages.insertBefore('cpp', 'operator', {
		'double-colon': {
			pattern: /::/,
			alias: 'punctuation'
		}
	});

	Prism.languages.insertBefore('cpp', 'class-name', {
		// the base clause is an optional list of parent classes
		// https://en.cppreference.com/w/cpp/language/class
		'base-clause': {
			pattern: /(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,
			lookbehind: true,
			greedy: true,
			inside: Prism.languages.extend('cpp', {})
		}
	});

	Prism.languages.insertBefore('inside', 'double-colon', {
		// All untokenized words that are not namespaces should be class names
		'class-name': /\b[a-z_]\w*\b(?!\s*::)/i
	}, Prism.languages.cpp['base-clause']);

}(Prism));


/***/ }),

/***/ 570476:
/***/ (() => {

(function (Prism) {

	var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;

	Prism.languages.css = {
		'comment': /\/\*[\s\S]*?\*\//,
		'atrule': {
			pattern: RegExp('@[\\w-](?:' + /[^;{\s"']|\s+(?!\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\s*\{))/.source),
			inside: {
				'rule': /^@[\w-]+/,
				'selector-function-argument': {
					pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
					lookbehind: true,
					alias: 'selector'
				},
				'keyword': {
					pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
					lookbehind: true
				}
				// See rest below
			}
		},
		'url': {
			// https://drafts.csswg.org/css-values-3/#urls
			pattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),
			greedy: true,
			inside: {
				'function': /^url/i,
				'punctuation': /^\(|\)$/,
				'string': {
					pattern: RegExp('^' + string.source + '$'),
					alias: 'url'
				}
			}
		},
		'selector': {
			pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),
			lookbehind: true
		},
		'string': {
			pattern: string,
			greedy: true
		},
		'property': {
			pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
			lookbehind: true
		},
		'important': /!important\b/i,
		'function': {
			pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
			lookbehind: true
		},
		'punctuation': /[(){};:,]/
	};

	Prism.languages.css['atrule'].inside.rest = Prism.languages.css;

	var markup = Prism.languages.markup;
	if (markup) {
		markup.tag.addInlined('style', 'css');
		markup.tag.addAttribute('style', 'css');
	}

}(Prism));


/***/ }),

/***/ 638779:
/***/ (() => {

(function (Prism) {

	var keywords = /\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\s*[(){}[\]<>=%~.:,;?+\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/;

	// full package (optional) + parent classes (optional)
	var classNamePrefix = /(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source;

	// based on the java naming conventions
	var className = {
		pattern: RegExp(/(^|[^\w.])/.source + classNamePrefix + /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),
		lookbehind: true,
		inside: {
			'namespace': {
				pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
				inside: {
					'punctuation': /\./
				}
			},
			'punctuation': /\./
		}
	};

	Prism.languages.java = Prism.languages.extend('clike', {
		'string': {
			pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"/,
			lookbehind: true,
			greedy: true
		},
		'class-name': [
			className,
			{
				// variables, parameters, and constructor references
				// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
				pattern: RegExp(/(^|[^\w.])/.source + classNamePrefix + /[A-Z]\w*(?=\s+\w+\s*[;,=()]|\s*(?:\[[\s,]*\]\s*)?::\s*new\b)/.source),
				lookbehind: true,
				inside: className.inside
			},
			{
				// class names based on keyword
				// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
				pattern: RegExp(/(\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\s+)/.source + classNamePrefix + /[A-Z]\w*\b/.source),
				lookbehind: true,
				inside: className.inside
			}
		],
		'keyword': keywords,
		'function': [
			Prism.languages.clike.function,
			{
				pattern: /(::\s*)[a-z_]\w*/,
				lookbehind: true
			}
		],
		'number': /\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,
		'operator': {
			pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,
			lookbehind: true
		},
		'constant': /\b[A-Z][A-Z_\d]+\b/
	});

	Prism.languages.insertBefore('java', 'string', {
		'triple-quoted-string': {
			// http://openjdk.java.net/jeps/355#Description
			pattern: /"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,
			greedy: true,
			alias: 'string'
		},
		'char': {
			pattern: /'(?:\\.|[^'\\\r\n]){1,6}'/,
			greedy: true
		}
	});

	Prism.languages.insertBefore('java', 'class-name', {
		'annotation': {
			pattern: /(^|[^.])@\w+(?:\s*\.\s*\w+)*/,
			lookbehind: true,
			alias: 'punctuation'
		},
		'generics': {
			pattern: /<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&))*>)*>)*>)*>/,
			inside: {
				'class-name': className,
				'keyword': keywords,
				'punctuation': /[<>(),.:]/,
				'operator': /[?&|]/
			}
		},
		'import': [
			{
				pattern: RegExp(/(\bimport\s+)/.source + classNamePrefix + /(?:[A-Z]\w*|\*)(?=\s*;)/.source),
				lookbehind: true,
				inside: {
					'namespace': className.inside.namespace,
					'punctuation': /\./,
					'operator': /\*/,
					'class-name': /\w+/
				}
			},
			{
				pattern: RegExp(/(\bimport\s+static\s+)/.source + classNamePrefix + /(?:\w+|\*)(?=\s*;)/.source),
				lookbehind: true,
				alias: 'static',
				inside: {
					'namespace': className.inside.namespace,
					'static': /\b\w+$/,
					'punctuation': /\./,
					'operator': /\*/,
					'class-name': /\w+/
				}
			}
		],
		'namespace': {
			pattern: RegExp(
				/(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/
					.source.replace(/<keyword>/g, function () { return keywords.source; })),
			lookbehind: true,
			inside: {
				'punctuation': /\./,
			}
		}
	});
}(Prism));


/***/ }),

/***/ 960048:
/***/ (() => {

Prism.languages.javascript = Prism.languages.extend('clike', {
	'class-name': [
		Prism.languages.clike['class-name'],
		{
			pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
			lookbehind: true
		}
	],
	'keyword': [
		{
			pattern: /((?:^|\})\s*)catch\b/,
			lookbehind: true
		},
		{
			pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
			lookbehind: true
		},
	],
	// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
	'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
	'number': {
		pattern: RegExp(
			/(^|[^\w$])/.source +
			'(?:' +
			(
				// constant
				/NaN|Infinity/.source +
				'|' +
				// binary integer
				/0[bB][01]+(?:_[01]+)*n?/.source +
				'|' +
				// octal integer
				/0[oO][0-7]+(?:_[0-7]+)*n?/.source +
				'|' +
				// hexadecimal integer
				/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source +
				'|' +
				// decimal bigint
				/\d+(?:_\d+)*n/.source +
				'|' +
				// decimal number (integer or float) but no bigint
				/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source
			) +
			')' +
			/(?![\w$])/.source
		),
		lookbehind: true
	},
	'operator': /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
});

Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;

Prism.languages.insertBefore('javascript', 'keyword', {
	'regex': {
		pattern: RegExp(
			// lookbehind
			// eslint-disable-next-line regexp/no-dupe-characters-character-class
			/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source +
			// Regex pattern:
			// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
			// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
			// with the only syntax, so we have to define 2 different regex patterns.
			/\//.source +
			'(?:' +
			/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source +
			'|' +
			// `v` flag syntax. This supports 3 levels of nested character classes.
			/(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +
			')' +
			// lookahead
			/(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source
		),
		lookbehind: true,
		greedy: true,
		inside: {
			'regex-source': {
				pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
				lookbehind: true,
				alias: 'language-regex',
				inside: Prism.languages.regex
			},
			'regex-delimiter': /^\/|\/$/,
			'regex-flags': /^[a-z]+$/,
		}
	},
	// This must be declared before keyword because we use "function" inside the look-forward
	'function-variable': {
		pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
		alias: 'function'
	},
	'parameter': [
		{
			pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
			lookbehind: true,
			inside: Prism.languages.javascript
		}
	],
	'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
});

Prism.languages.insertBefore('javascript', 'string', {
	'hashbang': {
		pattern: /^#!.*/,
		greedy: true,
		alias: 'comment'
	},
	'template-string': {
		pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
		greedy: true,
		inside: {
			'template-punctuation': {
				pattern: /^`|`$/,
				alias: 'string'
			},
			'interpolation': {
				pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
				lookbehind: true,
				inside: {
					'interpolation-punctuation': {
						pattern: /^\$\{|\}$/,
						alias: 'punctuation'
					},
					rest: Prism.languages.javascript
				}
			},
			'string': /[\s\S]+/
		}
	},
	'string-property': {
		pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
		lookbehind: true,
		greedy: true,
		alias: 'property'
	}
});

Prism.languages.insertBefore('javascript', 'operator', {
	'literal-property': {
		pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
		lookbehind: true,
		alias: 'property'
	},
});

if (Prism.languages.markup) {
	Prism.languages.markup.tag.addInlined('script', 'javascript');

	// add attribute support for all DOM events.
	// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
	Prism.languages.markup.tag.addAttribute(
		/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,
		'javascript'
	);
}

Prism.languages.js = Prism.languages.javascript;


/***/ }),

/***/ 287414:
/***/ (() => {

(function (Prism) {

	// Allow only one line break
	var inner = /(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;

	/**
	 * This function is intended for the creation of the bold or italic pattern.
	 *
	 * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.
	 *
	 * _Note:_ Keep in mind that this adds a capturing group.
	 *
	 * @param {string} pattern
	 * @returns {RegExp}
	 */
	function createInline(pattern) {
		pattern = pattern.replace(/<inner>/g, function () { return inner; });
		return RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + '(?:' + pattern + ')');
	}


	var tableCell = /(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source;
	var tableRow = /\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g, function () { return tableCell; });
	var tableLine = /\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;


	Prism.languages.markdown = Prism.languages.extend('markup', {});
	Prism.languages.insertBefore('markdown', 'prolog', {
		'front-matter-block': {
			pattern: /(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,
			lookbehind: true,
			greedy: true,
			inside: {
				'punctuation': /^---|---$/,
				'front-matter': {
					pattern: /\S+(?:\s+\S+)*/,
					alias: ['yaml', 'language-yaml'],
					inside: Prism.languages.yaml
				}
			}
		},
		'blockquote': {
			// > ...
			pattern: /^>(?:[\t ]*>)*/m,
			alias: 'punctuation'
		},
		'table': {
			pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),
			inside: {
				'table-data-rows': {
					pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),
					lookbehind: true,
					inside: {
						'table-data': {
							pattern: RegExp(tableCell),
							inside: Prism.languages.markdown
						},
						'punctuation': /\|/
					}
				},
				'table-line': {
					pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),
					lookbehind: true,
					inside: {
						'punctuation': /\||:?-{3,}:?/
					}
				},
				'table-header-row': {
					pattern: RegExp('^' + tableRow + '$'),
					inside: {
						'table-header': {
							pattern: RegExp(tableCell),
							alias: 'important',
							inside: Prism.languages.markdown
						},
						'punctuation': /\|/
					}
				}
			}
		},
		'code': [
			{
				// Prefixed by 4 spaces or 1 tab and preceded by an empty line
				pattern: /((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,
				lookbehind: true,
				alias: 'keyword'
			},
			{
				// ```optional language
				// code block
				// ```
				pattern: /^```[\s\S]*?^```$/m,
				greedy: true,
				inside: {
					'code-block': {
						pattern: /^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,
						lookbehind: true
					},
					'code-language': {
						pattern: /^(```).+/,
						lookbehind: true
					},
					'punctuation': /```/
				}
			}
		],
		'title': [
			{
				// title 1
				// =======

				// title 2
				// -------
				pattern: /\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,
				alias: 'important',
				inside: {
					punctuation: /==+$|--+$/
				}
			},
			{
				// # title 1
				// ###### title 6
				pattern: /(^\s*)#.+/m,
				lookbehind: true,
				alias: 'important',
				inside: {
					punctuation: /^#+|#+$/
				}
			}
		],
		'hr': {
			// ***
			// ---
			// * * *
			// -----------
			pattern: /(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
			lookbehind: true,
			alias: 'punctuation'
		},
		'list': {
			// * item
			// + item
			// - item
			// 1. item
			pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,
			lookbehind: true,
			alias: 'punctuation'
		},
		'url-reference': {
			// [id]: http://example.com "Optional title"
			// [id]: http://example.com 'Optional title'
			// [id]: http://example.com (Optional title)
			// [id]: <http://example.com> "Optional title"
			pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,
			inside: {
				'variable': {
					pattern: /^(!?\[)[^\]]+/,
					lookbehind: true
				},
				'string': /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,
				'punctuation': /^[\[\]!:]|[<>]/
			},
			alias: 'url'
		},
		'bold': {
			// **strong**
			// __strong__

			// allow one nested instance of italic text using the same delimiter
			pattern: createInline(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),
			lookbehind: true,
			greedy: true,
			inside: {
				'content': {
					pattern: /(^..)[\s\S]+(?=..$)/,
					lookbehind: true,
					inside: {} // see below
				},
				'punctuation': /\*\*|__/
			}
		},
		'italic': {
			// *em*
			// _em_

			// allow one nested instance of bold text using the same delimiter
			pattern: createInline(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),
			lookbehind: true,
			greedy: true,
			inside: {
				'content': {
					pattern: /(^.)[\s\S]+(?=.$)/,
					lookbehind: true,
					inside: {} // see below
				},
				'punctuation': /[*_]/
			}
		},
		'strike': {
			// ~~strike through~~
			// ~strike~
			// eslint-disable-next-line regexp/strict
			pattern: createInline(/(~~?)(?:(?!~)<inner>)+\2/.source),
			lookbehind: true,
			greedy: true,
			inside: {
				'content': {
					pattern: /(^~~?)[\s\S]+(?=\1$)/,
					lookbehind: true,
					inside: {} // see below
				},
				'punctuation': /~~?/
			}
		},
		'code-snippet': {
			// `code`
			// ``code``
			pattern: /(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,
			lookbehind: true,
			greedy: true,
			alias: ['code', 'keyword']
		},
		'url': {
			// [example](http://example.com "Optional title")
			// [example][id]
			// [example] [id]
			pattern: createInline(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),
			lookbehind: true,
			greedy: true,
			inside: {
				'operator': /^!/,
				'content': {
					pattern: /(^\[)[^\]]+(?=\])/,
					lookbehind: true,
					inside: {} // see below
				},
				'variable': {
					pattern: /(^\][ \t]?\[)[^\]]+(?=\]$)/,
					lookbehind: true
				},
				'url': {
					pattern: /(^\]\()[^\s)]+/,
					lookbehind: true
				},
				'string': {
					pattern: /(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,
					lookbehind: true
				}
			}
		}
	});

	['url', 'bold', 'italic', 'strike'].forEach(function (token) {
		['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {
			if (token !== inside) {
				Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];
			}
		});
	});

	Prism.hooks.add('after-tokenize', function (env) {
		if (env.language !== 'markdown' && env.language !== 'md') {
			return;
		}

		function walkTokens(tokens) {
			if (!tokens || typeof tokens === 'string') {
				return;
			}

			for (var i = 0, l = tokens.length; i < l; i++) {
				var token = tokens[i];

				if (token.type !== 'code') {
					walkTokens(token.content);
					continue;
				}

				/*
				 * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token
				 * is optional. But the grammar is defined so that there is only one case we have to handle:
				 *
				 * token.content = [
				 *     <span class="punctuation">```</span>,
				 *     <span class="code-language">xxxx</span>,
				 *     '\n', // exactly one new lines (\r or \n or \r\n)
				 *     <span class="code-block">...</span>,
				 *     '\n', // exactly one new lines again
				 *     <span class="punctuation">```</span>
				 * ];
				 */

				var codeLang = token.content[1];
				var codeBlock = token.content[3];

				if (codeLang && codeBlock &&
					codeLang.type === 'code-language' && codeBlock.type === 'code-block' &&
					typeof codeLang.content === 'string') {

					// this might be a language that Prism does not support

					// do some replacements to support C++, C#, and F#
					var lang = codeLang.content.replace(/\b#/g, 'sharp').replace(/\b\+\+/g, 'pp');
					// only use the first word
					lang = (/[a-z][\w-]*/i.exec(lang) || [''])[0].toLowerCase();
					var alias = 'language-' + lang;

					// add alias
					if (!codeBlock.alias) {
						codeBlock.alias = [alias];
					} else if (typeof codeBlock.alias === 'string') {
						codeBlock.alias = [codeBlock.alias, alias];
					} else {
						codeBlock.alias.push(alias);
					}
				}
			}
		}

		walkTokens(env.tokens);
	});

	Prism.hooks.add('wrap', function (env) {
		if (env.type !== 'code-block') {
			return;
		}

		var codeLang = '';
		for (var i = 0, l = env.classes.length; i < l; i++) {
			var cls = env.classes[i];
			var match = /language-(.+)/.exec(cls);
			if (match) {
				codeLang = match[1];
				break;
			}
		}

		var grammar = Prism.languages[codeLang];

		if (!grammar) {
			if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {
				var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);
				env.attributes['id'] = id;

				Prism.plugins.autoloader.loadLanguages(codeLang, function () {
					var ele = document.getElementById(id);
					if (ele) {
						ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);
					}
				});
			}
		} else {
			env.content = Prism.highlight(textContent(env.content), grammar, codeLang);
		}
	});

	var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');

	/**
	 * A list of known entity names.
	 *
	 * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.
	 *
	 * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}
	 */
	var KNOWN_ENTITY_NAMES = {
		'amp': '&',
		'lt': '<',
		'gt': '>',
		'quot': '"',
	};

	// IE 11 doesn't support `String.fromCodePoint`
	var fromCodePoint = String.fromCodePoint || String.fromCharCode;

	/**
	 * Returns the text content of a given HTML source code string.
	 *
	 * @param {string} html
	 * @returns {string}
	 */
	function textContent(html) {
		// remove all tags
		var text = html.replace(tagPattern, '');

		// decode known entities
		text = text.replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi, function (m, code) {
			code = code.toLowerCase();

			if (code[0] === '#') {
				var value;
				if (code[1] === 'x') {
					value = parseInt(code.slice(2), 16);
				} else {
					value = Number(code.slice(1));
				}

				return fromCodePoint(value);
			} else {
				var known = KNOWN_ENTITY_NAMES[code];
				if (known) {
					return known;
				}

				// unable to decode
				return m;
			}
		});

		return text;
	}

	Prism.languages.md = Prism.languages.markdown;

}(Prism));


/***/ }),

/***/ 614087:
/***/ (() => {

Prism.languages.markup = {
	'comment': {
		pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
		greedy: true
	},
	'prolog': {
		pattern: /<\?[\s\S]+?\?>/,
		greedy: true
	},
	'doctype': {
		// https://www.w3.org/TR/xml/#NT-doctypedecl
		pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
		greedy: true,
		inside: {
			'internal-subset': {
				pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
				lookbehind: true,
				greedy: true,
				inside: null // see below
			},
			'string': {
				pattern: /"[^"]*"|'[^']*'/,
				greedy: true
			},
			'punctuation': /^<!|>$|[[\]]/,
			'doctype-tag': /^DOCTYPE/i,
			'name': /[^\s<>'"]+/
		}
	},
	'cdata': {
		pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
		greedy: true
	},
	'tag': {
		pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
		greedy: true,
		inside: {
			'tag': {
				pattern: /^<\/?[^\s>\/]+/,
				inside: {
					'punctuation': /^<\/?/,
					'namespace': /^[^\s>\/:]+:/
				}
			},
			'special-attr': [],
			'attr-value': {
				pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
				inside: {
					'punctuation': [
						{
							pattern: /^=/,
							alias: 'attr-equals'
						},
						{
							pattern: /^(\s*)["']|["']$/,
							lookbehind: true
						}
					]
				}
			},
			'punctuation': /\/?>/,
			'attr-name': {
				pattern: /[^\s>\/]+/,
				inside: {
					'namespace': /^[^\s>\/:]+:/
				}
			}

		}
	},
	'entity': [
		{
			pattern: /&[\da-z]{1,8};/i,
			alias: 'named-entity'
		},
		/&#x?[\da-f]{1,8};/i
	]
};

Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =
	Prism.languages.markup['entity'];
Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function (env) {

	if (env.type === 'entity') {
		env.attributes['title'] = env.content.replace(/&amp;/, '&');
	}
});

Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
	/**
	 * Adds an inlined language to markup.
	 *
	 * An example of an inlined language is CSS with `<style>` tags.
	 *
	 * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
	 * case insensitive.
	 * @param {string} lang The language key.
	 * @example
	 * addInlined('style', 'css');
	 */
	value: function addInlined(tagName, lang) {
		var includedCdataInside = {};
		includedCdataInside['language-' + lang] = {
			pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
			lookbehind: true,
			inside: Prism.languages[lang]
		};
		includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;

		var inside = {
			'included-cdata': {
				pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
				inside: includedCdataInside
			}
		};
		inside['language-' + lang] = {
			pattern: /[\s\S]+/,
			inside: Prism.languages[lang]
		};

		var def = {};
		def[tagName] = {
			pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),
			lookbehind: true,
			greedy: true,
			inside: inside
		};

		Prism.languages.insertBefore('markup', 'cdata', def);
	}
});
Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
	/**
	 * Adds an pattern to highlight languages embedded in HTML attributes.
	 *
	 * An example of an inlined language is CSS with `style` attributes.
	 *
	 * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
	 * case insensitive.
	 * @param {string} lang The language key.
	 * @example
	 * addAttribute('style', 'css');
	 */
	value: function (attrName, lang) {
		Prism.languages.markup.tag.inside['special-attr'].push({
			pattern: RegExp(
				/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
				'i'
			),
			lookbehind: true,
			inside: {
				'attr-name': /^[^\s=]+/,
				'attr-value': {
					pattern: /=[\s\S]+/,
					inside: {
						'value': {
							pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
							lookbehind: true,
							alias: [lang, 'language-' + lang],
							inside: Prism.languages[lang]
						},
						'punctuation': [
							{
								pattern: /^=/,
								alias: 'attr-equals'
							},
							/"|'/
						]
					}
				}
			}
		});
	}
});

Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;

Prism.languages.xml = Prism.languages.extend('markup', {});
Prism.languages.ssml = Prism.languages.xml;
Prism.languages.atom = Prism.languages.xml;
Prism.languages.rss = Prism.languages.xml;


/***/ }),

/***/ 509899:
/***/ (() => {

Prism.languages.objectivec = Prism.languages.extend('c', {
	'string': {
		pattern: /@?"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
		greedy: true
	},
	'keyword': /\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,
	'operator': /-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/
});

delete Prism.languages.objectivec['class-name'];

Prism.languages.objc = Prism.languages.objectivec;


/***/ }),

/***/ 224002:
/***/ (() => {

(function (Prism) {

	var powershell = Prism.languages.powershell = {
		'comment': [
			{
				pattern: /(^|[^`])<#[\s\S]*?#>/,
				lookbehind: true
			},
			{
				pattern: /(^|[^`])#.*/,
				lookbehind: true
			}
		],
		'string': [
			{
				pattern: /"(?:`[\s\S]|[^`"])*"/,
				greedy: true,
				inside: null // see below
			},
			{
				pattern: /'(?:[^']|'')*'/,
				greedy: true
			}
		],
		// Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices
		// Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)
		'namespace': /\[[a-z](?:\[(?:\[[^\]]*\]|[^\[\]])*\]|[^\[\]])*\]/i,
		'boolean': /\$(?:false|true)\b/i,
		'variable': /\$\w+\b/,
		// Cmdlets and aliases. Aliases should come last, otherwise "write" gets preferred over "write-host" for example
		// Get-Command | ?{ $_.ModuleName -match "Microsoft.PowerShell.(Util|Core|Management)" }
		// Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match "Microsoft.PowerShell.(Util|Core|Management)" }
		'function': [
			/\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\b/i,
			/\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\b/i
		],
		// per http://technet.microsoft.com/en-us/library/hh847744.aspx
		'keyword': /\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\b/i,
		'operator': {
			pattern: /(^|\W)(?:!|-(?:b?(?:and|x?or)|as|(?:Not)?(?:Contains|In|Like|Match)|eq|ge|gt|is(?:Not)?|Join|le|lt|ne|not|Replace|sh[lr])\b|-[-=]?|\+[+=]?|[*\/%]=?)/i,
			lookbehind: true
		},
		'punctuation': /[|{}[\];(),.]/
	};

	// Variable interpolation inside strings, and nested expressions
	powershell.string[0].inside = {
		'function': {
			// Allow for one level of nesting
			pattern: /(^|[^`])\$\((?:\$\([^\r\n()]*\)|(?!\$\()[^\r\n)])*\)/,
			lookbehind: true,
			inside: powershell
		},
		'boolean': powershell.boolean,
		'variable': powershell.variable,
	};

}(Prism));


/***/ }),

/***/ 938445:
/***/ (() => {

Prism.languages.python = {
	'comment': {
		pattern: /(^|[^\\])#.*/,
		lookbehind: true,
		greedy: true
	},
	'string-interpolation': {
		pattern: /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
		greedy: true,
		inside: {
			'interpolation': {
				// "{" <expression> <optional "!s", "!r", or "!a"> <optional ":" format specifier> "}"
				pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
				lookbehind: true,
				inside: {
					'format-spec': {
						pattern: /(:)[^:(){}]+(?=\}$)/,
						lookbehind: true
					},
					'conversion-option': {
						pattern: /![sra](?=[:}]$)/,
						alias: 'punctuation'
					},
					rest: null
				}
			},
			'string': /[\s\S]+/
		}
	},
	'triple-quoted-string': {
		pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,
		greedy: true,
		alias: 'string'
	},
	'string': {
		pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
		greedy: true
	},
	'function': {
		pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
		lookbehind: true
	},
	'class-name': {
		pattern: /(\bclass\s+)\w+/i,
		lookbehind: true
	},
	'decorator': {
		pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m,
		lookbehind: true,
		alias: ['annotation', 'punctuation'],
		inside: {
			'punctuation': /\./
		}
	},
	'keyword': /\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
	'builtin': /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
	'boolean': /\b(?:False|None|True)\b/,
	'number': /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,
	'operator': /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
	'punctuation': /[{}[\];(),.:]/
};

Prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;

Prism.languages.py = Prism.languages.python;


/***/ }),

/***/ 193145:
/***/ (() => {

(function (Prism) {

	var multilineComment = /\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|<self>)*\*\//.source;
	for (var i = 0; i < 2; i++) {
		// support 4 levels of nested comments
		multilineComment = multilineComment.replace(/<self>/g, function () { return multilineComment; });
	}
	multilineComment = multilineComment.replace(/<self>/g, function () { return /[^\s\S]/.source; });


	Prism.languages.rust = {
		'comment': [
			{
				pattern: RegExp(/(^|[^\\])/.source + multilineComment),
				lookbehind: true,
				greedy: true
			},
			{
				pattern: /(^|[^\\:])\/\/.*/,
				lookbehind: true,
				greedy: true
			}
		],
		'string': {
			pattern: /b?"(?:\\[\s\S]|[^\\"])*"|b?r(#*)"(?:[^"]|"(?!\1))*"\1/,
			greedy: true
		},
		'char': {
			pattern: /b?'(?:\\(?:x[0-7][\da-fA-F]|u\{(?:[\da-fA-F]_*){1,6}\}|.)|[^\\\r\n\t'])'/,
			greedy: true
		},
		'attribute': {
			pattern: /#!?\[(?:[^\[\]"]|"(?:\\[\s\S]|[^\\"])*")*\]/,
			greedy: true,
			alias: 'attr-name',
			inside: {
				'string': null // see below
			}
		},

		// Closure params should not be confused with bitwise OR |
		'closure-params': {
			pattern: /([=(,:]\s*|\bmove\s*)\|[^|]*\||\|[^|]*\|(?=\s*(?:\{|->))/,
			lookbehind: true,
			greedy: true,
			inside: {
				'closure-punctuation': {
					pattern: /^\||\|$/,
					alias: 'punctuation'
				},
				rest: null // see below
			}
		},

		'lifetime-annotation': {
			pattern: /'\w+/,
			alias: 'symbol'
		},

		'fragment-specifier': {
			pattern: /(\$\w+:)[a-z]+/,
			lookbehind: true,
			alias: 'punctuation'
		},
		'variable': /\$\w+/,

		'function-definition': {
			pattern: /(\bfn\s+)\w+/,
			lookbehind: true,
			alias: 'function'
		},
		'type-definition': {
			pattern: /(\b(?:enum|struct|trait|type|union)\s+)\w+/,
			lookbehind: true,
			alias: 'class-name'
		},
		'module-declaration': [
			{
				pattern: /(\b(?:crate|mod)\s+)[a-z][a-z_\d]*/,
				lookbehind: true,
				alias: 'namespace'
			},
			{
				pattern: /(\b(?:crate|self|super)\s*)::\s*[a-z][a-z_\d]*\b(?:\s*::(?:\s*[a-z][a-z_\d]*\s*::)*)?/,
				lookbehind: true,
				alias: 'namespace',
				inside: {
					'punctuation': /::/
				}
			}
		],
		'keyword': [
			// https://github.com/rust-lang/reference/blob/master/src/keywords.md
			/\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b/,
			// primitives and str
			// https://doc.rust-lang.org/stable/rust-by-example/primitives.html
			/\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\b/
		],

		// functions can technically start with an upper-case letter, but this will introduce a lot of false positives
		// and Rust's naming conventions recommend snake_case anyway.
		// https://doc.rust-lang.org/1.0.0/style/style/naming/README.html
		'function': /\b[a-z_]\w*(?=\s*(?:::\s*<|\())/,
		'macro': {
			pattern: /\b\w+!/,
			alias: 'property'
		},
		'constant': /\b[A-Z_][A-Z_\d]+\b/,
		'class-name': /\b[A-Z]\w*\b/,

		'namespace': {
			pattern: /(?:\b[a-z][a-z_\d]*\s*::\s*)*\b[a-z][a-z_\d]*\s*::(?!\s*<)/,
			inside: {
				'punctuation': /::/
			}
		},

		// Hex, oct, bin, dec numbers with visual separators and type suffix
		'number': /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\b/,
		'boolean': /\b(?:false|true)\b/,
		'punctuation': /->|\.\.=|\.{1,3}|::|[{}[\];(),:]/,
		'operator': /[-+*\/%!^]=?|=[=>]?|&[&=]?|\|[|=]?|<<?=?|>>?=?|[@?]/
	};

	Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;
	Prism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];

}(Prism));


/***/ }),

/***/ 642207:
/***/ (() => {

Prism.languages.sql = {
	'comment': {
		pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
		lookbehind: true
	},
	'variable': [
		{
			pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
			greedy: true
		},
		/@[\w.$]+/
	],
	'string': {
		pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
		greedy: true,
		lookbehind: true
	},
	'identifier': {
		pattern: /(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,
		greedy: true,
		lookbehind: true,
		inside: {
			'punctuation': /^`|`$/
		}
	},
	'function': /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i, // Should we highlight user defined functions too?
	'keyword': /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
	'boolean': /\b(?:FALSE|NULL|TRUE)\b/i,
	'number': /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
	'operator': /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
	'punctuation': /[;[\]()`,.]/
};


/***/ }),

/***/ 304664:
/***/ (() => {

Prism.languages.swift = {
	'comment': {
		// Nested comments are supported up to 2 levels
		pattern: /(^|[^\\:])(?:\/\/.*|\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\/)/,
		lookbehind: true,
		greedy: true
	},
	'string-literal': [
		// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html
		{
			pattern: RegExp(
				/(^|[^"#])/.source
				+ '(?:'
				// single-line string
				+ /"(?:\\(?:\((?:[^()]|\([^()]*\))*\)|\r\n|[^(])|[^\\\r\n"])*"/.source
				+ '|'
				// multi-line string
				+ /"""(?:\\(?:\((?:[^()]|\([^()]*\))*\)|[^(])|[^\\"]|"(?!""))*"""/.source
				+ ')'
				+ /(?!["#])/.source
			),
			lookbehind: true,
			greedy: true,
			inside: {
				'interpolation': {
					pattern: /(\\\()(?:[^()]|\([^()]*\))*(?=\))/,
					lookbehind: true,
					inside: null // see below
				},
				'interpolation-punctuation': {
					pattern: /^\)|\\\($/,
					alias: 'punctuation'
				},
				'punctuation': /\\(?=[\r\n])/,
				'string': /[\s\S]+/
			}
		},
		{
			pattern: RegExp(
				/(^|[^"#])(#+)/.source
				+ '(?:'
				// single-line string
				+ /"(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|\r\n|[^#])|[^\\\r\n])*?"/.source
				+ '|'
				// multi-line string
				+ /"""(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|[^#])|[^\\])*?"""/.source
				+ ')'
				+ '\\2'
			),
			lookbehind: true,
			greedy: true,
			inside: {
				'interpolation': {
					pattern: /(\\#+\()(?:[^()]|\([^()]*\))*(?=\))/,
					lookbehind: true,
					inside: null // see below
				},
				'interpolation-punctuation': {
					pattern: /^\)|\\#+\($/,
					alias: 'punctuation'
				},
				'string': /[\s\S]+/
			}
		},
	],

	'directive': {
		// directives with conditions
		pattern: RegExp(
			/#/.source
			+ '(?:'
			+ (
				/(?:elseif|if)\b/.source
				+ '(?:[ \t]*'
				// This regex is a little complex. It's equivalent to this:
				//   (?:![ \t]*)?(?:\b\w+\b(?:[ \t]*<round>)?|<round>)(?:[ \t]*(?:&&|\|\|))?
				// where <round> is a general parentheses expression.
				+ /(?:![ \t]*)?(?:\b\w+\b(?:[ \t]*\((?:[^()]|\([^()]*\))*\))?|\((?:[^()]|\([^()]*\))*\))(?:[ \t]*(?:&&|\|\|))?/.source
				+ ')+'
			)
			+ '|'
			+ /(?:else|endif)\b/.source
			+ ')'
		),
		alias: 'property',
		inside: {
			'directive-name': /^#\w+/,
			'boolean': /\b(?:false|true)\b/,
			'number': /\b\d+(?:\.\d+)*\b/,
			'operator': /!|&&|\|\||[<>]=?/,
			'punctuation': /[(),]/
		}
	},
	'literal': {
		pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\b/,
		alias: 'constant'
	},
	'other-directive': {
		pattern: /#\w+\b/,
		alias: 'property'
	},

	'attribute': {
		pattern: /@\w+/,
		alias: 'atrule'
	},

	'function-definition': {
		pattern: /(\bfunc\s+)\w+/,
		lookbehind: true,
		alias: 'function'
	},
	'label': {
		// https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141
		pattern: /\b(break|continue)\s+\w+|\b[a-zA-Z_]\w*(?=\s*:\s*(?:for|repeat|while)\b)/,
		lookbehind: true,
		alias: 'important'
	},

	'keyword': /\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\b/,
	'boolean': /\b(?:false|true)\b/,
	'nil': {
		pattern: /\bnil\b/,
		alias: 'constant'
	},

	'short-argument': /\$\d+\b/,
	'omit': {
		pattern: /\b_\b/,
		alias: 'keyword'
	},
	'number': /\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,

	// A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.
	'class-name': /\b[A-Z](?:[A-Z_\d]*[a-z]\w*)?\b/,
	'function': /\b[a-z_]\w*(?=\s*\()/i,
	'constant': /\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,

	// Operators are generic in Swift. Developers can even create new operators (e.g. +++).
	// https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481
	// This regex only supports ASCII operators.
	'operator': /[-+*/%=!<>&|^~?]+|\.[.\-+*/%=!<>&|^~?]+/,
	'punctuation': /[{}[\]();,.:\\]/
};

Prism.languages.swift['string-literal'].forEach(function (rule) {
	rule.inside['interpolation'].inside = Prism.languages.swift;
});


/***/ }),

/***/ 113136:
/***/ (() => {

(function (Prism) {

	Prism.languages.typescript = Prism.languages.extend('javascript', {
		'class-name': {
			pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
			lookbehind: true,
			greedy: true,
			inside: null // see below
		},
		'builtin': /\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/,
	});

	// The keywords TypeScript adds to JavaScript
	Prism.languages.typescript.keyword.push(
		/\b(?:abstract|declare|is|keyof|readonly|require)\b/,
		// keywords that have to be followed by an identifier
		/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,
		// This is for `import type *, {}`
		/\btype\b(?=\s*(?:[\{*]|$))/
	);

	// doesn't work with TS because TS is too complex
	delete Prism.languages.typescript['parameter'];
	delete Prism.languages.typescript['literal-property'];

	// a version of typescript specifically for highlighting types
	var typeInside = Prism.languages.extend('typescript', {});
	delete typeInside['class-name'];

	Prism.languages.typescript['class-name'].inside = typeInside;

	Prism.languages.insertBefore('typescript', 'function', {
		'decorator': {
			pattern: /@[$\w\xA0-\uFFFF]+/,
			inside: {
				'at': {
					pattern: /^@/,
					alias: 'operator'
				},
				'function': /^[\s\S]+/
			}
		},
		'generic-function': {
			// e.g. foo<T extends "bar" | "baz">( ...
			pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
			greedy: true,
			inside: {
				'function': /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
				'generic': {
					pattern: /<[\s\S]+/, // everything after the first <
					alias: 'class-name',
					inside: typeInside
				}
			}
		}
	});

	Prism.languages.ts = Prism.languages.typescript;

}(Prism));


/***/ }),

/***/ 100274:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ getAccessFlags)
/* harmony export */ });
const getAccessFlags = (role)=>{
    const isOwner = role === "owner";
    const isManager = role === "manager";
    const isBilling = role === "billing";
    const isMember = role === "member";
    return {
        isManager,
        isOwner,
        isBilling,
        isMember
    };
};


/***/ }),

/***/ 915139:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HJ: () => (/* binding */ getFormattedDateTimeString),
/* harmony export */   Qr: () => (/* binding */ isValidDateString),
/* harmony export */   zM: () => (/* binding */ formatDateWithOrdinal)
/* harmony export */ });
/* unused harmony exports diffInDays, getMonthName, getOrdinalDate */
const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
];
// Helper function to calculate difference in days between two dates
const diffInDays = (date1, date2)=>{
    const diffTime = Math.abs(date2.getTime() - date1.getTime());
    return Math.floor(diffTime / (1000 * 60 * 60 * 24));
};
// Helper function to get the month name
const getMonthName = (monthIndex)=>{
    return monthNames[monthIndex];
};
const formatDateWithOrdinal = (date)=>{
    const getOrdinalSuffix = (day)=>{
        const suffixes = [
            "th",
            "st",
            "nd",
            "rd"
        ];
        const relevantDigits = day < 30 ? day % 20 : day % 30;
        return suffixes[relevantDigits <= 3 ? relevantDigits : 0];
    };
    const dayOfWeekNames = [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
    ];
    const dayOfWeek = dayOfWeekNames[date.getDay()];
    const day = date.getDate();
    const monthIndex = date.getMonth();
    const year = date.getFullYear();
    return `${dayOfWeek}, ${monthNames[monthIndex]} ${day}${getOrdinalSuffix(day)}, ${year}`;
};
// Helper function to format the date with an ordinal suffix
const getOrdinalDate = (date)=>{
    const j = date % 10, k = date % 100;
    if (j === 1 && k !== 11) {
        return date + "st";
    }
    if (j === 2 && k !== 12) {
        return date + "nd";
    }
    if (j === 3 && k !== 13) {
        return date + "rd";
    }
    return date + "th";
};
const isValidDateString = (value)=>{
    const regex = /^(?:\d{4}-\d{2}-\d{2}|\d{2}-\d{2}-\d{4})$/;
    if (!regex.test(value)) {
        return false;
    }
    const date = new Date(value);
    return date;
};
const getFormattedDateTimeString = (date)=>{
    const options = {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        hour12: false
    };
    return new Intl.DateTimeFormat("en-CA", options).format(date).replace(",", "");
};


/***/ }),

/***/ 4659:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ax: () => (/* binding */ getQuestionIconMap),
/* harmony export */   T_: () => (/* binding */ VARIABLES_ICON_MAP),
/* harmony export */   _2: () => (/* binding */ getQuestionTypes),
/* harmony export */   di: () => (/* binding */ getCXQuestionTypes),
/* harmony export */   iZ: () => (/* binding */ getQuestionNameMap),
/* harmony export */   qV: () => (/* binding */ universalQuestionPresets),
/* harmony export */   tb: () => (/* binding */ getCXQuestionNameMap),
/* harmony export */   vV: () => (/* binding */ getTSurveyQuestionTypeEnumName),
/* harmony export */   xu: () => (/* binding */ getQuestionDefaults),
/* harmony export */   y9: () => (/* binding */ getQuestionIcon)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(642725);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _paralleldrive_cuid2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(489415);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(624653);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(187201);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(766792);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(484667);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(696340);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(523528);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(16568);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(994413);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(277792);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(129170);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(552285);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(617836);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(321070);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(338490);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(359802);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(341556);
/* harmony import */ var _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(412090);
/* harmony import */ var _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(102379);
/* harmony import */ var _templates__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(93139);





const getQuestionTypes = (t)=>[
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.OpenText,
            label: t("templates.free_text"),
            description: t("templates.free_text_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                placeholder: {
                    default: t("templates.free_text_placeholder")
                },
                longAnswer: true,
                inputType: "text",
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.MultipleChoiceSingle,
            label: t("templates.single_select"),
            description: t("templates.single_select_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                choices: [
                    {
                        id: (0,_paralleldrive_cuid2__WEBPACK_IMPORTED_MODULE_1__/* .createId */ .sX)(),
                        label: {
                            default: ""
                        }
                    },
                    {
                        id: (0,_paralleldrive_cuid2__WEBPACK_IMPORTED_MODULE_1__/* .createId */ .sX)(),
                        label: {
                            default: ""
                        }
                    }
                ],
                shuffleOption: "none",
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.MultipleChoiceMulti,
            label: t("templates.multi_select"),
            description: t("templates.multi_select_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                choices: [
                    {
                        id: (0,_paralleldrive_cuid2__WEBPACK_IMPORTED_MODULE_1__/* .createId */ .sX)(),
                        label: {
                            default: ""
                        }
                    },
                    {
                        id: (0,_paralleldrive_cuid2__WEBPACK_IMPORTED_MODULE_1__/* .createId */ .sX)(),
                        label: {
                            default: ""
                        }
                    },
                    {
                        id: (0,_paralleldrive_cuid2__WEBPACK_IMPORTED_MODULE_1__/* .createId */ .sX)(),
                        label: {
                            default: ""
                        }
                    }
                ],
                shuffleOption: "none",
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.PictureSelection,
            label: t("templates.picture_selection"),
            description: t("templates.picture_selection_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                allowMulti: true,
                choices: [],
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.Rating,
            label: t("templates.rating"),
            description: t("templates.rating_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                scale: "star",
                range: 5,
                lowerLabel: {
                    default: t("templates.rating_lower_label")
                },
                upperLabel: {
                    default: t("templates.rating_upper_label")
                },
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.NPS,
            label: t("templates.nps"),
            description: t("templates.nps_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                lowerLabel: {
                    default: t("templates.nps_lower_label")
                },
                upperLabel: {
                    default: t("templates.nps_upper_label")
                },
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.Ranking,
            label: t("templates.ranking"),
            description: t("templates.ranking_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                choices: [
                    {
                        id: (0,_paralleldrive_cuid2__WEBPACK_IMPORTED_MODULE_1__/* .createId */ .sX)(),
                        label: {
                            default: ""
                        }
                    },
                    {
                        id: (0,_paralleldrive_cuid2__WEBPACK_IMPORTED_MODULE_1__/* .createId */ .sX)(),
                        label: {
                            default: ""
                        }
                    }
                ],
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.Matrix,
            label: t("templates.matrix"),
            description: t("templates.matrix_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                rows: [
                    {
                        default: ""
                    },
                    {
                        default: ""
                    }
                ],
                columns: [
                    {
                        default: ""
                    },
                    {
                        default: ""
                    }
                ],
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.CTA,
            label: t("templates.statement_call_to_action"),
            description: t("templates.cta_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                html: {
                    default: ""
                },
                buttonLabel: {
                    default: t("templates.book_interview")
                },
                buttonExternal: false,
                dismissButtonLabel: {
                    default: t("templates.skip")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.Consent,
            label: t("templates.consent"),
            description: t("templates.consent_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                html: {
                    default: ""
                },
                label: {
                    default: ""
                },
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.FileUpload,
            label: t("templates.file_upload"),
            description: t("templates.file_upload_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_13__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                allowMultipleFiles: false,
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.Date,
            label: t("templates.date"),
            description: t("templates.date_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                format: "M-d-y",
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.Cal,
            label: t("templates.schedule_a_meeting"),
            description: t("templates.schedule_a_meeting_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_15__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                calUserName: "rick/get-rick-rolled",
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.Address,
            label: t("templates.address"),
            description: t("templates.address_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_16__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                addressLine1: {
                    show: true,
                    required: true,
                    placeholder: {
                        default: "Address Line 1"
                    }
                },
                addressLine2: {
                    show: true,
                    required: true,
                    placeholder: {
                        default: "Address Line 2"
                    }
                },
                city: {
                    show: true,
                    required: true,
                    placeholder: {
                        default: "City"
                    }
                },
                state: {
                    show: true,
                    required: true,
                    placeholder: {
                        default: "State"
                    }
                },
                zip: {
                    show: true,
                    required: true,
                    placeholder: {
                        default: "Zip"
                    }
                },
                country: {
                    show: true,
                    required: true,
                    placeholder: {
                        default: "Country"
                    }
                },
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        },
        {
            id: _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.ContactInfo,
            label: t("templates.contact_info"),
            description: t("templates.contact_info_description"),
            icon: _barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_17__/* ["default"] */ .A,
            preset: {
                headline: {
                    default: ""
                },
                firstName: {
                    show: true,
                    required: true,
                    placeholder: {
                        default: "First Name"
                    }
                },
                lastName: {
                    show: true,
                    required: true,
                    placeholder: {
                        default: "Last Name"
                    }
                },
                email: {
                    show: true,
                    required: true,
                    placeholder: {
                        default: "Email"
                    }
                },
                phone: {
                    show: true,
                    required: true,
                    placeholder: {
                        default: "Phone"
                    }
                },
                company: {
                    show: true,
                    required: true,
                    placeholder: {
                        default: "Company"
                    }
                },
                buttonLabel: {
                    default: t("templates.next")
                },
                backButtonLabel: {
                    default: t("templates.back")
                }
            }
        }
    ];
const getCXQuestionTypes = (t)=>getQuestionTypes(t).filter((questionType)=>{
        return [
            _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.OpenText,
            _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.MultipleChoiceSingle,
            _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.MultipleChoiceMulti,
            _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.Rating,
            _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.NPS,
            _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.Consent,
            _formbricks_types_surveys_types__WEBPACK_IMPORTED_MODULE_2__/* .TSurveyQuestionTypeEnum */ .wn.CTA
        ].includes(questionType.id);
    });
const getQuestionIconMap = (t)=>getQuestionTypes(t).reduce((prev, curr)=>({
            ...prev,
            [curr.id]: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(curr.icon, {
                className: "h-4 w-4"
            })
        }), {});
const getQuestionNameMap = (t)=>getQuestionTypes(t).reduce((prev, curr)=>({
            ...prev,
            [curr.id]: curr.label
        }), {});
const getQuestionIcon = (type, t)=>{
    return getQuestionTypes(t).find((questionType)=>questionType.id === type)?.icon;
};
const VARIABLES_ICON_MAP = {
    text: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_18__/* ["default"] */ .A, {
        className: "h-4 w-4"
    }),
    number: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_ArrowUpFromLineIcon_CalendarDaysIcon_CheckIcon_ContactIcon_FileDigitIcon_FileType2Icon_Grid3X3Icon_HomeIcon_ImageIcon_ListIcon_ListOrderedIcon_MessageSquareTextIcon_MousePointerClickIcon_PhoneIcon_PresentationIcon_Rows3Icon_StarIcon_lucide_react__WEBPACK_IMPORTED_MODULE_19__/* ["default"] */ .A, {
        className: "h-4 w-4"
    })
};
const getCXQuestionNameMap = (t)=>getCXQuestionTypes(t).reduce((prev, curr)=>({
            ...prev,
            [curr.id]: curr.label
        }), {});
const universalQuestionPresets = {
    required: true
};
const getQuestionDefaults = (id, project, t)=>{
    const questionType = getQuestionTypes(t).find((questionType)=>questionType.id === id);
    return (0,_templates__WEBPACK_IMPORTED_MODULE_20__/* .replaceQuestionPresetPlaceholders */ .G)(questionType?.preset, project);
};
const getTSurveyQuestionTypeEnumName = (id, t)=>{
    const questionType = getQuestionTypes(t).find((questionType)=>questionType.id === id);
    return questionType?.label;
};


/***/ }),

/***/ 654931:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LW: () => (/* binding */ extractRecallInfo),
/* harmony export */   P8: () => (/* binding */ getFallbackValues),
/* harmony export */   QO: () => (/* binding */ getRecallItems),
/* harmony export */   VY: () => (/* binding */ parseRecallInfo),
/* harmony export */   Xm: () => (/* binding */ findRecallInfoById),
/* harmony export */   Yk: () => (/* binding */ checkForEmptyFallBackValue),
/* harmony export */   dP: () => (/* binding */ extractId),
/* harmony export */   fV: () => (/* binding */ recallToHeadline),
/* harmony export */   gk: () => (/* binding */ replaceRecallInfoWithUnderline),
/* harmony export */   jj: () => (/* binding */ headlineToRecall),
/* harmony export */   uD: () => (/* binding */ replaceHeadlineRecall)
/* harmony export */ });
/* unused harmony exports extractIds, extractFallbackValue */
/* harmony import */ var _i18n_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(864698);
/* harmony import */ var _pollyfills_structuredClone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(300189);
/* harmony import */ var _datetime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(915139);



// Extracts the ID of recall question from a string containing the "recall" pattern.
const extractId = (text)=>{
    const pattern = /#recall:([A-Za-z0-9_-]+)/;
    const match = text.match(pattern);
    if (match && match[1]) {
        return match[1];
    } else {
        return null;
    }
};
// If there are multiple recall infos in a string extracts all recall question IDs from that string and construct an array out of it.
const extractIds = (text)=>{
    const pattern = /#recall:([A-Za-z0-9_-]+)/g;
    const matches = Array.from(text.matchAll(pattern));
    return matches.map((match)=>match[1]).filter((id)=>id !== null);
};
// Extracts the fallback value from a string containing the "fallback" pattern.
const extractFallbackValue = (text)=>{
    const pattern = /fallback:(\S*)#/;
    const match = text.match(pattern);
    if (match && match[1]) {
        return match[1];
    } else {
        return "";
    }
};
// Extracts the complete recall information (ID and fallback) from a headline string.
const extractRecallInfo = (headline, id)=>{
    const idPattern = id ? id : "[A-Za-z0-9_-]+";
    const pattern = new RegExp(`#recall:(${idPattern})\\/fallback:(\\S*)#`);
    const match = headline.match(pattern);
    return match ? match[0] : null;
};
// Finds the recall information by a specific recall question ID within a text.
const findRecallInfoById = (text, id)=>{
    const pattern = new RegExp(`#recall:${id}\\/fallback:(\\S*)#`, "g");
    const match = text.match(pattern);
    return match ? match[0] : null;
};
const getRecallItemLabel = (recallItemId, survey, languageCode)=>{
    const isHiddenField = survey.hiddenFields.fieldIds?.includes(recallItemId);
    if (isHiddenField) return recallItemId;
    const surveyQuestion = survey.questions.find((question)=>question.id === recallItemId);
    if (surveyQuestion) return surveyQuestion.headline[languageCode];
    const variable = survey.variables?.find((variable)=>variable.id === recallItemId);
    if (variable) return variable.name;
};
// Converts recall information in a headline to a corresponding recall question headline, with or without a slash.
const recallToHeadline = (headline, survey, withSlash, languageCode)=>{
    let newHeadline = (0,_pollyfills_structuredClone__WEBPACK_IMPORTED_MODULE_0__/* .structuredClone */ .p)(headline);
    const localizedHeadline = newHeadline[languageCode];
    if (!localizedHeadline?.includes("#recall:")) return headline;
    const replaceNestedRecalls = (text)=>{
        while(text.includes("#recall:")){
            const recallInfo = extractRecallInfo(text);
            if (!recallInfo) break;
            const recallItemId = extractId(recallInfo);
            if (!recallItemId) break;
            let recallItemLabel = getRecallItemLabel(recallItemId, survey, languageCode) || recallItemId;
            while(recallItemLabel.includes("#recall:")){
                const nestedRecallInfo = extractRecallInfo(recallItemLabel);
                if (nestedRecallInfo) {
                    recallItemLabel = recallItemLabel.replace(nestedRecallInfo, "___");
                }
            }
            const replacement = withSlash ? `/${recallItemLabel}\\` : `@${recallItemLabel}`;
            text = text.replace(recallInfo, replacement);
        }
        return text;
    };
    newHeadline[languageCode] = replaceNestedRecalls(localizedHeadline);
    return newHeadline;
};
// Replaces recall information in a survey question's headline with an ___.
const replaceRecallInfoWithUnderline = (label)=>{
    let newLabel = label;
    while(newLabel.includes("#recall:")){
        const recallInfo = extractRecallInfo(newLabel);
        if (recallInfo) {
            newLabel = newLabel.replace(recallInfo, "___");
        }
    }
    return newLabel;
};
// Checks for survey questions with a "recall" pattern but no fallback value.
const checkForEmptyFallBackValue = (survey, language)=>{
    const findRecalls = (text)=>{
        const recalls = text.match(/#recall:[^ ]+/g);
        return recalls && recalls.some((recall)=>!extractFallbackValue(recall));
    };
    for (const question of survey.questions){
        if (findRecalls((0,_i18n_utils__WEBPACK_IMPORTED_MODULE_1__/* .getLocalizedValue */ .bT)(question.headline, language)) || question.subheader && findRecalls((0,_i18n_utils__WEBPACK_IMPORTED_MODULE_1__/* .getLocalizedValue */ .bT)(question.subheader, language))) {
            return question;
        }
    }
    return null;
};
// Processes each question in a survey to ensure headlines are formatted correctly for recall and return the modified survey.
const replaceHeadlineRecall = (survey, language)=>{
    const modifiedSurvey = (0,_pollyfills_structuredClone__WEBPACK_IMPORTED_MODULE_0__/* .structuredClone */ .p)(survey);
    modifiedSurvey.questions.forEach((question)=>{
        question.headline = recallToHeadline(question.headline, modifiedSurvey, false, language);
    });
    return modifiedSurvey;
};
// Retrieves an array of survey questions referenced in a text containing recall information.
const getRecallItems = (text, survey, languageCode)=>{
    if (!text.includes("#recall:")) return [];
    const ids = extractIds(text);
    let recallItems = [];
    ids.forEach((recallItemId)=>{
        const isHiddenField = survey.hiddenFields.fieldIds?.includes(recallItemId);
        const isSurveyQuestion = survey.questions.find((question)=>question.id === recallItemId);
        const isVariable = survey.variables.find((variable)=>variable.id === recallItemId);
        const recallItemLabel = getRecallItemLabel(recallItemId, survey, languageCode);
        const getRecallItemType = ()=>{
            if (isHiddenField) return "hiddenField";
            if (isSurveyQuestion) return "question";
            if (isVariable) return "variable";
        };
        if (recallItemLabel) {
            let recallItemLabelTemp = recallItemLabel;
            recallItemLabelTemp = replaceRecallInfoWithUnderline(recallItemLabelTemp);
            const recallItemType = getRecallItemType();
            if (recallItemType) {
                recallItems.push({
                    id: recallItemId,
                    label: recallItemLabelTemp,
                    type: recallItemType
                });
            }
        }
    });
    return recallItems;
};
// Constructs a fallbacks object from a text containing multiple recall and fallback patterns.
const getFallbackValues = (text)=>{
    if (!text.includes("#recall:")) return {};
    const pattern = /#recall:([A-Za-z0-9_-]+)\/fallback:([\S*]+)#/g;
    let match;
    const fallbacks = {};
    while((match = pattern.exec(text)) !== null){
        const id = match[1];
        const fallbackValue = match[2];
        fallbacks[id] = fallbackValue;
    }
    return fallbacks;
};
// Transforms headlines in a text to their corresponding recall information.
const headlineToRecall = (text, recallItems, fallbacks)=>{
    recallItems.forEach((recallItem)=>{
        const recallInfo = `#recall:${recallItem.id}/fallback:${fallbacks[recallItem.id]}#`;
        text = text.replace(`@${recallItem.label}`, recallInfo);
    });
    return text;
};
const parseRecallInfo = (text, responseData, variables, withSlash = false)=>{
    let modifiedText = text;
    const questionIds = responseData ? Object.keys(responseData) : [];
    const variableIds = Object.keys(variables || {});
    if (variables && variableIds.length > 0) {
        variableIds.forEach((variableId)=>{
            const recallPattern = `#recall:`;
            while(modifiedText.includes(recallPattern)){
                const recallInfo = extractRecallInfo(modifiedText, variableId);
                if (!recallInfo) break; // Exit the loop if no recall info is found
                const recallItemId = extractId(recallInfo);
                if (!recallItemId) continue; // Skip to the next iteration if no ID could be extracted
                const fallback = extractFallbackValue(recallInfo).replaceAll("nbsp", " ");
                let value = variables[variableId] || fallback;
                value = value.toString();
                if (withSlash) {
                    modifiedText = modifiedText.replace(recallInfo, "#/" + value + "\\#");
                } else {
                    modifiedText = modifiedText.replace(recallInfo, value);
                }
            }
        });
    }
    if (responseData && questionIds.length > 0) {
        while(modifiedText.includes("recall:")){
            const recallInfo = extractRecallInfo(modifiedText);
            if (!recallInfo) break; // Exit the loop if no recall info is found
            const recallItemId = extractId(recallInfo);
            if (!recallItemId) return modifiedText; // Return the text if no ID could be extracted
            const fallback = extractFallbackValue(recallInfo).replaceAll("nbsp", " ");
            let value;
            // Fetching value from responseData based on recallItemId
            if (responseData[recallItemId]) {
                value = responseData[recallItemId] ?? fallback;
            }
            // Additional value formatting if it exists
            if (value) {
                if ((0,_datetime__WEBPACK_IMPORTED_MODULE_2__/* .isValidDateString */ .Qr)(value)) {
                    value = (0,_datetime__WEBPACK_IMPORTED_MODULE_2__/* .formatDateWithOrdinal */ .zM)(new Date(value));
                } else if (Array.isArray(value)) {
                    value = value.filter((item)=>item).join(", "); // Filters out empty values and joins with a comma
                }
            }
            if (withSlash) {
                modifiedText = modifiedText.replace(recallInfo, "#/" + (value ?? fallback) + "\\#");
            } else {
                modifiedText = modifiedText.replace(recallInfo, value ?? fallback);
            }
        }
    }
    return modifiedText;
};


/***/ }),

/***/ 92018:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PH: () => (/* binding */ isCapitalized),
/* harmony export */   Zr: () => (/* binding */ capitalizeFirstLetter),
/* harmony export */   xv: () => (/* binding */ truncate)
/* harmony export */ });
/* unused harmony exports sanitizeString, startsWithVowel, truncateText */
const capitalizeFirstLetter = (string = "")=>{
    if (string === null) {
        return "";
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
};
// write a function that takes a string and truncates it to the specified length
const truncate = (str, length)=>{
    if (!str) return "";
    if (str.length > length) {
        return str.substring(0, length) + "...";
    }
    return str;
};
// write a function that takes a string and removes all characters that could cause issues with the url and truncates it to the specified length
const sanitizeString = (str, delimiter = "_", length = 255)=>{
    return str.replace(/[^0-9a-zA-Z\-._]+/g, delimiter).substring(0, length);
};
const isCapitalized = (str)=>str.charAt(0) === str.charAt(0).toUpperCase();
const startsWithVowel = (str)=>{
    return /^[aeiouAEIOU]/.test(str);
};
const truncateText = (text, limit)=>{
    return text.length > limit ? `${text.substring(0, limit)}...` : text;
};


/***/ }),

/***/ 93139:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ replaceQuestionPresetPlaceholders)
/* harmony export */ });
/* unused harmony export replacePresetPlaceholders */
/* harmony import */ var _i18n_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(864698);
/* harmony import */ var _pollyfills_structuredClone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(300189);


const replaceQuestionPresetPlaceholders = (question, project)=>{
    if (!project) return question;
    const newQuestion = (0,_pollyfills_structuredClone__WEBPACK_IMPORTED_MODULE_0__/* .structuredClone */ .p)(question);
    const defaultLanguageCode = "default";
    if (newQuestion.headline) {
        newQuestion.headline[defaultLanguageCode] = (0,_i18n_utils__WEBPACK_IMPORTED_MODULE_1__/* .getLocalizedValue */ .bT)(newQuestion.headline, defaultLanguageCode).replace("{{projectName}}", project.name);
    }
    if (newQuestion.subheader) {
        newQuestion.subheader[defaultLanguageCode] = (0,_i18n_utils__WEBPACK_IMPORTED_MODULE_1__/* .getLocalizedValue */ .bT)(newQuestion.subheader, defaultLanguageCode)?.replace("{{projectName}}", project.name);
    }
    return newQuestion;
};
// replace all occurences of projectName with the actual project name in the current template
const replacePresetPlaceholders = (template, project)=>{
    const preset = structuredClone(template.preset);
    preset.name = preset.name.replace("{{projectName}}", project.name);
    preset.questions = preset.questions.map((question)=>{
        return replaceQuestionPresetPlaceholders(question, project);
    });
    return {
        ...template,
        preset
    };
};


/***/ }),

/***/ 781667:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SurveyEditor: () => (/* binding */ SurveyEditor)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(672771);
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__);

const SurveyEditor = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call SurveyEditor() from the server but SurveyEditor is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/kdy1/projects/formbricks/apps/web/app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/SurveyEditor.tsx",
"SurveyEditor",
);

/***/ }),

/***/ 645935:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ loading)
});

// EXTERNAL MODULE: ../../node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-runtime.js
var react_jsx_runtime = __webpack_require__(891069);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/LoadingSkeleton.tsx

const LoadingSkeleton = ()=>/*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
        className: "flex h-full w-full flex-col items-center justify-between p-6",
        children: [
            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                className: "flex h-[10vh] w-full animate-pulse rounded-lg bg-slate-200 font-medium text-slate-900"
            }),
            /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                className: "mt-4 flex h-[85%] w-full flex-row",
                children: [
                    /*#__PURE__*/ (0,react_jsx_runtime.jsxs)("div", {
                        className: "flex h-full w-1/2 flex-col justify-between space-y-2",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            }),
                            /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                                className: "ph-no-capture h-[10vh] animate-pulse rounded-lg bg-slate-200"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                        className: "ml-4 flex h-full w-1/2 flex-col",
                        children: /*#__PURE__*/ (0,react_jsx_runtime.jsx)("div", {
                            className: "ph-no-capture h-full animate-pulse rounded-lg bg-slate-200"
                        })
                    })
                ]
            })
        ]
    });

;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/loading.tsx


const Loading = ()=>{
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(LoadingSkeleton, {});
};
/* harmony default export */ const loading = (Loading);


/***/ }),

/***/ 128459:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ page),
  generateMetadata: () => (/* binding */ generateMetadata)
});

// EXTERNAL MODULE: ../../node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-runtime.js
var react_jsx_runtime = __webpack_require__(891069);
// EXTERNAL MODULE: external "@prisma/client"
var client_ = __webpack_require__(896330);
// EXTERNAL MODULE: ../../node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js
var react = __webpack_require__(922728);
// EXTERNAL MODULE: ../../packages/database/src/index.ts + 1 modules
var src = __webpack_require__(527610);
// EXTERNAL MODULE: ../../packages/lib/cache.ts
var cache = __webpack_require__(794356);
// EXTERNAL MODULE: ../../packages/lib/user/cache.ts
var user_cache = __webpack_require__(323798);
// EXTERNAL MODULE: ../../packages/types/errors.ts
var errors = __webpack_require__(470641);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/lib/user.ts






const getUserEmail = (0,react.cache)((userId)=>(0,cache/* cache */.P)(async ()=>{
        try {
            const user = await src/* prisma */.z.user.findUnique({
                where: {
                    id: userId
                },
                select: {
                    email: true
                }
            });
            if (!user) {
                return null;
            }
            return user.email;
        } catch (error) {
            if (error instanceof client_.Prisma.PrismaClientKnownRequestError) {
                throw new errors/* DatabaseError */.a$(error.message);
            }
            throw error;
        }
    }, [
        `getUserEmail-${userId}`
    ], {
        tags: [
            user_cache/* userCache */.g.tag.byId(userId)
        ]
    })());

// EXTERNAL MODULE: ./modules/auth/lib/authOptions.ts + 8 modules
var authOptions = __webpack_require__(136015);
// EXTERNAL MODULE: ./modules/ee/contacts/lib/contacts.ts + 1 modules
var contacts = __webpack_require__(465412);
// EXTERNAL MODULE: ./modules/ee/contacts/segments/lib/segments.ts + 1 modules
var lib_segments = __webpack_require__(927627);
// EXTERNAL MODULE: ./modules/ee/license-check/lib/utils.ts + 1 modules
var utils = __webpack_require__(532077);
// EXTERNAL MODULE: ./modules/ee/teams/lib/roles.ts
var roles = __webpack_require__(389846);
// EXTERNAL MODULE: ./modules/ee/teams/utils/teams.ts
var teams = __webpack_require__(596379);
// EXTERNAL MODULE: ./modules/survey-follow-ups/lib/utils.ts
var lib_utils = __webpack_require__(234010);
// EXTERNAL MODULE: ./modules/ui/components/error-component/index.tsx
var error_component = __webpack_require__(283032);
// EXTERNAL MODULE: ./tolgee/server.tsx + 2 modules
var server = __webpack_require__(186184);
// EXTERNAL MODULE: ../../node_modules/next-auth/index.js
var next_auth = __webpack_require__(963302);
// EXTERNAL MODULE: ../../packages/lib/actionClass/service.ts
var service = __webpack_require__(440792);
// EXTERNAL MODULE: ../../packages/lib/constants.ts
var constants = __webpack_require__(836919);
// EXTERNAL MODULE: ../../packages/lib/environment/service.ts
var environment_service = __webpack_require__(32135);
// EXTERNAL MODULE: ../../packages/lib/membership/service.ts
var membership_service = __webpack_require__(377968);
// EXTERNAL MODULE: ../../packages/lib/membership/utils.ts
var membership_utils = __webpack_require__(159570);
// EXTERNAL MODULE: ../../packages/lib/organization/service.ts
var organization_service = __webpack_require__(353687);
// EXTERNAL MODULE: ../../packages/lib/project/service.ts
var project_service = __webpack_require__(529987);
// EXTERNAL MODULE: ../../packages/lib/response/service.ts + 2 modules
var response_service = __webpack_require__(408478);
// EXTERNAL MODULE: ../../packages/lib/survey/service.ts
var survey_service = __webpack_require__(222118);
// EXTERNAL MODULE: ../../packages/lib/user/service.ts
var user_service = __webpack_require__(184511);
// EXTERNAL MODULE: ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/components/SurveyEditor.tsx
var SurveyEditor = __webpack_require__(781667);
;// ./app/(app)/(survey-editor)/environments/[environmentId]/surveys/[surveyId]/edit/page.tsx























const generateMetadata = async (props)=>{
    const params = await props.params;
    const survey = await (0,survey_service/* getSurvey */.Dp)(params.surveyId);
    return {
        title: survey?.name ? `${survey?.name} | Editor` : "Editor"
    };
};
const Page = async (props)=>{
    const searchParams = await props.searchParams;
    const params = await props.params;
    const t = await (0,server/* getTranslate */.r)();
    const [survey, project, environment, actionClasses, contactAttributeKeys, responseCount, organization, session, segments] = await Promise.all([
        (0,survey_service/* getSurvey */.Dp)(params.surveyId),
        (0,project_service/* getProjectByEnvironmentId */.bq)(params.environmentId),
        (0,environment_service/* getEnvironment */.uc)(params.environmentId),
        (0,service/* getActionClasses */.nq)(params.environmentId),
        (0,contacts/* getContactAttributeKeys */.fo)(params.environmentId),
        (0,response_service/* getResponseCountBySurveyId */.h4)(params.surveyId),
        (0,organization_service/* getOrganizationByEnvironmentId */.TK)(params.environmentId),
        (0,next_auth.getServerSession)(authOptions/* authOptions */.N),
        (0,lib_segments/* getSegments */.Ln)(params.environmentId)
    ]);
    if (!session) {
        throw new Error(t("common.session_not_found"));
    }
    if (!organization) {
        throw new Error(t("common.organization_not_found"));
    }
    if (!project) {
        throw new Error(t("common.project_not_found"));
    }
    const currentUserMembership = await (0,membership_service/* getMembershipByUserIdOrganizationId */.Y)(session?.user.id, organization.id);
    const { isMember } = (0,membership_utils/* getAccessFlags */.c)(currentUserMembership?.role);
    const projectPermission = await (0,roles/* getProjectPermissionByUserId */._)(session.user.id, project.id);
    const { hasReadAccess } = (0,teams/* getTeamPermissionFlags */.od)(projectPermission);
    const isSurveyCreationDeletionDisabled = isMember && hasReadAccess;
    const locale = session.user.id ? await (0,user_service/* getUserLocale */.YK)(session.user.id) : undefined;
    const isUserTargetingAllowed = await (0,utils/* getIsContactsEnabled */.dZ)();
    const isMultiLanguageAllowed = await (0,utils/* getMultiLanguagePermission */.x)(organization);
    const isSurveyFollowUpsAllowed = await (0,lib_utils/* getSurveyFollowUpsPermission */.T)(organization);
    const userEmail = await getUserEmail(session.user.id);
    if (!survey || !environment || !actionClasses || !contactAttributeKeys || !project || !userEmail || isSurveyCreationDeletionDisabled) {
        return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(error_component.ErrorComponent, {});
    }
    const isCxMode = searchParams.mode === "cx";
    return /*#__PURE__*/ (0,react_jsx_runtime.jsx)(SurveyEditor.SurveyEditor, {
        survey: survey,
        project: project,
        environment: environment,
        actionClasses: actionClasses,
        contactAttributeKeys: contactAttributeKeys,
        responseCount: responseCount,
        membershipRole: currentUserMembership?.role,
        projectPermission: projectPermission,
        colors: constants/* SURVEY_BG_COLORS */.MF,
        segments: segments,
        isUserTargetingAllowed: isUserTargetingAllowed,
        isMultiLanguageAllowed: isMultiLanguageAllowed,
        plan: organization.billing.plan,
        isFormbricksCloud: constants/* IS_FORMBRICKS_CLOUD */.Si,
        isUnsplashConfigured: constants/* UNSPLASH_ACCESS_KEY */.OC ? true : false,
        isCxMode: isCxMode,
        locale: locale ?? constants/* DEFAULT_LOCALE */.Xn,
        mailFrom: constants/* MAIL_FROM */.T4 ?? "hola@formbricks.com",
        isSurveyFollowUpsAllowed: isSurveyFollowUpsAllowed,
        userEmail: userEmail
    });
};
/* harmony default export */ const page = (Page);


/***/ }),

/***/ 532077:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  AM: () => (/* binding */ getBiggerUploadFileSizePermission),
  Zd: () => (/* binding */ getEnterpriseLicense),
  KH: () => (/* binding */ getIsAIEnabled),
  dZ: () => (/* binding */ getIsContactsEnabled),
  pn: () => (/* binding */ getIsMultiOrgEnabled),
  PN: () => (/* binding */ getIsOrganizationAIReady),
  xT: () => (/* binding */ getIsSSOEnabled),
  LO: () => (/* binding */ getIsTwoFactorAuthEnabled),
  x: () => (/* binding */ getMultiLanguagePermission),
  Df: () => (/* binding */ getOrganizationProjectsLimit),
  rQ: () => (/* binding */ getRoleManagementPermission),
  nX: () => (/* binding */ getWhiteLabelPermission)
});

// UNUSED EXPORTS: fetchLicense, getLicenseFeatures, getRemoveBrandingPermission

// EXTERNAL MODULE: ../../node_modules/https-proxy-agent/dist/index.js
var dist = __webpack_require__(599069);
// EXTERNAL MODULE: ../../node_modules/next/dist/api/server.js
var server = __webpack_require__(861238);
// EXTERNAL MODULE: ./node_modules/node-fetch/src/index.js + 12 modules
var src = __webpack_require__(817762);
// EXTERNAL MODULE: ../../node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js
var react = __webpack_require__(922728);
// EXTERNAL MODULE: ../../packages/database/src/index.ts + 1 modules
var database_src = __webpack_require__(527610);
// EXTERNAL MODULE: ../../packages/lib/cache.ts
var cache = __webpack_require__(794356);
// EXTERNAL MODULE: ../../node_modules/next/cache.js
var next_cache = __webpack_require__(87863);
// EXTERNAL MODULE: ../../packages/lib/constants.ts
var constants = __webpack_require__(836919);
// EXTERNAL MODULE: ../../packages/lib/env.ts
var env = __webpack_require__(162437);
// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __webpack_require__(455511);
var external_crypto_default = /*#__PURE__*/__webpack_require__.n(external_crypto_);
;// ../../packages/lib/hashString.ts

const hashString = (string)=>{
    return external_crypto_default().createHash("sha256").update(string).digest("hex");
};

;// ./modules/ee/license-check/lib/utils.ts










const hashedKey = constants/* ENTERPRISE_LICENSE_KEY */.an ? hashString(constants/* ENTERPRISE_LICENSE_KEY */.an) : undefined;
const PREVIOUS_RESULTS_CACHE_TAG_KEY = `getPreviousResult-${hashedKey}`;
// This function is used to get the previous result of the license check from the cache
// This might seem confusing at first since we only return the default value from this function,
// but since we are using a cache and the cache key is the same, the cache will return the previous result - so this function acts as a cache getter
const getPreviousResult = ()=>(0,cache/* cache */.P)(async ()=>({
            active: null,
            lastChecked: new Date(0),
            features: null
        }), [
        PREVIOUS_RESULTS_CACHE_TAG_KEY
    ], {
        tags: [
            PREVIOUS_RESULTS_CACHE_TAG_KEY
        ]
    })();
// This function is used to set the previous result of the license check to the cache so that we can use it in the next call
// Uses the same cache key as the getPreviousResult function
const setPreviousResult = async (previousResult)=>{
    const { lastChecked, active, features } = previousResult;
    await (0,cache/* cache */.P)(async ()=>({
            active,
            lastChecked,
            features
        }), [
        PREVIOUS_RESULTS_CACHE_TAG_KEY
    ], {
        tags: [
            PREVIOUS_RESULTS_CACHE_TAG_KEY
        ]
    })();
    (0,server.after)(()=>{
        (0,next_cache.revalidateTag)(PREVIOUS_RESULTS_CACHE_TAG_KEY);
    });
};
const fetchLicenseForE2ETesting = async ()=>{
    const currentTime = new Date();
    try {
        const previousResult = await getPreviousResult();
        if (previousResult.lastChecked.getTime() === new Date(0).getTime()) {
            // first call
            const newResult = {
                active: true,
                features: {
                    isMultiOrgEnabled: true,
                    twoFactorAuth: true,
                    sso: true,
                    contacts: true,
                    projects: 3,
                    whitelabel: true,
                    removeBranding: true,
                    ai: true
                },
                lastChecked: currentTime
            };
            await setPreviousResult(newResult);
            return newResult;
        } else if (currentTime.getTime() - previousResult.lastChecked.getTime() > 60 * 60 * 1000) {
            // Fail after 1 hour
            console.log("E2E_TESTING is enabled. Enterprise license was revoked after 1 hour.");
            return null;
        }
        return previousResult;
    } catch (error) {
        console.error("Error fetching license: ", error);
        return null;
    }
};
const getEnterpriseLicense = async ()=>{
    if (!constants/* ENTERPRISE_LICENSE_KEY */.an || constants/* ENTERPRISE_LICENSE_KEY */.an.length === 0) {
        return {
            active: false,
            features: null,
            lastChecked: new Date()
        };
    }
    if (constants/* E2E_TESTING */.oA) {
        const previousResult = await fetchLicenseForE2ETesting();
        return {
            active: previousResult?.active ?? false,
            features: previousResult ? previousResult.features : null,
            lastChecked: previousResult ? previousResult.lastChecked : new Date()
        };
    }
    // if the server responds with a boolean, we return it
    // if the server errors, we return null
    // null signifies an error
    const license = await fetchLicense();
    const isValid = license ? license.status === "active" : null;
    const threeDaysInMillis = 3 * 24 * 60 * 60 * 1000;
    const currentTime = new Date();
    const previousResult = await getPreviousResult();
    // Case: First time checking license and the server errors out
    if (previousResult.active === null) {
        if (isValid === null) {
            const newResult = {
                active: false,
                features: {
                    isMultiOrgEnabled: false,
                    projects: 3,
                    twoFactorAuth: false,
                    sso: false,
                    whitelabel: false,
                    removeBranding: false,
                    contacts: false,
                    ai: false
                },
                lastChecked: new Date()
            };
            await setPreviousResult(newResult);
            return newResult;
        }
    }
    if (isValid !== null && license) {
        const newResult = {
            active: isValid,
            features: license.features,
            lastChecked: new Date()
        };
        await setPreviousResult(newResult);
        return newResult;
    } else {
        // if result is undefined -> error
        // if the last check was less than 72 hours, return the previous value:
        const elapsedTime = currentTime.getTime() - previousResult.lastChecked.getTime();
        if (elapsedTime < threeDaysInMillis) {
            return {
                active: previousResult.active !== null ? previousResult.active : false,
                features: previousResult.features,
                lastChecked: previousResult.lastChecked,
                isPendingDowngrade: true
            };
        }
        // Log error only after 72 hours
        console.error("Error while checking license: The license check failed");
        return {
            active: false,
            features: null,
            lastChecked: previousResult.lastChecked,
            isPendingDowngrade: true
        };
    }
};
const getLicenseFeatures = async ()=>{
    const previousResult = await getPreviousResult();
    if (previousResult.features) {
        return previousResult.features;
    } else {
        const license = await fetchLicense();
        if (!license || !license.features) return null;
        return license.features;
    }
};
const fetchLicense = (0,react.cache)(async ()=>(0,cache/* cache */.P)(async ()=>{
        if (!env/* env */._.ENTERPRISE_LICENSE_KEY) return null;
        try {
            const now = new Date();
            const startOfYear = new Date(now.getFullYear(), 0, 1); // January 1st of the current year
            const endOfYear = new Date(now.getFullYear() + 1, 0, 0); // December 31st of the current year
            const responseCount = await database_src/* prisma */.z.response.count({
                where: {
                    createdAt: {
                        gte: startOfYear,
                        lt: endOfYear
                    }
                }
            });
            const proxyUrl = env/* env */._.HTTPS_PROXY || env/* env */._.HTTP_PROXY;
            const agent = proxyUrl ? new dist.HttpsProxyAgent(proxyUrl) : undefined;
            const res = await (0,src/* default */.Ay)("https://ee.formbricks.com/api/licenses/check", {
                body: JSON.stringify({
                    licenseKey: constants/* ENTERPRISE_LICENSE_KEY */.an,
                    usage: {
                        responseCount: responseCount
                    }
                }),
                headers: {
                    "Content-Type": "application/json"
                },
                method: "POST",
                agent
            });
            if (res.ok) {
                const responseJson = await res.json();
                return responseJson.data;
            }
            return null;
        } catch (error) {
            console.error("Error while checking license: ", error);
            return null;
        }
    }, [
        `fetchLicense-${hashedKey}`
    ], {
        revalidate: 60 * 60 * 24
    })());
const getRemoveBrandingPermission = async (organization)=>{
    if (E2E_TESTING) {
        const previousResult = await fetchLicenseForE2ETesting();
        return previousResult?.features?.removeBranding ?? false;
    }
    if (IS_FORMBRICKS_CLOUD && (await getEnterpriseLicense()).active) {
        return organization.billing.plan !== PROJECT_FEATURE_KEYS.FREE;
    } else {
        const licenseFeatures = await getLicenseFeatures();
        if (!licenseFeatures) return false;
        return licenseFeatures.removeBranding;
    }
};
const getWhiteLabelPermission = async (organization)=>{
    if (constants/* E2E_TESTING */.oA) {
        const previousResult = await fetchLicenseForE2ETesting();
        return previousResult?.features?.whitelabel ?? false;
    }
    if (constants/* IS_FORMBRICKS_CLOUD */.Si && (await getEnterpriseLicense()).active) {
        return organization.billing.plan !== constants/* PROJECT_FEATURE_KEYS */.mu.FREE;
    } else {
        const licenseFeatures = await getLicenseFeatures();
        if (!licenseFeatures) return false;
        return licenseFeatures.whitelabel;
    }
};
const getRoleManagementPermission = async (organization)=>{
    if (constants/* E2E_TESTING */.oA) {
        const previousResult = await fetchLicenseForE2ETesting();
        return previousResult && previousResult.active !== null ? previousResult.active : false;
    }
    if (constants/* IS_FORMBRICKS_CLOUD */.Si) return organization.billing.plan === constants/* PROJECT_FEATURE_KEYS */.mu.SCALE || organization.billing.plan === constants/* PROJECT_FEATURE_KEYS */.mu.ENTERPRISE;
    else if (!constants/* IS_FORMBRICKS_CLOUD */.Si) return (await getEnterpriseLicense()).active;
    return false;
};
const getBiggerUploadFileSizePermission = async (organization)=>{
    if (constants/* IS_FORMBRICKS_CLOUD */.Si) return organization.billing.plan !== constants/* PROJECT_FEATURE_KEYS */.mu.FREE;
    else if (!constants/* IS_FORMBRICKS_CLOUD */.Si) return (await getEnterpriseLicense()).active;
    return false;
};
const getMultiLanguagePermission = async (organization)=>{
    if (constants/* E2E_TESTING */.oA) {
        const previousResult = await fetchLicenseForE2ETesting();
        return previousResult && previousResult.active !== null ? previousResult.active : false;
    }
    if (constants/* IS_FORMBRICKS_CLOUD */.Si) return organization.billing.plan === constants/* PROJECT_FEATURE_KEYS */.mu.SCALE || organization.billing.plan === constants/* PROJECT_FEATURE_KEYS */.mu.ENTERPRISE;
    else if (!constants/* IS_FORMBRICKS_CLOUD */.Si) return (await getEnterpriseLicense()).active;
    return false;
};
const getIsMultiOrgEnabled = async ()=>{
    if (constants/* E2E_TESTING */.oA) {
        const previousResult = await fetchLicenseForE2ETesting();
        return previousResult && previousResult.features ? previousResult.features.isMultiOrgEnabled : false;
    }
    const licenseFeatures = await getLicenseFeatures();
    if (!licenseFeatures) return false;
    return licenseFeatures.isMultiOrgEnabled;
};
const getIsContactsEnabled = async ()=>{
    if (constants/* E2E_TESTING */.oA) {
        const previousResult = await fetchLicenseForE2ETesting();
        return previousResult && previousResult.features ? previousResult.features.contacts : false;
    }
    const licenseFeatures = await getLicenseFeatures();
    if (!licenseFeatures) return false;
    return licenseFeatures.contacts;
};
const getIsTwoFactorAuthEnabled = async ()=>{
    if (constants/* E2E_TESTING */.oA) {
        const previousResult = await fetchLicenseForE2ETesting();
        return previousResult && previousResult.features ? previousResult.features.twoFactorAuth : false;
    }
    const licenseFeatures = await getLicenseFeatures();
    if (!licenseFeatures) return false;
    return licenseFeatures.twoFactorAuth;
};
const getIsSSOEnabled = async ()=>{
    if (constants/* E2E_TESTING */.oA) {
        const previousResult = await fetchLicenseForE2ETesting();
        return previousResult && previousResult.features ? previousResult.features.sso : false;
    }
    const licenseFeatures = await getLicenseFeatures();
    if (!licenseFeatures) return false;
    return licenseFeatures.sso;
};
const getIsOrganizationAIReady = async (billingPlan)=>{
    if (!constants/* IS_AI_CONFIGURED */.T1) return false;
    if (constants/* E2E_TESTING */.oA) {
        const previousResult = await fetchLicenseForE2ETesting();
        return previousResult && previousResult.features ? previousResult.features.ai : false;
    }
    const license = await getEnterpriseLicense();
    if (constants/* IS_FORMBRICKS_CLOUD */.Si) {
        return Boolean(license.features?.ai && billingPlan !== constants/* PROJECT_FEATURE_KEYS */.mu.FREE);
    }
    return Boolean(license.features?.ai);
};
const getIsAIEnabled = async (organization)=>{
    return organization.isAIEnabled && await getIsOrganizationAIReady(organization.billing.plan);
};
const getOrganizationProjectsLimit = async (organization)=>{
    if (constants/* E2E_TESTING */.oA) {
        const previousResult = await fetchLicenseForE2ETesting();
        return previousResult && previousResult.features ? previousResult.features.projects ?? Infinity : 3;
    }
    let limit;
    if (constants/* IS_FORMBRICKS_CLOUD */.Si && (await getEnterpriseLicense()).active) {
        limit = organization.billing.limits.projects ?? Infinity;
    } else {
        const licenseFeatures = await getLicenseFeatures();
        if (!licenseFeatures) {
            limit = 3;
        } else {
            limit = licenseFeatures.projects ?? Infinity;
        }
    }
    return limit;
};


/***/ }),

/***/ 234010:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   T: () => (/* binding */ getSurveyFollowUpsPermission)
/* harmony export */ });
/* harmony import */ var _formbricks_lib_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(836919);

const getSurveyFollowUpsPermission = async (organization)=>{
    if (_formbricks_lib_constants__WEBPACK_IMPORTED_MODULE_0__/* .IS_FORMBRICKS_CLOUD */ .Si) return organization.billing.plan !== _formbricks_lib_constants__WEBPACK_IMPORTED_MODULE_0__/* .PROJECT_FEATURE_KEYS */ .mu.FREE;
    return true;
};


/***/ }),

/***/ 283032:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ErrorComponent: () => (/* binding */ ErrorComponent)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(672771);
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__);

const ErrorComponent = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call ErrorComponent() from the server but ErrorComponent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/kdy1/projects/formbricks/apps/web/modules/ui/components/error-component/index.tsx",
"ErrorComponent",
);

/***/ }),

/***/ 800661:
/***/ (() => {



/***/ }),

/***/ 673398:
/***/ (() => {



/***/ }),

/***/ 403275:
/***/ (() => {



/***/ }),

/***/ 20913:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C1: () => (/* binding */ Indicator),
/* harmony export */   bL: () => (/* binding */ Root)
/* harmony export */ });
/* unused harmony exports Checkbox, CheckboxIndicator, createCheckboxScope */
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(891616);
/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(730613);
/* harmony import */ var _radix_ui_react_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(176235);
/* harmony import */ var _radix_ui_primitive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(763095);
/* harmony import */ var _radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(409689);
/* harmony import */ var _radix_ui_react_use_previous__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(809391);
/* harmony import */ var _radix_ui_react_use_size__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(525611);
/* harmony import */ var _radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(602397);
/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(832713);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(642725);
/* __next_internal_client_entry_do_not_use__ Checkbox,CheckboxIndicator,Indicator,Root,createCheckboxScope auto */ // packages/react/checkbox/src/Checkbox.tsx










var CHECKBOX_NAME = "Checkbox";
var [createCheckboxContext, createCheckboxScope] = (0,_radix_ui_react_context__WEBPACK_IMPORTED_MODULE_2__/* .createContextScope */ .A)(CHECKBOX_NAME);
var [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
var Checkbox = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{
    const { __scopeCheckbox, name, checked: checkedProp, defaultChecked, required, disabled, value = "on", onCheckedChange, form, ...checkboxProps } = props;
    const [button, setButton] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);
    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_3__/* .useComposedRefs */ .s)(forwardedRef, (node)=>setButton(node));
    const hasConsumerStoppedPropagationRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);
    const isFormControl = button ? form || !!button.closest("form") : true;
    const [checked = false, setChecked] = (0,_radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_4__/* .useControllableState */ .i)({
        prop: checkedProp,
        defaultProp: defaultChecked,
        onChange: onCheckedChange
    });
    const initialCheckedStateRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(checked);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{
        const form2 = button?.form;
        if (form2) {
            const reset = ()=>setChecked(initialCheckedStateRef.current);
            form2.addEventListener("reset", reset);
            return ()=>form2.removeEventListener("reset", reset);
        }
    }, [
        button,
        setChecked
    ]);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(CheckboxProvider, {
        scope: __scopeCheckbox,
        state: checked,
        disabled,
        children: [
            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_5__/* .Primitive */ .sG.button, {
                type: "button",
                role: "checkbox",
                "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
                "aria-required": required,
                "data-state": getState(checked),
                "data-disabled": disabled ? "" : void 0,
                disabled,
                value,
                ...checkboxProps,
                ref: composedRefs,
                onKeyDown: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_6__/* .composeEventHandlers */ .m)(props.onKeyDown, (event)=>{
                    if (event.key === "Enter") event.preventDefault();
                }),
                onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_6__/* .composeEventHandlers */ .m)(props.onClick, (event)=>{
                    setChecked((prevChecked)=>isIndeterminate(prevChecked) ? true : !prevChecked);
                    if (isFormControl) {
                        hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
                        if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();
                    }
                })
            }),
            isFormControl && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BubbleInput, {
                control: button,
                bubbles: !hasConsumerStoppedPropagationRef.current,
                name,
                value,
                checked,
                required,
                disabled,
                form,
                style: {
                    transform: "translateX(-100%)"
                },
                defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked
            })
        ]
    });
});
Checkbox.displayName = CHECKBOX_NAME;
var INDICATOR_NAME = "CheckboxIndicator";
var CheckboxIndicator = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{
    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;
    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_7__/* .Presence */ .C, {
        present: forceMount || isIndeterminate(context.state) || context.state === true,
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_5__/* .Primitive */ .sG.span, {
            "data-state": getState(context.state),
            "data-disabled": context.disabled ? "" : void 0,
            ...indicatorProps,
            ref: forwardedRef,
            style: {
                pointerEvents: "none",
                ...props.style
            }
        })
    });
});
CheckboxIndicator.displayName = INDICATOR_NAME;
var BubbleInput = (props)=>{
    const { control, checked, bubbles = true, defaultChecked, ...inputProps } = props;
    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    const prevChecked = (0,_radix_ui_react_use_previous__WEBPACK_IMPORTED_MODULE_8__/* .usePrevious */ .Z)(checked);
    const controlSize = (0,_radix_ui_react_use_size__WEBPACK_IMPORTED_MODULE_9__/* .useSize */ .X)(control);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{
        const input = ref.current;
        const inputProto = window.HTMLInputElement.prototype;
        const descriptor = Object.getOwnPropertyDescriptor(inputProto, "checked");
        const setChecked = descriptor.set;
        if (prevChecked !== checked && setChecked) {
            const event = new Event("click", {
                bubbles
            });
            input.indeterminate = isIndeterminate(checked);
            setChecked.call(input, isIndeterminate(checked) ? false : checked);
            input.dispatchEvent(event);
        }
    }, [
        prevChecked,
        checked,
        bubbles
    ]);
    const defaultCheckedRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(isIndeterminate(checked) ? false : checked);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("input", {
        type: "checkbox",
        "aria-hidden": true,
        defaultChecked: defaultChecked ?? defaultCheckedRef.current,
        ...inputProps,
        tabIndex: -1,
        ref,
        style: {
            ...props.style,
            ...controlSize,
            position: "absolute",
            pointerEvents: "none",
            opacity: 0,
            margin: 0
        }
    });
};
function isIndeterminate(checked) {
    return checked === "indeterminate";
}
function getState(checked) {
    return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}
var Root = Checkbox;
var Indicator = CheckboxIndicator;
 //# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 578661:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UC: () => (/* binding */ Content2),
/* harmony export */   ZL: () => (/* binding */ Portal),
/* harmony export */   bL: () => (/* binding */ Root2),
/* harmony export */   l9: () => (/* binding */ Trigger)
/* harmony export */ });
/* unused harmony exports Anchor, Arrow, Close, Popover, PopoverAnchor, PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverTrigger, createPopoverScope */
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(891616);
/* harmony import */ var _radix_ui_primitive__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(763095);
/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(730613);
/* harmony import */ var _radix_ui_react_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(176235);
/* harmony import */ var _radix_ui_react_dismissable_layer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(924166);
/* harmony import */ var _radix_ui_react_focus_guards__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(62949);
/* harmony import */ var _radix_ui_react_focus_scope__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(101125);
/* harmony import */ var _radix_ui_react_id__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(585925);
/* harmony import */ var _radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(819778);
/* harmony import */ var _radix_ui_react_portal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(715318);
/* harmony import */ var _radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(602397);
/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(832713);
/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(189300);
/* harmony import */ var _radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(409689);
/* harmony import */ var aria_hidden__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(99362);
/* harmony import */ var react_remove_scroll__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(745974);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(642725);
/* __next_internal_client_entry_do_not_use__ Anchor,Arrow,Close,Content,Popover,PopoverAnchor,PopoverArrow,PopoverClose,PopoverContent,PopoverPortal,PopoverTrigger,Portal,Root,Trigger,createPopoverScope auto */ // packages/react/popover/src/Popover.tsx


















var POPOVER_NAME = "Popover";
var [createPopoverContext, createPopoverScope] = (0,_radix_ui_react_context__WEBPACK_IMPORTED_MODULE_2__/* .createContextScope */ .A)(POPOVER_NAME, [
    _radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_3__/* .createPopperScope */ .Bk
]);
var usePopperScope = (0,_radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_3__/* .createPopperScope */ .Bk)();
var [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);
var Popover = (props)=>{
    const { __scopePopover, children, open: openProp, defaultOpen, onOpenChange, modal = false } = props;
    const popperScope = usePopperScope(__scopePopover);
    const triggerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    const [hasCustomAnchor, setHasCustomAnchor] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);
    const [open = false, setOpen] = (0,_radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_4__/* .useControllableState */ .i)({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
    });
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_3__/* .Root */ .bL, {
        ...popperScope,
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PopoverProvider, {
            scope: __scopePopover,
            contentId: (0,_radix_ui_react_id__WEBPACK_IMPORTED_MODULE_5__/* .useId */ .B)(),
            triggerRef,
            open,
            onOpenChange: setOpen,
            onOpenToggle: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>setOpen((prevOpen)=>!prevOpen), [
                setOpen
            ]),
            hasCustomAnchor,
            onCustomAnchorAdd: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>setHasCustomAnchor(true), []),
            onCustomAnchorRemove: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>setHasCustomAnchor(false), []),
            modal,
            children
        })
    });
};
Popover.displayName = POPOVER_NAME;
var ANCHOR_NAME = "PopoverAnchor";
var PopoverAnchor = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{
    const { __scopePopover, ...anchorProps } = props;
    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{
        onCustomAnchorAdd();
        return ()=>onCustomAnchorRemove();
    }, [
        onCustomAnchorAdd,
        onCustomAnchorRemove
    ]);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_3__/* .Anchor */ .Mz, {
        ...popperScope,
        ...anchorProps,
        ref: forwardedRef
    });
});
PopoverAnchor.displayName = ANCHOR_NAME;
var TRIGGER_NAME = "PopoverTrigger";
var PopoverTrigger = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{
    const { __scopePopover, ...triggerProps } = props;
    const context = usePopoverContext(TRIGGER_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    const composedTriggerRef = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_6__/* .useComposedRefs */ .s)(forwardedRef, context.triggerRef);
    const trigger = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_7__/* .Primitive */ .sG.button, {
        type: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": context.open,
        "aria-controls": context.contentId,
        "data-state": getState(context.open),
        ...triggerProps,
        ref: composedTriggerRef,
        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_8__/* .composeEventHandlers */ .m)(props.onClick, context.onOpenToggle)
    });
    return context.hasCustomAnchor ? trigger : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_3__/* .Anchor */ .Mz, {
        asChild: true,
        ...popperScope,
        children: trigger
    });
});
PopoverTrigger.displayName = TRIGGER_NAME;
var PORTAL_NAME = "PopoverPortal";
var [PortalProvider, usePortalContext] = createPopoverContext(PORTAL_NAME, {
    forceMount: void 0
});
var PopoverPortal = (props)=>{
    const { __scopePopover, forceMount, children, container } = props;
    const context = usePopoverContext(PORTAL_NAME, __scopePopover);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortalProvider, {
        scope: __scopePopover,
        forceMount,
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_9__/* .Presence */ .C, {
            present: forceMount || context.open,
            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_portal__WEBPACK_IMPORTED_MODULE_10__/* .Portal */ .Z, {
                asChild: true,
                container,
                children
            })
        })
    });
};
PopoverPortal.displayName = PORTAL_NAME;
var CONTENT_NAME = "PopoverContent";
var PopoverContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{
    const portalContext = usePortalContext(CONTENT_NAME, props.__scopePopover);
    const { forceMount = portalContext.forceMount, ...contentProps } = props;
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_9__/* .Presence */ .C, {
        present: forceMount || context.open,
        children: context.modal ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PopoverContentModal, {
            ...contentProps,
            ref: forwardedRef
        }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PopoverContentNonModal, {
            ...contentProps,
            ref: forwardedRef
        })
    });
});
PopoverContent.displayName = CONTENT_NAME;
var PopoverContentModal = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    const contentRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_6__/* .useComposedRefs */ .s)(forwardedRef, contentRef);
    const isRightClickOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{
        const content = contentRef.current;
        if (content) return (0,aria_hidden__WEBPACK_IMPORTED_MODULE_11__/* .hideOthers */ .Eq)(content);
    }, []);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_remove_scroll__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .A, {
        as: _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_13__/* .Slot */ .DX,
        allowPinchZoom: true,
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PopoverContentImpl, {
            ...props,
            ref: composedRefs,
            trapFocus: context.open,
            disableOutsidePointerEvents: true,
            onCloseAutoFocus: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_8__/* .composeEventHandlers */ .m)(props.onCloseAutoFocus, (event)=>{
                event.preventDefault();
                if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();
            }),
            onPointerDownOutside: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_8__/* .composeEventHandlers */ .m)(props.onPointerDownOutside, (event)=>{
                const originalEvent = event.detail.originalEvent;
                const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
                const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
                isRightClickOutsideRef.current = isRightClick;
            }, {
                checkForDefaultPrevented: false
            }),
            onFocusOutside: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_8__/* .composeEventHandlers */ .m)(props.onFocusOutside, (event)=>event.preventDefault(), {
                checkForDefaultPrevented: false
            })
        })
    });
});
var PopoverContentNonModal = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    const hasInteractedOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);
    const hasPointerDownOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PopoverContentImpl, {
        ...props,
        ref: forwardedRef,
        trapFocus: false,
        disableOutsidePointerEvents: false,
        onCloseAutoFocus: (event)=>{
            props.onCloseAutoFocus?.(event);
            if (!event.defaultPrevented) {
                if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();
                event.preventDefault();
            }
            hasInteractedOutsideRef.current = false;
            hasPointerDownOutsideRef.current = false;
        },
        onInteractOutside: (event)=>{
            props.onInteractOutside?.(event);
            if (!event.defaultPrevented) {
                hasInteractedOutsideRef.current = true;
                if (event.detail.originalEvent.type === "pointerdown") {
                    hasPointerDownOutsideRef.current = true;
                }
            }
            const target = event.target;
            const targetIsTrigger = context.triggerRef.current?.contains(target);
            if (targetIsTrigger) event.preventDefault();
            if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
                event.preventDefault();
            }
        }
    });
});
var PopoverContentImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{
    const { __scopePopover, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, ...contentProps } = props;
    const context = usePopoverContext(CONTENT_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    (0,_radix_ui_react_focus_guards__WEBPACK_IMPORTED_MODULE_14__/* .useFocusGuards */ .Oh)();
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_focus_scope__WEBPACK_IMPORTED_MODULE_15__/* .FocusScope */ .n, {
        asChild: true,
        loop: true,
        trapped: trapFocus,
        onMountAutoFocus: onOpenAutoFocus,
        onUnmountAutoFocus: onCloseAutoFocus,
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_dismissable_layer__WEBPACK_IMPORTED_MODULE_16__/* .DismissableLayer */ .qW, {
            asChild: true,
            disableOutsidePointerEvents,
            onInteractOutside,
            onEscapeKeyDown,
            onPointerDownOutside,
            onFocusOutside,
            onDismiss: ()=>context.onOpenChange(false),
            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_3__/* .Content */ .UC, {
                "data-state": getState(context.open),
                role: "dialog",
                id: context.contentId,
                ...popperScope,
                ...contentProps,
                ref: forwardedRef,
                style: {
                    ...contentProps.style,
                    // re-namespace exposed content custom properties
                    ...{
                        "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
                        "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
                        "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
                        "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
                        "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
                    }
                }
            })
        })
    });
});
var CLOSE_NAME = "PopoverClose";
var PopoverClose = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{
    const { __scopePopover, ...closeProps } = props;
    const context = usePopoverContext(CLOSE_NAME, __scopePopover);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_7__/* .Primitive */ .sG.button, {
        type: "button",
        ...closeProps,
        ref: forwardedRef,
        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_8__/* .composeEventHandlers */ .m)(props.onClick, ()=>context.onOpenChange(false))
    });
});
PopoverClose.displayName = CLOSE_NAME;
var ARROW_NAME = "PopoverArrow";
var PopoverArrow = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{
    const { __scopePopover, ...arrowProps } = props;
    const popperScope = usePopperScope(__scopePopover);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_3__/* .Arrow */ .i3, {
        ...popperScope,
        ...arrowProps,
        ref: forwardedRef
    });
});
PopoverArrow.displayName = ARROW_NAME;
function getState(open) {
    return open ? "open" : "closed";
}
var Root2 = Popover;
var Anchor2 = (/* unused pure expression or super */ null && (PopoverAnchor));
var Trigger = PopoverTrigger;
var Portal = PopoverPortal;
var Content2 = PopoverContent;
var Close = (/* unused pure expression or super */ null && (PopoverClose));
var Arrow2 = (/* unused pure expression or super */ null && (PopoverArrow));
 //# sourceMappingURL=index.mjs.map


/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, [8079,3073,7863,5069,255,9759,6626,5570,1238,2021,9069,2195,7762,1469,5294,4900,6911,2075,1659,5667,6689,9726,497,4218,9325,8785,8728,9398,881,5604,6397,1023,3696,4483,1321,123,9373,3687,7864,8046,8235,5752,3840,9160,4660,5863,7043,8478,3902,8991,5709,9331,6318], () => (__webpack_exec__(738069)));
module.exports = __webpack_exports__;

})();